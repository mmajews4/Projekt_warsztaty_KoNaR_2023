
Projekt_warsztaty_KoNaR_2023.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aa80  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000414  0800ac10  0800ac10  0001ac10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b024  0800b024  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b024  0800b024  0001b024  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b02c  0800b02c  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b02c  0800b02c  0001b02c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b030  0800b030  0001b030  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800b034  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003a0  200001d4  0800b208  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000574  0800b208  00020574  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014f11  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000029e8  00000000  00000000  00035158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001338  00000000  00000000  00037b40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f18  00000000  00000000  00038e78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028489  00000000  00000000  00039d90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000175d5  00000000  00000000  00062219  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f75a7  00000000  00000000  000797ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000634c  00000000  00000000  00170d98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  001770e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800abf8 	.word	0x0800abf8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	0800abf8 	.word	0x0800abf8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b970 	b.w	8000f40 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	460d      	mov	r5, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	460f      	mov	r7, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4694      	mov	ip, r2
 8000c8c:	d965      	bls.n	8000d5a <__udivmoddi4+0xe2>
 8000c8e:	fab2 f382 	clz	r3, r2
 8000c92:	b143      	cbz	r3, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c98:	f1c3 0220 	rsb	r2, r3, #32
 8000c9c:	409f      	lsls	r7, r3
 8000c9e:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca2:	4317      	orrs	r7, r2
 8000ca4:	409c      	lsls	r4, r3
 8000ca6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000caa:	fa1f f58c 	uxth.w	r5, ip
 8000cae:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cb2:	0c22      	lsrs	r2, r4, #16
 8000cb4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cb8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cbc:	fb01 f005 	mul.w	r0, r1, r5
 8000cc0:	4290      	cmp	r0, r2
 8000cc2:	d90a      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cc8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ccc:	f080 811c 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	f240 8119 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	4462      	add	r2, ip
 8000cda:	1a12      	subs	r2, r2, r0
 8000cdc:	b2a4      	uxth	r4, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cea:	fb00 f505 	mul.w	r5, r0, r5
 8000cee:	42a5      	cmp	r5, r4
 8000cf0:	d90a      	bls.n	8000d08 <__udivmoddi4+0x90>
 8000cf2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cfa:	f080 8107 	bcs.w	8000f0c <__udivmoddi4+0x294>
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	f240 8104 	bls.w	8000f0c <__udivmoddi4+0x294>
 8000d04:	4464      	add	r4, ip
 8000d06:	3802      	subs	r0, #2
 8000d08:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0c:	1b64      	subs	r4, r4, r5
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11e      	cbz	r6, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40dc      	lsrs	r4, r3
 8000d14:	2300      	movs	r3, #0
 8000d16:	e9c6 4300 	strd	r4, r3, [r6]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0xbc>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80ed 	beq.w	8000f02 <__udivmoddi4+0x28a>
 8000d28:	2100      	movs	r1, #0
 8000d2a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d34:	fab3 f183 	clz	r1, r3
 8000d38:	2900      	cmp	r1, #0
 8000d3a:	d149      	bne.n	8000dd0 <__udivmoddi4+0x158>
 8000d3c:	42ab      	cmp	r3, r5
 8000d3e:	d302      	bcc.n	8000d46 <__udivmoddi4+0xce>
 8000d40:	4282      	cmp	r2, r0
 8000d42:	f200 80f8 	bhi.w	8000f36 <__udivmoddi4+0x2be>
 8000d46:	1a84      	subs	r4, r0, r2
 8000d48:	eb65 0203 	sbc.w	r2, r5, r3
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	4617      	mov	r7, r2
 8000d50:	2e00      	cmp	r6, #0
 8000d52:	d0e2      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	e9c6 4700 	strd	r4, r7, [r6]
 8000d58:	e7df      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d5a:	b902      	cbnz	r2, 8000d5e <__udivmoddi4+0xe6>
 8000d5c:	deff      	udf	#255	; 0xff
 8000d5e:	fab2 f382 	clz	r3, r2
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f040 8090 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d68:	1a8a      	subs	r2, r1, r2
 8000d6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d6e:	fa1f fe8c 	uxth.w	lr, ip
 8000d72:	2101      	movs	r1, #1
 8000d74:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d78:	fb07 2015 	mls	r0, r7, r5, r2
 8000d7c:	0c22      	lsrs	r2, r4, #16
 8000d7e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d82:	fb0e f005 	mul.w	r0, lr, r5
 8000d86:	4290      	cmp	r0, r2
 8000d88:	d908      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d8e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4290      	cmp	r0, r2
 8000d96:	f200 80cb 	bhi.w	8000f30 <__udivmoddi4+0x2b8>
 8000d9a:	4645      	mov	r5, r8
 8000d9c:	1a12      	subs	r2, r2, r0
 8000d9e:	b2a4      	uxth	r4, r4
 8000da0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000da4:	fb07 2210 	mls	r2, r7, r0, r2
 8000da8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dac:	fb0e fe00 	mul.w	lr, lr, r0
 8000db0:	45a6      	cmp	lr, r4
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x14e>
 8000db4:	eb1c 0404 	adds.w	r4, ip, r4
 8000db8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dbc:	d202      	bcs.n	8000dc4 <__udivmoddi4+0x14c>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f200 80bb 	bhi.w	8000f3a <__udivmoddi4+0x2c2>
 8000dc4:	4610      	mov	r0, r2
 8000dc6:	eba4 040e 	sub.w	r4, r4, lr
 8000dca:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dce:	e79f      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dd0:	f1c1 0720 	rsb	r7, r1, #32
 8000dd4:	408b      	lsls	r3, r1
 8000dd6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dda:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dde:	fa05 f401 	lsl.w	r4, r5, r1
 8000de2:	fa20 f307 	lsr.w	r3, r0, r7
 8000de6:	40fd      	lsrs	r5, r7
 8000de8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dec:	4323      	orrs	r3, r4
 8000dee:	fbb5 f8f9 	udiv	r8, r5, r9
 8000df2:	fa1f fe8c 	uxth.w	lr, ip
 8000df6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dfa:	0c1c      	lsrs	r4, r3, #16
 8000dfc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e00:	fb08 f50e 	mul.w	r5, r8, lr
 8000e04:	42a5      	cmp	r5, r4
 8000e06:	fa02 f201 	lsl.w	r2, r2, r1
 8000e0a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e18:	f080 8088 	bcs.w	8000f2c <__udivmoddi4+0x2b4>
 8000e1c:	42a5      	cmp	r5, r4
 8000e1e:	f240 8085 	bls.w	8000f2c <__udivmoddi4+0x2b4>
 8000e22:	f1a8 0802 	sub.w	r8, r8, #2
 8000e26:	4464      	add	r4, ip
 8000e28:	1b64      	subs	r4, r4, r5
 8000e2a:	b29d      	uxth	r5, r3
 8000e2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e30:	fb09 4413 	mls	r4, r9, r3, r4
 8000e34:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e38:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e48:	d26c      	bcs.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4a:	45a6      	cmp	lr, r4
 8000e4c:	d96a      	bls.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4e:	3b02      	subs	r3, #2
 8000e50:	4464      	add	r4, ip
 8000e52:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e56:	fba3 9502 	umull	r9, r5, r3, r2
 8000e5a:	eba4 040e 	sub.w	r4, r4, lr
 8000e5e:	42ac      	cmp	r4, r5
 8000e60:	46c8      	mov	r8, r9
 8000e62:	46ae      	mov	lr, r5
 8000e64:	d356      	bcc.n	8000f14 <__udivmoddi4+0x29c>
 8000e66:	d053      	beq.n	8000f10 <__udivmoddi4+0x298>
 8000e68:	b156      	cbz	r6, 8000e80 <__udivmoddi4+0x208>
 8000e6a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e6e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e72:	fa04 f707 	lsl.w	r7, r4, r7
 8000e76:	40ca      	lsrs	r2, r1
 8000e78:	40cc      	lsrs	r4, r1
 8000e7a:	4317      	orrs	r7, r2
 8000e7c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e80:	4618      	mov	r0, r3
 8000e82:	2100      	movs	r1, #0
 8000e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e88:	f1c3 0120 	rsb	r1, r3, #32
 8000e8c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e90:	fa20 f201 	lsr.w	r2, r0, r1
 8000e94:	fa25 f101 	lsr.w	r1, r5, r1
 8000e98:	409d      	lsls	r5, r3
 8000e9a:	432a      	orrs	r2, r5
 8000e9c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea0:	fa1f fe8c 	uxth.w	lr, ip
 8000ea4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ea8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eac:	0c11      	lsrs	r1, r2, #16
 8000eae:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000eb2:	fb00 f50e 	mul.w	r5, r0, lr
 8000eb6:	428d      	cmp	r5, r1
 8000eb8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ebc:	d908      	bls.n	8000ed0 <__udivmoddi4+0x258>
 8000ebe:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ec6:	d22f      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000ec8:	428d      	cmp	r5, r1
 8000eca:	d92d      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000ecc:	3802      	subs	r0, #2
 8000ece:	4461      	add	r1, ip
 8000ed0:	1b49      	subs	r1, r1, r5
 8000ed2:	b292      	uxth	r2, r2
 8000ed4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ed8:	fb07 1115 	mls	r1, r7, r5, r1
 8000edc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ee0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ee4:	4291      	cmp	r1, r2
 8000ee6:	d908      	bls.n	8000efa <__udivmoddi4+0x282>
 8000ee8:	eb1c 0202 	adds.w	r2, ip, r2
 8000eec:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ef0:	d216      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef2:	4291      	cmp	r1, r2
 8000ef4:	d914      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef6:	3d02      	subs	r5, #2
 8000ef8:	4462      	add	r2, ip
 8000efa:	1a52      	subs	r2, r2, r1
 8000efc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f00:	e738      	b.n	8000d74 <__udivmoddi4+0xfc>
 8000f02:	4631      	mov	r1, r6
 8000f04:	4630      	mov	r0, r6
 8000f06:	e708      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000f08:	4639      	mov	r1, r7
 8000f0a:	e6e6      	b.n	8000cda <__udivmoddi4+0x62>
 8000f0c:	4610      	mov	r0, r2
 8000f0e:	e6fb      	b.n	8000d08 <__udivmoddi4+0x90>
 8000f10:	4548      	cmp	r0, r9
 8000f12:	d2a9      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f14:	ebb9 0802 	subs.w	r8, r9, r2
 8000f18:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	e7a3      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f20:	4645      	mov	r5, r8
 8000f22:	e7ea      	b.n	8000efa <__udivmoddi4+0x282>
 8000f24:	462b      	mov	r3, r5
 8000f26:	e794      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f28:	4640      	mov	r0, r8
 8000f2a:	e7d1      	b.n	8000ed0 <__udivmoddi4+0x258>
 8000f2c:	46d0      	mov	r8, sl
 8000f2e:	e77b      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f30:	3d02      	subs	r5, #2
 8000f32:	4462      	add	r2, ip
 8000f34:	e732      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f36:	4608      	mov	r0, r1
 8000f38:	e70a      	b.n	8000d50 <__udivmoddi4+0xd8>
 8000f3a:	4464      	add	r4, ip
 8000f3c:	3802      	subs	r0, #2
 8000f3e:	e742      	b.n	8000dc6 <__udivmoddi4+0x14e>

08000f40 <__aeabi_idiv0>:
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop

08000f44 <HAL_TIM_PeriodElapsedCallback>:

static volatile uint8_t flag_tim_11hz = 0;
static volatile uint8_t flag_acc = 0;
static volatile uint8_t flag_button = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
	if(htim==&htim3){
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	4a09      	ldr	r2, [pc, #36]	; (8000f74 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000f50:	4293      	cmp	r3, r2
 8000f52:	d102      	bne.n	8000f5a <HAL_TIM_PeriodElapsedCallback+0x16>
		flag_tim_11hz = 1;
 8000f54:	4b08      	ldr	r3, [pc, #32]	; (8000f78 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000f56:	2201      	movs	r2, #1
 8000f58:	701a      	strb	r2, [r3, #0]
	}
	if(htim==&htim2){		// Aktywowany 26Hz
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4a07      	ldr	r2, [pc, #28]	; (8000f7c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d104      	bne.n	8000f6c <HAL_TIM_PeriodElapsedCallback+0x28>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000f62:	2120      	movs	r1, #32
 8000f64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f68:	f001 face 	bl	8002508 <HAL_GPIO_TogglePin>
	}
}
 8000f6c:	bf00      	nop
 8000f6e:	3708      	adds	r7, #8
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	20000290 	.word	0x20000290
 8000f78:	2000041c 	.word	0x2000041c
 8000f7c:	20000244 	.word	0x20000244

08000f80 <MPU6050_Init>:

void MPU6050_Init(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b086      	sub	sp, #24
 8000f84:	af04      	add	r7, sp, #16
    uint8_t check, reg;
    HAL_I2C_Mem_Read(&hi2c1,MPU6050_ADDR,WHO_AM_I_REG,1,&check,1,HAL_MAX_DELAY);
 8000f86:	f04f 33ff 	mov.w	r3, #4294967295
 8000f8a:	9302      	str	r3, [sp, #8]
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	9301      	str	r3, [sp, #4]
 8000f90:	1dfb      	adds	r3, r7, #7
 8000f92:	9300      	str	r3, [sp, #0]
 8000f94:	2301      	movs	r3, #1
 8000f96:	2275      	movs	r2, #117	; 0x75
 8000f98:	21d0      	movs	r1, #208	; 0xd0
 8000f9a:	4823      	ldr	r0, [pc, #140]	; (8001028 <MPU6050_Init+0xa8>)
 8000f9c:	f001 fc96 	bl	80028cc <HAL_I2C_Mem_Read>
    if(check == 0b01101000)
 8000fa0:	79fb      	ldrb	r3, [r7, #7]
 8000fa2:	2b68      	cmp	r3, #104	; 0x68
 8000fa4:	d13b      	bne.n	800101e <MPU6050_Init+0x9e>
    {
    	//HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);

        reg = 0x07;
 8000fa6:	2307      	movs	r3, #7
 8000fa8:	71bb      	strb	r3, [r7, #6]
        HAL_I2C_Mem_Write(&hi2c1,MPU6050_ADDR,SMPLRT_DIV_REG,1,&reg,1,HAL_MAX_DELAY);
 8000faa:	f04f 33ff 	mov.w	r3, #4294967295
 8000fae:	9302      	str	r3, [sp, #8]
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	9301      	str	r3, [sp, #4]
 8000fb4:	1dbb      	adds	r3, r7, #6
 8000fb6:	9300      	str	r3, [sp, #0]
 8000fb8:	2301      	movs	r3, #1
 8000fba:	2219      	movs	r2, #25
 8000fbc:	21d0      	movs	r1, #208	; 0xd0
 8000fbe:	481a      	ldr	r0, [pc, #104]	; (8001028 <MPU6050_Init+0xa8>)
 8000fc0:	f001 fb70 	bl	80026a4 <HAL_I2C_Mem_Write>

        reg = 0x00;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	71bb      	strb	r3, [r7, #6]
        HAL_I2C_Mem_Write(&hi2c1,MPU6050_ADDR,ACCEL_CONFIG_REG,1,&reg,1,HAL_MAX_DELAY);
 8000fc8:	f04f 33ff 	mov.w	r3, #4294967295
 8000fcc:	9302      	str	r3, [sp, #8]
 8000fce:	2301      	movs	r3, #1
 8000fd0:	9301      	str	r3, [sp, #4]
 8000fd2:	1dbb      	adds	r3, r7, #6
 8000fd4:	9300      	str	r3, [sp, #0]
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	221c      	movs	r2, #28
 8000fda:	21d0      	movs	r1, #208	; 0xd0
 8000fdc:	4812      	ldr	r0, [pc, #72]	; (8001028 <MPU6050_Init+0xa8>)
 8000fde:	f001 fb61 	bl	80026a4 <HAL_I2C_Mem_Write>

        reg = 0x00;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	71bb      	strb	r3, [r7, #6]
        HAL_I2C_Mem_Write(&hi2c1,MPU6050_ADDR,GYRO_CONFIG_REG,1,&reg,1,HAL_MAX_DELAY);
 8000fe6:	f04f 33ff 	mov.w	r3, #4294967295
 8000fea:	9302      	str	r3, [sp, #8]
 8000fec:	2301      	movs	r3, #1
 8000fee:	9301      	str	r3, [sp, #4]
 8000ff0:	1dbb      	adds	r3, r7, #6
 8000ff2:	9300      	str	r3, [sp, #0]
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	221b      	movs	r2, #27
 8000ff8:	21d0      	movs	r1, #208	; 0xd0
 8000ffa:	480b      	ldr	r0, [pc, #44]	; (8001028 <MPU6050_Init+0xa8>)
 8000ffc:	f001 fb52 	bl	80026a4 <HAL_I2C_Mem_Write>

        reg = 0;
 8001000:	2300      	movs	r3, #0
 8001002:	71bb      	strb	r3, [r7, #6]
        HAL_I2C_Mem_Write(&hi2c1,MPU6050_ADDR,PWR_MGMT_1_REG,1,&reg,1,HAL_MAX_DELAY);
 8001004:	f04f 33ff 	mov.w	r3, #4294967295
 8001008:	9302      	str	r3, [sp, #8]
 800100a:	2301      	movs	r3, #1
 800100c:	9301      	str	r3, [sp, #4]
 800100e:	1dbb      	adds	r3, r7, #6
 8001010:	9300      	str	r3, [sp, #0]
 8001012:	2301      	movs	r3, #1
 8001014:	226b      	movs	r2, #107	; 0x6b
 8001016:	21d0      	movs	r1, #208	; 0xd0
 8001018:	4803      	ldr	r0, [pc, #12]	; (8001028 <MPU6050_Init+0xa8>)
 800101a:	f001 fb43 	bl	80026a4 <HAL_I2C_Mem_Write>

    }
}
 800101e:	bf00      	nop
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	200001f0 	.word	0x200001f0

0800102c <MPU6050_Read_Accel>:

void MPU6050_Read_Accel(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
    Accel_X_RAW = (int16_t)(buffer_a[0] << 8 | buffer_a[1]);
 8001030:	4b27      	ldr	r3, [pc, #156]	; (80010d0 <MPU6050_Read_Accel+0xa4>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	021b      	lsls	r3, r3, #8
 8001036:	b21a      	sxth	r2, r3
 8001038:	4b25      	ldr	r3, [pc, #148]	; (80010d0 <MPU6050_Read_Accel+0xa4>)
 800103a:	785b      	ldrb	r3, [r3, #1]
 800103c:	b21b      	sxth	r3, r3
 800103e:	4313      	orrs	r3, r2
 8001040:	b21a      	sxth	r2, r3
 8001042:	4b24      	ldr	r3, [pc, #144]	; (80010d4 <MPU6050_Read_Accel+0xa8>)
 8001044:	801a      	strh	r2, [r3, #0]
    Accel_Y_RAW = (int16_t)(buffer_a[2] << 8 | buffer_a[3]);
 8001046:	4b22      	ldr	r3, [pc, #136]	; (80010d0 <MPU6050_Read_Accel+0xa4>)
 8001048:	789b      	ldrb	r3, [r3, #2]
 800104a:	021b      	lsls	r3, r3, #8
 800104c:	b21a      	sxth	r2, r3
 800104e:	4b20      	ldr	r3, [pc, #128]	; (80010d0 <MPU6050_Read_Accel+0xa4>)
 8001050:	78db      	ldrb	r3, [r3, #3]
 8001052:	b21b      	sxth	r3, r3
 8001054:	4313      	orrs	r3, r2
 8001056:	b21a      	sxth	r2, r3
 8001058:	4b1f      	ldr	r3, [pc, #124]	; (80010d8 <MPU6050_Read_Accel+0xac>)
 800105a:	801a      	strh	r2, [r3, #0]
    Accel_Z_RAW = (int16_t)(buffer_a[4] << 8 | buffer_a[5]);
 800105c:	4b1c      	ldr	r3, [pc, #112]	; (80010d0 <MPU6050_Read_Accel+0xa4>)
 800105e:	791b      	ldrb	r3, [r3, #4]
 8001060:	021b      	lsls	r3, r3, #8
 8001062:	b21a      	sxth	r2, r3
 8001064:	4b1a      	ldr	r3, [pc, #104]	; (80010d0 <MPU6050_Read_Accel+0xa4>)
 8001066:	795b      	ldrb	r3, [r3, #5]
 8001068:	b21b      	sxth	r3, r3
 800106a:	4313      	orrs	r3, r2
 800106c:	b21a      	sxth	r2, r3
 800106e:	4b1b      	ldr	r3, [pc, #108]	; (80010dc <MPU6050_Read_Accel+0xb0>)
 8001070:	801a      	strh	r2, [r3, #0]

    Ax = Accel_X_RAW / 16384.f;		// Zamiana raw value na g
 8001072:	4b18      	ldr	r3, [pc, #96]	; (80010d4 <MPU6050_Read_Accel+0xa8>)
 8001074:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001078:	ee07 3a90 	vmov	s15, r3
 800107c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001080:	eddf 6a17 	vldr	s13, [pc, #92]	; 80010e0 <MPU6050_Read_Accel+0xb4>
 8001084:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001088:	4b16      	ldr	r3, [pc, #88]	; (80010e4 <MPU6050_Read_Accel+0xb8>)
 800108a:	edc3 7a00 	vstr	s15, [r3]
    Ay = Accel_Y_RAW / 16384.f;
 800108e:	4b12      	ldr	r3, [pc, #72]	; (80010d8 <MPU6050_Read_Accel+0xac>)
 8001090:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001094:	ee07 3a90 	vmov	s15, r3
 8001098:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800109c:	eddf 6a10 	vldr	s13, [pc, #64]	; 80010e0 <MPU6050_Read_Accel+0xb4>
 80010a0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010a4:	4b10      	ldr	r3, [pc, #64]	; (80010e8 <MPU6050_Read_Accel+0xbc>)
 80010a6:	edc3 7a00 	vstr	s15, [r3]
    Az = Accel_Z_RAW / 16384.f;
 80010aa:	4b0c      	ldr	r3, [pc, #48]	; (80010dc <MPU6050_Read_Accel+0xb0>)
 80010ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010b0:	ee07 3a90 	vmov	s15, r3
 80010b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010b8:	eddf 6a09 	vldr	s13, [pc, #36]	; 80010e0 <MPU6050_Read_Accel+0xb4>
 80010bc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010c0:	4b0a      	ldr	r3, [pc, #40]	; (80010ec <MPU6050_Read_Accel+0xc0>)
 80010c2:	edc3 7a00 	vstr	s15, [r3]
}
 80010c6:	bf00      	nop
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr
 80010d0:	2000038c 	.word	0x2000038c
 80010d4:	20000364 	.word	0x20000364
 80010d8:	20000366 	.word	0x20000366
 80010dc:	20000368 	.word	0x20000368
 80010e0:	46800000 	.word	0x46800000
 80010e4:	2000036c 	.word	0x2000036c
 80010e8:	20000370 	.word	0x20000370
 80010ec:	20000374 	.word	0x20000374

080010f0 <MPU6050_Read_Gyro>:

void MPU6050_Read_Gyro(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
    Gyro_X_RAW = (int16_t)(buffer_g[0] << 8 | buffer_g[1]);
 80010f4:	4b32      	ldr	r3, [pc, #200]	; (80011c0 <MPU6050_Read_Gyro+0xd0>)
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	021b      	lsls	r3, r3, #8
 80010fa:	b21a      	sxth	r2, r3
 80010fc:	4b30      	ldr	r3, [pc, #192]	; (80011c0 <MPU6050_Read_Gyro+0xd0>)
 80010fe:	785b      	ldrb	r3, [r3, #1]
 8001100:	b21b      	sxth	r3, r3
 8001102:	4313      	orrs	r3, r2
 8001104:	b21a      	sxth	r2, r3
 8001106:	4b2f      	ldr	r3, [pc, #188]	; (80011c4 <MPU6050_Read_Gyro+0xd4>)
 8001108:	801a      	strh	r2, [r3, #0]
    Gyro_Y_RAW = (int16_t)(buffer_g[2] << 8 | buffer_g[3]);
 800110a:	4b2d      	ldr	r3, [pc, #180]	; (80011c0 <MPU6050_Read_Gyro+0xd0>)
 800110c:	789b      	ldrb	r3, [r3, #2]
 800110e:	021b      	lsls	r3, r3, #8
 8001110:	b21a      	sxth	r2, r3
 8001112:	4b2b      	ldr	r3, [pc, #172]	; (80011c0 <MPU6050_Read_Gyro+0xd0>)
 8001114:	78db      	ldrb	r3, [r3, #3]
 8001116:	b21b      	sxth	r3, r3
 8001118:	4313      	orrs	r3, r2
 800111a:	b21a      	sxth	r2, r3
 800111c:	4b2a      	ldr	r3, [pc, #168]	; (80011c8 <MPU6050_Read_Gyro+0xd8>)
 800111e:	801a      	strh	r2, [r3, #0]
    Gyro_Z_RAW = (int16_t)(buffer_g[4] << 8 | buffer_g[5]);
 8001120:	4b27      	ldr	r3, [pc, #156]	; (80011c0 <MPU6050_Read_Gyro+0xd0>)
 8001122:	791b      	ldrb	r3, [r3, #4]
 8001124:	021b      	lsls	r3, r3, #8
 8001126:	b21a      	sxth	r2, r3
 8001128:	4b25      	ldr	r3, [pc, #148]	; (80011c0 <MPU6050_Read_Gyro+0xd0>)
 800112a:	795b      	ldrb	r3, [r3, #5]
 800112c:	b21b      	sxth	r3, r3
 800112e:	4313      	orrs	r3, r2
 8001130:	b21a      	sxth	r2, r3
 8001132:	4b26      	ldr	r3, [pc, #152]	; (80011cc <MPU6050_Read_Gyro+0xdc>)
 8001134:	801a      	strh	r2, [r3, #0]

	Gx = Gyro_X_RAW/131.0;		// Zamiana raw value na °/s
 8001136:	4b23      	ldr	r3, [pc, #140]	; (80011c4 <MPU6050_Read_Gyro+0xd4>)
 8001138:	f9b3 3000 	ldrsh.w	r3, [r3]
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff f9f1 	bl	8000524 <__aeabi_i2d>
 8001142:	a31d      	add	r3, pc, #116	; (adr r3, 80011b8 <MPU6050_Read_Gyro+0xc8>)
 8001144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001148:	f7ff fb80 	bl	800084c <__aeabi_ddiv>
 800114c:	4602      	mov	r2, r0
 800114e:	460b      	mov	r3, r1
 8001150:	4610      	mov	r0, r2
 8001152:	4619      	mov	r1, r3
 8001154:	f7ff fd28 	bl	8000ba8 <__aeabi_d2f>
 8001158:	4603      	mov	r3, r0
 800115a:	4a1d      	ldr	r2, [pc, #116]	; (80011d0 <MPU6050_Read_Gyro+0xe0>)
 800115c:	6013      	str	r3, [r2, #0]
	Gy = Gyro_Y_RAW/131.0;
 800115e:	4b1a      	ldr	r3, [pc, #104]	; (80011c8 <MPU6050_Read_Gyro+0xd8>)
 8001160:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001164:	4618      	mov	r0, r3
 8001166:	f7ff f9dd 	bl	8000524 <__aeabi_i2d>
 800116a:	a313      	add	r3, pc, #76	; (adr r3, 80011b8 <MPU6050_Read_Gyro+0xc8>)
 800116c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001170:	f7ff fb6c 	bl	800084c <__aeabi_ddiv>
 8001174:	4602      	mov	r2, r0
 8001176:	460b      	mov	r3, r1
 8001178:	4610      	mov	r0, r2
 800117a:	4619      	mov	r1, r3
 800117c:	f7ff fd14 	bl	8000ba8 <__aeabi_d2f>
 8001180:	4603      	mov	r3, r0
 8001182:	4a14      	ldr	r2, [pc, #80]	; (80011d4 <MPU6050_Read_Gyro+0xe4>)
 8001184:	6013      	str	r3, [r2, #0]
	Gz = Gyro_Z_RAW/131.0;
 8001186:	4b11      	ldr	r3, [pc, #68]	; (80011cc <MPU6050_Read_Gyro+0xdc>)
 8001188:	f9b3 3000 	ldrsh.w	r3, [r3]
 800118c:	4618      	mov	r0, r3
 800118e:	f7ff f9c9 	bl	8000524 <__aeabi_i2d>
 8001192:	a309      	add	r3, pc, #36	; (adr r3, 80011b8 <MPU6050_Read_Gyro+0xc8>)
 8001194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001198:	f7ff fb58 	bl	800084c <__aeabi_ddiv>
 800119c:	4602      	mov	r2, r0
 800119e:	460b      	mov	r3, r1
 80011a0:	4610      	mov	r0, r2
 80011a2:	4619      	mov	r1, r3
 80011a4:	f7ff fd00 	bl	8000ba8 <__aeabi_d2f>
 80011a8:	4603      	mov	r3, r0
 80011aa:	4a0b      	ldr	r2, [pc, #44]	; (80011d8 <MPU6050_Read_Gyro+0xe8>)
 80011ac:	6013      	str	r3, [r2, #0]
}
 80011ae:	bf00      	nop
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	f3af 8000 	nop.w
 80011b8:	00000000 	.word	0x00000000
 80011bc:	40606000 	.word	0x40606000
 80011c0:	20000394 	.word	0x20000394
 80011c4:	20000378 	.word	0x20000378
 80011c8:	2000037a 	.word	0x2000037a
 80011cc:	2000037c 	.word	0x2000037c
 80011d0:	20000380 	.word	0x20000380
 80011d4:	20000384 	.word	0x20000384
 80011d8:	20000388 	.word	0x20000388

080011dc <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	4603      	mov	r3, r0
 80011e4:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==B1_INTERRUPT_Pin) {
 80011e6:	88fb      	ldrh	r3, [r7, #6]
 80011e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80011ec:	d102      	bne.n	80011f4 <HAL_GPIO_EXTI_Callback+0x18>
		flag_button = 1;
 80011ee:	4b04      	ldr	r3, [pc, #16]	; (8001200 <HAL_GPIO_EXTI_Callback+0x24>)
 80011f0:	2201      	movs	r2, #1
 80011f2:	701a      	strb	r2, [r3, #0]
	}
}
 80011f4:	bf00      	nop
 80011f6:	370c      	adds	r7, #12
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr
 8001200:	2000041e 	.word	0x2000041e

08001204 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af02      	add	r7, sp, #8
 800120a:	6078      	str	r0, [r7, #4]

	if(hi2c->Instance==I2C1) {
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a15      	ldr	r2, [pc, #84]	; (8001268 <HAL_I2C_MemRxCpltCallback+0x64>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d123      	bne.n	800125e <HAL_I2C_MemRxCpltCallback+0x5a>
		if(flag_acc){
 8001216:	4b15      	ldr	r3, [pc, #84]	; (800126c <HAL_I2C_MemRxCpltCallback+0x68>)
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	b2db      	uxtb	r3, r3
 800121c:	2b00      	cmp	r3, #0
 800121e:	d00f      	beq.n	8001240 <HAL_I2C_MemRxCpltCallback+0x3c>
			MPU6050_Read_Accel();
 8001220:	f7ff ff04 	bl	800102c <MPU6050_Read_Accel>
			HAL_I2C_Mem_Read_IT(&hi2c1,MPU6050_ADDR,GYRO_XOUT_H_REG,1,buffer_g,6);
 8001224:	2306      	movs	r3, #6
 8001226:	9301      	str	r3, [sp, #4]
 8001228:	4b11      	ldr	r3, [pc, #68]	; (8001270 <HAL_I2C_MemRxCpltCallback+0x6c>)
 800122a:	9300      	str	r3, [sp, #0]
 800122c:	2301      	movs	r3, #1
 800122e:	2243      	movs	r2, #67	; 0x43
 8001230:	21d0      	movs	r1, #208	; 0xd0
 8001232:	4810      	ldr	r0, [pc, #64]	; (8001274 <HAL_I2C_MemRxCpltCallback+0x70>)
 8001234:	f001 fc64 	bl	8002b00 <HAL_I2C_Mem_Read_IT>
			flag_acc = 0;
 8001238:	4b0c      	ldr	r3, [pc, #48]	; (800126c <HAL_I2C_MemRxCpltCallback+0x68>)
 800123a:	2200      	movs	r2, #0
 800123c:	701a      	strb	r2, [r3, #0]
			MPU6050_Read_Gyro();
			HAL_I2C_Mem_Read_IT(&hi2c1,MPU6050_ADDR,ACCEL_XOUT_H_REG,1,buffer_a,6);
			flag_acc = 1;
		}
	}
}
 800123e:	e00e      	b.n	800125e <HAL_I2C_MemRxCpltCallback+0x5a>
			MPU6050_Read_Gyro();
 8001240:	f7ff ff56 	bl	80010f0 <MPU6050_Read_Gyro>
			HAL_I2C_Mem_Read_IT(&hi2c1,MPU6050_ADDR,ACCEL_XOUT_H_REG,1,buffer_a,6);
 8001244:	2306      	movs	r3, #6
 8001246:	9301      	str	r3, [sp, #4]
 8001248:	4b0b      	ldr	r3, [pc, #44]	; (8001278 <HAL_I2C_MemRxCpltCallback+0x74>)
 800124a:	9300      	str	r3, [sp, #0]
 800124c:	2301      	movs	r3, #1
 800124e:	223b      	movs	r2, #59	; 0x3b
 8001250:	21d0      	movs	r1, #208	; 0xd0
 8001252:	4808      	ldr	r0, [pc, #32]	; (8001274 <HAL_I2C_MemRxCpltCallback+0x70>)
 8001254:	f001 fc54 	bl	8002b00 <HAL_I2C_Mem_Read_IT>
			flag_acc = 1;
 8001258:	4b04      	ldr	r3, [pc, #16]	; (800126c <HAL_I2C_MemRxCpltCallback+0x68>)
 800125a:	2201      	movs	r2, #1
 800125c:	701a      	strb	r2, [r3, #0]
}
 800125e:	bf00      	nop
 8001260:	3708      	adds	r7, #8
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	40005400 	.word	0x40005400
 800126c:	2000041d 	.word	0x2000041d
 8001270:	20000394 	.word	0x20000394
 8001274:	200001f0 	.word	0x200001f0
 8001278:	2000038c 	.word	0x2000038c

0800127c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800127c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001280:	b090      	sub	sp, #64	; 0x40
 8001282:	af0c      	add	r7, sp, #48	; 0x30
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001284:	f000 fd32 	bl	8001cec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001288:	f000 f8ac 	bl	80013e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800128c:	f000 fa1c 	bl	80016c8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001290:	f000 f9ea 	bl	8001668 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001294:	f000 f8f8 	bl	8001488 <MX_I2C1_Init>
  MX_TIM3_Init();
 8001298:	f000 f98e 	bl	80015b8 <MX_TIM3_Init>
  MX_TIM2_Init();
 800129c:	f000 f934 	bl	8001508 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim2);
 80012a0:	4840      	ldr	r0, [pc, #256]	; (80013a4 <main+0x128>)
 80012a2:	f004 fe03 	bl	8005eac <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 80012a6:	4840      	ldr	r0, [pc, #256]	; (80013a8 <main+0x12c>)
 80012a8:	f004 fe00 	bl	8005eac <HAL_TIM_Base_Start_IT>
  HAL_NVIC_DisableIRQ(INTERRUPT_EXTI_IRQn);
 80012ac:	2028      	movs	r0, #40	; 0x28
 80012ae:	f000 fec2 	bl	8002036 <HAL_NVIC_DisableIRQ>
  MPU6050_Init();
 80012b2:	f7ff fe65 	bl	8000f80 <MPU6050_Init>
  HAL_NVIC_EnableIRQ(INTERRUPT_EXTI_IRQn);
 80012b6:	2028      	movs	r0, #40	; 0x28
 80012b8:	f000 feaf 	bl	800201a <HAL_NVIC_EnableIRQ>

  // dummy read
  HAL_I2C_Mem_Read_IT(&hi2c1,MPU6050_ADDR,GYRO_XOUT_H_REG,1,buffer_g,6);
 80012bc:	2306      	movs	r3, #6
 80012be:	9301      	str	r3, [sp, #4]
 80012c0:	4b3a      	ldr	r3, [pc, #232]	; (80013ac <main+0x130>)
 80012c2:	9300      	str	r3, [sp, #0]
 80012c4:	2301      	movs	r3, #1
 80012c6:	2243      	movs	r2, #67	; 0x43
 80012c8:	21d0      	movs	r1, #208	; 0xd0
 80012ca:	4839      	ldr	r0, [pc, #228]	; (80013b0 <main+0x134>)
 80012cc:	f001 fc18 	bl	8002b00 <HAL_I2C_Mem_Read_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(flag_tim_11hz){
 80012d0:	4b38      	ldr	r3, [pc, #224]	; (80013b4 <main+0x138>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d04b      	beq.n	8001372 <main+0xf6>
		  flag_tim_11hz = 0;
 80012da:	4b36      	ldr	r3, [pc, #216]	; (80013b4 <main+0x138>)
 80012dc:	2200      	movs	r2, #0
 80012de:	701a      	strb	r2, [r3, #0]
		  snprintf((char *)string_out, sizeof(string_out), "Accel x: %.3fg y: %.3fg z: %.3fg   Gyro x: %.3f°/s y: %.3f°/s z: %.3f°/s\n\r", Ax, Ay, Az, Gx, Gy, Gz);
 80012e0:	4b35      	ldr	r3, [pc, #212]	; (80013b8 <main+0x13c>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7ff f92f 	bl	8000548 <__aeabi_f2d>
 80012ea:	4604      	mov	r4, r0
 80012ec:	460d      	mov	r5, r1
 80012ee:	4b33      	ldr	r3, [pc, #204]	; (80013bc <main+0x140>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4618      	mov	r0, r3
 80012f4:	f7ff f928 	bl	8000548 <__aeabi_f2d>
 80012f8:	4680      	mov	r8, r0
 80012fa:	4689      	mov	r9, r1
 80012fc:	4b30      	ldr	r3, [pc, #192]	; (80013c0 <main+0x144>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff f921 	bl	8000548 <__aeabi_f2d>
 8001306:	4682      	mov	sl, r0
 8001308:	468b      	mov	fp, r1
 800130a:	4b2e      	ldr	r3, [pc, #184]	; (80013c4 <main+0x148>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff f91a 	bl	8000548 <__aeabi_f2d>
 8001314:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001318:	4b2b      	ldr	r3, [pc, #172]	; (80013c8 <main+0x14c>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff f913 	bl	8000548 <__aeabi_f2d>
 8001322:	e9c7 0100 	strd	r0, r1, [r7]
 8001326:	4b29      	ldr	r3, [pc, #164]	; (80013cc <main+0x150>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4618      	mov	r0, r3
 800132c:	f7ff f90c 	bl	8000548 <__aeabi_f2d>
 8001330:	4602      	mov	r2, r0
 8001332:	460b      	mov	r3, r1
 8001334:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8001338:	ed97 7b00 	vldr	d7, [r7]
 800133c:	ed8d 7b08 	vstr	d7, [sp, #32]
 8001340:	ed97 7b02 	vldr	d7, [r7, #8]
 8001344:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001348:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800134c:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001350:	e9cd 4500 	strd	r4, r5, [sp]
 8001354:	4a1e      	ldr	r2, [pc, #120]	; (80013d0 <main+0x154>)
 8001356:	2180      	movs	r1, #128	; 0x80
 8001358:	481e      	ldr	r0, [pc, #120]	; (80013d4 <main+0x158>)
 800135a:	f007 fadb 	bl	8008914 <sniprintf>
		  HAL_UART_Transmit_IT(&huart2,string_out, strlen((char *) string_out));
 800135e:	481d      	ldr	r0, [pc, #116]	; (80013d4 <main+0x158>)
 8001360:	f7fe ff86 	bl	8000270 <strlen>
 8001364:	4603      	mov	r3, r0
 8001366:	b29b      	uxth	r3, r3
 8001368:	461a      	mov	r2, r3
 800136a:	491a      	ldr	r1, [pc, #104]	; (80013d4 <main+0x158>)
 800136c:	481a      	ldr	r0, [pc, #104]	; (80013d8 <main+0x15c>)
 800136e:	f005 fc6d 	bl	8006c4c <HAL_UART_Transmit_IT>
	  }
	  if(flag_button){
 8001372:	4b1a      	ldr	r3, [pc, #104]	; (80013dc <main+0x160>)
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	b2db      	uxtb	r3, r3
 8001378:	2b00      	cmp	r3, #0
 800137a:	d0a9      	beq.n	80012d0 <main+0x54>
	  	  flag_button = 0;
 800137c:	4b17      	ldr	r3, [pc, #92]	; (80013dc <main+0x160>)
 800137e:	2200      	movs	r2, #0
 8001380:	701a      	strb	r2, [r3, #0]
	  	  snprintf((char *)string_out, sizeof(string_out), "PRZYCISK!\n\r");
 8001382:	4a17      	ldr	r2, [pc, #92]	; (80013e0 <main+0x164>)
 8001384:	2180      	movs	r1, #128	; 0x80
 8001386:	4813      	ldr	r0, [pc, #76]	; (80013d4 <main+0x158>)
 8001388:	f007 fac4 	bl	8008914 <sniprintf>
	  	  HAL_UART_Transmit_IT(&huart2,string_out, strlen((char *) string_out));
 800138c:	4811      	ldr	r0, [pc, #68]	; (80013d4 <main+0x158>)
 800138e:	f7fe ff6f 	bl	8000270 <strlen>
 8001392:	4603      	mov	r3, r0
 8001394:	b29b      	uxth	r3, r3
 8001396:	461a      	mov	r2, r3
 8001398:	490e      	ldr	r1, [pc, #56]	; (80013d4 <main+0x158>)
 800139a:	480f      	ldr	r0, [pc, #60]	; (80013d8 <main+0x15c>)
 800139c:	f005 fc56 	bl	8006c4c <HAL_UART_Transmit_IT>
	  if(flag_tim_11hz){
 80013a0:	e796      	b.n	80012d0 <main+0x54>
 80013a2:	bf00      	nop
 80013a4:	20000244 	.word	0x20000244
 80013a8:	20000290 	.word	0x20000290
 80013ac:	20000394 	.word	0x20000394
 80013b0:	200001f0 	.word	0x200001f0
 80013b4:	2000041c 	.word	0x2000041c
 80013b8:	2000036c 	.word	0x2000036c
 80013bc:	20000370 	.word	0x20000370
 80013c0:	20000374 	.word	0x20000374
 80013c4:	20000380 	.word	0x20000380
 80013c8:	20000384 	.word	0x20000384
 80013cc:	20000388 	.word	0x20000388
 80013d0:	0800ac10 	.word	0x0800ac10
 80013d4:	2000039c 	.word	0x2000039c
 80013d8:	200002dc 	.word	0x200002dc
 80013dc:	2000041e 	.word	0x2000041e
 80013e0:	0800ac60 	.word	0x0800ac60

080013e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b096      	sub	sp, #88	; 0x58
 80013e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013ea:	f107 0314 	add.w	r3, r7, #20
 80013ee:	2244      	movs	r2, #68	; 0x44
 80013f0:	2100      	movs	r1, #0
 80013f2:	4618      	mov	r0, r3
 80013f4:	f007 fb05 	bl	8008a02 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013f8:	463b      	mov	r3, r7
 80013fa:	2200      	movs	r2, #0
 80013fc:	601a      	str	r2, [r3, #0]
 80013fe:	605a      	str	r2, [r3, #4]
 8001400:	609a      	str	r2, [r3, #8]
 8001402:	60da      	str	r2, [r3, #12]
 8001404:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001406:	f44f 7000 	mov.w	r0, #512	; 0x200
 800140a:	f003 fa3d 	bl	8004888 <HAL_PWREx_ControlVoltageScaling>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001414:	f000 f9d6 	bl	80017c4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001418:	2302      	movs	r3, #2
 800141a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800141c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001420:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001422:	2310      	movs	r3, #16
 8001424:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001426:	2302      	movs	r3, #2
 8001428:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800142a:	2302      	movs	r3, #2
 800142c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800142e:	2301      	movs	r3, #1
 8001430:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001432:	230a      	movs	r3, #10
 8001434:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001436:	2307      	movs	r3, #7
 8001438:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800143a:	2302      	movs	r3, #2
 800143c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800143e:	2302      	movs	r3, #2
 8001440:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001442:	f107 0314 	add.w	r3, r7, #20
 8001446:	4618      	mov	r0, r3
 8001448:	f003 fa74 	bl	8004934 <HAL_RCC_OscConfig>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001452:	f000 f9b7 	bl	80017c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001456:	230f      	movs	r3, #15
 8001458:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800145a:	2303      	movs	r3, #3
 800145c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800145e:	2300      	movs	r3, #0
 8001460:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001462:	2300      	movs	r3, #0
 8001464:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001466:	2300      	movs	r3, #0
 8001468:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800146a:	463b      	mov	r3, r7
 800146c:	2104      	movs	r1, #4
 800146e:	4618      	mov	r0, r3
 8001470:	f003 fe3c 	bl	80050ec <HAL_RCC_ClockConfig>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800147a:	f000 f9a3 	bl	80017c4 <Error_Handler>
  }
}
 800147e:	bf00      	nop
 8001480:	3758      	adds	r7, #88	; 0x58
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
	...

08001488 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800148c:	4b1b      	ldr	r3, [pc, #108]	; (80014fc <MX_I2C1_Init+0x74>)
 800148e:	4a1c      	ldr	r2, [pc, #112]	; (8001500 <MX_I2C1_Init+0x78>)
 8001490:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8001492:	4b1a      	ldr	r3, [pc, #104]	; (80014fc <MX_I2C1_Init+0x74>)
 8001494:	4a1b      	ldr	r2, [pc, #108]	; (8001504 <MX_I2C1_Init+0x7c>)
 8001496:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001498:	4b18      	ldr	r3, [pc, #96]	; (80014fc <MX_I2C1_Init+0x74>)
 800149a:	2200      	movs	r2, #0
 800149c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800149e:	4b17      	ldr	r3, [pc, #92]	; (80014fc <MX_I2C1_Init+0x74>)
 80014a0:	2201      	movs	r2, #1
 80014a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014a4:	4b15      	ldr	r3, [pc, #84]	; (80014fc <MX_I2C1_Init+0x74>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80014aa:	4b14      	ldr	r3, [pc, #80]	; (80014fc <MX_I2C1_Init+0x74>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80014b0:	4b12      	ldr	r3, [pc, #72]	; (80014fc <MX_I2C1_Init+0x74>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014b6:	4b11      	ldr	r3, [pc, #68]	; (80014fc <MX_I2C1_Init+0x74>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014bc:	4b0f      	ldr	r3, [pc, #60]	; (80014fc <MX_I2C1_Init+0x74>)
 80014be:	2200      	movs	r2, #0
 80014c0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014c2:	480e      	ldr	r0, [pc, #56]	; (80014fc <MX_I2C1_Init+0x74>)
 80014c4:	f001 f852 	bl	800256c <HAL_I2C_Init>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80014ce:	f000 f979 	bl	80017c4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80014d2:	2100      	movs	r1, #0
 80014d4:	4809      	ldr	r0, [pc, #36]	; (80014fc <MX_I2C1_Init+0x74>)
 80014d6:	f003 f931 	bl	800473c <HAL_I2CEx_ConfigAnalogFilter>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80014e0:	f000 f970 	bl	80017c4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80014e4:	2100      	movs	r1, #0
 80014e6:	4805      	ldr	r0, [pc, #20]	; (80014fc <MX_I2C1_Init+0x74>)
 80014e8:	f003 f973 	bl	80047d2 <HAL_I2CEx_ConfigDigitalFilter>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80014f2:	f000 f967 	bl	80017c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80014f6:	bf00      	nop
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	200001f0 	.word	0x200001f0
 8001500:	40005400 	.word	0x40005400
 8001504:	10909cec 	.word	0x10909cec

08001508 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b08a      	sub	sp, #40	; 0x28
 800150c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800150e:	f107 031c 	add.w	r3, r7, #28
 8001512:	2200      	movs	r2, #0
 8001514:	601a      	str	r2, [r3, #0]
 8001516:	605a      	str	r2, [r3, #4]
 8001518:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800151a:	463b      	mov	r3, r7
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]
 8001520:	605a      	str	r2, [r3, #4]
 8001522:	609a      	str	r2, [r3, #8]
 8001524:	60da      	str	r2, [r3, #12]
 8001526:	611a      	str	r2, [r3, #16]
 8001528:	615a      	str	r2, [r3, #20]
 800152a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800152c:	4b21      	ldr	r3, [pc, #132]	; (80015b4 <MX_TIM2_Init+0xac>)
 800152e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001532:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 799;
 8001534:	4b1f      	ldr	r3, [pc, #124]	; (80015b4 <MX_TIM2_Init+0xac>)
 8001536:	f240 321f 	movw	r2, #799	; 0x31f
 800153a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800153c:	4b1d      	ldr	r3, [pc, #116]	; (80015b4 <MX_TIM2_Init+0xac>)
 800153e:	2200      	movs	r2, #0
 8001540:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3845;
 8001542:	4b1c      	ldr	r3, [pc, #112]	; (80015b4 <MX_TIM2_Init+0xac>)
 8001544:	f640 7205 	movw	r2, #3845	; 0xf05
 8001548:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800154a:	4b1a      	ldr	r3, [pc, #104]	; (80015b4 <MX_TIM2_Init+0xac>)
 800154c:	2200      	movs	r2, #0
 800154e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001550:	4b18      	ldr	r3, [pc, #96]	; (80015b4 <MX_TIM2_Init+0xac>)
 8001552:	2200      	movs	r2, #0
 8001554:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8001556:	4817      	ldr	r0, [pc, #92]	; (80015b4 <MX_TIM2_Init+0xac>)
 8001558:	f004 fd18 	bl	8005f8c <HAL_TIM_OC_Init>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <MX_TIM2_Init+0x5e>
  {
    Error_Handler();
 8001562:	f000 f92f 	bl	80017c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001566:	2300      	movs	r3, #0
 8001568:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800156a:	2300      	movs	r3, #0
 800156c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800156e:	f107 031c 	add.w	r3, r7, #28
 8001572:	4619      	mov	r1, r3
 8001574:	480f      	ldr	r0, [pc, #60]	; (80015b4 <MX_TIM2_Init+0xac>)
 8001576:	f005 fa75 	bl	8006a64 <HAL_TIMEx_MasterConfigSynchronization>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8001580:	f000 f920 	bl	80017c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001584:	2300      	movs	r3, #0
 8001586:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001588:	2300      	movs	r3, #0
 800158a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800158c:	2300      	movs	r3, #0
 800158e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001590:	2300      	movs	r3, #0
 8001592:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001594:	463b      	mov	r3, r7
 8001596:	2200      	movs	r2, #0
 8001598:	4619      	mov	r1, r3
 800159a:	4806      	ldr	r0, [pc, #24]	; (80015b4 <MX_TIM2_Init+0xac>)
 800159c:	f004 fe50 	bl	8006240 <HAL_TIM_OC_ConfigChannel>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 80015a6:	f000 f90d 	bl	80017c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80015aa:	bf00      	nop
 80015ac:	3728      	adds	r7, #40	; 0x28
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	20000244 	.word	0x20000244

080015b8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b08a      	sub	sp, #40	; 0x28
 80015bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015be:	f107 031c 	add.w	r3, r7, #28
 80015c2:	2200      	movs	r2, #0
 80015c4:	601a      	str	r2, [r3, #0]
 80015c6:	605a      	str	r2, [r3, #4]
 80015c8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015ca:	463b      	mov	r3, r7
 80015cc:	2200      	movs	r2, #0
 80015ce:	601a      	str	r2, [r3, #0]
 80015d0:	605a      	str	r2, [r3, #4]
 80015d2:	609a      	str	r2, [r3, #8]
 80015d4:	60da      	str	r2, [r3, #12]
 80015d6:	611a      	str	r2, [r3, #16]
 80015d8:	615a      	str	r2, [r3, #20]
 80015da:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80015dc:	4b20      	ldr	r3, [pc, #128]	; (8001660 <MX_TIM3_Init+0xa8>)
 80015de:	4a21      	ldr	r2, [pc, #132]	; (8001664 <MX_TIM3_Init+0xac>)
 80015e0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 799;
 80015e2:	4b1f      	ldr	r3, [pc, #124]	; (8001660 <MX_TIM3_Init+0xa8>)
 80015e4:	f240 321f 	movw	r2, #799	; 0x31f
 80015e8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015ea:	4b1d      	ldr	r3, [pc, #116]	; (8001660 <MX_TIM3_Init+0xa8>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9089;
 80015f0:	4b1b      	ldr	r3, [pc, #108]	; (8001660 <MX_TIM3_Init+0xa8>)
 80015f2:	f242 3281 	movw	r2, #9089	; 0x2381
 80015f6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015f8:	4b19      	ldr	r3, [pc, #100]	; (8001660 <MX_TIM3_Init+0xa8>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015fe:	4b18      	ldr	r3, [pc, #96]	; (8001660 <MX_TIM3_Init+0xa8>)
 8001600:	2200      	movs	r2, #0
 8001602:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8001604:	4816      	ldr	r0, [pc, #88]	; (8001660 <MX_TIM3_Init+0xa8>)
 8001606:	f004 fcc1 	bl	8005f8c <HAL_TIM_OC_Init>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
 8001610:	f000 f8d8 	bl	80017c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001614:	2300      	movs	r3, #0
 8001616:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001618:	2300      	movs	r3, #0
 800161a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800161c:	f107 031c 	add.w	r3, r7, #28
 8001620:	4619      	mov	r1, r3
 8001622:	480f      	ldr	r0, [pc, #60]	; (8001660 <MX_TIM3_Init+0xa8>)
 8001624:	f005 fa1e 	bl	8006a64 <HAL_TIMEx_MasterConfigSynchronization>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 800162e:	f000 f8c9 	bl	80017c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001632:	2300      	movs	r3, #0
 8001634:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001636:	2300      	movs	r3, #0
 8001638:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800163a:	2300      	movs	r3, #0
 800163c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800163e:	2300      	movs	r3, #0
 8001640:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001642:	463b      	mov	r3, r7
 8001644:	2200      	movs	r2, #0
 8001646:	4619      	mov	r1, r3
 8001648:	4805      	ldr	r0, [pc, #20]	; (8001660 <MX_TIM3_Init+0xa8>)
 800164a:	f004 fdf9 	bl	8006240 <HAL_TIM_OC_ConfigChannel>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8001654:	f000 f8b6 	bl	80017c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001658:	bf00      	nop
 800165a:	3728      	adds	r7, #40	; 0x28
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	20000290 	.word	0x20000290
 8001664:	40000400 	.word	0x40000400

08001668 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800166c:	4b14      	ldr	r3, [pc, #80]	; (80016c0 <MX_USART2_UART_Init+0x58>)
 800166e:	4a15      	ldr	r2, [pc, #84]	; (80016c4 <MX_USART2_UART_Init+0x5c>)
 8001670:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001672:	4b13      	ldr	r3, [pc, #76]	; (80016c0 <MX_USART2_UART_Init+0x58>)
 8001674:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001678:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800167a:	4b11      	ldr	r3, [pc, #68]	; (80016c0 <MX_USART2_UART_Init+0x58>)
 800167c:	2200      	movs	r2, #0
 800167e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001680:	4b0f      	ldr	r3, [pc, #60]	; (80016c0 <MX_USART2_UART_Init+0x58>)
 8001682:	2200      	movs	r2, #0
 8001684:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001686:	4b0e      	ldr	r3, [pc, #56]	; (80016c0 <MX_USART2_UART_Init+0x58>)
 8001688:	2200      	movs	r2, #0
 800168a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800168c:	4b0c      	ldr	r3, [pc, #48]	; (80016c0 <MX_USART2_UART_Init+0x58>)
 800168e:	220c      	movs	r2, #12
 8001690:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001692:	4b0b      	ldr	r3, [pc, #44]	; (80016c0 <MX_USART2_UART_Init+0x58>)
 8001694:	2200      	movs	r2, #0
 8001696:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001698:	4b09      	ldr	r3, [pc, #36]	; (80016c0 <MX_USART2_UART_Init+0x58>)
 800169a:	2200      	movs	r2, #0
 800169c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800169e:	4b08      	ldr	r3, [pc, #32]	; (80016c0 <MX_USART2_UART_Init+0x58>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016a4:	4b06      	ldr	r3, [pc, #24]	; (80016c0 <MX_USART2_UART_Init+0x58>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016aa:	4805      	ldr	r0, [pc, #20]	; (80016c0 <MX_USART2_UART_Init+0x58>)
 80016ac:	f005 fa80 	bl	8006bb0 <HAL_UART_Init>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80016b6:	f000 f885 	bl	80017c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016ba:	bf00      	nop
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	200002dc 	.word	0x200002dc
 80016c4:	40004400 	.word	0x40004400

080016c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b08a      	sub	sp, #40	; 0x28
 80016cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ce:	f107 0314 	add.w	r3, r7, #20
 80016d2:	2200      	movs	r2, #0
 80016d4:	601a      	str	r2, [r3, #0]
 80016d6:	605a      	str	r2, [r3, #4]
 80016d8:	609a      	str	r2, [r3, #8]
 80016da:	60da      	str	r2, [r3, #12]
 80016dc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016de:	4b36      	ldr	r3, [pc, #216]	; (80017b8 <MX_GPIO_Init+0xf0>)
 80016e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016e2:	4a35      	ldr	r2, [pc, #212]	; (80017b8 <MX_GPIO_Init+0xf0>)
 80016e4:	f043 0304 	orr.w	r3, r3, #4
 80016e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016ea:	4b33      	ldr	r3, [pc, #204]	; (80017b8 <MX_GPIO_Init+0xf0>)
 80016ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ee:	f003 0304 	and.w	r3, r3, #4
 80016f2:	613b      	str	r3, [r7, #16]
 80016f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016f6:	4b30      	ldr	r3, [pc, #192]	; (80017b8 <MX_GPIO_Init+0xf0>)
 80016f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016fa:	4a2f      	ldr	r2, [pc, #188]	; (80017b8 <MX_GPIO_Init+0xf0>)
 80016fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001700:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001702:	4b2d      	ldr	r3, [pc, #180]	; (80017b8 <MX_GPIO_Init+0xf0>)
 8001704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001706:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800170a:	60fb      	str	r3, [r7, #12]
 800170c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800170e:	4b2a      	ldr	r3, [pc, #168]	; (80017b8 <MX_GPIO_Init+0xf0>)
 8001710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001712:	4a29      	ldr	r2, [pc, #164]	; (80017b8 <MX_GPIO_Init+0xf0>)
 8001714:	f043 0301 	orr.w	r3, r3, #1
 8001718:	64d3      	str	r3, [r2, #76]	; 0x4c
 800171a:	4b27      	ldr	r3, [pc, #156]	; (80017b8 <MX_GPIO_Init+0xf0>)
 800171c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800171e:	f003 0301 	and.w	r3, r3, #1
 8001722:	60bb      	str	r3, [r7, #8]
 8001724:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001726:	4b24      	ldr	r3, [pc, #144]	; (80017b8 <MX_GPIO_Init+0xf0>)
 8001728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800172a:	4a23      	ldr	r2, [pc, #140]	; (80017b8 <MX_GPIO_Init+0xf0>)
 800172c:	f043 0302 	orr.w	r3, r3, #2
 8001730:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001732:	4b21      	ldr	r3, [pc, #132]	; (80017b8 <MX_GPIO_Init+0xf0>)
 8001734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001736:	f003 0302 	and.w	r3, r3, #2
 800173a:	607b      	str	r3, [r7, #4]
 800173c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800173e:	2200      	movs	r2, #0
 8001740:	2120      	movs	r1, #32
 8001742:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001746:	f000 fec7 	bl	80024d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_INTERRUPT_Pin */
  GPIO_InitStruct.Pin = B1_INTERRUPT_Pin;
 800174a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800174e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001750:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001754:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001756:	2300      	movs	r3, #0
 8001758:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_INTERRUPT_GPIO_Port, &GPIO_InitStruct);
 800175a:	f107 0314 	add.w	r3, r7, #20
 800175e:	4619      	mov	r1, r3
 8001760:	4816      	ldr	r0, [pc, #88]	; (80017bc <MX_GPIO_Init+0xf4>)
 8001762:	f000 fd0f 	bl	8002184 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001766:	2320      	movs	r3, #32
 8001768:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800176a:	2301      	movs	r3, #1
 800176c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176e:	2300      	movs	r3, #0
 8001770:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001772:	2300      	movs	r3, #0
 8001774:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001776:	f107 0314 	add.w	r3, r7, #20
 800177a:	4619      	mov	r1, r3
 800177c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001780:	f000 fd00 	bl	8002184 <HAL_GPIO_Init>

  /*Configure GPIO pin : INTERRUPT_Pin */
  GPIO_InitStruct.Pin = INTERRUPT_Pin;
 8001784:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001788:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800178a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800178e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001790:	2300      	movs	r3, #0
 8001792:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INTERRUPT_GPIO_Port, &GPIO_InitStruct);
 8001794:	f107 0314 	add.w	r3, r7, #20
 8001798:	4619      	mov	r1, r3
 800179a:	4809      	ldr	r0, [pc, #36]	; (80017c0 <MX_GPIO_Init+0xf8>)
 800179c:	f000 fcf2 	bl	8002184 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80017a0:	2200      	movs	r2, #0
 80017a2:	2100      	movs	r1, #0
 80017a4:	2028      	movs	r0, #40	; 0x28
 80017a6:	f000 fc1c 	bl	8001fe2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80017aa:	2028      	movs	r0, #40	; 0x28
 80017ac:	f000 fc35 	bl	800201a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80017b0:	bf00      	nop
 80017b2:	3728      	adds	r7, #40	; 0x28
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	40021000 	.word	0x40021000
 80017bc:	48000800 	.word	0x48000800
 80017c0:	48000400 	.word	0x48000400

080017c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017c8:	b672      	cpsid	i
}
 80017ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017cc:	e7fe      	b.n	80017cc <Error_Handler+0x8>
	...

080017d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017d6:	4b0f      	ldr	r3, [pc, #60]	; (8001814 <HAL_MspInit+0x44>)
 80017d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017da:	4a0e      	ldr	r2, [pc, #56]	; (8001814 <HAL_MspInit+0x44>)
 80017dc:	f043 0301 	orr.w	r3, r3, #1
 80017e0:	6613      	str	r3, [r2, #96]	; 0x60
 80017e2:	4b0c      	ldr	r3, [pc, #48]	; (8001814 <HAL_MspInit+0x44>)
 80017e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017e6:	f003 0301 	and.w	r3, r3, #1
 80017ea:	607b      	str	r3, [r7, #4]
 80017ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017ee:	4b09      	ldr	r3, [pc, #36]	; (8001814 <HAL_MspInit+0x44>)
 80017f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017f2:	4a08      	ldr	r2, [pc, #32]	; (8001814 <HAL_MspInit+0x44>)
 80017f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017f8:	6593      	str	r3, [r2, #88]	; 0x58
 80017fa:	4b06      	ldr	r3, [pc, #24]	; (8001814 <HAL_MspInit+0x44>)
 80017fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001802:	603b      	str	r3, [r7, #0]
 8001804:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001806:	bf00      	nop
 8001808:	370c      	adds	r7, #12
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	40021000 	.word	0x40021000

08001818 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b0ac      	sub	sp, #176	; 0xb0
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001820:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001824:	2200      	movs	r2, #0
 8001826:	601a      	str	r2, [r3, #0]
 8001828:	605a      	str	r2, [r3, #4]
 800182a:	609a      	str	r2, [r3, #8]
 800182c:	60da      	str	r2, [r3, #12]
 800182e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001830:	f107 0314 	add.w	r3, r7, #20
 8001834:	2288      	movs	r2, #136	; 0x88
 8001836:	2100      	movs	r1, #0
 8001838:	4618      	mov	r0, r3
 800183a:	f007 f8e2 	bl	8008a02 <memset>
  if(hi2c->Instance==I2C1)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a25      	ldr	r2, [pc, #148]	; (80018d8 <HAL_I2C_MspInit+0xc0>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d143      	bne.n	80018d0 <HAL_I2C_MspInit+0xb8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001848:	2340      	movs	r3, #64	; 0x40
 800184a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800184c:	2300      	movs	r3, #0
 800184e:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001850:	f107 0314 	add.w	r3, r7, #20
 8001854:	4618      	mov	r0, r3
 8001856:	f003 fe6d 	bl	8005534 <HAL_RCCEx_PeriphCLKConfig>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001860:	f7ff ffb0 	bl	80017c4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001864:	4b1d      	ldr	r3, [pc, #116]	; (80018dc <HAL_I2C_MspInit+0xc4>)
 8001866:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001868:	4a1c      	ldr	r2, [pc, #112]	; (80018dc <HAL_I2C_MspInit+0xc4>)
 800186a:	f043 0302 	orr.w	r3, r3, #2
 800186e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001870:	4b1a      	ldr	r3, [pc, #104]	; (80018dc <HAL_I2C_MspInit+0xc4>)
 8001872:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001874:	f003 0302 	and.w	r3, r3, #2
 8001878:	613b      	str	r3, [r7, #16]
 800187a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800187c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001880:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001884:	2312      	movs	r3, #18
 8001886:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188a:	2300      	movs	r3, #0
 800188c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001890:	2303      	movs	r3, #3
 8001892:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001896:	2304      	movs	r3, #4
 8001898:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800189c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80018a0:	4619      	mov	r1, r3
 80018a2:	480f      	ldr	r0, [pc, #60]	; (80018e0 <HAL_I2C_MspInit+0xc8>)
 80018a4:	f000 fc6e 	bl	8002184 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80018a8:	4b0c      	ldr	r3, [pc, #48]	; (80018dc <HAL_I2C_MspInit+0xc4>)
 80018aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ac:	4a0b      	ldr	r2, [pc, #44]	; (80018dc <HAL_I2C_MspInit+0xc4>)
 80018ae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018b2:	6593      	str	r3, [r2, #88]	; 0x58
 80018b4:	4b09      	ldr	r3, [pc, #36]	; (80018dc <HAL_I2C_MspInit+0xc4>)
 80018b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018bc:	60fb      	str	r3, [r7, #12]
 80018be:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80018c0:	2200      	movs	r2, #0
 80018c2:	2100      	movs	r1, #0
 80018c4:	201f      	movs	r0, #31
 80018c6:	f000 fb8c 	bl	8001fe2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80018ca:	201f      	movs	r0, #31
 80018cc:	f000 fba5 	bl	800201a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80018d0:	bf00      	nop
 80018d2:	37b0      	adds	r7, #176	; 0xb0
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	40005400 	.word	0x40005400
 80018dc:	40021000 	.word	0x40021000
 80018e0:	48000400 	.word	0x48000400

080018e4 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM2)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018f4:	d114      	bne.n	8001920 <HAL_TIM_OC_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018f6:	4b19      	ldr	r3, [pc, #100]	; (800195c <HAL_TIM_OC_MspInit+0x78>)
 80018f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018fa:	4a18      	ldr	r2, [pc, #96]	; (800195c <HAL_TIM_OC_MspInit+0x78>)
 80018fc:	f043 0301 	orr.w	r3, r3, #1
 8001900:	6593      	str	r3, [r2, #88]	; 0x58
 8001902:	4b16      	ldr	r3, [pc, #88]	; (800195c <HAL_TIM_OC_MspInit+0x78>)
 8001904:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001906:	f003 0301 	and.w	r3, r3, #1
 800190a:	60fb      	str	r3, [r7, #12]
 800190c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800190e:	2200      	movs	r2, #0
 8001910:	2100      	movs	r1, #0
 8001912:	201c      	movs	r0, #28
 8001914:	f000 fb65 	bl	8001fe2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001918:	201c      	movs	r0, #28
 800191a:	f000 fb7e 	bl	800201a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800191e:	e018      	b.n	8001952 <HAL_TIM_OC_MspInit+0x6e>
  else if(htim_oc->Instance==TIM3)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a0e      	ldr	r2, [pc, #56]	; (8001960 <HAL_TIM_OC_MspInit+0x7c>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d113      	bne.n	8001952 <HAL_TIM_OC_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800192a:	4b0c      	ldr	r3, [pc, #48]	; (800195c <HAL_TIM_OC_MspInit+0x78>)
 800192c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800192e:	4a0b      	ldr	r2, [pc, #44]	; (800195c <HAL_TIM_OC_MspInit+0x78>)
 8001930:	f043 0302 	orr.w	r3, r3, #2
 8001934:	6593      	str	r3, [r2, #88]	; 0x58
 8001936:	4b09      	ldr	r3, [pc, #36]	; (800195c <HAL_TIM_OC_MspInit+0x78>)
 8001938:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800193a:	f003 0302 	and.w	r3, r3, #2
 800193e:	60bb      	str	r3, [r7, #8]
 8001940:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001942:	2200      	movs	r2, #0
 8001944:	2100      	movs	r1, #0
 8001946:	201d      	movs	r0, #29
 8001948:	f000 fb4b 	bl	8001fe2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800194c:	201d      	movs	r0, #29
 800194e:	f000 fb64 	bl	800201a <HAL_NVIC_EnableIRQ>
}
 8001952:	bf00      	nop
 8001954:	3710      	adds	r7, #16
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	40021000 	.word	0x40021000
 8001960:	40000400 	.word	0x40000400

08001964 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b0ac      	sub	sp, #176	; 0xb0
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800196c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001970:	2200      	movs	r2, #0
 8001972:	601a      	str	r2, [r3, #0]
 8001974:	605a      	str	r2, [r3, #4]
 8001976:	609a      	str	r2, [r3, #8]
 8001978:	60da      	str	r2, [r3, #12]
 800197a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800197c:	f107 0314 	add.w	r3, r7, #20
 8001980:	2288      	movs	r2, #136	; 0x88
 8001982:	2100      	movs	r1, #0
 8001984:	4618      	mov	r0, r3
 8001986:	f007 f83c 	bl	8008a02 <memset>
  if(huart->Instance==USART2)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a25      	ldr	r2, [pc, #148]	; (8001a24 <HAL_UART_MspInit+0xc0>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d143      	bne.n	8001a1c <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001994:	2302      	movs	r3, #2
 8001996:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001998:	2300      	movs	r3, #0
 800199a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800199c:	f107 0314 	add.w	r3, r7, #20
 80019a0:	4618      	mov	r0, r3
 80019a2:	f003 fdc7 	bl	8005534 <HAL_RCCEx_PeriphCLKConfig>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d001      	beq.n	80019b0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80019ac:	f7ff ff0a 	bl	80017c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80019b0:	4b1d      	ldr	r3, [pc, #116]	; (8001a28 <HAL_UART_MspInit+0xc4>)
 80019b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019b4:	4a1c      	ldr	r2, [pc, #112]	; (8001a28 <HAL_UART_MspInit+0xc4>)
 80019b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019ba:	6593      	str	r3, [r2, #88]	; 0x58
 80019bc:	4b1a      	ldr	r3, [pc, #104]	; (8001a28 <HAL_UART_MspInit+0xc4>)
 80019be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019c4:	613b      	str	r3, [r7, #16]
 80019c6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019c8:	4b17      	ldr	r3, [pc, #92]	; (8001a28 <HAL_UART_MspInit+0xc4>)
 80019ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019cc:	4a16      	ldr	r2, [pc, #88]	; (8001a28 <HAL_UART_MspInit+0xc4>)
 80019ce:	f043 0301 	orr.w	r3, r3, #1
 80019d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019d4:	4b14      	ldr	r3, [pc, #80]	; (8001a28 <HAL_UART_MspInit+0xc4>)
 80019d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019d8:	f003 0301 	and.w	r3, r3, #1
 80019dc:	60fb      	str	r3, [r7, #12]
 80019de:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80019e0:	230c      	movs	r3, #12
 80019e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e6:	2302      	movs	r3, #2
 80019e8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ec:	2300      	movs	r3, #0
 80019ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019f2:	2303      	movs	r3, #3
 80019f4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019f8:	2307      	movs	r3, #7
 80019fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019fe:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001a02:	4619      	mov	r1, r3
 8001a04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a08:	f000 fbbc 	bl	8002184 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	2100      	movs	r1, #0
 8001a10:	2026      	movs	r0, #38	; 0x26
 8001a12:	f000 fae6 	bl	8001fe2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001a16:	2026      	movs	r0, #38	; 0x26
 8001a18:	f000 faff 	bl	800201a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001a1c:	bf00      	nop
 8001a1e:	37b0      	adds	r7, #176	; 0xb0
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	40004400 	.word	0x40004400
 8001a28:	40021000 	.word	0x40021000

08001a2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a30:	e7fe      	b.n	8001a30 <NMI_Handler+0x4>

08001a32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a32:	b480      	push	{r7}
 8001a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a36:	e7fe      	b.n	8001a36 <HardFault_Handler+0x4>

08001a38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a3c:	e7fe      	b.n	8001a3c <MemManage_Handler+0x4>

08001a3e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a3e:	b480      	push	{r7}
 8001a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a42:	e7fe      	b.n	8001a42 <BusFault_Handler+0x4>

08001a44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a48:	e7fe      	b.n	8001a48 <UsageFault_Handler+0x4>

08001a4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a4e:	bf00      	nop
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr

08001a58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a5c:	bf00      	nop
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr

08001a66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a66:	b480      	push	{r7}
 8001a68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a6a:	bf00      	nop
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr

08001a74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a78:	f000 f994 	bl	8001da4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a7c:	bf00      	nop
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a84:	4802      	ldr	r0, [pc, #8]	; (8001a90 <TIM2_IRQHandler+0x10>)
 8001a86:	f004 fad8 	bl	800603a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001a8a:	bf00      	nop
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	20000244 	.word	0x20000244

08001a94 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001a98:	4802      	ldr	r0, [pc, #8]	; (8001aa4 <TIM3_IRQHandler+0x10>)
 8001a9a:	f004 face 	bl	800603a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001a9e:	bf00      	nop
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	20000290 	.word	0x20000290

08001aa8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001aac:	4802      	ldr	r0, [pc, #8]	; (8001ab8 <I2C1_EV_IRQHandler+0x10>)
 8001aae:	f001 f8ad 	bl	8002c0c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001ab2:	bf00      	nop
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	200001f0 	.word	0x200001f0

08001abc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001ac0:	4802      	ldr	r0, [pc, #8]	; (8001acc <USART2_IRQHandler+0x10>)
 8001ac2:	f005 f921 	bl	8006d08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001ac6:	bf00      	nop
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	200002dc 	.word	0x200002dc

08001ad0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INTERRUPT_Pin);
 8001ad4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001ad8:	f000 fd30 	bl	800253c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_INTERRUPT_Pin);
 8001adc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001ae0:	f000 fd2c 	bl	800253c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001ae4:	bf00      	nop
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <_getpid>:
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	2301      	movs	r3, #1
 8001aee:	4618      	mov	r0, r3
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr

08001af8 <_kill>:
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
 8001b00:	6039      	str	r1, [r7, #0]
 8001b02:	f006 ffd1 	bl	8008aa8 <__errno>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2216      	movs	r2, #22
 8001b0a:	601a      	str	r2, [r3, #0]
 8001b0c:	f04f 33ff 	mov.w	r3, #4294967295
 8001b10:	4618      	mov	r0, r3
 8001b12:	3708      	adds	r7, #8
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}

08001b18 <_exit>:
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	f04f 31ff 	mov.w	r1, #4294967295
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f7ff ffe7 	bl	8001af8 <_kill>
 8001b2a:	e7fe      	b.n	8001b2a <_exit+0x12>

08001b2c <_read>:
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b086      	sub	sp, #24
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	60f8      	str	r0, [r7, #12]
 8001b34:	60b9      	str	r1, [r7, #8]
 8001b36:	607a      	str	r2, [r7, #4]
 8001b38:	2300      	movs	r3, #0
 8001b3a:	617b      	str	r3, [r7, #20]
 8001b3c:	e00a      	b.n	8001b54 <_read+0x28>
 8001b3e:	f3af 8000 	nop.w
 8001b42:	4601      	mov	r1, r0
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	1c5a      	adds	r2, r3, #1
 8001b48:	60ba      	str	r2, [r7, #8]
 8001b4a:	b2ca      	uxtb	r2, r1
 8001b4c:	701a      	strb	r2, [r3, #0]
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	3301      	adds	r3, #1
 8001b52:	617b      	str	r3, [r7, #20]
 8001b54:	697a      	ldr	r2, [r7, #20]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	dbf0      	blt.n	8001b3e <_read+0x12>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3718      	adds	r7, #24
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}

08001b66 <_write>:
 8001b66:	b580      	push	{r7, lr}
 8001b68:	b086      	sub	sp, #24
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	60f8      	str	r0, [r7, #12]
 8001b6e:	60b9      	str	r1, [r7, #8]
 8001b70:	607a      	str	r2, [r7, #4]
 8001b72:	2300      	movs	r3, #0
 8001b74:	617b      	str	r3, [r7, #20]
 8001b76:	e009      	b.n	8001b8c <_write+0x26>
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	1c5a      	adds	r2, r3, #1
 8001b7c:	60ba      	str	r2, [r7, #8]
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	4618      	mov	r0, r3
 8001b82:	f3af 8000 	nop.w
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	3301      	adds	r3, #1
 8001b8a:	617b      	str	r3, [r7, #20]
 8001b8c:	697a      	ldr	r2, [r7, #20]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	429a      	cmp	r2, r3
 8001b92:	dbf1      	blt.n	8001b78 <_write+0x12>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	4618      	mov	r0, r3
 8001b98:	3718      	adds	r7, #24
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}

08001b9e <_close>:
 8001b9e:	b480      	push	{r7}
 8001ba0:	b083      	sub	sp, #12
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	6078      	str	r0, [r7, #4]
 8001ba6:	f04f 33ff 	mov.w	r3, #4294967295
 8001baa:	4618      	mov	r0, r3
 8001bac:	370c      	adds	r7, #12
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr

08001bb6 <_fstat>:
 8001bb6:	b480      	push	{r7}
 8001bb8:	b083      	sub	sp, #12
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	6078      	str	r0, [r7, #4]
 8001bbe:	6039      	str	r1, [r7, #0]
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bc6:	605a      	str	r2, [r3, #4]
 8001bc8:	2300      	movs	r3, #0
 8001bca:	4618      	mov	r0, r3
 8001bcc:	370c      	adds	r7, #12
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr

08001bd6 <_isatty>:
 8001bd6:	b480      	push	{r7}
 8001bd8:	b083      	sub	sp, #12
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
 8001bde:	2301      	movs	r3, #1
 8001be0:	4618      	mov	r0, r3
 8001be2:	370c      	adds	r7, #12
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr

08001bec <_lseek>:
 8001bec:	b480      	push	{r7}
 8001bee:	b085      	sub	sp, #20
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	60f8      	str	r0, [r7, #12]
 8001bf4:	60b9      	str	r1, [r7, #8]
 8001bf6:	607a      	str	r2, [r7, #4]
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3714      	adds	r7, #20
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
	...

08001c08 <_sbrk>:
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b086      	sub	sp, #24
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	4a14      	ldr	r2, [pc, #80]	; (8001c64 <_sbrk+0x5c>)
 8001c12:	4b15      	ldr	r3, [pc, #84]	; (8001c68 <_sbrk+0x60>)
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	617b      	str	r3, [r7, #20]
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	613b      	str	r3, [r7, #16]
 8001c1c:	4b13      	ldr	r3, [pc, #76]	; (8001c6c <_sbrk+0x64>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d102      	bne.n	8001c2a <_sbrk+0x22>
 8001c24:	4b11      	ldr	r3, [pc, #68]	; (8001c6c <_sbrk+0x64>)
 8001c26:	4a12      	ldr	r2, [pc, #72]	; (8001c70 <_sbrk+0x68>)
 8001c28:	601a      	str	r2, [r3, #0]
 8001c2a:	4b10      	ldr	r3, [pc, #64]	; (8001c6c <_sbrk+0x64>)
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4413      	add	r3, r2
 8001c32:	693a      	ldr	r2, [r7, #16]
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d207      	bcs.n	8001c48 <_sbrk+0x40>
 8001c38:	f006 ff36 	bl	8008aa8 <__errno>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	220c      	movs	r2, #12
 8001c40:	601a      	str	r2, [r3, #0]
 8001c42:	f04f 33ff 	mov.w	r3, #4294967295
 8001c46:	e009      	b.n	8001c5c <_sbrk+0x54>
 8001c48:	4b08      	ldr	r3, [pc, #32]	; (8001c6c <_sbrk+0x64>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	60fb      	str	r3, [r7, #12]
 8001c4e:	4b07      	ldr	r3, [pc, #28]	; (8001c6c <_sbrk+0x64>)
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4413      	add	r3, r2
 8001c56:	4a05      	ldr	r2, [pc, #20]	; (8001c6c <_sbrk+0x64>)
 8001c58:	6013      	str	r3, [r2, #0]
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3718      	adds	r7, #24
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	20018000 	.word	0x20018000
 8001c68:	00000400 	.word	0x00000400
 8001c6c:	20000420 	.word	0x20000420
 8001c70:	20000578 	.word	0x20000578

08001c74 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001c78:	4b06      	ldr	r3, [pc, #24]	; (8001c94 <SystemInit+0x20>)
 8001c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c7e:	4a05      	ldr	r2, [pc, #20]	; (8001c94 <SystemInit+0x20>)
 8001c80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001c88:	bf00      	nop
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	e000ed00 	.word	0xe000ed00

08001c98 <Reset_Handler>:
 8001c98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cd0 <LoopForever+0x2>
 8001c9c:	f7ff ffea 	bl	8001c74 <SystemInit>
 8001ca0:	480c      	ldr	r0, [pc, #48]	; (8001cd4 <LoopForever+0x6>)
 8001ca2:	490d      	ldr	r1, [pc, #52]	; (8001cd8 <LoopForever+0xa>)
 8001ca4:	4a0d      	ldr	r2, [pc, #52]	; (8001cdc <LoopForever+0xe>)
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	e002      	b.n	8001cb0 <LoopCopyDataInit>

08001caa <CopyDataInit>:
 8001caa:	58d4      	ldr	r4, [r2, r3]
 8001cac:	50c4      	str	r4, [r0, r3]
 8001cae:	3304      	adds	r3, #4

08001cb0 <LoopCopyDataInit>:
 8001cb0:	18c4      	adds	r4, r0, r3
 8001cb2:	428c      	cmp	r4, r1
 8001cb4:	d3f9      	bcc.n	8001caa <CopyDataInit>
 8001cb6:	4a0a      	ldr	r2, [pc, #40]	; (8001ce0 <LoopForever+0x12>)
 8001cb8:	4c0a      	ldr	r4, [pc, #40]	; (8001ce4 <LoopForever+0x16>)
 8001cba:	2300      	movs	r3, #0
 8001cbc:	e001      	b.n	8001cc2 <LoopFillZerobss>

08001cbe <FillZerobss>:
 8001cbe:	6013      	str	r3, [r2, #0]
 8001cc0:	3204      	adds	r2, #4

08001cc2 <LoopFillZerobss>:
 8001cc2:	42a2      	cmp	r2, r4
 8001cc4:	d3fb      	bcc.n	8001cbe <FillZerobss>
 8001cc6:	f006 fef5 	bl	8008ab4 <__libc_init_array>
 8001cca:	f7ff fad7 	bl	800127c <main>

08001cce <LoopForever>:
 8001cce:	e7fe      	b.n	8001cce <LoopForever>
 8001cd0:	20018000 	.word	0x20018000
 8001cd4:	20000000 	.word	0x20000000
 8001cd8:	200001d4 	.word	0x200001d4
 8001cdc:	0800b034 	.word	0x0800b034
 8001ce0:	200001d4 	.word	0x200001d4
 8001ce4:	20000574 	.word	0x20000574

08001ce8 <ADC1_2_IRQHandler>:
 8001ce8:	e7fe      	b.n	8001ce8 <ADC1_2_IRQHandler>
	...

08001cec <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cf6:	4b0c      	ldr	r3, [pc, #48]	; (8001d28 <HAL_Init+0x3c>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a0b      	ldr	r2, [pc, #44]	; (8001d28 <HAL_Init+0x3c>)
 8001cfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d00:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d02:	2003      	movs	r0, #3
 8001d04:	f000 f962 	bl	8001fcc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d08:	2000      	movs	r0, #0
 8001d0a:	f000 f80f 	bl	8001d2c <HAL_InitTick>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d002      	beq.n	8001d1a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	71fb      	strb	r3, [r7, #7]
 8001d18:	e001      	b.n	8001d1e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d1a:	f7ff fd59 	bl	80017d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d1e:	79fb      	ldrb	r3, [r7, #7]
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3708      	adds	r7, #8
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	40022000 	.word	0x40022000

08001d2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b084      	sub	sp, #16
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d34:	2300      	movs	r3, #0
 8001d36:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001d38:	4b17      	ldr	r3, [pc, #92]	; (8001d98 <HAL_InitTick+0x6c>)
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d023      	beq.n	8001d88 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001d40:	4b16      	ldr	r3, [pc, #88]	; (8001d9c <HAL_InitTick+0x70>)
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	4b14      	ldr	r3, [pc, #80]	; (8001d98 <HAL_InitTick+0x6c>)
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	4619      	mov	r1, r3
 8001d4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d52:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d56:	4618      	mov	r0, r3
 8001d58:	f000 f97b 	bl	8002052 <HAL_SYSTICK_Config>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d10f      	bne.n	8001d82 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2b0f      	cmp	r3, #15
 8001d66:	d809      	bhi.n	8001d7c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d68:	2200      	movs	r2, #0
 8001d6a:	6879      	ldr	r1, [r7, #4]
 8001d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d70:	f000 f937 	bl	8001fe2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d74:	4a0a      	ldr	r2, [pc, #40]	; (8001da0 <HAL_InitTick+0x74>)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6013      	str	r3, [r2, #0]
 8001d7a:	e007      	b.n	8001d8c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	73fb      	strb	r3, [r7, #15]
 8001d80:	e004      	b.n	8001d8c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	73fb      	strb	r3, [r7, #15]
 8001d86:	e001      	b.n	8001d8c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001d8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3710      	adds	r7, #16
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	20000008 	.word	0x20000008
 8001d9c:	20000000 	.word	0x20000000
 8001da0:	20000004 	.word	0x20000004

08001da4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001da8:	4b06      	ldr	r3, [pc, #24]	; (8001dc4 <HAL_IncTick+0x20>)
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	461a      	mov	r2, r3
 8001dae:	4b06      	ldr	r3, [pc, #24]	; (8001dc8 <HAL_IncTick+0x24>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4413      	add	r3, r2
 8001db4:	4a04      	ldr	r2, [pc, #16]	; (8001dc8 <HAL_IncTick+0x24>)
 8001db6:	6013      	str	r3, [r2, #0]
}
 8001db8:	bf00      	nop
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop
 8001dc4:	20000008 	.word	0x20000008
 8001dc8:	20000424 	.word	0x20000424

08001dcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  return uwTick;
 8001dd0:	4b03      	ldr	r3, [pc, #12]	; (8001de0 <HAL_GetTick+0x14>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
 8001dde:	bf00      	nop
 8001de0:	20000424 	.word	0x20000424

08001de4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b085      	sub	sp, #20
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	f003 0307 	and.w	r3, r3, #7
 8001df2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001df4:	4b0c      	ldr	r3, [pc, #48]	; (8001e28 <__NVIC_SetPriorityGrouping+0x44>)
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dfa:	68ba      	ldr	r2, [r7, #8]
 8001dfc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e00:	4013      	ands	r3, r2
 8001e02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e16:	4a04      	ldr	r2, [pc, #16]	; (8001e28 <__NVIC_SetPriorityGrouping+0x44>)
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	60d3      	str	r3, [r2, #12]
}
 8001e1c:	bf00      	nop
 8001e1e:	3714      	adds	r7, #20
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr
 8001e28:	e000ed00 	.word	0xe000ed00

08001e2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e30:	4b04      	ldr	r3, [pc, #16]	; (8001e44 <__NVIC_GetPriorityGrouping+0x18>)
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	0a1b      	lsrs	r3, r3, #8
 8001e36:	f003 0307 	and.w	r3, r3, #7
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr
 8001e44:	e000ed00 	.word	0xe000ed00

08001e48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	4603      	mov	r3, r0
 8001e50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	db0b      	blt.n	8001e72 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e5a:	79fb      	ldrb	r3, [r7, #7]
 8001e5c:	f003 021f 	and.w	r2, r3, #31
 8001e60:	4907      	ldr	r1, [pc, #28]	; (8001e80 <__NVIC_EnableIRQ+0x38>)
 8001e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e66:	095b      	lsrs	r3, r3, #5
 8001e68:	2001      	movs	r0, #1
 8001e6a:	fa00 f202 	lsl.w	r2, r0, r2
 8001e6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e72:	bf00      	nop
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	e000e100 	.word	0xe000e100

08001e84 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	db12      	blt.n	8001ebc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e96:	79fb      	ldrb	r3, [r7, #7]
 8001e98:	f003 021f 	and.w	r2, r3, #31
 8001e9c:	490a      	ldr	r1, [pc, #40]	; (8001ec8 <__NVIC_DisableIRQ+0x44>)
 8001e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea2:	095b      	lsrs	r3, r3, #5
 8001ea4:	2001      	movs	r0, #1
 8001ea6:	fa00 f202 	lsl.w	r2, r0, r2
 8001eaa:	3320      	adds	r3, #32
 8001eac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001eb0:	f3bf 8f4f 	dsb	sy
}
 8001eb4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001eb6:	f3bf 8f6f 	isb	sy
}
 8001eba:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001ebc:	bf00      	nop
 8001ebe:	370c      	adds	r7, #12
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr
 8001ec8:	e000e100 	.word	0xe000e100

08001ecc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	6039      	str	r1, [r7, #0]
 8001ed6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ed8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	db0a      	blt.n	8001ef6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	b2da      	uxtb	r2, r3
 8001ee4:	490c      	ldr	r1, [pc, #48]	; (8001f18 <__NVIC_SetPriority+0x4c>)
 8001ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eea:	0112      	lsls	r2, r2, #4
 8001eec:	b2d2      	uxtb	r2, r2
 8001eee:	440b      	add	r3, r1
 8001ef0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ef4:	e00a      	b.n	8001f0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	b2da      	uxtb	r2, r3
 8001efa:	4908      	ldr	r1, [pc, #32]	; (8001f1c <__NVIC_SetPriority+0x50>)
 8001efc:	79fb      	ldrb	r3, [r7, #7]
 8001efe:	f003 030f 	and.w	r3, r3, #15
 8001f02:	3b04      	subs	r3, #4
 8001f04:	0112      	lsls	r2, r2, #4
 8001f06:	b2d2      	uxtb	r2, r2
 8001f08:	440b      	add	r3, r1
 8001f0a:	761a      	strb	r2, [r3, #24]
}
 8001f0c:	bf00      	nop
 8001f0e:	370c      	adds	r7, #12
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr
 8001f18:	e000e100 	.word	0xe000e100
 8001f1c:	e000ed00 	.word	0xe000ed00

08001f20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b089      	sub	sp, #36	; 0x24
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	60f8      	str	r0, [r7, #12]
 8001f28:	60b9      	str	r1, [r7, #8]
 8001f2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	f003 0307 	and.w	r3, r3, #7
 8001f32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	f1c3 0307 	rsb	r3, r3, #7
 8001f3a:	2b04      	cmp	r3, #4
 8001f3c:	bf28      	it	cs
 8001f3e:	2304      	movcs	r3, #4
 8001f40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	3304      	adds	r3, #4
 8001f46:	2b06      	cmp	r3, #6
 8001f48:	d902      	bls.n	8001f50 <NVIC_EncodePriority+0x30>
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	3b03      	subs	r3, #3
 8001f4e:	e000      	b.n	8001f52 <NVIC_EncodePriority+0x32>
 8001f50:	2300      	movs	r3, #0
 8001f52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f54:	f04f 32ff 	mov.w	r2, #4294967295
 8001f58:	69bb      	ldr	r3, [r7, #24]
 8001f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5e:	43da      	mvns	r2, r3
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	401a      	ands	r2, r3
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f68:	f04f 31ff 	mov.w	r1, #4294967295
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f72:	43d9      	mvns	r1, r3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f78:	4313      	orrs	r3, r2
         );
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3724      	adds	r7, #36	; 0x24
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
	...

08001f88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	3b01      	subs	r3, #1
 8001f94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f98:	d301      	bcc.n	8001f9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e00f      	b.n	8001fbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f9e:	4a0a      	ldr	r2, [pc, #40]	; (8001fc8 <SysTick_Config+0x40>)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	3b01      	subs	r3, #1
 8001fa4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fa6:	210f      	movs	r1, #15
 8001fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8001fac:	f7ff ff8e 	bl	8001ecc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fb0:	4b05      	ldr	r3, [pc, #20]	; (8001fc8 <SysTick_Config+0x40>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fb6:	4b04      	ldr	r3, [pc, #16]	; (8001fc8 <SysTick_Config+0x40>)
 8001fb8:	2207      	movs	r2, #7
 8001fba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fbc:	2300      	movs	r3, #0
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3708      	adds	r7, #8
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	e000e010 	.word	0xe000e010

08001fcc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fd4:	6878      	ldr	r0, [r7, #4]
 8001fd6:	f7ff ff05 	bl	8001de4 <__NVIC_SetPriorityGrouping>
}
 8001fda:	bf00      	nop
 8001fdc:	3708      	adds	r7, #8
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}

08001fe2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fe2:	b580      	push	{r7, lr}
 8001fe4:	b086      	sub	sp, #24
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	4603      	mov	r3, r0
 8001fea:	60b9      	str	r1, [r7, #8]
 8001fec:	607a      	str	r2, [r7, #4]
 8001fee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ff4:	f7ff ff1a 	bl	8001e2c <__NVIC_GetPriorityGrouping>
 8001ff8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ffa:	687a      	ldr	r2, [r7, #4]
 8001ffc:	68b9      	ldr	r1, [r7, #8]
 8001ffe:	6978      	ldr	r0, [r7, #20]
 8002000:	f7ff ff8e 	bl	8001f20 <NVIC_EncodePriority>
 8002004:	4602      	mov	r2, r0
 8002006:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800200a:	4611      	mov	r1, r2
 800200c:	4618      	mov	r0, r3
 800200e:	f7ff ff5d 	bl	8001ecc <__NVIC_SetPriority>
}
 8002012:	bf00      	nop
 8002014:	3718      	adds	r7, #24
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}

0800201a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800201a:	b580      	push	{r7, lr}
 800201c:	b082      	sub	sp, #8
 800201e:	af00      	add	r7, sp, #0
 8002020:	4603      	mov	r3, r0
 8002022:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002024:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002028:	4618      	mov	r0, r3
 800202a:	f7ff ff0d 	bl	8001e48 <__NVIC_EnableIRQ>
}
 800202e:	bf00      	nop
 8002030:	3708      	adds	r7, #8
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}

08002036 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002036:	b580      	push	{r7, lr}
 8002038:	b082      	sub	sp, #8
 800203a:	af00      	add	r7, sp, #0
 800203c:	4603      	mov	r3, r0
 800203e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002040:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002044:	4618      	mov	r0, r3
 8002046:	f7ff ff1d 	bl	8001e84 <__NVIC_DisableIRQ>
}
 800204a:	bf00      	nop
 800204c:	3708      	adds	r7, #8
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}

08002052 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002052:	b580      	push	{r7, lr}
 8002054:	b082      	sub	sp, #8
 8002056:	af00      	add	r7, sp, #0
 8002058:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f7ff ff94 	bl	8001f88 <SysTick_Config>
 8002060:	4603      	mov	r3, r0
}
 8002062:	4618      	mov	r0, r3
 8002064:	3708      	adds	r7, #8
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}

0800206a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800206a:	b480      	push	{r7}
 800206c:	b085      	sub	sp, #20
 800206e:	af00      	add	r7, sp, #0
 8002070:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002072:	2300      	movs	r3, #0
 8002074:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800207c:	b2db      	uxtb	r3, r3
 800207e:	2b02      	cmp	r3, #2
 8002080:	d008      	beq.n	8002094 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2204      	movs	r2, #4
 8002086:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2200      	movs	r2, #0
 800208c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e022      	b.n	80020da <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f022 020e 	bic.w	r2, r2, #14
 80020a2:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f022 0201 	bic.w	r2, r2, #1
 80020b2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020b8:	f003 021c 	and.w	r2, r3, #28
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c0:	2101      	movs	r1, #1
 80020c2:	fa01 f202 	lsl.w	r2, r1, r2
 80020c6:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2201      	movs	r2, #1
 80020cc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2200      	movs	r2, #0
 80020d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80020d8:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3714      	adds	r7, #20
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr

080020e6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80020e6:	b580      	push	{r7, lr}
 80020e8:	b084      	sub	sp, #16
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020ee:	2300      	movs	r3, #0
 80020f0:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d005      	beq.n	800210a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2204      	movs	r2, #4
 8002102:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	73fb      	strb	r3, [r7, #15]
 8002108:	e029      	b.n	800215e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f022 020e 	bic.w	r2, r2, #14
 8002118:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f022 0201 	bic.w	r2, r2, #1
 8002128:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800212e:	f003 021c 	and.w	r2, r3, #28
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002136:	2101      	movs	r1, #1
 8002138:	fa01 f202 	lsl.w	r2, r1, r2
 800213c:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2201      	movs	r2, #1
 8002142:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2200      	movs	r2, #0
 800214a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002152:	2b00      	cmp	r3, #0
 8002154:	d003      	beq.n	800215e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	4798      	blx	r3
    }
  }
  return status;
 800215e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002160:	4618      	mov	r0, r3
 8002162:	3710      	adds	r7, #16
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}

08002168 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002176:	b2db      	uxtb	r3, r3
}
 8002178:	4618      	mov	r0, r3
 800217a:	370c      	adds	r7, #12
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr

08002184 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002184:	b480      	push	{r7}
 8002186:	b087      	sub	sp, #28
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800218e:	2300      	movs	r3, #0
 8002190:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002192:	e17f      	b.n	8002494 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	2101      	movs	r1, #1
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	fa01 f303 	lsl.w	r3, r1, r3
 80021a0:	4013      	ands	r3, r2
 80021a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	f000 8171 	beq.w	800248e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f003 0303 	and.w	r3, r3, #3
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d005      	beq.n	80021c4 <HAL_GPIO_Init+0x40>
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f003 0303 	and.w	r3, r3, #3
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	d130      	bne.n	8002226 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	005b      	lsls	r3, r3, #1
 80021ce:	2203      	movs	r2, #3
 80021d0:	fa02 f303 	lsl.w	r3, r2, r3
 80021d4:	43db      	mvns	r3, r3
 80021d6:	693a      	ldr	r2, [r7, #16]
 80021d8:	4013      	ands	r3, r2
 80021da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	68da      	ldr	r2, [r3, #12]
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	005b      	lsls	r3, r3, #1
 80021e4:	fa02 f303 	lsl.w	r3, r2, r3
 80021e8:	693a      	ldr	r2, [r7, #16]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	693a      	ldr	r2, [r7, #16]
 80021f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80021fa:	2201      	movs	r2, #1
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002202:	43db      	mvns	r3, r3
 8002204:	693a      	ldr	r2, [r7, #16]
 8002206:	4013      	ands	r3, r2
 8002208:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	091b      	lsrs	r3, r3, #4
 8002210:	f003 0201 	and.w	r2, r3, #1
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	fa02 f303 	lsl.w	r3, r2, r3
 800221a:	693a      	ldr	r2, [r7, #16]
 800221c:	4313      	orrs	r3, r2
 800221e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	693a      	ldr	r2, [r7, #16]
 8002224:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	f003 0303 	and.w	r3, r3, #3
 800222e:	2b03      	cmp	r3, #3
 8002230:	d118      	bne.n	8002264 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002236:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002238:	2201      	movs	r2, #1
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	fa02 f303 	lsl.w	r3, r2, r3
 8002240:	43db      	mvns	r3, r3
 8002242:	693a      	ldr	r2, [r7, #16]
 8002244:	4013      	ands	r3, r2
 8002246:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	08db      	lsrs	r3, r3, #3
 800224e:	f003 0201 	and.w	r2, r3, #1
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	fa02 f303 	lsl.w	r3, r2, r3
 8002258:	693a      	ldr	r2, [r7, #16]
 800225a:	4313      	orrs	r3, r2
 800225c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	693a      	ldr	r2, [r7, #16]
 8002262:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f003 0303 	and.w	r3, r3, #3
 800226c:	2b03      	cmp	r3, #3
 800226e:	d017      	beq.n	80022a0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	005b      	lsls	r3, r3, #1
 800227a:	2203      	movs	r2, #3
 800227c:	fa02 f303 	lsl.w	r3, r2, r3
 8002280:	43db      	mvns	r3, r3
 8002282:	693a      	ldr	r2, [r7, #16]
 8002284:	4013      	ands	r3, r2
 8002286:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	689a      	ldr	r2, [r3, #8]
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	005b      	lsls	r3, r3, #1
 8002290:	fa02 f303 	lsl.w	r3, r2, r3
 8002294:	693a      	ldr	r2, [r7, #16]
 8002296:	4313      	orrs	r3, r2
 8002298:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	693a      	ldr	r2, [r7, #16]
 800229e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f003 0303 	and.w	r3, r3, #3
 80022a8:	2b02      	cmp	r3, #2
 80022aa:	d123      	bne.n	80022f4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	08da      	lsrs	r2, r3, #3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	3208      	adds	r2, #8
 80022b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	f003 0307 	and.w	r3, r3, #7
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	220f      	movs	r2, #15
 80022c4:	fa02 f303 	lsl.w	r3, r2, r3
 80022c8:	43db      	mvns	r3, r3
 80022ca:	693a      	ldr	r2, [r7, #16]
 80022cc:	4013      	ands	r3, r2
 80022ce:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	691a      	ldr	r2, [r3, #16]
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	f003 0307 	and.w	r3, r3, #7
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	fa02 f303 	lsl.w	r3, r2, r3
 80022e0:	693a      	ldr	r2, [r7, #16]
 80022e2:	4313      	orrs	r3, r2
 80022e4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	08da      	lsrs	r2, r3, #3
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	3208      	adds	r2, #8
 80022ee:	6939      	ldr	r1, [r7, #16]
 80022f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	005b      	lsls	r3, r3, #1
 80022fe:	2203      	movs	r2, #3
 8002300:	fa02 f303 	lsl.w	r3, r2, r3
 8002304:	43db      	mvns	r3, r3
 8002306:	693a      	ldr	r2, [r7, #16]
 8002308:	4013      	ands	r3, r2
 800230a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f003 0203 	and.w	r2, r3, #3
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	005b      	lsls	r3, r3, #1
 8002318:	fa02 f303 	lsl.w	r3, r2, r3
 800231c:	693a      	ldr	r2, [r7, #16]
 800231e:	4313      	orrs	r3, r2
 8002320:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	693a      	ldr	r2, [r7, #16]
 8002326:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002330:	2b00      	cmp	r3, #0
 8002332:	f000 80ac 	beq.w	800248e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002336:	4b5f      	ldr	r3, [pc, #380]	; (80024b4 <HAL_GPIO_Init+0x330>)
 8002338:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800233a:	4a5e      	ldr	r2, [pc, #376]	; (80024b4 <HAL_GPIO_Init+0x330>)
 800233c:	f043 0301 	orr.w	r3, r3, #1
 8002340:	6613      	str	r3, [r2, #96]	; 0x60
 8002342:	4b5c      	ldr	r3, [pc, #368]	; (80024b4 <HAL_GPIO_Init+0x330>)
 8002344:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002346:	f003 0301 	and.w	r3, r3, #1
 800234a:	60bb      	str	r3, [r7, #8]
 800234c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800234e:	4a5a      	ldr	r2, [pc, #360]	; (80024b8 <HAL_GPIO_Init+0x334>)
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	089b      	lsrs	r3, r3, #2
 8002354:	3302      	adds	r3, #2
 8002356:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800235a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	f003 0303 	and.w	r3, r3, #3
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	220f      	movs	r2, #15
 8002366:	fa02 f303 	lsl.w	r3, r2, r3
 800236a:	43db      	mvns	r3, r3
 800236c:	693a      	ldr	r2, [r7, #16]
 800236e:	4013      	ands	r3, r2
 8002370:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002378:	d025      	beq.n	80023c6 <HAL_GPIO_Init+0x242>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4a4f      	ldr	r2, [pc, #316]	; (80024bc <HAL_GPIO_Init+0x338>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d01f      	beq.n	80023c2 <HAL_GPIO_Init+0x23e>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4a4e      	ldr	r2, [pc, #312]	; (80024c0 <HAL_GPIO_Init+0x33c>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d019      	beq.n	80023be <HAL_GPIO_Init+0x23a>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4a4d      	ldr	r2, [pc, #308]	; (80024c4 <HAL_GPIO_Init+0x340>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d013      	beq.n	80023ba <HAL_GPIO_Init+0x236>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4a4c      	ldr	r2, [pc, #304]	; (80024c8 <HAL_GPIO_Init+0x344>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d00d      	beq.n	80023b6 <HAL_GPIO_Init+0x232>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4a4b      	ldr	r2, [pc, #300]	; (80024cc <HAL_GPIO_Init+0x348>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d007      	beq.n	80023b2 <HAL_GPIO_Init+0x22e>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4a4a      	ldr	r2, [pc, #296]	; (80024d0 <HAL_GPIO_Init+0x34c>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d101      	bne.n	80023ae <HAL_GPIO_Init+0x22a>
 80023aa:	2306      	movs	r3, #6
 80023ac:	e00c      	b.n	80023c8 <HAL_GPIO_Init+0x244>
 80023ae:	2307      	movs	r3, #7
 80023b0:	e00a      	b.n	80023c8 <HAL_GPIO_Init+0x244>
 80023b2:	2305      	movs	r3, #5
 80023b4:	e008      	b.n	80023c8 <HAL_GPIO_Init+0x244>
 80023b6:	2304      	movs	r3, #4
 80023b8:	e006      	b.n	80023c8 <HAL_GPIO_Init+0x244>
 80023ba:	2303      	movs	r3, #3
 80023bc:	e004      	b.n	80023c8 <HAL_GPIO_Init+0x244>
 80023be:	2302      	movs	r3, #2
 80023c0:	e002      	b.n	80023c8 <HAL_GPIO_Init+0x244>
 80023c2:	2301      	movs	r3, #1
 80023c4:	e000      	b.n	80023c8 <HAL_GPIO_Init+0x244>
 80023c6:	2300      	movs	r3, #0
 80023c8:	697a      	ldr	r2, [r7, #20]
 80023ca:	f002 0203 	and.w	r2, r2, #3
 80023ce:	0092      	lsls	r2, r2, #2
 80023d0:	4093      	lsls	r3, r2
 80023d2:	693a      	ldr	r2, [r7, #16]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80023d8:	4937      	ldr	r1, [pc, #220]	; (80024b8 <HAL_GPIO_Init+0x334>)
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	089b      	lsrs	r3, r3, #2
 80023de:	3302      	adds	r3, #2
 80023e0:	693a      	ldr	r2, [r7, #16]
 80023e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80023e6:	4b3b      	ldr	r3, [pc, #236]	; (80024d4 <HAL_GPIO_Init+0x350>)
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	43db      	mvns	r3, r3
 80023f0:	693a      	ldr	r2, [r7, #16]
 80023f2:	4013      	ands	r3, r2
 80023f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d003      	beq.n	800240a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002402:	693a      	ldr	r2, [r7, #16]
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	4313      	orrs	r3, r2
 8002408:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800240a:	4a32      	ldr	r2, [pc, #200]	; (80024d4 <HAL_GPIO_Init+0x350>)
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002410:	4b30      	ldr	r3, [pc, #192]	; (80024d4 <HAL_GPIO_Init+0x350>)
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	43db      	mvns	r3, r3
 800241a:	693a      	ldr	r2, [r7, #16]
 800241c:	4013      	ands	r3, r2
 800241e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002428:	2b00      	cmp	r3, #0
 800242a:	d003      	beq.n	8002434 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800242c:	693a      	ldr	r2, [r7, #16]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	4313      	orrs	r3, r2
 8002432:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002434:	4a27      	ldr	r2, [pc, #156]	; (80024d4 <HAL_GPIO_Init+0x350>)
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800243a:	4b26      	ldr	r3, [pc, #152]	; (80024d4 <HAL_GPIO_Init+0x350>)
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	43db      	mvns	r3, r3
 8002444:	693a      	ldr	r2, [r7, #16]
 8002446:	4013      	ands	r3, r2
 8002448:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d003      	beq.n	800245e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002456:	693a      	ldr	r2, [r7, #16]
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	4313      	orrs	r3, r2
 800245c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800245e:	4a1d      	ldr	r2, [pc, #116]	; (80024d4 <HAL_GPIO_Init+0x350>)
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002464:	4b1b      	ldr	r3, [pc, #108]	; (80024d4 <HAL_GPIO_Init+0x350>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	43db      	mvns	r3, r3
 800246e:	693a      	ldr	r2, [r7, #16]
 8002470:	4013      	ands	r3, r2
 8002472:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800247c:	2b00      	cmp	r3, #0
 800247e:	d003      	beq.n	8002488 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002480:	693a      	ldr	r2, [r7, #16]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	4313      	orrs	r3, r2
 8002486:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002488:	4a12      	ldr	r2, [pc, #72]	; (80024d4 <HAL_GPIO_Init+0x350>)
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	3301      	adds	r3, #1
 8002492:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	fa22 f303 	lsr.w	r3, r2, r3
 800249e:	2b00      	cmp	r3, #0
 80024a0:	f47f ae78 	bne.w	8002194 <HAL_GPIO_Init+0x10>
  }
}
 80024a4:	bf00      	nop
 80024a6:	bf00      	nop
 80024a8:	371c      	adds	r7, #28
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr
 80024b2:	bf00      	nop
 80024b4:	40021000 	.word	0x40021000
 80024b8:	40010000 	.word	0x40010000
 80024bc:	48000400 	.word	0x48000400
 80024c0:	48000800 	.word	0x48000800
 80024c4:	48000c00 	.word	0x48000c00
 80024c8:	48001000 	.word	0x48001000
 80024cc:	48001400 	.word	0x48001400
 80024d0:	48001800 	.word	0x48001800
 80024d4:	40010400 	.word	0x40010400

080024d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	460b      	mov	r3, r1
 80024e2:	807b      	strh	r3, [r7, #2]
 80024e4:	4613      	mov	r3, r2
 80024e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024e8:	787b      	ldrb	r3, [r7, #1]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d003      	beq.n	80024f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80024ee:	887a      	ldrh	r2, [r7, #2]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80024f4:	e002      	b.n	80024fc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80024f6:	887a      	ldrh	r2, [r7, #2]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80024fc:	bf00      	nop
 80024fe:	370c      	adds	r7, #12
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr

08002508 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002508:	b480      	push	{r7}
 800250a:	b085      	sub	sp, #20
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	460b      	mov	r3, r1
 8002512:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	695b      	ldr	r3, [r3, #20]
 8002518:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800251a:	887a      	ldrh	r2, [r7, #2]
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	4013      	ands	r3, r2
 8002520:	041a      	lsls	r2, r3, #16
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	43d9      	mvns	r1, r3
 8002526:	887b      	ldrh	r3, [r7, #2]
 8002528:	400b      	ands	r3, r1
 800252a:	431a      	orrs	r2, r3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	619a      	str	r2, [r3, #24]
}
 8002530:	bf00      	nop
 8002532:	3714      	adds	r7, #20
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr

0800253c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b082      	sub	sp, #8
 8002540:	af00      	add	r7, sp, #0
 8002542:	4603      	mov	r3, r0
 8002544:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002546:	4b08      	ldr	r3, [pc, #32]	; (8002568 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002548:	695a      	ldr	r2, [r3, #20]
 800254a:	88fb      	ldrh	r3, [r7, #6]
 800254c:	4013      	ands	r3, r2
 800254e:	2b00      	cmp	r3, #0
 8002550:	d006      	beq.n	8002560 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002552:	4a05      	ldr	r2, [pc, #20]	; (8002568 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002554:	88fb      	ldrh	r3, [r7, #6]
 8002556:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002558:	88fb      	ldrh	r3, [r7, #6]
 800255a:	4618      	mov	r0, r3
 800255c:	f7fe fe3e 	bl	80011dc <HAL_GPIO_EXTI_Callback>
  }
}
 8002560:	bf00      	nop
 8002562:	3708      	adds	r7, #8
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}
 8002568:	40010400 	.word	0x40010400

0800256c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d101      	bne.n	800257e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e08d      	b.n	800269a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002584:	b2db      	uxtb	r3, r3
 8002586:	2b00      	cmp	r3, #0
 8002588:	d106      	bne.n	8002598 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2200      	movs	r2, #0
 800258e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f7ff f940 	bl	8001818 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2224      	movs	r2, #36	; 0x24
 800259c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f022 0201 	bic.w	r2, r2, #1
 80025ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	685a      	ldr	r2, [r3, #4]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80025bc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	689a      	ldr	r2, [r3, #8]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80025cc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	68db      	ldr	r3, [r3, #12]
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d107      	bne.n	80025e6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	689a      	ldr	r2, [r3, #8]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80025e2:	609a      	str	r2, [r3, #8]
 80025e4:	e006      	b.n	80025f4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	689a      	ldr	r2, [r3, #8]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80025f2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	2b02      	cmp	r3, #2
 80025fa:	d108      	bne.n	800260e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	685a      	ldr	r2, [r3, #4]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800260a:	605a      	str	r2, [r3, #4]
 800260c:	e007      	b.n	800261e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	685a      	ldr	r2, [r3, #4]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800261c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	6812      	ldr	r2, [r2, #0]
 8002628:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800262c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002630:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	68da      	ldr	r2, [r3, #12]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002640:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	691a      	ldr	r2, [r3, #16]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	695b      	ldr	r3, [r3, #20]
 800264a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	699b      	ldr	r3, [r3, #24]
 8002652:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	430a      	orrs	r2, r1
 800265a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	69d9      	ldr	r1, [r3, #28]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6a1a      	ldr	r2, [r3, #32]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	430a      	orrs	r2, r1
 800266a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f042 0201 	orr.w	r2, r2, #1
 800267a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2200      	movs	r2, #0
 8002680:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2220      	movs	r2, #32
 8002686:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2200      	movs	r2, #0
 800268e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2200      	movs	r2, #0
 8002694:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002698:	2300      	movs	r3, #0
}
 800269a:	4618      	mov	r0, r3
 800269c:	3708      	adds	r7, #8
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
	...

080026a4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b088      	sub	sp, #32
 80026a8:	af02      	add	r7, sp, #8
 80026aa:	60f8      	str	r0, [r7, #12]
 80026ac:	4608      	mov	r0, r1
 80026ae:	4611      	mov	r1, r2
 80026b0:	461a      	mov	r2, r3
 80026b2:	4603      	mov	r3, r0
 80026b4:	817b      	strh	r3, [r7, #10]
 80026b6:	460b      	mov	r3, r1
 80026b8:	813b      	strh	r3, [r7, #8]
 80026ba:	4613      	mov	r3, r2
 80026bc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	2b20      	cmp	r3, #32
 80026c8:	f040 80f9 	bne.w	80028be <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80026cc:	6a3b      	ldr	r3, [r7, #32]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d002      	beq.n	80026d8 <HAL_I2C_Mem_Write+0x34>
 80026d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d105      	bne.n	80026e4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026de:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e0ed      	b.n	80028c0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d101      	bne.n	80026f2 <HAL_I2C_Mem_Write+0x4e>
 80026ee:	2302      	movs	r3, #2
 80026f0:	e0e6      	b.n	80028c0 <HAL_I2C_Mem_Write+0x21c>
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2201      	movs	r2, #1
 80026f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80026fa:	f7ff fb67 	bl	8001dcc <HAL_GetTick>
 80026fe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	9300      	str	r3, [sp, #0]
 8002704:	2319      	movs	r3, #25
 8002706:	2201      	movs	r2, #1
 8002708:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800270c:	68f8      	ldr	r0, [r7, #12]
 800270e:	f001 fd48 	bl	80041a2 <I2C_WaitOnFlagUntilTimeout>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d001      	beq.n	800271c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	e0d1      	b.n	80028c0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	2221      	movs	r2, #33	; 0x21
 8002720:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2240      	movs	r2, #64	; 0x40
 8002728:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2200      	movs	r2, #0
 8002730:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	6a3a      	ldr	r2, [r7, #32]
 8002736:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800273c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2200      	movs	r2, #0
 8002742:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002744:	88f8      	ldrh	r0, [r7, #6]
 8002746:	893a      	ldrh	r2, [r7, #8]
 8002748:	8979      	ldrh	r1, [r7, #10]
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	9301      	str	r3, [sp, #4]
 800274e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002750:	9300      	str	r3, [sp, #0]
 8002752:	4603      	mov	r3, r0
 8002754:	68f8      	ldr	r0, [r7, #12]
 8002756:	f000 ffd7 	bl	8003708 <I2C_RequestMemoryWrite>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	d005      	beq.n	800276c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2200      	movs	r2, #0
 8002764:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	e0a9      	b.n	80028c0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002770:	b29b      	uxth	r3, r3
 8002772:	2bff      	cmp	r3, #255	; 0xff
 8002774:	d90e      	bls.n	8002794 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	22ff      	movs	r2, #255	; 0xff
 800277a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002780:	b2da      	uxtb	r2, r3
 8002782:	8979      	ldrh	r1, [r7, #10]
 8002784:	2300      	movs	r3, #0
 8002786:	9300      	str	r3, [sp, #0]
 8002788:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800278c:	68f8      	ldr	r0, [r7, #12]
 800278e:	f001 fec1 	bl	8004514 <I2C_TransferConfig>
 8002792:	e00f      	b.n	80027b4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002798:	b29a      	uxth	r2, r3
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027a2:	b2da      	uxtb	r2, r3
 80027a4:	8979      	ldrh	r1, [r7, #10]
 80027a6:	2300      	movs	r3, #0
 80027a8:	9300      	str	r3, [sp, #0]
 80027aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027ae:	68f8      	ldr	r0, [r7, #12]
 80027b0:	f001 feb0 	bl	8004514 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027b4:	697a      	ldr	r2, [r7, #20]
 80027b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80027b8:	68f8      	ldr	r0, [r7, #12]
 80027ba:	f001 fd41 	bl	8004240 <I2C_WaitOnTXISFlagUntilTimeout>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d001      	beq.n	80027c8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e07b      	b.n	80028c0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027cc:	781a      	ldrb	r2, [r3, #0]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d8:	1c5a      	adds	r2, r3, #1
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027e2:	b29b      	uxth	r3, r3
 80027e4:	3b01      	subs	r3, #1
 80027e6:	b29a      	uxth	r2, r3
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027f0:	3b01      	subs	r3, #1
 80027f2:	b29a      	uxth	r2, r3
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027fc:	b29b      	uxth	r3, r3
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d034      	beq.n	800286c <HAL_I2C_Mem_Write+0x1c8>
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002806:	2b00      	cmp	r3, #0
 8002808:	d130      	bne.n	800286c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	9300      	str	r3, [sp, #0]
 800280e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002810:	2200      	movs	r2, #0
 8002812:	2180      	movs	r1, #128	; 0x80
 8002814:	68f8      	ldr	r0, [r7, #12]
 8002816:	f001 fcc4 	bl	80041a2 <I2C_WaitOnFlagUntilTimeout>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d001      	beq.n	8002824 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e04d      	b.n	80028c0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002828:	b29b      	uxth	r3, r3
 800282a:	2bff      	cmp	r3, #255	; 0xff
 800282c:	d90e      	bls.n	800284c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	22ff      	movs	r2, #255	; 0xff
 8002832:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002838:	b2da      	uxtb	r2, r3
 800283a:	8979      	ldrh	r1, [r7, #10]
 800283c:	2300      	movs	r3, #0
 800283e:	9300      	str	r3, [sp, #0]
 8002840:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002844:	68f8      	ldr	r0, [r7, #12]
 8002846:	f001 fe65 	bl	8004514 <I2C_TransferConfig>
 800284a:	e00f      	b.n	800286c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002850:	b29a      	uxth	r2, r3
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800285a:	b2da      	uxtb	r2, r3
 800285c:	8979      	ldrh	r1, [r7, #10]
 800285e:	2300      	movs	r3, #0
 8002860:	9300      	str	r3, [sp, #0]
 8002862:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002866:	68f8      	ldr	r0, [r7, #12]
 8002868:	f001 fe54 	bl	8004514 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002870:	b29b      	uxth	r3, r3
 8002872:	2b00      	cmp	r3, #0
 8002874:	d19e      	bne.n	80027b4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002876:	697a      	ldr	r2, [r7, #20]
 8002878:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800287a:	68f8      	ldr	r0, [r7, #12]
 800287c:	f001 fd27 	bl	80042ce <I2C_WaitOnSTOPFlagUntilTimeout>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d001      	beq.n	800288a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e01a      	b.n	80028c0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	2220      	movs	r2, #32
 8002890:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	6859      	ldr	r1, [r3, #4]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	4b0a      	ldr	r3, [pc, #40]	; (80028c8 <HAL_I2C_Mem_Write+0x224>)
 800289e:	400b      	ands	r3, r1
 80028a0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2220      	movs	r2, #32
 80028a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2200      	movs	r2, #0
 80028ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2200      	movs	r2, #0
 80028b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80028ba:	2300      	movs	r3, #0
 80028bc:	e000      	b.n	80028c0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80028be:	2302      	movs	r3, #2
  }
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3718      	adds	r7, #24
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	fe00e800 	.word	0xfe00e800

080028cc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b088      	sub	sp, #32
 80028d0:	af02      	add	r7, sp, #8
 80028d2:	60f8      	str	r0, [r7, #12]
 80028d4:	4608      	mov	r0, r1
 80028d6:	4611      	mov	r1, r2
 80028d8:	461a      	mov	r2, r3
 80028da:	4603      	mov	r3, r0
 80028dc:	817b      	strh	r3, [r7, #10]
 80028de:	460b      	mov	r3, r1
 80028e0:	813b      	strh	r3, [r7, #8]
 80028e2:	4613      	mov	r3, r2
 80028e4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	2b20      	cmp	r3, #32
 80028f0:	f040 80fd 	bne.w	8002aee <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80028f4:	6a3b      	ldr	r3, [r7, #32]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d002      	beq.n	8002900 <HAL_I2C_Mem_Read+0x34>
 80028fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d105      	bne.n	800290c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002906:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e0f1      	b.n	8002af0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002912:	2b01      	cmp	r3, #1
 8002914:	d101      	bne.n	800291a <HAL_I2C_Mem_Read+0x4e>
 8002916:	2302      	movs	r3, #2
 8002918:	e0ea      	b.n	8002af0 <HAL_I2C_Mem_Read+0x224>
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2201      	movs	r2, #1
 800291e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002922:	f7ff fa53 	bl	8001dcc <HAL_GetTick>
 8002926:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	9300      	str	r3, [sp, #0]
 800292c:	2319      	movs	r3, #25
 800292e:	2201      	movs	r2, #1
 8002930:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002934:	68f8      	ldr	r0, [r7, #12]
 8002936:	f001 fc34 	bl	80041a2 <I2C_WaitOnFlagUntilTimeout>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	d001      	beq.n	8002944 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e0d5      	b.n	8002af0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2222      	movs	r2, #34	; 0x22
 8002948:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2240      	movs	r2, #64	; 0x40
 8002950:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2200      	movs	r2, #0
 8002958:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	6a3a      	ldr	r2, [r7, #32]
 800295e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002964:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2200      	movs	r2, #0
 800296a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800296c:	88f8      	ldrh	r0, [r7, #6]
 800296e:	893a      	ldrh	r2, [r7, #8]
 8002970:	8979      	ldrh	r1, [r7, #10]
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	9301      	str	r3, [sp, #4]
 8002976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002978:	9300      	str	r3, [sp, #0]
 800297a:	4603      	mov	r3, r0
 800297c:	68f8      	ldr	r0, [r7, #12]
 800297e:	f000 ff17 	bl	80037b0 <I2C_RequestMemoryRead>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d005      	beq.n	8002994 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2200      	movs	r2, #0
 800298c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e0ad      	b.n	8002af0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002998:	b29b      	uxth	r3, r3
 800299a:	2bff      	cmp	r3, #255	; 0xff
 800299c:	d90e      	bls.n	80029bc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	22ff      	movs	r2, #255	; 0xff
 80029a2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029a8:	b2da      	uxtb	r2, r3
 80029aa:	8979      	ldrh	r1, [r7, #10]
 80029ac:	4b52      	ldr	r3, [pc, #328]	; (8002af8 <HAL_I2C_Mem_Read+0x22c>)
 80029ae:	9300      	str	r3, [sp, #0]
 80029b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80029b4:	68f8      	ldr	r0, [r7, #12]
 80029b6:	f001 fdad 	bl	8004514 <I2C_TransferConfig>
 80029ba:	e00f      	b.n	80029dc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029c0:	b29a      	uxth	r2, r3
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029ca:	b2da      	uxtb	r2, r3
 80029cc:	8979      	ldrh	r1, [r7, #10]
 80029ce:	4b4a      	ldr	r3, [pc, #296]	; (8002af8 <HAL_I2C_Mem_Read+0x22c>)
 80029d0:	9300      	str	r3, [sp, #0]
 80029d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029d6:	68f8      	ldr	r0, [r7, #12]
 80029d8:	f001 fd9c 	bl	8004514 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	9300      	str	r3, [sp, #0]
 80029e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029e2:	2200      	movs	r2, #0
 80029e4:	2104      	movs	r1, #4
 80029e6:	68f8      	ldr	r0, [r7, #12]
 80029e8:	f001 fbdb 	bl	80041a2 <I2C_WaitOnFlagUntilTimeout>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d001      	beq.n	80029f6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e07c      	b.n	8002af0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a00:	b2d2      	uxtb	r2, r2
 8002a02:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a08:	1c5a      	adds	r2, r3, #1
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a12:	3b01      	subs	r3, #1
 8002a14:	b29a      	uxth	r2, r3
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a1e:	b29b      	uxth	r3, r3
 8002a20:	3b01      	subs	r3, #1
 8002a22:	b29a      	uxth	r2, r3
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a2c:	b29b      	uxth	r3, r3
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d034      	beq.n	8002a9c <HAL_I2C_Mem_Read+0x1d0>
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d130      	bne.n	8002a9c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	9300      	str	r3, [sp, #0]
 8002a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a40:	2200      	movs	r2, #0
 8002a42:	2180      	movs	r1, #128	; 0x80
 8002a44:	68f8      	ldr	r0, [r7, #12]
 8002a46:	f001 fbac 	bl	80041a2 <I2C_WaitOnFlagUntilTimeout>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d001      	beq.n	8002a54 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	e04d      	b.n	8002af0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	2bff      	cmp	r3, #255	; 0xff
 8002a5c:	d90e      	bls.n	8002a7c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	22ff      	movs	r2, #255	; 0xff
 8002a62:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a68:	b2da      	uxtb	r2, r3
 8002a6a:	8979      	ldrh	r1, [r7, #10]
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	9300      	str	r3, [sp, #0]
 8002a70:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a74:	68f8      	ldr	r0, [r7, #12]
 8002a76:	f001 fd4d 	bl	8004514 <I2C_TransferConfig>
 8002a7a:	e00f      	b.n	8002a9c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a80:	b29a      	uxth	r2, r3
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a8a:	b2da      	uxtb	r2, r3
 8002a8c:	8979      	ldrh	r1, [r7, #10]
 8002a8e:	2300      	movs	r3, #0
 8002a90:	9300      	str	r3, [sp, #0]
 8002a92:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a96:	68f8      	ldr	r0, [r7, #12]
 8002a98:	f001 fd3c 	bl	8004514 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aa0:	b29b      	uxth	r3, r3
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d19a      	bne.n	80029dc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002aa6:	697a      	ldr	r2, [r7, #20]
 8002aa8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002aaa:	68f8      	ldr	r0, [r7, #12]
 8002aac:	f001 fc0f 	bl	80042ce <I2C_WaitOnSTOPFlagUntilTimeout>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d001      	beq.n	8002aba <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e01a      	b.n	8002af0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	2220      	movs	r2, #32
 8002ac0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	6859      	ldr	r1, [r3, #4]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	4b0b      	ldr	r3, [pc, #44]	; (8002afc <HAL_I2C_Mem_Read+0x230>)
 8002ace:	400b      	ands	r3, r1
 8002ad0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2220      	movs	r2, #32
 8002ad6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2200      	movs	r2, #0
 8002ade:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002aea:	2300      	movs	r3, #0
 8002aec:	e000      	b.n	8002af0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002aee:	2302      	movs	r3, #2
  }
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3718      	adds	r7, #24
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	80002400 	.word	0x80002400
 8002afc:	fe00e800 	.word	0xfe00e800

08002b00 <HAL_I2C_Mem_Read_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                      uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b086      	sub	sp, #24
 8002b04:	af02      	add	r7, sp, #8
 8002b06:	60f8      	str	r0, [r7, #12]
 8002b08:	4608      	mov	r0, r1
 8002b0a:	4611      	mov	r1, r2
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	4603      	mov	r3, r0
 8002b10:	817b      	strh	r3, [r7, #10]
 8002b12:	460b      	mov	r3, r1
 8002b14:	813b      	strh	r3, [r7, #8]
 8002b16:	4613      	mov	r3, r2
 8002b18:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	2b20      	cmp	r3, #32
 8002b24:	d166      	bne.n	8002bf4 <HAL_I2C_Mem_Read_IT+0xf4>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b26:	69bb      	ldr	r3, [r7, #24]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d002      	beq.n	8002b32 <HAL_I2C_Mem_Read_IT+0x32>
 8002b2c:	8bbb      	ldrh	r3, [r7, #28]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d105      	bne.n	8002b3e <HAL_I2C_Mem_Read_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b38:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e05b      	b.n	8002bf6 <HAL_I2C_Mem_Read_IT+0xf6>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	699b      	ldr	r3, [r3, #24]
 8002b44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b4c:	d101      	bne.n	8002b52 <HAL_I2C_Mem_Read_IT+0x52>
    {
      return HAL_BUSY;
 8002b4e:	2302      	movs	r3, #2
 8002b50:	e051      	b.n	8002bf6 <HAL_I2C_Mem_Read_IT+0xf6>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d101      	bne.n	8002b60 <HAL_I2C_Mem_Read_IT+0x60>
 8002b5c:	2302      	movs	r3, #2
 8002b5e:	e04a      	b.n	8002bf6 <HAL_I2C_Mem_Read_IT+0xf6>
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2201      	movs	r2, #1
 8002b64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2222      	movs	r2, #34	; 0x22
 8002b6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2240      	movs	r2, #64	; 0x40
 8002b74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	69ba      	ldr	r2, [r7, #24]
 8002b82:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	8bba      	ldrh	r2, [r7, #28]
 8002b88:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	4a1c      	ldr	r2, [pc, #112]	; (8002c00 <HAL_I2C_Mem_Read_IT+0x100>)
 8002b8e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	4a1c      	ldr	r2, [pc, #112]	; (8002c04 <HAL_I2C_Mem_Read_IT+0x104>)
 8002b94:	635a      	str	r2, [r3, #52]	; 0x34
    hi2c->Devaddress  = DevAddress;
 8002b96:	897a      	ldrh	r2, [r7, #10]
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002b9c:	88fb      	ldrh	r3, [r7, #6]
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d109      	bne.n	8002bb6 <HAL_I2C_Mem_Read_IT+0xb6>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002ba2:	893b      	ldrh	r3, [r7, #8]
 8002ba4:	b2da      	uxtb	r2, r3
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	f04f 32ff 	mov.w	r2, #4294967295
 8002bb2:	651a      	str	r2, [r3, #80]	; 0x50
 8002bb4:	e00b      	b.n	8002bce <HAL_I2C_Mem_Read_IT+0xce>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002bb6:	893b      	ldrh	r3, [r7, #8]
 8002bb8:	0a1b      	lsrs	r3, r3, #8
 8002bba:	b29b      	uxth	r3, r3
 8002bbc:	b2da      	uxtb	r2, r3
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 8002bc4:	893b      	ldrh	r3, [r7, #8]
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	461a      	mov	r2, r3
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002bce:	88fb      	ldrh	r3, [r7, #6]
 8002bd0:	b2da      	uxtb	r2, r3
 8002bd2:	8979      	ldrh	r1, [r7, #10]
 8002bd4:	4b0c      	ldr	r3, [pc, #48]	; (8002c08 <HAL_I2C_Mem_Read_IT+0x108>)
 8002bd6:	9300      	str	r3, [sp, #0]
 8002bd8:	2300      	movs	r3, #0
 8002bda:	68f8      	ldr	r0, [r7, #12]
 8002bdc:	f001 fc9a 	bl	8004514 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2200      	movs	r2, #0
 8002be4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002be8:	2101      	movs	r1, #1
 8002bea:	68f8      	ldr	r0, [r7, #12]
 8002bec:	f001 fcc4 	bl	8004578 <I2C_Enable_IRQ>

    return HAL_OK;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	e000      	b.n	8002bf6 <HAL_I2C_Mem_Read_IT+0xf6>
  }
  else
  {
    return HAL_BUSY;
 8002bf4:	2302      	movs	r3, #2
  }
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3710      	adds	r7, #16
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	ffff0000 	.word	0xffff0000
 8002c04:	08002cfd 	.word	0x08002cfd
 8002c08:	80002000 	.word	0x80002000

08002c0c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b084      	sub	sp, #16
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	699b      	ldr	r3, [r3, #24]
 8002c1a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d005      	beq.n	8002c38 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c30:	68ba      	ldr	r2, [r7, #8]
 8002c32:	68f9      	ldr	r1, [r7, #12]
 8002c34:	6878      	ldr	r0, [r7, #4]
 8002c36:	4798      	blx	r3
  }
}
 8002c38:	bf00      	nop
 8002c3a:	3710      	adds	r7, #16
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}

08002c40 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b083      	sub	sp, #12
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002c48:	bf00      	nop
 8002c4a:	370c      	adds	r7, #12
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr

08002c54 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b083      	sub	sp, #12
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002c5c:	bf00      	nop
 8002c5e:	370c      	adds	r7, #12
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr

08002c68 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002c70:	bf00      	nop
 8002c72:	370c      	adds	r7, #12
 8002c74:	46bd      	mov	sp, r7
 8002c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7a:	4770      	bx	lr

08002c7c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b083      	sub	sp, #12
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002c84:	bf00      	nop
 8002c86:	370c      	adds	r7, #12
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr

08002c90 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
 8002c98:	460b      	mov	r3, r1
 8002c9a:	70fb      	strb	r3, [r7, #3]
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002ca0:	bf00      	nop
 8002ca2:	370c      	adds	r7, #12
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr

08002cac <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b083      	sub	sp, #12
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8002cb4:	bf00      	nop
 8002cb6:	370c      	adds	r7, #12
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr

08002cc0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b083      	sub	sp, #12
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002cc8:	bf00      	nop
 8002cca:	370c      	adds	r7, #12
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr

08002cd4 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b083      	sub	sp, #12
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002cdc:	bf00      	nop
 8002cde:	370c      	adds	r7, #12
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr

08002ce8 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002cf0:	bf00      	nop
 8002cf2:	370c      	adds	r7, #12
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr

08002cfc <I2C_Mem_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                        uint32_t ITSources)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b088      	sub	sp, #32
 8002d00:	af02      	add	r7, sp, #8
 8002d02:	60f8      	str	r0, [r7, #12]
 8002d04:	60b9      	str	r1, [r7, #8]
 8002d06:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8002d08:	4b8d      	ldr	r3, [pc, #564]	; (8002f40 <I2C_Mem_ISR_IT+0x244>)
 8002d0a:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d101      	bne.n	8002d1e <I2C_Mem_ISR_IT+0x22>
 8002d1a:	2302      	movs	r3, #2
 8002d1c:	e10c      	b.n	8002f38 <I2C_Mem_ISR_IT+0x23c>
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2201      	movs	r2, #1
 8002d22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	f003 0310 	and.w	r3, r3, #16
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d012      	beq.n	8002d56 <I2C_Mem_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d00d      	beq.n	8002d56 <I2C_Mem_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	2210      	movs	r2, #16
 8002d40:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d46:	f043 0204 	orr.w	r2, r3, #4
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002d4e:	68f8      	ldr	r0, [r7, #12]
 8002d50:	f001 f9e5 	bl	800411e <I2C_Flush_TXDR>
 8002d54:	e0dd      	b.n	8002f12 <I2C_Mem_ISR_IT+0x216>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	f003 0304 	and.w	r3, r3, #4
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d022      	beq.n	8002da6 <I2C_Mem_ISR_IT+0xaa>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d01d      	beq.n	8002da6 <I2C_Mem_ISR_IT+0xaa>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	f023 0304 	bic.w	r3, r3, #4
 8002d70:	613b      	str	r3, [r7, #16]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7c:	b2d2      	uxtb	r2, r2
 8002d7e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d84:	1c5a      	adds	r2, r3, #1
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d8e:	3b01      	subs	r3, #1
 8002d90:	b29a      	uxth	r2, r3
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d9a:	b29b      	uxth	r3, r3
 8002d9c:	3b01      	subs	r3, #1
 8002d9e:	b29a      	uxth	r2, r3
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002da4:	e0b5      	b.n	8002f12 <I2C_Mem_ISR_IT+0x216>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	f003 0302 	and.w	r3, r3, #2
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d02c      	beq.n	8002e0a <I2C_Mem_ISR_IT+0x10e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d027      	beq.n	8002e0a <I2C_Mem_ISR_IT+0x10e>
  {
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dc2:	d118      	bne.n	8002df6 <I2C_Mem_ISR_IT+0xfa>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc8:	781a      	ldrb	r2, [r3, #0]
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd4:	1c5a      	adds	r2, r3, #1
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dde:	3b01      	subs	r3, #1
 8002de0:	b29a      	uxth	r2, r3
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dea:	b29b      	uxth	r3, r3
 8002dec:	3b01      	subs	r3, #1
 8002dee:	b29a      	uxth	r2, r3
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 8002df4:	e08d      	b.n	8002f12 <I2C_Mem_ISR_IT+0x216>
    }
    else
    {
      /* Write LSB part of Memory Address */
      hi2c->Instance->TXDR = hi2c->Memaddress;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	68fa      	ldr	r2, [r7, #12]
 8002dfc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002dfe:	629a      	str	r2, [r3, #40]	; 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	f04f 32ff 	mov.w	r2, #4294967295
 8002e06:	651a      	str	r2, [r3, #80]	; 0x50
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 8002e08:	e083      	b.n	8002f12 <I2C_Mem_ISR_IT+0x216>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d03c      	beq.n	8002e8e <I2C_Mem_ISR_IT+0x192>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d037      	beq.n	8002e8e <I2C_Mem_ISR_IT+0x192>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e22:	b29b      	uxth	r3, r3
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d02c      	beq.n	8002e82 <I2C_Mem_ISR_IT+0x186>
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d128      	bne.n	8002e82 <I2C_Mem_ISR_IT+0x186>
    {
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	2bff      	cmp	r3, #255	; 0xff
 8002e38:	d910      	bls.n	8002e5c <I2C_Mem_ISR_IT+0x160>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	22ff      	movs	r2, #255	; 0xff
 8002e3e:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e44:	b299      	uxth	r1, r3
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e4a:	b2da      	uxtb	r2, r3
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	9300      	str	r3, [sp, #0]
 8002e50:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e54:	68f8      	ldr	r0, [r7, #12]
 8002e56:	f001 fb5d 	bl	8004514 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e5a:	e017      	b.n	8002e8c <I2C_Mem_ISR_IT+0x190>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e60:	b29a      	uxth	r2, r3
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e6a:	b299      	uxth	r1, r3
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e70:	b2da      	uxtb	r2, r3
 8002e72:	2300      	movs	r3, #0
 8002e74:	9300      	str	r3, [sp, #0]
 8002e76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e7a:	68f8      	ldr	r0, [r7, #12]
 8002e7c:	f001 fb4a 	bl	8004514 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e80:	e004      	b.n	8002e8c <I2C_Mem_ISR_IT+0x190>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002e82:	2140      	movs	r1, #64	; 0x40
 8002e84:	68f8      	ldr	r0, [r7, #12]
 8002e86:	f001 f833 	bl	8003ef0 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002e8a:	e042      	b.n	8002f12 <I2C_Mem_ISR_IT+0x216>
 8002e8c:	e041      	b.n	8002f12 <I2C_Mem_ISR_IT+0x216>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d03c      	beq.n	8002f12 <I2C_Mem_ISR_IT+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d037      	beq.n	8002f12 <I2C_Mem_ISR_IT+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002ea2:	2101      	movs	r1, #1
 8002ea4:	68f8      	ldr	r0, [r7, #12]
 8002ea6:	f001 fbeb 	bl	8004680 <I2C_Disable_IRQ>

    /* Enable ERR, TC, STOP, NACK and RXI interrupts */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002eaa:	2102      	movs	r1, #2
 8002eac:	68f8      	ldr	r0, [r7, #12]
 8002eae:	f001 fb63 	bl	8004578 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	2b22      	cmp	r3, #34	; 0x22
 8002ebc:	d101      	bne.n	8002ec2 <I2C_Mem_ISR_IT+0x1c6>
    {
      direction = I2C_GENERATE_START_READ;
 8002ebe:	4b21      	ldr	r3, [pc, #132]	; (8002f44 <I2C_Mem_ISR_IT+0x248>)
 8002ec0:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ec6:	b29b      	uxth	r3, r3
 8002ec8:	2bff      	cmp	r3, #255	; 0xff
 8002eca:	d910      	bls.n	8002eee <I2C_Mem_ISR_IT+0x1f2>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	22ff      	movs	r2, #255	; 0xff
 8002ed0:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ed6:	b299      	uxth	r1, r3
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002edc:	b2da      	uxtb	r2, r3
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	9300      	str	r3, [sp, #0]
 8002ee2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ee6:	68f8      	ldr	r0, [r7, #12]
 8002ee8:	f001 fb14 	bl	8004514 <I2C_TransferConfig>
 8002eec:	e011      	b.n	8002f12 <I2C_Mem_ISR_IT+0x216>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ef2:	b29a      	uxth	r2, r3
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002efc:	b299      	uxth	r1, r3
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f02:	b2da      	uxtb	r2, r3
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	9300      	str	r3, [sp, #0]
 8002f08:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f0c:	68f8      	ldr	r0, [r7, #12]
 8002f0e:	f001 fb01 	bl	8004514 <I2C_TransferConfig>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	f003 0320 	and.w	r3, r3, #32
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d008      	beq.n	8002f2e <I2C_Mem_ISR_IT+0x232>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d003      	beq.n	8002f2e <I2C_Mem_ISR_IT+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8002f26:	6939      	ldr	r1, [r7, #16]
 8002f28:	68f8      	ldr	r0, [r7, #12]
 8002f2a:	f000 fdb3 	bl	8003a94 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2200      	movs	r2, #0
 8002f32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002f36:	2300      	movs	r3, #0
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3718      	adds	r7, #24
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	80002000 	.word	0x80002000
 8002f44:	80002400 	.word	0x80002400

08002f48 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b086      	sub	sp, #24
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	60f8      	str	r0, [r7, #12]
 8002f50:	60b9      	str	r1, [r7, #8]
 8002f52:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f58:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d101      	bne.n	8002f6c <I2C_Slave_ISR_IT+0x24>
 8002f68:	2302      	movs	r3, #2
 8002f6a:	e0e1      	b.n	8003130 <I2C_Slave_ISR_IT+0x1e8>
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	f003 0320 	and.w	r3, r3, #32
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d008      	beq.n	8002f90 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d003      	beq.n	8002f90 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002f88:	6939      	ldr	r1, [r7, #16]
 8002f8a:	68f8      	ldr	r0, [r7, #12]
 8002f8c:	f000 fe4a 	bl	8003c24 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	f003 0310 	and.w	r3, r3, #16
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d04b      	beq.n	8003032 <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d046      	beq.n	8003032 <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fa8:	b29b      	uxth	r3, r3
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d128      	bne.n	8003000 <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	2b28      	cmp	r3, #40	; 0x28
 8002fb8:	d108      	bne.n	8002fcc <I2C_Slave_ISR_IT+0x84>
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002fc0:	d104      	bne.n	8002fcc <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002fc2:	6939      	ldr	r1, [r7, #16]
 8002fc4:	68f8      	ldr	r0, [r7, #12]
 8002fc6:	f000 ff3f 	bl	8003e48 <I2C_ITListenCplt>
 8002fca:	e031      	b.n	8003030 <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	2b29      	cmp	r3, #41	; 0x29
 8002fd6:	d10e      	bne.n	8002ff6 <I2C_Slave_ISR_IT+0xae>
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002fde:	d00a      	beq.n	8002ff6 <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	2210      	movs	r2, #16
 8002fe6:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002fe8:	68f8      	ldr	r0, [r7, #12]
 8002fea:	f001 f898 	bl	800411e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002fee:	68f8      	ldr	r0, [r7, #12]
 8002ff0:	f000 fcf3 	bl	80039da <I2C_ITSlaveSeqCplt>
 8002ff4:	e01c      	b.n	8003030 <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	2210      	movs	r2, #16
 8002ffc:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8002ffe:	e08f      	b.n	8003120 <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	2210      	movs	r2, #16
 8003006:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800300c:	f043 0204 	orr.w	r2, r3, #4
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d003      	beq.n	8003022 <I2C_Slave_ISR_IT+0xda>
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003020:	d17e      	bne.n	8003120 <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003026:	4619      	mov	r1, r3
 8003028:	68f8      	ldr	r0, [r7, #12]
 800302a:	f000 ff61 	bl	8003ef0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800302e:	e077      	b.n	8003120 <I2C_Slave_ISR_IT+0x1d8>
 8003030:	e076      	b.n	8003120 <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	f003 0304 	and.w	r3, r3, #4
 8003038:	2b00      	cmp	r3, #0
 800303a:	d02f      	beq.n	800309c <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003042:	2b00      	cmp	r3, #0
 8003044:	d02a      	beq.n	800309c <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800304a:	b29b      	uxth	r3, r3
 800304c:	2b00      	cmp	r3, #0
 800304e:	d018      	beq.n	8003082 <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800305a:	b2d2      	uxtb	r2, r2
 800305c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003062:	1c5a      	adds	r2, r3, #1
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800306c:	3b01      	subs	r3, #1
 800306e:	b29a      	uxth	r2, r3
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003078:	b29b      	uxth	r3, r3
 800307a:	3b01      	subs	r3, #1
 800307c:	b29a      	uxth	r2, r3
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003086:	b29b      	uxth	r3, r3
 8003088:	2b00      	cmp	r3, #0
 800308a:	d14b      	bne.n	8003124 <I2C_Slave_ISR_IT+0x1dc>
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003092:	d047      	beq.n	8003124 <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8003094:	68f8      	ldr	r0, [r7, #12]
 8003096:	f000 fca0 	bl	80039da <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800309a:	e043      	b.n	8003124 <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	f003 0308 	and.w	r3, r3, #8
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d009      	beq.n	80030ba <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d004      	beq.n	80030ba <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80030b0:	6939      	ldr	r1, [r7, #16]
 80030b2:	68f8      	ldr	r0, [r7, #12]
 80030b4:	f000 fbd0 	bl	8003858 <I2C_ITAddrCplt>
 80030b8:	e035      	b.n	8003126 <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	f003 0302 	and.w	r3, r3, #2
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d030      	beq.n	8003126 <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d02b      	beq.n	8003126 <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d018      	beq.n	800310a <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030dc:	781a      	ldrb	r2, [r3, #0]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e8:	1c5a      	adds	r2, r3, #1
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030f2:	b29b      	uxth	r3, r3
 80030f4:	3b01      	subs	r3, #1
 80030f6:	b29a      	uxth	r2, r3
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003100:	3b01      	subs	r3, #1
 8003102:	b29a      	uxth	r2, r3
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	851a      	strh	r2, [r3, #40]	; 0x28
 8003108:	e00d      	b.n	8003126 <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003110:	d002      	beq.n	8003118 <I2C_Slave_ISR_IT+0x1d0>
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d106      	bne.n	8003126 <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003118:	68f8      	ldr	r0, [r7, #12]
 800311a:	f000 fc5e 	bl	80039da <I2C_ITSlaveSeqCplt>
 800311e:	e002      	b.n	8003126 <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 8003120:	bf00      	nop
 8003122:	e000      	b.n	8003126 <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 8003124:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2200      	movs	r2, #0
 800312a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800312e:	2300      	movs	r3, #0
}
 8003130:	4618      	mov	r0, r3
 8003132:	3718      	adds	r7, #24
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}

08003138 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b088      	sub	sp, #32
 800313c:	af02      	add	r7, sp, #8
 800313e:	60f8      	str	r0, [r7, #12]
 8003140:	60b9      	str	r1, [r7, #8]
 8003142:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800314a:	2b01      	cmp	r3, #1
 800314c:	d101      	bne.n	8003152 <I2C_Master_ISR_DMA+0x1a>
 800314e:	2302      	movs	r3, #2
 8003150:	e0d9      	b.n	8003306 <I2C_Master_ISR_DMA+0x1ce>
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2201      	movs	r2, #1
 8003156:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	f003 0310 	and.w	r3, r3, #16
 8003160:	2b00      	cmp	r3, #0
 8003162:	d016      	beq.n	8003192 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800316a:	2b00      	cmp	r3, #0
 800316c:	d011      	beq.n	8003192 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	2210      	movs	r2, #16
 8003174:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800317a:	f043 0204 	orr.w	r2, r3, #4
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8003182:	2120      	movs	r1, #32
 8003184:	68f8      	ldr	r0, [r7, #12]
 8003186:	f001 f9f7 	bl	8004578 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800318a:	68f8      	ldr	r0, [r7, #12]
 800318c:	f000 ffc7 	bl	800411e <I2C_Flush_TXDR>
 8003190:	e0b4      	b.n	80032fc <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003198:	2b00      	cmp	r3, #0
 800319a:	d071      	beq.n	8003280 <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d06c      	beq.n	8003280 <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031b4:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031ba:	b29b      	uxth	r3, r3
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d04e      	beq.n	800325e <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80031cc:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031d2:	b29b      	uxth	r3, r3
 80031d4:	2bff      	cmp	r3, #255	; 0xff
 80031d6:	d906      	bls.n	80031e6 <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	22ff      	movs	r2, #255	; 0xff
 80031dc:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 80031de:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80031e2:	617b      	str	r3, [r7, #20]
 80031e4:	e010      	b.n	8003208 <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031ea:	b29a      	uxth	r2, r3
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80031f8:	d003      	beq.n	8003202 <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031fe:	617b      	str	r3, [r7, #20]
 8003200:	e002      	b.n	8003208 <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8003202:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003206:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800320c:	b2da      	uxtb	r2, r3
 800320e:	8a79      	ldrh	r1, [r7, #18]
 8003210:	2300      	movs	r3, #0
 8003212:	9300      	str	r3, [sp, #0]
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	68f8      	ldr	r0, [r7, #12]
 8003218:	f001 f97c 	bl	8004514 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003220:	b29a      	uxth	r2, r3
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003226:	1ad3      	subs	r3, r2, r3
 8003228:	b29a      	uxth	r2, r3
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003234:	b2db      	uxtb	r3, r3
 8003236:	2b22      	cmp	r3, #34	; 0x22
 8003238:	d108      	bne.n	800324c <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003248:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800324a:	e057      	b.n	80032fc <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800325a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800325c:	e04e      	b.n	80032fc <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003268:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800326c:	d003      	beq.n	8003276 <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800326e:	68f8      	ldr	r0, [r7, #12]
 8003270:	f000 fb76 	bl	8003960 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8003274:	e042      	b.n	80032fc <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003276:	2140      	movs	r1, #64	; 0x40
 8003278:	68f8      	ldr	r0, [r7, #12]
 800327a:	f000 fe39 	bl	8003ef0 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800327e:	e03d      	b.n	80032fc <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003286:	2b00      	cmp	r3, #0
 8003288:	d028      	beq.n	80032dc <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003290:	2b00      	cmp	r3, #0
 8003292:	d023      	beq.n	80032dc <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003298:	b29b      	uxth	r3, r3
 800329a:	2b00      	cmp	r3, #0
 800329c:	d119      	bne.n	80032d2 <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032a8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80032ac:	d025      	beq.n	80032fa <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032b2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80032b6:	d108      	bne.n	80032ca <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	685a      	ldr	r2, [r3, #4]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80032c6:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 80032c8:	e017      	b.n	80032fa <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80032ca:	68f8      	ldr	r0, [r7, #12]
 80032cc:	f000 fb48 	bl	8003960 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 80032d0:	e013      	b.n	80032fa <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80032d2:	2140      	movs	r1, #64	; 0x40
 80032d4:	68f8      	ldr	r0, [r7, #12]
 80032d6:	f000 fe0b 	bl	8003ef0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80032da:	e00e      	b.n	80032fa <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	f003 0320 	and.w	r3, r3, #32
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d00a      	beq.n	80032fc <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d005      	beq.n	80032fc <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80032f0:	68b9      	ldr	r1, [r7, #8]
 80032f2:	68f8      	ldr	r0, [r7, #12]
 80032f4:	f000 fbce 	bl	8003a94 <I2C_ITMasterCplt>
 80032f8:	e000      	b.n	80032fc <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 80032fa:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2200      	movs	r2, #0
 8003300:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003304:	2300      	movs	r3, #0
}
 8003306:	4618      	mov	r0, r3
 8003308:	3718      	adds	r7, #24
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
	...

08003310 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b088      	sub	sp, #32
 8003314:	af02      	add	r7, sp, #8
 8003316:	60f8      	str	r0, [r7, #12]
 8003318:	60b9      	str	r1, [r7, #8]
 800331a:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 800331c:	4b8d      	ldr	r3, [pc, #564]	; (8003554 <I2C_Mem_ISR_DMA+0x244>)
 800331e:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003326:	2b01      	cmp	r3, #1
 8003328:	d101      	bne.n	800332e <I2C_Mem_ISR_DMA+0x1e>
 800332a:	2302      	movs	r3, #2
 800332c:	e10e      	b.n	800354c <I2C_Mem_ISR_DMA+0x23c>
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2201      	movs	r2, #1
 8003332:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	f003 0310 	and.w	r3, r3, #16
 800333c:	2b00      	cmp	r3, #0
 800333e:	d016      	beq.n	800336e <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003346:	2b00      	cmp	r3, #0
 8003348:	d011      	beq.n	800336e <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	2210      	movs	r2, #16
 8003350:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003356:	f043 0204 	orr.w	r2, r3, #4
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800335e:	2120      	movs	r1, #32
 8003360:	68f8      	ldr	r0, [r7, #12]
 8003362:	f001 f909 	bl	8004578 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003366:	68f8      	ldr	r0, [r7, #12]
 8003368:	f000 fed9 	bl	800411e <I2C_Flush_TXDR>
 800336c:	e0e9      	b.n	8003542 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	f003 0302 	and.w	r3, r3, #2
 8003374:	2b00      	cmp	r3, #0
 8003376:	d00e      	beq.n	8003396 <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800337e:	2b00      	cmp	r3, #0
 8003380:	d009      	beq.n	8003396 <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	68fa      	ldr	r2, [r7, #12]
 8003388:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800338a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	f04f 32ff 	mov.w	r2, #4294967295
 8003392:	651a      	str	r2, [r3, #80]	; 0x50
 8003394:	e0d5      	b.n	8003542 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800339c:	2b00      	cmp	r3, #0
 800339e:	d05f      	beq.n	8003460 <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d05a      	beq.n	8003460 <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80033aa:	2101      	movs	r1, #1
 80033ac:	68f8      	ldr	r0, [r7, #12]
 80033ae:	f001 f967 	bl	8004680 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80033b2:	2110      	movs	r1, #16
 80033b4:	68f8      	ldr	r0, [r7, #12]
 80033b6:	f001 f8df 	bl	8004578 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033be:	b29b      	uxth	r3, r3
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d048      	beq.n	8003456 <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033c8:	b29b      	uxth	r3, r3
 80033ca:	2bff      	cmp	r3, #255	; 0xff
 80033cc:	d910      	bls.n	80033f0 <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	22ff      	movs	r2, #255	; 0xff
 80033d2:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033d8:	b299      	uxth	r1, r3
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033de:	b2da      	uxtb	r2, r3
 80033e0:	2300      	movs	r3, #0
 80033e2:	9300      	str	r3, [sp, #0]
 80033e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80033e8:	68f8      	ldr	r0, [r7, #12]
 80033ea:	f001 f893 	bl	8004514 <I2C_TransferConfig>
 80033ee:	e011      	b.n	8003414 <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033f4:	b29a      	uxth	r2, r3
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033fe:	b299      	uxth	r1, r3
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003404:	b2da      	uxtb	r2, r3
 8003406:	2300      	movs	r3, #0
 8003408:	9300      	str	r3, [sp, #0]
 800340a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800340e:	68f8      	ldr	r0, [r7, #12]
 8003410:	f001 f880 	bl	8004514 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003418:	b29a      	uxth	r2, r3
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800341e:	1ad3      	subs	r3, r2, r3
 8003420:	b29a      	uxth	r2, r3
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800342c:	b2db      	uxtb	r3, r3
 800342e:	2b22      	cmp	r3, #34	; 0x22
 8003430:	d108      	bne.n	8003444 <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003440:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003442:	e07e      	b.n	8003542 <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003452:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003454:	e075      	b.n	8003542 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003456:	2140      	movs	r1, #64	; 0x40
 8003458:	68f8      	ldr	r0, [r7, #12]
 800345a:	f000 fd49 	bl	8003ef0 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800345e:	e070      	b.n	8003542 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003466:	2b00      	cmp	r3, #0
 8003468:	d05d      	beq.n	8003526 <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003470:	2b00      	cmp	r3, #0
 8003472:	d058      	beq.n	8003526 <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003474:	2101      	movs	r1, #1
 8003476:	68f8      	ldr	r0, [r7, #12]
 8003478:	f001 f902 	bl	8004680 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800347c:	2110      	movs	r1, #16
 800347e:	68f8      	ldr	r0, [r7, #12]
 8003480:	f001 f87a 	bl	8004578 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800348a:	b2db      	uxtb	r3, r3
 800348c:	2b22      	cmp	r3, #34	; 0x22
 800348e:	d101      	bne.n	8003494 <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 8003490:	4b31      	ldr	r3, [pc, #196]	; (8003558 <I2C_Mem_ISR_DMA+0x248>)
 8003492:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003498:	b29b      	uxth	r3, r3
 800349a:	2bff      	cmp	r3, #255	; 0xff
 800349c:	d910      	bls.n	80034c0 <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	22ff      	movs	r2, #255	; 0xff
 80034a2:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034a8:	b299      	uxth	r1, r3
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034ae:	b2da      	uxtb	r2, r3
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	9300      	str	r3, [sp, #0]
 80034b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80034b8:	68f8      	ldr	r0, [r7, #12]
 80034ba:	f001 f82b 	bl	8004514 <I2C_TransferConfig>
 80034be:	e011      	b.n	80034e4 <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034c4:	b29a      	uxth	r2, r3
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034ce:	b299      	uxth	r1, r3
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034d4:	b2da      	uxtb	r2, r3
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	9300      	str	r3, [sp, #0]
 80034da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80034de:	68f8      	ldr	r0, [r7, #12]
 80034e0:	f001 f818 	bl	8004514 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034e8:	b29a      	uxth	r2, r3
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034ee:	1ad3      	subs	r3, r2, r3
 80034f0:	b29a      	uxth	r2, r3
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	2b22      	cmp	r3, #34	; 0x22
 8003500:	d108      	bne.n	8003514 <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003510:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003512:	e016      	b.n	8003542 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003522:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003524:	e00d      	b.n	8003542 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	f003 0320 	and.w	r3, r3, #32
 800352c:	2b00      	cmp	r3, #0
 800352e:	d008      	beq.n	8003542 <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003536:	2b00      	cmp	r3, #0
 8003538:	d003      	beq.n	8003542 <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800353a:	68b9      	ldr	r1, [r7, #8]
 800353c:	68f8      	ldr	r0, [r7, #12]
 800353e:	f000 faa9 	bl	8003a94 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2200      	movs	r2, #0
 8003546:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800354a:	2300      	movs	r3, #0
}
 800354c:	4618      	mov	r0, r3
 800354e:	3718      	adds	r7, #24
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}
 8003554:	80002000 	.word	0x80002000
 8003558:	80002400 	.word	0x80002400

0800355c <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b088      	sub	sp, #32
 8003560:	af00      	add	r7, sp, #0
 8003562:	60f8      	str	r0, [r7, #12]
 8003564:	60b9      	str	r1, [r7, #8]
 8003566:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800356c:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800356e:	2300      	movs	r3, #0
 8003570:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003578:	2b01      	cmp	r3, #1
 800357a:	d101      	bne.n	8003580 <I2C_Slave_ISR_DMA+0x24>
 800357c:	2302      	movs	r3, #2
 800357e:	e0bf      	b.n	8003700 <I2C_Slave_ISR_DMA+0x1a4>
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2201      	movs	r2, #1
 8003584:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	f003 0320 	and.w	r3, r3, #32
 800358e:	2b00      	cmp	r3, #0
 8003590:	d008      	beq.n	80035a4 <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003598:	2b00      	cmp	r3, #0
 800359a:	d003      	beq.n	80035a4 <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800359c:	68b9      	ldr	r1, [r7, #8]
 800359e:	68f8      	ldr	r0, [r7, #12]
 80035a0:	f000 fb40 	bl	8003c24 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	f003 0310 	and.w	r3, r3, #16
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	f000 8095 	beq.w	80036da <I2C_Slave_ISR_DMA+0x17e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	f000 808f 	beq.w	80036da <I2C_Slave_ISR_DMA+0x17e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d104      	bne.n	80035d0 <I2C_Slave_ISR_DMA+0x74>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d07d      	beq.n	80036cc <I2C_Slave_ISR_DMA+0x170>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d00c      	beq.n	80035f2 <I2C_Slave_ISR_DMA+0x96>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d007      	beq.n	80035f2 <I2C_Slave_ISR_DMA+0x96>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d101      	bne.n	80035f2 <I2C_Slave_ISR_DMA+0x96>
          {
            treatdmanack = 1U;
 80035ee:	2301      	movs	r3, #1
 80035f0:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d00c      	beq.n	8003614 <I2C_Slave_ISR_DMA+0xb8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003600:	2b00      	cmp	r3, #0
 8003602:	d007      	beq.n	8003614 <I2C_Slave_ISR_DMA+0xb8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d101      	bne.n	8003614 <I2C_Slave_ISR_DMA+0xb8>
          {
            treatdmanack = 1U;
 8003610:	2301      	movs	r3, #1
 8003612:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8003614:	69fb      	ldr	r3, [r7, #28]
 8003616:	2b01      	cmp	r3, #1
 8003618:	d128      	bne.n	800366c <I2C_Slave_ISR_DMA+0x110>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003620:	b2db      	uxtb	r3, r3
 8003622:	2b28      	cmp	r3, #40	; 0x28
 8003624:	d108      	bne.n	8003638 <I2C_Slave_ISR_DMA+0xdc>
 8003626:	69bb      	ldr	r3, [r7, #24]
 8003628:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800362c:	d104      	bne.n	8003638 <I2C_Slave_ISR_DMA+0xdc>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800362e:	68b9      	ldr	r1, [r7, #8]
 8003630:	68f8      	ldr	r0, [r7, #12]
 8003632:	f000 fc09 	bl	8003e48 <I2C_ITListenCplt>
 8003636:	e048      	b.n	80036ca <I2C_Slave_ISR_DMA+0x16e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800363e:	b2db      	uxtb	r3, r3
 8003640:	2b29      	cmp	r3, #41	; 0x29
 8003642:	d10e      	bne.n	8003662 <I2C_Slave_ISR_DMA+0x106>
 8003644:	69bb      	ldr	r3, [r7, #24]
 8003646:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800364a:	d00a      	beq.n	8003662 <I2C_Slave_ISR_DMA+0x106>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	2210      	movs	r2, #16
 8003652:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8003654:	68f8      	ldr	r0, [r7, #12]
 8003656:	f000 fd62 	bl	800411e <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800365a:	68f8      	ldr	r0, [r7, #12]
 800365c:	f000 f9bd 	bl	80039da <I2C_ITSlaveSeqCplt>
 8003660:	e033      	b.n	80036ca <I2C_Slave_ISR_DMA+0x16e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	2210      	movs	r2, #16
 8003668:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800366a:	e034      	b.n	80036d6 <I2C_Slave_ISR_DMA+0x17a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	2210      	movs	r2, #16
 8003672:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003678:	f043 0204 	orr.w	r2, r3, #4
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003686:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003688:	69bb      	ldr	r3, [r7, #24]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d003      	beq.n	8003696 <I2C_Slave_ISR_DMA+0x13a>
 800368e:	69bb      	ldr	r3, [r7, #24]
 8003690:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003694:	d11f      	bne.n	80036d6 <I2C_Slave_ISR_DMA+0x17a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003696:	7dfb      	ldrb	r3, [r7, #23]
 8003698:	2b21      	cmp	r3, #33	; 0x21
 800369a:	d002      	beq.n	80036a2 <I2C_Slave_ISR_DMA+0x146>
 800369c:	7dfb      	ldrb	r3, [r7, #23]
 800369e:	2b29      	cmp	r3, #41	; 0x29
 80036a0:	d103      	bne.n	80036aa <I2C_Slave_ISR_DMA+0x14e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2221      	movs	r2, #33	; 0x21
 80036a6:	631a      	str	r2, [r3, #48]	; 0x30
 80036a8:	e008      	b.n	80036bc <I2C_Slave_ISR_DMA+0x160>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80036aa:	7dfb      	ldrb	r3, [r7, #23]
 80036ac:	2b22      	cmp	r3, #34	; 0x22
 80036ae:	d002      	beq.n	80036b6 <I2C_Slave_ISR_DMA+0x15a>
 80036b0:	7dfb      	ldrb	r3, [r7, #23]
 80036b2:	2b2a      	cmp	r3, #42	; 0x2a
 80036b4:	d102      	bne.n	80036bc <I2C_Slave_ISR_DMA+0x160>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2222      	movs	r2, #34	; 0x22
 80036ba:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036c0:	4619      	mov	r1, r3
 80036c2:	68f8      	ldr	r0, [r7, #12]
 80036c4:	f000 fc14 	bl	8003ef0 <I2C_ITError>
      if (treatdmanack == 1U)
 80036c8:	e005      	b.n	80036d6 <I2C_Slave_ISR_DMA+0x17a>
 80036ca:	e004      	b.n	80036d6 <I2C_Slave_ISR_DMA+0x17a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	2210      	movs	r2, #16
 80036d2:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80036d4:	e00f      	b.n	80036f6 <I2C_Slave_ISR_DMA+0x19a>
      if (treatdmanack == 1U)
 80036d6:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80036d8:	e00d      	b.n	80036f6 <I2C_Slave_ISR_DMA+0x19a>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	f003 0308 	and.w	r3, r3, #8
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d008      	beq.n	80036f6 <I2C_Slave_ISR_DMA+0x19a>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d003      	beq.n	80036f6 <I2C_Slave_ISR_DMA+0x19a>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 80036ee:	68b9      	ldr	r1, [r7, #8]
 80036f0:	68f8      	ldr	r0, [r7, #12]
 80036f2:	f000 f8b1 	bl	8003858 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2200      	movs	r2, #0
 80036fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80036fe:	2300      	movs	r3, #0
}
 8003700:	4618      	mov	r0, r3
 8003702:	3720      	adds	r7, #32
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}

08003708 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b086      	sub	sp, #24
 800370c:	af02      	add	r7, sp, #8
 800370e:	60f8      	str	r0, [r7, #12]
 8003710:	4608      	mov	r0, r1
 8003712:	4611      	mov	r1, r2
 8003714:	461a      	mov	r2, r3
 8003716:	4603      	mov	r3, r0
 8003718:	817b      	strh	r3, [r7, #10]
 800371a:	460b      	mov	r3, r1
 800371c:	813b      	strh	r3, [r7, #8]
 800371e:	4613      	mov	r3, r2
 8003720:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003722:	88fb      	ldrh	r3, [r7, #6]
 8003724:	b2da      	uxtb	r2, r3
 8003726:	8979      	ldrh	r1, [r7, #10]
 8003728:	4b20      	ldr	r3, [pc, #128]	; (80037ac <I2C_RequestMemoryWrite+0xa4>)
 800372a:	9300      	str	r3, [sp, #0]
 800372c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003730:	68f8      	ldr	r0, [r7, #12]
 8003732:	f000 feef 	bl	8004514 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003736:	69fa      	ldr	r2, [r7, #28]
 8003738:	69b9      	ldr	r1, [r7, #24]
 800373a:	68f8      	ldr	r0, [r7, #12]
 800373c:	f000 fd80 	bl	8004240 <I2C_WaitOnTXISFlagUntilTimeout>
 8003740:	4603      	mov	r3, r0
 8003742:	2b00      	cmp	r3, #0
 8003744:	d001      	beq.n	800374a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e02c      	b.n	80037a4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800374a:	88fb      	ldrh	r3, [r7, #6]
 800374c:	2b01      	cmp	r3, #1
 800374e:	d105      	bne.n	800375c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003750:	893b      	ldrh	r3, [r7, #8]
 8003752:	b2da      	uxtb	r2, r3
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	629a      	str	r2, [r3, #40]	; 0x28
 800375a:	e015      	b.n	8003788 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800375c:	893b      	ldrh	r3, [r7, #8]
 800375e:	0a1b      	lsrs	r3, r3, #8
 8003760:	b29b      	uxth	r3, r3
 8003762:	b2da      	uxtb	r2, r3
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800376a:	69fa      	ldr	r2, [r7, #28]
 800376c:	69b9      	ldr	r1, [r7, #24]
 800376e:	68f8      	ldr	r0, [r7, #12]
 8003770:	f000 fd66 	bl	8004240 <I2C_WaitOnTXISFlagUntilTimeout>
 8003774:	4603      	mov	r3, r0
 8003776:	2b00      	cmp	r3, #0
 8003778:	d001      	beq.n	800377e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e012      	b.n	80037a4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800377e:	893b      	ldrh	r3, [r7, #8]
 8003780:	b2da      	uxtb	r2, r3
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003788:	69fb      	ldr	r3, [r7, #28]
 800378a:	9300      	str	r3, [sp, #0]
 800378c:	69bb      	ldr	r3, [r7, #24]
 800378e:	2200      	movs	r2, #0
 8003790:	2180      	movs	r1, #128	; 0x80
 8003792:	68f8      	ldr	r0, [r7, #12]
 8003794:	f000 fd05 	bl	80041a2 <I2C_WaitOnFlagUntilTimeout>
 8003798:	4603      	mov	r3, r0
 800379a:	2b00      	cmp	r3, #0
 800379c:	d001      	beq.n	80037a2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e000      	b.n	80037a4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80037a2:	2300      	movs	r3, #0
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3710      	adds	r7, #16
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	80002000 	.word	0x80002000

080037b0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b086      	sub	sp, #24
 80037b4:	af02      	add	r7, sp, #8
 80037b6:	60f8      	str	r0, [r7, #12]
 80037b8:	4608      	mov	r0, r1
 80037ba:	4611      	mov	r1, r2
 80037bc:	461a      	mov	r2, r3
 80037be:	4603      	mov	r3, r0
 80037c0:	817b      	strh	r3, [r7, #10]
 80037c2:	460b      	mov	r3, r1
 80037c4:	813b      	strh	r3, [r7, #8]
 80037c6:	4613      	mov	r3, r2
 80037c8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80037ca:	88fb      	ldrh	r3, [r7, #6]
 80037cc:	b2da      	uxtb	r2, r3
 80037ce:	8979      	ldrh	r1, [r7, #10]
 80037d0:	4b20      	ldr	r3, [pc, #128]	; (8003854 <I2C_RequestMemoryRead+0xa4>)
 80037d2:	9300      	str	r3, [sp, #0]
 80037d4:	2300      	movs	r3, #0
 80037d6:	68f8      	ldr	r0, [r7, #12]
 80037d8:	f000 fe9c 	bl	8004514 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80037dc:	69fa      	ldr	r2, [r7, #28]
 80037de:	69b9      	ldr	r1, [r7, #24]
 80037e0:	68f8      	ldr	r0, [r7, #12]
 80037e2:	f000 fd2d 	bl	8004240 <I2C_WaitOnTXISFlagUntilTimeout>
 80037e6:	4603      	mov	r3, r0
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d001      	beq.n	80037f0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	e02c      	b.n	800384a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80037f0:	88fb      	ldrh	r3, [r7, #6]
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d105      	bne.n	8003802 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80037f6:	893b      	ldrh	r3, [r7, #8]
 80037f8:	b2da      	uxtb	r2, r3
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	629a      	str	r2, [r3, #40]	; 0x28
 8003800:	e015      	b.n	800382e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003802:	893b      	ldrh	r3, [r7, #8]
 8003804:	0a1b      	lsrs	r3, r3, #8
 8003806:	b29b      	uxth	r3, r3
 8003808:	b2da      	uxtb	r2, r3
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003810:	69fa      	ldr	r2, [r7, #28]
 8003812:	69b9      	ldr	r1, [r7, #24]
 8003814:	68f8      	ldr	r0, [r7, #12]
 8003816:	f000 fd13 	bl	8004240 <I2C_WaitOnTXISFlagUntilTimeout>
 800381a:	4603      	mov	r3, r0
 800381c:	2b00      	cmp	r3, #0
 800381e:	d001      	beq.n	8003824 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	e012      	b.n	800384a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003824:	893b      	ldrh	r3, [r7, #8]
 8003826:	b2da      	uxtb	r2, r3
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	9300      	str	r3, [sp, #0]
 8003832:	69bb      	ldr	r3, [r7, #24]
 8003834:	2200      	movs	r2, #0
 8003836:	2140      	movs	r1, #64	; 0x40
 8003838:	68f8      	ldr	r0, [r7, #12]
 800383a:	f000 fcb2 	bl	80041a2 <I2C_WaitOnFlagUntilTimeout>
 800383e:	4603      	mov	r3, r0
 8003840:	2b00      	cmp	r3, #0
 8003842:	d001      	beq.n	8003848 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	e000      	b.n	800384a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003848:	2300      	movs	r3, #0
}
 800384a:	4618      	mov	r0, r3
 800384c:	3710      	adds	r7, #16
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	80002000 	.word	0x80002000

08003858 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b084      	sub	sp, #16
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003868:	b2db      	uxtb	r3, r3
 800386a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800386e:	2b28      	cmp	r3, #40	; 0x28
 8003870:	d16a      	bne.n	8003948 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	699b      	ldr	r3, [r3, #24]
 8003878:	0c1b      	lsrs	r3, r3, #16
 800387a:	b2db      	uxtb	r3, r3
 800387c:	f003 0301 	and.w	r3, r3, #1
 8003880:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	699b      	ldr	r3, [r3, #24]
 8003888:	0c1b      	lsrs	r3, r3, #16
 800388a:	b29b      	uxth	r3, r3
 800388c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003890:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	b29b      	uxth	r3, r3
 800389a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800389e:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	68db      	ldr	r3, [r3, #12]
 80038a6:	b29b      	uxth	r3, r3
 80038a8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80038ac:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	68db      	ldr	r3, [r3, #12]
 80038b2:	2b02      	cmp	r3, #2
 80038b4:	d138      	bne.n	8003928 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80038b6:	897b      	ldrh	r3, [r7, #10]
 80038b8:	09db      	lsrs	r3, r3, #7
 80038ba:	b29a      	uxth	r2, r3
 80038bc:	89bb      	ldrh	r3, [r7, #12]
 80038be:	4053      	eors	r3, r2
 80038c0:	b29b      	uxth	r3, r3
 80038c2:	f003 0306 	and.w	r3, r3, #6
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d11c      	bne.n	8003904 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80038ca:	897b      	ldrh	r3, [r7, #10]
 80038cc:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038d2:	1c5a      	adds	r2, r3, #1
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038dc:	2b02      	cmp	r3, #2
 80038de:	d13b      	bne.n	8003958 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2200      	movs	r2, #0
 80038e4:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	2208      	movs	r2, #8
 80038ec:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2200      	movs	r2, #0
 80038f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80038f6:	89ba      	ldrh	r2, [r7, #12]
 80038f8:	7bfb      	ldrb	r3, [r7, #15]
 80038fa:	4619      	mov	r1, r3
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	f7ff f9c7 	bl	8002c90 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003902:	e029      	b.n	8003958 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8003904:	893b      	ldrh	r3, [r7, #8]
 8003906:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003908:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	f000 feb7 	bl	8004680 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2200      	movs	r2, #0
 8003916:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800391a:	89ba      	ldrh	r2, [r7, #12]
 800391c:	7bfb      	ldrb	r3, [r7, #15]
 800391e:	4619      	mov	r1, r3
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	f7ff f9b5 	bl	8002c90 <HAL_I2C_AddrCallback>
}
 8003926:	e017      	b.n	8003958 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003928:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f000 fea7 	bl	8004680 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2200      	movs	r2, #0
 8003936:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800393a:	89ba      	ldrh	r2, [r7, #12]
 800393c:	7bfb      	ldrb	r3, [r7, #15]
 800393e:	4619      	mov	r1, r3
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	f7ff f9a5 	bl	8002c90 <HAL_I2C_AddrCallback>
}
 8003946:	e007      	b.n	8003958 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	2208      	movs	r2, #8
 800394e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2200      	movs	r2, #0
 8003954:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8003958:	bf00      	nop
 800395a:	3710      	adds	r7, #16
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}

08003960 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b082      	sub	sp, #8
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2200      	movs	r2, #0
 800396c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003976:	b2db      	uxtb	r3, r3
 8003978:	2b21      	cmp	r3, #33	; 0x21
 800397a:	d115      	bne.n	80039a8 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2220      	movs	r2, #32
 8003980:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2211      	movs	r2, #17
 8003988:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003990:	2101      	movs	r1, #1
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f000 fe74 	bl	8004680 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2200      	movs	r2, #0
 800399c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	f7ff f94d 	bl	8002c40 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80039a6:	e014      	b.n	80039d2 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2220      	movs	r2, #32
 80039ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2212      	movs	r2, #18
 80039b4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80039bc:	2102      	movs	r1, #2
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f000 fe5e 	bl	8004680 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2200      	movs	r2, #0
 80039c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	f7ff f941 	bl	8002c54 <HAL_I2C_MasterRxCpltCallback>
}
 80039d2:	bf00      	nop
 80039d4:	3708      	adds	r7, #8
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}

080039da <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80039da:	b580      	push	{r7, lr}
 80039dc:	b084      	sub	sp, #16
 80039de:	af00      	add	r7, sp, #0
 80039e0:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2200      	movs	r2, #0
 80039ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d008      	beq.n	8003a0e <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003a0a:	601a      	str	r2, [r3, #0]
 8003a0c:	e00c      	b.n	8003a28 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d007      	beq.n	8003a28 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a26:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	2b29      	cmp	r3, #41	; 0x29
 8003a32:	d112      	bne.n	8003a5a <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2228      	movs	r2, #40	; 0x28
 8003a38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2221      	movs	r2, #33	; 0x21
 8003a40:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003a42:	2101      	movs	r1, #1
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	f000 fe1b 	bl	8004680 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f7ff f908 	bl	8002c68 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003a58:	e017      	b.n	8003a8a <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	2b2a      	cmp	r3, #42	; 0x2a
 8003a64:	d111      	bne.n	8003a8a <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2228      	movs	r2, #40	; 0x28
 8003a6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2222      	movs	r2, #34	; 0x22
 8003a72:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003a74:	2102      	movs	r1, #2
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f000 fe02 	bl	8004680 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	f7ff f8f9 	bl	8002c7c <HAL_I2C_SlaveRxCpltCallback>
}
 8003a8a:	bf00      	nop
 8003a8c:	3710      	adds	r7, #16
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}
	...

08003a94 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b086      	sub	sp, #24
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	2220      	movs	r2, #32
 8003aa8:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	2b21      	cmp	r3, #33	; 0x21
 8003ab4:	d107      	bne.n	8003ac6 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003ab6:	2101      	movs	r1, #1
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	f000 fde1 	bl	8004680 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2211      	movs	r2, #17
 8003ac2:	631a      	str	r2, [r3, #48]	; 0x30
 8003ac4:	e00c      	b.n	8003ae0 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	2b22      	cmp	r3, #34	; 0x22
 8003ad0:	d106      	bne.n	8003ae0 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003ad2:	2102      	movs	r1, #2
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	f000 fdd3 	bl	8004680 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2212      	movs	r2, #18
 8003ade:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	6859      	ldr	r1, [r3, #4]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	4b4c      	ldr	r3, [pc, #304]	; (8003c1c <I2C_ITMasterCplt+0x188>)
 8003aec:	400b      	ands	r3, r1
 8003aee:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2200      	movs	r2, #0
 8003af4:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4a49      	ldr	r2, [pc, #292]	; (8003c20 <I2C_ITMasterCplt+0x18c>)
 8003afa:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	f003 0310 	and.w	r3, r3, #16
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d009      	beq.n	8003b1a <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	2210      	movs	r2, #16
 8003b0c:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b12:	f043 0204 	orr.w	r2, r3, #4
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	2b60      	cmp	r3, #96	; 0x60
 8003b24:	d10a      	bne.n	8003b3c <I2C_ITMasterCplt+0xa8>
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	f003 0304 	and.w	r3, r3, #4
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d005      	beq.n	8003b3c <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b36:	b2db      	uxtb	r3, r3
 8003b38:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	f000 faee 	bl	800411e <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b46:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b4e:	b2db      	uxtb	r3, r3
 8003b50:	2b60      	cmp	r3, #96	; 0x60
 8003b52:	d002      	beq.n	8003b5a <I2C_ITMasterCplt+0xc6>
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d006      	beq.n	8003b68 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b5e:	4619      	mov	r1, r3
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	f000 f9c5 	bl	8003ef0 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003b66:	e054      	b.n	8003c12 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b6e:	b2db      	uxtb	r3, r3
 8003b70:	2b21      	cmp	r3, #33	; 0x21
 8003b72:	d124      	bne.n	8003bbe <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2220      	movs	r2, #32
 8003b78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	2b40      	cmp	r3, #64	; 0x40
 8003b8c:	d10b      	bne.n	8003ba6 <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2200      	movs	r2, #0
 8003b92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f7ff f88e 	bl	8002cc0 <HAL_I2C_MemTxCpltCallback>
}
 8003ba4:	e035      	b.n	8003c12 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f7ff f842 	bl	8002c40 <HAL_I2C_MasterTxCpltCallback>
}
 8003bbc:	e029      	b.n	8003c12 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	2b22      	cmp	r3, #34	; 0x22
 8003bc8:	d123      	bne.n	8003c12 <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2220      	movs	r2, #32
 8003bce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003bde:	b2db      	uxtb	r3, r3
 8003be0:	2b40      	cmp	r3, #64	; 0x40
 8003be2:	d10b      	bne.n	8003bfc <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2200      	movs	r2, #0
 8003be8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003bf4:	6878      	ldr	r0, [r7, #4]
 8003bf6:	f7fd fb05 	bl	8001204 <HAL_I2C_MemRxCpltCallback>
}
 8003bfa:	e00a      	b.n	8003c12 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2200      	movs	r2, #0
 8003c08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	f7ff f821 	bl	8002c54 <HAL_I2C_MasterRxCpltCallback>
}
 8003c12:	bf00      	nop
 8003c14:	3718      	adds	r7, #24
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}
 8003c1a:	bf00      	nop
 8003c1c:	fe00e800 	.word	0xfe00e800
 8003c20:	ffff0000 	.word	0xffff0000

08003c24 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b086      	sub	sp, #24
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
 8003c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c40:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	2220      	movs	r2, #32
 8003c48:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003c4a:	7bfb      	ldrb	r3, [r7, #15]
 8003c4c:	2b21      	cmp	r3, #33	; 0x21
 8003c4e:	d002      	beq.n	8003c56 <I2C_ITSlaveCplt+0x32>
 8003c50:	7bfb      	ldrb	r3, [r7, #15]
 8003c52:	2b29      	cmp	r3, #41	; 0x29
 8003c54:	d108      	bne.n	8003c68 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003c56:	f248 0101 	movw	r1, #32769	; 0x8001
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f000 fd10 	bl	8004680 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2221      	movs	r2, #33	; 0x21
 8003c64:	631a      	str	r2, [r3, #48]	; 0x30
 8003c66:	e019      	b.n	8003c9c <I2C_ITSlaveCplt+0x78>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003c68:	7bfb      	ldrb	r3, [r7, #15]
 8003c6a:	2b22      	cmp	r3, #34	; 0x22
 8003c6c:	d002      	beq.n	8003c74 <I2C_ITSlaveCplt+0x50>
 8003c6e:	7bfb      	ldrb	r3, [r7, #15]
 8003c70:	2b2a      	cmp	r3, #42	; 0x2a
 8003c72:	d108      	bne.n	8003c86 <I2C_ITSlaveCplt+0x62>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003c74:	f248 0102 	movw	r1, #32770	; 0x8002
 8003c78:	6878      	ldr	r0, [r7, #4]
 8003c7a:	f000 fd01 	bl	8004680 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2222      	movs	r2, #34	; 0x22
 8003c82:	631a      	str	r2, [r3, #48]	; 0x30
 8003c84:	e00a      	b.n	8003c9c <I2C_ITSlaveCplt+0x78>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8003c86:	7bfb      	ldrb	r3, [r7, #15]
 8003c88:	2b28      	cmp	r3, #40	; 0x28
 8003c8a:	d107      	bne.n	8003c9c <I2C_ITSlaveCplt+0x78>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8003c8c:	f248 0103 	movw	r1, #32771	; 0x8003
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	f000 fcf5 	bl	8004680 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	685a      	ldr	r2, [r3, #4]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003caa:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	6859      	ldr	r1, [r3, #4]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	4b62      	ldr	r3, [pc, #392]	; (8003e40 <I2C_ITSlaveCplt+0x21c>)
 8003cb8:	400b      	ands	r3, r1
 8003cba:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	f000 fa2e 	bl	800411e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d013      	beq.n	8003cf4 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003cda:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d01f      	beq.n	8003d24 <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	b29a      	uxth	r2, r3
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003cf2:	e017      	b.n	8003d24 <I2C_ITSlaveCplt+0x100>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d012      	beq.n	8003d24 <I2C_ITSlaveCplt+0x100>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d0c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d006      	beq.n	8003d24 <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	b29a      	uxth	r2, r3
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	f003 0304 	and.w	r3, r3, #4
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d020      	beq.n	8003d70 <I2C_ITSlaveCplt+0x14c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	f023 0304 	bic.w	r3, r3, #4
 8003d34:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d40:	b2d2      	uxtb	r2, r2
 8003d42:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d48:	1c5a      	adds	r2, r3, #1
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d00c      	beq.n	8003d70 <I2C_ITSlaveCplt+0x14c>
    {
      hi2c->XferSize--;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d5a:	3b01      	subs	r3, #1
 8003d5c:	b29a      	uxth	r2, r3
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	3b01      	subs	r3, #1
 8003d6a:	b29a      	uxth	r2, r3
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d74:	b29b      	uxth	r3, r3
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d005      	beq.n	8003d86 <I2C_ITSlaveCplt+0x162>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d7e:	f043 0204 	orr.w	r2, r3, #4
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2200      	movs	r2, #0
 8003d92:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d010      	beq.n	8003dbe <I2C_ITSlaveCplt+0x19a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003da0:	4619      	mov	r1, r3
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	f000 f8a4 	bl	8003ef0 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003dae:	b2db      	uxtb	r3, r3
 8003db0:	2b28      	cmp	r3, #40	; 0x28
 8003db2:	d141      	bne.n	8003e38 <I2C_ITSlaveCplt+0x214>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8003db4:	6979      	ldr	r1, [r7, #20]
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f000 f846 	bl	8003e48 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003dbc:	e03c      	b.n	8003e38 <I2C_ITSlaveCplt+0x214>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003dc6:	d014      	beq.n	8003df2 <I2C_ITSlaveCplt+0x1ce>
    I2C_ITSlaveSeqCplt(hi2c);
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	f7ff fe06 	bl	80039da <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	4a1c      	ldr	r2, [pc, #112]	; (8003e44 <I2C_ITSlaveCplt+0x220>)
 8003dd2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2220      	movs	r2, #32
 8003dd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2200      	movs	r2, #0
 8003de6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f7fe ff5e 	bl	8002cac <HAL_I2C_ListenCpltCallback>
}
 8003df0:	e022      	b.n	8003e38 <I2C_ITSlaveCplt+0x214>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003df8:	b2db      	uxtb	r3, r3
 8003dfa:	2b22      	cmp	r3, #34	; 0x22
 8003dfc:	d10e      	bne.n	8003e1c <I2C_ITSlaveCplt+0x1f8>
    hi2c->State = HAL_I2C_STATE_READY;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2220      	movs	r2, #32
 8003e02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	f7fe ff31 	bl	8002c7c <HAL_I2C_SlaveRxCpltCallback>
}
 8003e1a:	e00d      	b.n	8003e38 <I2C_ITSlaveCplt+0x214>
    hi2c->State = HAL_I2C_STATE_READY;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2220      	movs	r2, #32
 8003e20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2200      	movs	r2, #0
 8003e28:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f7fe ff18 	bl	8002c68 <HAL_I2C_SlaveTxCpltCallback>
}
 8003e38:	bf00      	nop
 8003e3a:	3718      	adds	r7, #24
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}
 8003e40:	fe00e800 	.word	0xfe00e800
 8003e44:	ffff0000 	.word	0xffff0000

08003e48 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b082      	sub	sp, #8
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
 8003e50:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	4a25      	ldr	r2, [pc, #148]	; (8003eec <I2C_ITListenCplt+0xa4>)
 8003e56:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2220      	movs	r2, #32
 8003e62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2200      	movs	r2, #0
 8003e72:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	f003 0304 	and.w	r3, r3, #4
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d022      	beq.n	8003ec4 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e88:	b2d2      	uxtb	r2, r2
 8003e8a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e90:	1c5a      	adds	r2, r3, #1
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d012      	beq.n	8003ec4 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ea2:	3b01      	subs	r3, #1
 8003ea4:	b29a      	uxth	r2, r3
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	3b01      	subs	r3, #1
 8003eb2:	b29a      	uxth	r2, r3
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ebc:	f043 0204 	orr.w	r2, r3, #4
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003ec4:	f248 0103 	movw	r1, #32771	; 0x8003
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	f000 fbd9 	bl	8004680 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	2210      	movs	r2, #16
 8003ed4:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f7fe fee4 	bl	8002cac <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8003ee4:	bf00      	nop
 8003ee6:	3708      	adds	r7, #8
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}
 8003eec:	ffff0000 	.word	0xffff0000

08003ef0 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b084      	sub	sp, #16
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f00:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2200      	movs	r2, #0
 8003f06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	4a6d      	ldr	r2, [pc, #436]	; (80040c4 <I2C_ITError+0x1d4>)
 8003f0e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2200      	movs	r2, #0
 8003f14:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	431a      	orrs	r2, r3
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8003f22:	7bfb      	ldrb	r3, [r7, #15]
 8003f24:	2b28      	cmp	r3, #40	; 0x28
 8003f26:	d005      	beq.n	8003f34 <I2C_ITError+0x44>
 8003f28:	7bfb      	ldrb	r3, [r7, #15]
 8003f2a:	2b29      	cmp	r3, #41	; 0x29
 8003f2c:	d002      	beq.n	8003f34 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8003f2e:	7bfb      	ldrb	r3, [r7, #15]
 8003f30:	2b2a      	cmp	r3, #42	; 0x2a
 8003f32:	d10b      	bne.n	8003f4c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003f34:	2103      	movs	r1, #3
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f000 fba2 	bl	8004680 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2228      	movs	r2, #40	; 0x28
 8003f40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	4a60      	ldr	r2, [pc, #384]	; (80040c8 <I2C_ITError+0x1d8>)
 8003f48:	635a      	str	r2, [r3, #52]	; 0x34
 8003f4a:	e030      	b.n	8003fae <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003f4c:	f248 0103 	movw	r1, #32771	; 0x8003
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	f000 fb95 	bl	8004680 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f000 f8e1 	bl	800411e <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f62:	b2db      	uxtb	r3, r3
 8003f64:	2b60      	cmp	r3, #96	; 0x60
 8003f66:	d01f      	beq.n	8003fa8 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2220      	movs	r2, #32
 8003f6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	699b      	ldr	r3, [r3, #24]
 8003f76:	f003 0320 	and.w	r3, r3, #32
 8003f7a:	2b20      	cmp	r3, #32
 8003f7c:	d114      	bne.n	8003fa8 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	699b      	ldr	r3, [r3, #24]
 8003f84:	f003 0310 	and.w	r3, r3, #16
 8003f88:	2b10      	cmp	r3, #16
 8003f8a:	d109      	bne.n	8003fa0 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	2210      	movs	r2, #16
 8003f92:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f98:	f043 0204 	orr.w	r2, r3, #4
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	2220      	movs	r2, #32
 8003fa6:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2200      	movs	r2, #0
 8003fac:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb2:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d039      	beq.n	8004030 <I2C_ITError+0x140>
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	2b11      	cmp	r3, #17
 8003fc0:	d002      	beq.n	8003fc8 <I2C_ITError+0xd8>
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	2b21      	cmp	r3, #33	; 0x21
 8003fc6:	d133      	bne.n	8004030 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fd2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003fd6:	d107      	bne.n	8003fe8 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003fe6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fec:	4618      	mov	r0, r3
 8003fee:	f7fe f8bb 	bl	8002168 <HAL_DMA_GetState>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d017      	beq.n	8004028 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ffc:	4a33      	ldr	r2, [pc, #204]	; (80040cc <I2C_ITError+0x1dc>)
 8003ffe:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2200      	movs	r2, #0
 8004004:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800400c:	4618      	mov	r0, r3
 800400e:	f7fe f86a 	bl	80020e6 <HAL_DMA_Abort_IT>
 8004012:	4603      	mov	r3, r0
 8004014:	2b00      	cmp	r3, #0
 8004016:	d04d      	beq.n	80040b4 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800401c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800401e:	687a      	ldr	r2, [r7, #4]
 8004020:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004022:	4610      	mov	r0, r2
 8004024:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004026:	e045      	b.n	80040b4 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	f000 f851 	bl	80040d0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800402e:	e041      	b.n	80040b4 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004034:	2b00      	cmp	r3, #0
 8004036:	d039      	beq.n	80040ac <I2C_ITError+0x1bc>
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	2b12      	cmp	r3, #18
 800403c:	d002      	beq.n	8004044 <I2C_ITError+0x154>
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	2b22      	cmp	r3, #34	; 0x22
 8004042:	d133      	bne.n	80040ac <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800404e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004052:	d107      	bne.n	8004064 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004062:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004068:	4618      	mov	r0, r3
 800406a:	f7fe f87d 	bl	8002168 <HAL_DMA_GetState>
 800406e:	4603      	mov	r3, r0
 8004070:	2b01      	cmp	r3, #1
 8004072:	d017      	beq.n	80040a4 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004078:	4a14      	ldr	r2, [pc, #80]	; (80040cc <I2C_ITError+0x1dc>)
 800407a:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2200      	movs	r2, #0
 8004080:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004088:	4618      	mov	r0, r3
 800408a:	f7fe f82c 	bl	80020e6 <HAL_DMA_Abort_IT>
 800408e:	4603      	mov	r3, r0
 8004090:	2b00      	cmp	r3, #0
 8004092:	d011      	beq.n	80040b8 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800409e:	4610      	mov	r0, r2
 80040a0:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80040a2:	e009      	b.n	80040b8 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	f000 f813 	bl	80040d0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80040aa:	e005      	b.n	80040b8 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	f000 f80f 	bl	80040d0 <I2C_TreatErrorCallback>
  }
}
 80040b2:	e002      	b.n	80040ba <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80040b4:	bf00      	nop
 80040b6:	e000      	b.n	80040ba <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80040b8:	bf00      	nop
}
 80040ba:	bf00      	nop
 80040bc:	3710      	adds	r7, #16
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	bf00      	nop
 80040c4:	ffff0000 	.word	0xffff0000
 80040c8:	08002f49 	.word	0x08002f49
 80040cc:	08004167 	.word	0x08004167

080040d0 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b082      	sub	sp, #8
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040de:	b2db      	uxtb	r3, r3
 80040e0:	2b60      	cmp	r3, #96	; 0x60
 80040e2:	d10e      	bne.n	8004102 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2220      	movs	r2, #32
 80040e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2200      	movs	r2, #0
 80040f0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2200      	movs	r2, #0
 80040f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f7fe fdf4 	bl	8002ce8 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004100:	e009      	b.n	8004116 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2200      	movs	r2, #0
 8004106:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2200      	movs	r2, #0
 800410c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	f7fe fddf 	bl	8002cd4 <HAL_I2C_ErrorCallback>
}
 8004116:	bf00      	nop
 8004118:	3708      	adds	r7, #8
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}

0800411e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800411e:	b480      	push	{r7}
 8004120:	b083      	sub	sp, #12
 8004122:	af00      	add	r7, sp, #0
 8004124:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	699b      	ldr	r3, [r3, #24]
 800412c:	f003 0302 	and.w	r3, r3, #2
 8004130:	2b02      	cmp	r3, #2
 8004132:	d103      	bne.n	800413c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	2200      	movs	r2, #0
 800413a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	699b      	ldr	r3, [r3, #24]
 8004142:	f003 0301 	and.w	r3, r3, #1
 8004146:	2b01      	cmp	r3, #1
 8004148:	d007      	beq.n	800415a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	699a      	ldr	r2, [r3, #24]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f042 0201 	orr.w	r2, r2, #1
 8004158:	619a      	str	r2, [r3, #24]
  }
}
 800415a:	bf00      	nop
 800415c:	370c      	adds	r7, #12
 800415e:	46bd      	mov	sp, r7
 8004160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004164:	4770      	bx	lr

08004166 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004166:	b580      	push	{r7, lr}
 8004168:	b084      	sub	sp, #16
 800416a:	af00      	add	r7, sp, #0
 800416c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004172:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004178:	2b00      	cmp	r3, #0
 800417a:	d003      	beq.n	8004184 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004180:	2200      	movs	r2, #0
 8004182:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004188:	2b00      	cmp	r3, #0
 800418a:	d003      	beq.n	8004194 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004190:	2200      	movs	r2, #0
 8004192:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8004194:	68f8      	ldr	r0, [r7, #12]
 8004196:	f7ff ff9b 	bl	80040d0 <I2C_TreatErrorCallback>
}
 800419a:	bf00      	nop
 800419c:	3710      	adds	r7, #16
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}

080041a2 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80041a2:	b580      	push	{r7, lr}
 80041a4:	b084      	sub	sp, #16
 80041a6:	af00      	add	r7, sp, #0
 80041a8:	60f8      	str	r0, [r7, #12]
 80041aa:	60b9      	str	r1, [r7, #8]
 80041ac:	603b      	str	r3, [r7, #0]
 80041ae:	4613      	mov	r3, r2
 80041b0:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80041b2:	e031      	b.n	8004218 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ba:	d02d      	beq.n	8004218 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041bc:	f7fd fe06 	bl	8001dcc <HAL_GetTick>
 80041c0:	4602      	mov	r2, r0
 80041c2:	69bb      	ldr	r3, [r7, #24]
 80041c4:	1ad3      	subs	r3, r2, r3
 80041c6:	683a      	ldr	r2, [r7, #0]
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d302      	bcc.n	80041d2 <I2C_WaitOnFlagUntilTimeout+0x30>
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d122      	bne.n	8004218 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	699a      	ldr	r2, [r3, #24]
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	4013      	ands	r3, r2
 80041dc:	68ba      	ldr	r2, [r7, #8]
 80041de:	429a      	cmp	r2, r3
 80041e0:	bf0c      	ite	eq
 80041e2:	2301      	moveq	r3, #1
 80041e4:	2300      	movne	r3, #0
 80041e6:	b2db      	uxtb	r3, r3
 80041e8:	461a      	mov	r2, r3
 80041ea:	79fb      	ldrb	r3, [r7, #7]
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d113      	bne.n	8004218 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041f4:	f043 0220 	orr.w	r2, r3, #32
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2220      	movs	r2, #32
 8004200:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2200      	movs	r2, #0
 8004208:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2200      	movs	r2, #0
 8004210:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	e00f      	b.n	8004238 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	699a      	ldr	r2, [r3, #24]
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	4013      	ands	r3, r2
 8004222:	68ba      	ldr	r2, [r7, #8]
 8004224:	429a      	cmp	r2, r3
 8004226:	bf0c      	ite	eq
 8004228:	2301      	moveq	r3, #1
 800422a:	2300      	movne	r3, #0
 800422c:	b2db      	uxtb	r3, r3
 800422e:	461a      	mov	r2, r3
 8004230:	79fb      	ldrb	r3, [r7, #7]
 8004232:	429a      	cmp	r2, r3
 8004234:	d0be      	beq.n	80041b4 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004236:	2300      	movs	r3, #0
}
 8004238:	4618      	mov	r0, r3
 800423a:	3710      	adds	r7, #16
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}

08004240 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b084      	sub	sp, #16
 8004244:	af00      	add	r7, sp, #0
 8004246:	60f8      	str	r0, [r7, #12]
 8004248:	60b9      	str	r1, [r7, #8]
 800424a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800424c:	e033      	b.n	80042b6 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800424e:	687a      	ldr	r2, [r7, #4]
 8004250:	68b9      	ldr	r1, [r7, #8]
 8004252:	68f8      	ldr	r0, [r7, #12]
 8004254:	f000 f87e 	bl	8004354 <I2C_IsErrorOccurred>
 8004258:	4603      	mov	r3, r0
 800425a:	2b00      	cmp	r3, #0
 800425c:	d001      	beq.n	8004262 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e031      	b.n	80042c6 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004268:	d025      	beq.n	80042b6 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800426a:	f7fd fdaf 	bl	8001dcc <HAL_GetTick>
 800426e:	4602      	mov	r2, r0
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	1ad3      	subs	r3, r2, r3
 8004274:	68ba      	ldr	r2, [r7, #8]
 8004276:	429a      	cmp	r2, r3
 8004278:	d302      	bcc.n	8004280 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d11a      	bne.n	80042b6 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	699b      	ldr	r3, [r3, #24]
 8004286:	f003 0302 	and.w	r3, r3, #2
 800428a:	2b02      	cmp	r3, #2
 800428c:	d013      	beq.n	80042b6 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004292:	f043 0220 	orr.w	r2, r3, #32
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2220      	movs	r2, #32
 800429e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2200      	movs	r2, #0
 80042a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2200      	movs	r2, #0
 80042ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e007      	b.n	80042c6 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	699b      	ldr	r3, [r3, #24]
 80042bc:	f003 0302 	and.w	r3, r3, #2
 80042c0:	2b02      	cmp	r3, #2
 80042c2:	d1c4      	bne.n	800424e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80042c4:	2300      	movs	r3, #0
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3710      	adds	r7, #16
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}

080042ce <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80042ce:	b580      	push	{r7, lr}
 80042d0:	b084      	sub	sp, #16
 80042d2:	af00      	add	r7, sp, #0
 80042d4:	60f8      	str	r0, [r7, #12]
 80042d6:	60b9      	str	r1, [r7, #8]
 80042d8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80042da:	e02f      	b.n	800433c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80042dc:	687a      	ldr	r2, [r7, #4]
 80042de:	68b9      	ldr	r1, [r7, #8]
 80042e0:	68f8      	ldr	r0, [r7, #12]
 80042e2:	f000 f837 	bl	8004354 <I2C_IsErrorOccurred>
 80042e6:	4603      	mov	r3, r0
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d001      	beq.n	80042f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	e02d      	b.n	800434c <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042f0:	f7fd fd6c 	bl	8001dcc <HAL_GetTick>
 80042f4:	4602      	mov	r2, r0
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	1ad3      	subs	r3, r2, r3
 80042fa:	68ba      	ldr	r2, [r7, #8]
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d302      	bcc.n	8004306 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d11a      	bne.n	800433c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	699b      	ldr	r3, [r3, #24]
 800430c:	f003 0320 	and.w	r3, r3, #32
 8004310:	2b20      	cmp	r3, #32
 8004312:	d013      	beq.n	800433c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004318:	f043 0220 	orr.w	r2, r3, #32
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2220      	movs	r2, #32
 8004324:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2200      	movs	r2, #0
 800432c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2200      	movs	r2, #0
 8004334:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004338:	2301      	movs	r3, #1
 800433a:	e007      	b.n	800434c <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	699b      	ldr	r3, [r3, #24]
 8004342:	f003 0320 	and.w	r3, r3, #32
 8004346:	2b20      	cmp	r3, #32
 8004348:	d1c8      	bne.n	80042dc <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800434a:	2300      	movs	r3, #0
}
 800434c:	4618      	mov	r0, r3
 800434e:	3710      	adds	r7, #16
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}

08004354 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b08a      	sub	sp, #40	; 0x28
 8004358:	af00      	add	r7, sp, #0
 800435a:	60f8      	str	r0, [r7, #12]
 800435c:	60b9      	str	r1, [r7, #8]
 800435e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004360:	2300      	movs	r3, #0
 8004362:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	699b      	ldr	r3, [r3, #24]
 800436c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800436e:	2300      	movs	r3, #0
 8004370:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004376:	69bb      	ldr	r3, [r7, #24]
 8004378:	f003 0310 	and.w	r3, r3, #16
 800437c:	2b00      	cmp	r3, #0
 800437e:	d068      	beq.n	8004452 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	2210      	movs	r2, #16
 8004386:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004388:	e049      	b.n	800441e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004390:	d045      	beq.n	800441e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004392:	f7fd fd1b 	bl	8001dcc <HAL_GetTick>
 8004396:	4602      	mov	r2, r0
 8004398:	69fb      	ldr	r3, [r7, #28]
 800439a:	1ad3      	subs	r3, r2, r3
 800439c:	68ba      	ldr	r2, [r7, #8]
 800439e:	429a      	cmp	r2, r3
 80043a0:	d302      	bcc.n	80043a8 <I2C_IsErrorOccurred+0x54>
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d13a      	bne.n	800441e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043b2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80043ba:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	699b      	ldr	r3, [r3, #24]
 80043c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80043c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043ca:	d121      	bne.n	8004410 <I2C_IsErrorOccurred+0xbc>
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80043d2:	d01d      	beq.n	8004410 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80043d4:	7cfb      	ldrb	r3, [r7, #19]
 80043d6:	2b20      	cmp	r3, #32
 80043d8:	d01a      	beq.n	8004410 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	685a      	ldr	r2, [r3, #4]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80043e8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80043ea:	f7fd fcef 	bl	8001dcc <HAL_GetTick>
 80043ee:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80043f0:	e00e      	b.n	8004410 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80043f2:	f7fd fceb 	bl	8001dcc <HAL_GetTick>
 80043f6:	4602      	mov	r2, r0
 80043f8:	69fb      	ldr	r3, [r7, #28]
 80043fa:	1ad3      	subs	r3, r2, r3
 80043fc:	2b19      	cmp	r3, #25
 80043fe:	d907      	bls.n	8004410 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004400:	6a3b      	ldr	r3, [r7, #32]
 8004402:	f043 0320 	orr.w	r3, r3, #32
 8004406:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800440e:	e006      	b.n	800441e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	699b      	ldr	r3, [r3, #24]
 8004416:	f003 0320 	and.w	r3, r3, #32
 800441a:	2b20      	cmp	r3, #32
 800441c:	d1e9      	bne.n	80043f2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	699b      	ldr	r3, [r3, #24]
 8004424:	f003 0320 	and.w	r3, r3, #32
 8004428:	2b20      	cmp	r3, #32
 800442a:	d003      	beq.n	8004434 <I2C_IsErrorOccurred+0xe0>
 800442c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004430:	2b00      	cmp	r3, #0
 8004432:	d0aa      	beq.n	800438a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004434:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004438:	2b00      	cmp	r3, #0
 800443a:	d103      	bne.n	8004444 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	2220      	movs	r2, #32
 8004442:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004444:	6a3b      	ldr	r3, [r7, #32]
 8004446:	f043 0304 	orr.w	r3, r3, #4
 800444a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	699b      	ldr	r3, [r3, #24]
 8004458:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800445a:	69bb      	ldr	r3, [r7, #24]
 800445c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004460:	2b00      	cmp	r3, #0
 8004462:	d00b      	beq.n	800447c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004464:	6a3b      	ldr	r3, [r7, #32]
 8004466:	f043 0301 	orr.w	r3, r3, #1
 800446a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004474:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800447c:	69bb      	ldr	r3, [r7, #24]
 800447e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004482:	2b00      	cmp	r3, #0
 8004484:	d00b      	beq.n	800449e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004486:	6a3b      	ldr	r3, [r7, #32]
 8004488:	f043 0308 	orr.w	r3, r3, #8
 800448c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004496:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800449e:	69bb      	ldr	r3, [r7, #24]
 80044a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d00b      	beq.n	80044c0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80044a8:	6a3b      	ldr	r3, [r7, #32]
 80044aa:	f043 0302 	orr.w	r3, r3, #2
 80044ae:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80044b8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80044c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d01c      	beq.n	8004502 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80044c8:	68f8      	ldr	r0, [r7, #12]
 80044ca:	f7ff fe28 	bl	800411e <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	6859      	ldr	r1, [r3, #4]
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	4b0d      	ldr	r3, [pc, #52]	; (8004510 <I2C_IsErrorOccurred+0x1bc>)
 80044da:	400b      	ands	r3, r1
 80044dc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044e2:	6a3b      	ldr	r3, [r7, #32]
 80044e4:	431a      	orrs	r2, r3
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2220      	movs	r2, #32
 80044ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2200      	movs	r2, #0
 80044f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2200      	movs	r2, #0
 80044fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004502:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004506:	4618      	mov	r0, r3
 8004508:	3728      	adds	r7, #40	; 0x28
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}
 800450e:	bf00      	nop
 8004510:	fe00e800 	.word	0xfe00e800

08004514 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004514:	b480      	push	{r7}
 8004516:	b087      	sub	sp, #28
 8004518:	af00      	add	r7, sp, #0
 800451a:	60f8      	str	r0, [r7, #12]
 800451c:	607b      	str	r3, [r7, #4]
 800451e:	460b      	mov	r3, r1
 8004520:	817b      	strh	r3, [r7, #10]
 8004522:	4613      	mov	r3, r2
 8004524:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004526:	897b      	ldrh	r3, [r7, #10]
 8004528:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800452c:	7a7b      	ldrb	r3, [r7, #9]
 800452e:	041b      	lsls	r3, r3, #16
 8004530:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004534:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800453a:	6a3b      	ldr	r3, [r7, #32]
 800453c:	4313      	orrs	r3, r2
 800453e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004542:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	685a      	ldr	r2, [r3, #4]
 800454a:	6a3b      	ldr	r3, [r7, #32]
 800454c:	0d5b      	lsrs	r3, r3, #21
 800454e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004552:	4b08      	ldr	r3, [pc, #32]	; (8004574 <I2C_TransferConfig+0x60>)
 8004554:	430b      	orrs	r3, r1
 8004556:	43db      	mvns	r3, r3
 8004558:	ea02 0103 	and.w	r1, r2, r3
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	697a      	ldr	r2, [r7, #20]
 8004562:	430a      	orrs	r2, r1
 8004564:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004566:	bf00      	nop
 8004568:	371c      	adds	r7, #28
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr
 8004572:	bf00      	nop
 8004574:	03ff63ff 	.word	0x03ff63ff

08004578 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004578:	b480      	push	{r7}
 800457a:	b085      	sub	sp, #20
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
 8004580:	460b      	mov	r3, r1
 8004582:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004584:	2300      	movs	r3, #0
 8004586:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800458c:	4a39      	ldr	r2, [pc, #228]	; (8004674 <I2C_Enable_IRQ+0xfc>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d032      	beq.n	80045f8 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8004596:	4a38      	ldr	r2, [pc, #224]	; (8004678 <I2C_Enable_IRQ+0x100>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d02d      	beq.n	80045f8 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80045a0:	4a36      	ldr	r2, [pc, #216]	; (800467c <I2C_Enable_IRQ+0x104>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d028      	beq.n	80045f8 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80045a6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	da03      	bge.n	80045b6 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80045b4:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80045b6:	887b      	ldrh	r3, [r7, #2]
 80045b8:	f003 0301 	and.w	r3, r3, #1
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d003      	beq.n	80045c8 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 80045c6:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80045c8:	887b      	ldrh	r3, [r7, #2]
 80045ca:	f003 0302 	and.w	r3, r3, #2
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d003      	beq.n	80045da <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 80045d8:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80045da:	887b      	ldrh	r3, [r7, #2]
 80045dc:	2b10      	cmp	r3, #16
 80045de:	d103      	bne.n	80045e8 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80045e6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80045e8:	887b      	ldrh	r3, [r7, #2]
 80045ea:	2b20      	cmp	r3, #32
 80045ec:	d133      	bne.n	8004656 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	f043 0320 	orr.w	r3, r3, #32
 80045f4:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80045f6:	e02e      	b.n	8004656 <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80045f8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	da03      	bge.n	8004608 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8004606:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004608:	887b      	ldrh	r3, [r7, #2]
 800460a:	f003 0301 	and.w	r3, r3, #1
 800460e:	2b00      	cmp	r3, #0
 8004610:	d003      	beq.n	800461a <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8004618:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800461a:	887b      	ldrh	r3, [r7, #2]
 800461c:	f003 0302 	and.w	r3, r3, #2
 8004620:	2b00      	cmp	r3, #0
 8004622:	d003      	beq.n	800462c <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800462a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800462c:	887b      	ldrh	r3, [r7, #2]
 800462e:	2b10      	cmp	r3, #16
 8004630:	d103      	bne.n	800463a <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8004638:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800463a:	887b      	ldrh	r3, [r7, #2]
 800463c:	2b20      	cmp	r3, #32
 800463e:	d103      	bne.n	8004648 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004646:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004648:	887b      	ldrh	r3, [r7, #2]
 800464a:	2b40      	cmp	r3, #64	; 0x40
 800464c:	d103      	bne.n	8004656 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004654:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	6819      	ldr	r1, [r3, #0]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	68fa      	ldr	r2, [r7, #12]
 8004662:	430a      	orrs	r2, r1
 8004664:	601a      	str	r2, [r3, #0]
}
 8004666:	bf00      	nop
 8004668:	3714      	adds	r7, #20
 800466a:	46bd      	mov	sp, r7
 800466c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004670:	4770      	bx	lr
 8004672:	bf00      	nop
 8004674:	08003139 	.word	0x08003139
 8004678:	0800355d 	.word	0x0800355d
 800467c:	08003311 	.word	0x08003311

08004680 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004680:	b480      	push	{r7}
 8004682:	b085      	sub	sp, #20
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
 8004688:	460b      	mov	r3, r1
 800468a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800468c:	2300      	movs	r3, #0
 800468e:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004690:	887b      	ldrh	r3, [r7, #2]
 8004692:	f003 0301 	and.w	r3, r3, #1
 8004696:	2b00      	cmp	r3, #0
 8004698:	d00f      	beq.n	80046ba <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 80046a0:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80046ae:	2b28      	cmp	r3, #40	; 0x28
 80046b0:	d003      	beq.n	80046ba <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80046b8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80046ba:	887b      	ldrh	r3, [r7, #2]
 80046bc:	f003 0302 	and.w	r3, r3, #2
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d00f      	beq.n	80046e4 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80046ca:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046d2:	b2db      	uxtb	r3, r3
 80046d4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80046d8:	2b28      	cmp	r3, #40	; 0x28
 80046da:	d003      	beq.n	80046e4 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80046e2:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80046e4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	da03      	bge.n	80046f4 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80046f2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80046f4:	887b      	ldrh	r3, [r7, #2]
 80046f6:	2b10      	cmp	r3, #16
 80046f8:	d103      	bne.n	8004702 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8004700:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004702:	887b      	ldrh	r3, [r7, #2]
 8004704:	2b20      	cmp	r3, #32
 8004706:	d103      	bne.n	8004710 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f043 0320 	orr.w	r3, r3, #32
 800470e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004710:	887b      	ldrh	r3, [r7, #2]
 8004712:	2b40      	cmp	r3, #64	; 0x40
 8004714:	d103      	bne.n	800471e <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800471c:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	6819      	ldr	r1, [r3, #0]
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	43da      	mvns	r2, r3
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	400a      	ands	r2, r1
 800472e:	601a      	str	r2, [r3, #0]
}
 8004730:	bf00      	nop
 8004732:	3714      	adds	r7, #20
 8004734:	46bd      	mov	sp, r7
 8004736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473a:	4770      	bx	lr

0800473c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800473c:	b480      	push	{r7}
 800473e:	b083      	sub	sp, #12
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
 8004744:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800474c:	b2db      	uxtb	r3, r3
 800474e:	2b20      	cmp	r3, #32
 8004750:	d138      	bne.n	80047c4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004758:	2b01      	cmp	r3, #1
 800475a:	d101      	bne.n	8004760 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800475c:	2302      	movs	r3, #2
 800475e:	e032      	b.n	80047c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2201      	movs	r2, #1
 8004764:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2224      	movs	r2, #36	; 0x24
 800476c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f022 0201 	bic.w	r2, r2, #1
 800477e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800478e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	6819      	ldr	r1, [r3, #0]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	683a      	ldr	r2, [r7, #0]
 800479c:	430a      	orrs	r2, r1
 800479e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f042 0201 	orr.w	r2, r2, #1
 80047ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2220      	movs	r2, #32
 80047b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2200      	movs	r2, #0
 80047bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80047c0:	2300      	movs	r3, #0
 80047c2:	e000      	b.n	80047c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80047c4:	2302      	movs	r3, #2
  }
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	370c      	adds	r7, #12
 80047ca:	46bd      	mov	sp, r7
 80047cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d0:	4770      	bx	lr

080047d2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80047d2:	b480      	push	{r7}
 80047d4:	b085      	sub	sp, #20
 80047d6:	af00      	add	r7, sp, #0
 80047d8:	6078      	str	r0, [r7, #4]
 80047da:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047e2:	b2db      	uxtb	r3, r3
 80047e4:	2b20      	cmp	r3, #32
 80047e6:	d139      	bne.n	800485c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	d101      	bne.n	80047f6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80047f2:	2302      	movs	r3, #2
 80047f4:	e033      	b.n	800485e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2201      	movs	r2, #1
 80047fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2224      	movs	r2, #36	; 0x24
 8004802:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f022 0201 	bic.w	r2, r2, #1
 8004814:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004824:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	021b      	lsls	r3, r3, #8
 800482a:	68fa      	ldr	r2, [r7, #12]
 800482c:	4313      	orrs	r3, r2
 800482e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	68fa      	ldr	r2, [r7, #12]
 8004836:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f042 0201 	orr.w	r2, r2, #1
 8004846:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2220      	movs	r2, #32
 800484c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2200      	movs	r2, #0
 8004854:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004858:	2300      	movs	r3, #0
 800485a:	e000      	b.n	800485e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800485c:	2302      	movs	r3, #2
  }
}
 800485e:	4618      	mov	r0, r3
 8004860:	3714      	adds	r7, #20
 8004862:	46bd      	mov	sp, r7
 8004864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004868:	4770      	bx	lr
	...

0800486c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800486c:	b480      	push	{r7}
 800486e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004870:	4b04      	ldr	r3, [pc, #16]	; (8004884 <HAL_PWREx_GetVoltageRange+0x18>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004878:	4618      	mov	r0, r3
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr
 8004882:	bf00      	nop
 8004884:	40007000 	.word	0x40007000

08004888 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004888:	b480      	push	{r7}
 800488a:	b085      	sub	sp, #20
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004896:	d130      	bne.n	80048fa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004898:	4b23      	ldr	r3, [pc, #140]	; (8004928 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80048a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048a4:	d038      	beq.n	8004918 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80048a6:	4b20      	ldr	r3, [pc, #128]	; (8004928 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80048ae:	4a1e      	ldr	r2, [pc, #120]	; (8004928 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80048b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80048b4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80048b6:	4b1d      	ldr	r3, [pc, #116]	; (800492c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	2232      	movs	r2, #50	; 0x32
 80048bc:	fb02 f303 	mul.w	r3, r2, r3
 80048c0:	4a1b      	ldr	r2, [pc, #108]	; (8004930 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80048c2:	fba2 2303 	umull	r2, r3, r2, r3
 80048c6:	0c9b      	lsrs	r3, r3, #18
 80048c8:	3301      	adds	r3, #1
 80048ca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80048cc:	e002      	b.n	80048d4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	3b01      	subs	r3, #1
 80048d2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80048d4:	4b14      	ldr	r3, [pc, #80]	; (8004928 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80048d6:	695b      	ldr	r3, [r3, #20]
 80048d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048e0:	d102      	bne.n	80048e8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d1f2      	bne.n	80048ce <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80048e8:	4b0f      	ldr	r3, [pc, #60]	; (8004928 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80048ea:	695b      	ldr	r3, [r3, #20]
 80048ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048f4:	d110      	bne.n	8004918 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80048f6:	2303      	movs	r3, #3
 80048f8:	e00f      	b.n	800491a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80048fa:	4b0b      	ldr	r3, [pc, #44]	; (8004928 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004902:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004906:	d007      	beq.n	8004918 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004908:	4b07      	ldr	r3, [pc, #28]	; (8004928 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004910:	4a05      	ldr	r2, [pc, #20]	; (8004928 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004912:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004916:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004918:	2300      	movs	r3, #0
}
 800491a:	4618      	mov	r0, r3
 800491c:	3714      	adds	r7, #20
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr
 8004926:	bf00      	nop
 8004928:	40007000 	.word	0x40007000
 800492c:	20000000 	.word	0x20000000
 8004930:	431bde83 	.word	0x431bde83

08004934 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b088      	sub	sp, #32
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d101      	bne.n	8004946 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	e3ca      	b.n	80050dc <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004946:	4b97      	ldr	r3, [pc, #604]	; (8004ba4 <HAL_RCC_OscConfig+0x270>)
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	f003 030c 	and.w	r3, r3, #12
 800494e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004950:	4b94      	ldr	r3, [pc, #592]	; (8004ba4 <HAL_RCC_OscConfig+0x270>)
 8004952:	68db      	ldr	r3, [r3, #12]
 8004954:	f003 0303 	and.w	r3, r3, #3
 8004958:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 0310 	and.w	r3, r3, #16
 8004962:	2b00      	cmp	r3, #0
 8004964:	f000 80e4 	beq.w	8004b30 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004968:	69bb      	ldr	r3, [r7, #24]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d007      	beq.n	800497e <HAL_RCC_OscConfig+0x4a>
 800496e:	69bb      	ldr	r3, [r7, #24]
 8004970:	2b0c      	cmp	r3, #12
 8004972:	f040 808b 	bne.w	8004a8c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	2b01      	cmp	r3, #1
 800497a:	f040 8087 	bne.w	8004a8c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800497e:	4b89      	ldr	r3, [pc, #548]	; (8004ba4 <HAL_RCC_OscConfig+0x270>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f003 0302 	and.w	r3, r3, #2
 8004986:	2b00      	cmp	r3, #0
 8004988:	d005      	beq.n	8004996 <HAL_RCC_OscConfig+0x62>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	699b      	ldr	r3, [r3, #24]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d101      	bne.n	8004996 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	e3a2      	b.n	80050dc <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6a1a      	ldr	r2, [r3, #32]
 800499a:	4b82      	ldr	r3, [pc, #520]	; (8004ba4 <HAL_RCC_OscConfig+0x270>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 0308 	and.w	r3, r3, #8
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d004      	beq.n	80049b0 <HAL_RCC_OscConfig+0x7c>
 80049a6:	4b7f      	ldr	r3, [pc, #508]	; (8004ba4 <HAL_RCC_OscConfig+0x270>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80049ae:	e005      	b.n	80049bc <HAL_RCC_OscConfig+0x88>
 80049b0:	4b7c      	ldr	r3, [pc, #496]	; (8004ba4 <HAL_RCC_OscConfig+0x270>)
 80049b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049b6:	091b      	lsrs	r3, r3, #4
 80049b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80049bc:	4293      	cmp	r3, r2
 80049be:	d223      	bcs.n	8004a08 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6a1b      	ldr	r3, [r3, #32]
 80049c4:	4618      	mov	r0, r3
 80049c6:	f000 fd55 	bl	8005474 <RCC_SetFlashLatencyFromMSIRange>
 80049ca:	4603      	mov	r3, r0
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d001      	beq.n	80049d4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	e383      	b.n	80050dc <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80049d4:	4b73      	ldr	r3, [pc, #460]	; (8004ba4 <HAL_RCC_OscConfig+0x270>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a72      	ldr	r2, [pc, #456]	; (8004ba4 <HAL_RCC_OscConfig+0x270>)
 80049da:	f043 0308 	orr.w	r3, r3, #8
 80049de:	6013      	str	r3, [r2, #0]
 80049e0:	4b70      	ldr	r3, [pc, #448]	; (8004ba4 <HAL_RCC_OscConfig+0x270>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6a1b      	ldr	r3, [r3, #32]
 80049ec:	496d      	ldr	r1, [pc, #436]	; (8004ba4 <HAL_RCC_OscConfig+0x270>)
 80049ee:	4313      	orrs	r3, r2
 80049f0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80049f2:	4b6c      	ldr	r3, [pc, #432]	; (8004ba4 <HAL_RCC_OscConfig+0x270>)
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	69db      	ldr	r3, [r3, #28]
 80049fe:	021b      	lsls	r3, r3, #8
 8004a00:	4968      	ldr	r1, [pc, #416]	; (8004ba4 <HAL_RCC_OscConfig+0x270>)
 8004a02:	4313      	orrs	r3, r2
 8004a04:	604b      	str	r3, [r1, #4]
 8004a06:	e025      	b.n	8004a54 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004a08:	4b66      	ldr	r3, [pc, #408]	; (8004ba4 <HAL_RCC_OscConfig+0x270>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a65      	ldr	r2, [pc, #404]	; (8004ba4 <HAL_RCC_OscConfig+0x270>)
 8004a0e:	f043 0308 	orr.w	r3, r3, #8
 8004a12:	6013      	str	r3, [r2, #0]
 8004a14:	4b63      	ldr	r3, [pc, #396]	; (8004ba4 <HAL_RCC_OscConfig+0x270>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6a1b      	ldr	r3, [r3, #32]
 8004a20:	4960      	ldr	r1, [pc, #384]	; (8004ba4 <HAL_RCC_OscConfig+0x270>)
 8004a22:	4313      	orrs	r3, r2
 8004a24:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004a26:	4b5f      	ldr	r3, [pc, #380]	; (8004ba4 <HAL_RCC_OscConfig+0x270>)
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	69db      	ldr	r3, [r3, #28]
 8004a32:	021b      	lsls	r3, r3, #8
 8004a34:	495b      	ldr	r1, [pc, #364]	; (8004ba4 <HAL_RCC_OscConfig+0x270>)
 8004a36:	4313      	orrs	r3, r2
 8004a38:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004a3a:	69bb      	ldr	r3, [r7, #24]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d109      	bne.n	8004a54 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6a1b      	ldr	r3, [r3, #32]
 8004a44:	4618      	mov	r0, r3
 8004a46:	f000 fd15 	bl	8005474 <RCC_SetFlashLatencyFromMSIRange>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d001      	beq.n	8004a54 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004a50:	2301      	movs	r3, #1
 8004a52:	e343      	b.n	80050dc <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004a54:	f000 fc4a 	bl	80052ec <HAL_RCC_GetSysClockFreq>
 8004a58:	4602      	mov	r2, r0
 8004a5a:	4b52      	ldr	r3, [pc, #328]	; (8004ba4 <HAL_RCC_OscConfig+0x270>)
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	091b      	lsrs	r3, r3, #4
 8004a60:	f003 030f 	and.w	r3, r3, #15
 8004a64:	4950      	ldr	r1, [pc, #320]	; (8004ba8 <HAL_RCC_OscConfig+0x274>)
 8004a66:	5ccb      	ldrb	r3, [r1, r3]
 8004a68:	f003 031f 	and.w	r3, r3, #31
 8004a6c:	fa22 f303 	lsr.w	r3, r2, r3
 8004a70:	4a4e      	ldr	r2, [pc, #312]	; (8004bac <HAL_RCC_OscConfig+0x278>)
 8004a72:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004a74:	4b4e      	ldr	r3, [pc, #312]	; (8004bb0 <HAL_RCC_OscConfig+0x27c>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4618      	mov	r0, r3
 8004a7a:	f7fd f957 	bl	8001d2c <HAL_InitTick>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004a82:	7bfb      	ldrb	r3, [r7, #15]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d052      	beq.n	8004b2e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004a88:	7bfb      	ldrb	r3, [r7, #15]
 8004a8a:	e327      	b.n	80050dc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	699b      	ldr	r3, [r3, #24]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d032      	beq.n	8004afa <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004a94:	4b43      	ldr	r3, [pc, #268]	; (8004ba4 <HAL_RCC_OscConfig+0x270>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a42      	ldr	r2, [pc, #264]	; (8004ba4 <HAL_RCC_OscConfig+0x270>)
 8004a9a:	f043 0301 	orr.w	r3, r3, #1
 8004a9e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004aa0:	f7fd f994 	bl	8001dcc <HAL_GetTick>
 8004aa4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004aa6:	e008      	b.n	8004aba <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004aa8:	f7fd f990 	bl	8001dcc <HAL_GetTick>
 8004aac:	4602      	mov	r2, r0
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	1ad3      	subs	r3, r2, r3
 8004ab2:	2b02      	cmp	r3, #2
 8004ab4:	d901      	bls.n	8004aba <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004ab6:	2303      	movs	r3, #3
 8004ab8:	e310      	b.n	80050dc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004aba:	4b3a      	ldr	r3, [pc, #232]	; (8004ba4 <HAL_RCC_OscConfig+0x270>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f003 0302 	and.w	r3, r3, #2
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d0f0      	beq.n	8004aa8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004ac6:	4b37      	ldr	r3, [pc, #220]	; (8004ba4 <HAL_RCC_OscConfig+0x270>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a36      	ldr	r2, [pc, #216]	; (8004ba4 <HAL_RCC_OscConfig+0x270>)
 8004acc:	f043 0308 	orr.w	r3, r3, #8
 8004ad0:	6013      	str	r3, [r2, #0]
 8004ad2:	4b34      	ldr	r3, [pc, #208]	; (8004ba4 <HAL_RCC_OscConfig+0x270>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6a1b      	ldr	r3, [r3, #32]
 8004ade:	4931      	ldr	r1, [pc, #196]	; (8004ba4 <HAL_RCC_OscConfig+0x270>)
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004ae4:	4b2f      	ldr	r3, [pc, #188]	; (8004ba4 <HAL_RCC_OscConfig+0x270>)
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	69db      	ldr	r3, [r3, #28]
 8004af0:	021b      	lsls	r3, r3, #8
 8004af2:	492c      	ldr	r1, [pc, #176]	; (8004ba4 <HAL_RCC_OscConfig+0x270>)
 8004af4:	4313      	orrs	r3, r2
 8004af6:	604b      	str	r3, [r1, #4]
 8004af8:	e01a      	b.n	8004b30 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004afa:	4b2a      	ldr	r3, [pc, #168]	; (8004ba4 <HAL_RCC_OscConfig+0x270>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a29      	ldr	r2, [pc, #164]	; (8004ba4 <HAL_RCC_OscConfig+0x270>)
 8004b00:	f023 0301 	bic.w	r3, r3, #1
 8004b04:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004b06:	f7fd f961 	bl	8001dcc <HAL_GetTick>
 8004b0a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004b0c:	e008      	b.n	8004b20 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004b0e:	f7fd f95d 	bl	8001dcc <HAL_GetTick>
 8004b12:	4602      	mov	r2, r0
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	1ad3      	subs	r3, r2, r3
 8004b18:	2b02      	cmp	r3, #2
 8004b1a:	d901      	bls.n	8004b20 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004b1c:	2303      	movs	r3, #3
 8004b1e:	e2dd      	b.n	80050dc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004b20:	4b20      	ldr	r3, [pc, #128]	; (8004ba4 <HAL_RCC_OscConfig+0x270>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f003 0302 	and.w	r3, r3, #2
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d1f0      	bne.n	8004b0e <HAL_RCC_OscConfig+0x1da>
 8004b2c:	e000      	b.n	8004b30 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004b2e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f003 0301 	and.w	r3, r3, #1
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d074      	beq.n	8004c26 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004b3c:	69bb      	ldr	r3, [r7, #24]
 8004b3e:	2b08      	cmp	r3, #8
 8004b40:	d005      	beq.n	8004b4e <HAL_RCC_OscConfig+0x21a>
 8004b42:	69bb      	ldr	r3, [r7, #24]
 8004b44:	2b0c      	cmp	r3, #12
 8004b46:	d10e      	bne.n	8004b66 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	2b03      	cmp	r3, #3
 8004b4c:	d10b      	bne.n	8004b66 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b4e:	4b15      	ldr	r3, [pc, #84]	; (8004ba4 <HAL_RCC_OscConfig+0x270>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d064      	beq.n	8004c24 <HAL_RCC_OscConfig+0x2f0>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d160      	bne.n	8004c24 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	e2ba      	b.n	80050dc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b6e:	d106      	bne.n	8004b7e <HAL_RCC_OscConfig+0x24a>
 8004b70:	4b0c      	ldr	r3, [pc, #48]	; (8004ba4 <HAL_RCC_OscConfig+0x270>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a0b      	ldr	r2, [pc, #44]	; (8004ba4 <HAL_RCC_OscConfig+0x270>)
 8004b76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b7a:	6013      	str	r3, [r2, #0]
 8004b7c:	e026      	b.n	8004bcc <HAL_RCC_OscConfig+0x298>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b86:	d115      	bne.n	8004bb4 <HAL_RCC_OscConfig+0x280>
 8004b88:	4b06      	ldr	r3, [pc, #24]	; (8004ba4 <HAL_RCC_OscConfig+0x270>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a05      	ldr	r2, [pc, #20]	; (8004ba4 <HAL_RCC_OscConfig+0x270>)
 8004b8e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b92:	6013      	str	r3, [r2, #0]
 8004b94:	4b03      	ldr	r3, [pc, #12]	; (8004ba4 <HAL_RCC_OscConfig+0x270>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a02      	ldr	r2, [pc, #8]	; (8004ba4 <HAL_RCC_OscConfig+0x270>)
 8004b9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b9e:	6013      	str	r3, [r2, #0]
 8004ba0:	e014      	b.n	8004bcc <HAL_RCC_OscConfig+0x298>
 8004ba2:	bf00      	nop
 8004ba4:	40021000 	.word	0x40021000
 8004ba8:	0800ac6c 	.word	0x0800ac6c
 8004bac:	20000000 	.word	0x20000000
 8004bb0:	20000004 	.word	0x20000004
 8004bb4:	4ba0      	ldr	r3, [pc, #640]	; (8004e38 <HAL_RCC_OscConfig+0x504>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a9f      	ldr	r2, [pc, #636]	; (8004e38 <HAL_RCC_OscConfig+0x504>)
 8004bba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bbe:	6013      	str	r3, [r2, #0]
 8004bc0:	4b9d      	ldr	r3, [pc, #628]	; (8004e38 <HAL_RCC_OscConfig+0x504>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a9c      	ldr	r2, [pc, #624]	; (8004e38 <HAL_RCC_OscConfig+0x504>)
 8004bc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004bca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d013      	beq.n	8004bfc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bd4:	f7fd f8fa 	bl	8001dcc <HAL_GetTick>
 8004bd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004bda:	e008      	b.n	8004bee <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004bdc:	f7fd f8f6 	bl	8001dcc <HAL_GetTick>
 8004be0:	4602      	mov	r2, r0
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	1ad3      	subs	r3, r2, r3
 8004be6:	2b64      	cmp	r3, #100	; 0x64
 8004be8:	d901      	bls.n	8004bee <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004bea:	2303      	movs	r3, #3
 8004bec:	e276      	b.n	80050dc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004bee:	4b92      	ldr	r3, [pc, #584]	; (8004e38 <HAL_RCC_OscConfig+0x504>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d0f0      	beq.n	8004bdc <HAL_RCC_OscConfig+0x2a8>
 8004bfa:	e014      	b.n	8004c26 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bfc:	f7fd f8e6 	bl	8001dcc <HAL_GetTick>
 8004c00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004c02:	e008      	b.n	8004c16 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c04:	f7fd f8e2 	bl	8001dcc <HAL_GetTick>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	1ad3      	subs	r3, r2, r3
 8004c0e:	2b64      	cmp	r3, #100	; 0x64
 8004c10:	d901      	bls.n	8004c16 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004c12:	2303      	movs	r3, #3
 8004c14:	e262      	b.n	80050dc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004c16:	4b88      	ldr	r3, [pc, #544]	; (8004e38 <HAL_RCC_OscConfig+0x504>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d1f0      	bne.n	8004c04 <HAL_RCC_OscConfig+0x2d0>
 8004c22:	e000      	b.n	8004c26 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f003 0302 	and.w	r3, r3, #2
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d060      	beq.n	8004cf4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004c32:	69bb      	ldr	r3, [r7, #24]
 8004c34:	2b04      	cmp	r3, #4
 8004c36:	d005      	beq.n	8004c44 <HAL_RCC_OscConfig+0x310>
 8004c38:	69bb      	ldr	r3, [r7, #24]
 8004c3a:	2b0c      	cmp	r3, #12
 8004c3c:	d119      	bne.n	8004c72 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	2b02      	cmp	r3, #2
 8004c42:	d116      	bne.n	8004c72 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c44:	4b7c      	ldr	r3, [pc, #496]	; (8004e38 <HAL_RCC_OscConfig+0x504>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d005      	beq.n	8004c5c <HAL_RCC_OscConfig+0x328>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	68db      	ldr	r3, [r3, #12]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d101      	bne.n	8004c5c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	e23f      	b.n	80050dc <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c5c:	4b76      	ldr	r3, [pc, #472]	; (8004e38 <HAL_RCC_OscConfig+0x504>)
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	691b      	ldr	r3, [r3, #16]
 8004c68:	061b      	lsls	r3, r3, #24
 8004c6a:	4973      	ldr	r1, [pc, #460]	; (8004e38 <HAL_RCC_OscConfig+0x504>)
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c70:	e040      	b.n	8004cf4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	68db      	ldr	r3, [r3, #12]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d023      	beq.n	8004cc2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c7a:	4b6f      	ldr	r3, [pc, #444]	; (8004e38 <HAL_RCC_OscConfig+0x504>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a6e      	ldr	r2, [pc, #440]	; (8004e38 <HAL_RCC_OscConfig+0x504>)
 8004c80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c86:	f7fd f8a1 	bl	8001dcc <HAL_GetTick>
 8004c8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c8c:	e008      	b.n	8004ca0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c8e:	f7fd f89d 	bl	8001dcc <HAL_GetTick>
 8004c92:	4602      	mov	r2, r0
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	1ad3      	subs	r3, r2, r3
 8004c98:	2b02      	cmp	r3, #2
 8004c9a:	d901      	bls.n	8004ca0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004c9c:	2303      	movs	r3, #3
 8004c9e:	e21d      	b.n	80050dc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ca0:	4b65      	ldr	r3, [pc, #404]	; (8004e38 <HAL_RCC_OscConfig+0x504>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d0f0      	beq.n	8004c8e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cac:	4b62      	ldr	r3, [pc, #392]	; (8004e38 <HAL_RCC_OscConfig+0x504>)
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	691b      	ldr	r3, [r3, #16]
 8004cb8:	061b      	lsls	r3, r3, #24
 8004cba:	495f      	ldr	r1, [pc, #380]	; (8004e38 <HAL_RCC_OscConfig+0x504>)
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	604b      	str	r3, [r1, #4]
 8004cc0:	e018      	b.n	8004cf4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004cc2:	4b5d      	ldr	r3, [pc, #372]	; (8004e38 <HAL_RCC_OscConfig+0x504>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a5c      	ldr	r2, [pc, #368]	; (8004e38 <HAL_RCC_OscConfig+0x504>)
 8004cc8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ccc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cce:	f7fd f87d 	bl	8001dcc <HAL_GetTick>
 8004cd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004cd4:	e008      	b.n	8004ce8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cd6:	f7fd f879 	bl	8001dcc <HAL_GetTick>
 8004cda:	4602      	mov	r2, r0
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	1ad3      	subs	r3, r2, r3
 8004ce0:	2b02      	cmp	r3, #2
 8004ce2:	d901      	bls.n	8004ce8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004ce4:	2303      	movs	r3, #3
 8004ce6:	e1f9      	b.n	80050dc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004ce8:	4b53      	ldr	r3, [pc, #332]	; (8004e38 <HAL_RCC_OscConfig+0x504>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d1f0      	bne.n	8004cd6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f003 0308 	and.w	r3, r3, #8
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d03c      	beq.n	8004d7a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	695b      	ldr	r3, [r3, #20]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d01c      	beq.n	8004d42 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d08:	4b4b      	ldr	r3, [pc, #300]	; (8004e38 <HAL_RCC_OscConfig+0x504>)
 8004d0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d0e:	4a4a      	ldr	r2, [pc, #296]	; (8004e38 <HAL_RCC_OscConfig+0x504>)
 8004d10:	f043 0301 	orr.w	r3, r3, #1
 8004d14:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d18:	f7fd f858 	bl	8001dcc <HAL_GetTick>
 8004d1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004d1e:	e008      	b.n	8004d32 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d20:	f7fd f854 	bl	8001dcc <HAL_GetTick>
 8004d24:	4602      	mov	r2, r0
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	1ad3      	subs	r3, r2, r3
 8004d2a:	2b02      	cmp	r3, #2
 8004d2c:	d901      	bls.n	8004d32 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004d2e:	2303      	movs	r3, #3
 8004d30:	e1d4      	b.n	80050dc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004d32:	4b41      	ldr	r3, [pc, #260]	; (8004e38 <HAL_RCC_OscConfig+0x504>)
 8004d34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d38:	f003 0302 	and.w	r3, r3, #2
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d0ef      	beq.n	8004d20 <HAL_RCC_OscConfig+0x3ec>
 8004d40:	e01b      	b.n	8004d7a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d42:	4b3d      	ldr	r3, [pc, #244]	; (8004e38 <HAL_RCC_OscConfig+0x504>)
 8004d44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d48:	4a3b      	ldr	r2, [pc, #236]	; (8004e38 <HAL_RCC_OscConfig+0x504>)
 8004d4a:	f023 0301 	bic.w	r3, r3, #1
 8004d4e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d52:	f7fd f83b 	bl	8001dcc <HAL_GetTick>
 8004d56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004d58:	e008      	b.n	8004d6c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d5a:	f7fd f837 	bl	8001dcc <HAL_GetTick>
 8004d5e:	4602      	mov	r2, r0
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	1ad3      	subs	r3, r2, r3
 8004d64:	2b02      	cmp	r3, #2
 8004d66:	d901      	bls.n	8004d6c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004d68:	2303      	movs	r3, #3
 8004d6a:	e1b7      	b.n	80050dc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004d6c:	4b32      	ldr	r3, [pc, #200]	; (8004e38 <HAL_RCC_OscConfig+0x504>)
 8004d6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d72:	f003 0302 	and.w	r3, r3, #2
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d1ef      	bne.n	8004d5a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f003 0304 	and.w	r3, r3, #4
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	f000 80a6 	beq.w	8004ed4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004d8c:	4b2a      	ldr	r3, [pc, #168]	; (8004e38 <HAL_RCC_OscConfig+0x504>)
 8004d8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d10d      	bne.n	8004db4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d98:	4b27      	ldr	r3, [pc, #156]	; (8004e38 <HAL_RCC_OscConfig+0x504>)
 8004d9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d9c:	4a26      	ldr	r2, [pc, #152]	; (8004e38 <HAL_RCC_OscConfig+0x504>)
 8004d9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004da2:	6593      	str	r3, [r2, #88]	; 0x58
 8004da4:	4b24      	ldr	r3, [pc, #144]	; (8004e38 <HAL_RCC_OscConfig+0x504>)
 8004da6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004da8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dac:	60bb      	str	r3, [r7, #8]
 8004dae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004db0:	2301      	movs	r3, #1
 8004db2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004db4:	4b21      	ldr	r3, [pc, #132]	; (8004e3c <HAL_RCC_OscConfig+0x508>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d118      	bne.n	8004df2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004dc0:	4b1e      	ldr	r3, [pc, #120]	; (8004e3c <HAL_RCC_OscConfig+0x508>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a1d      	ldr	r2, [pc, #116]	; (8004e3c <HAL_RCC_OscConfig+0x508>)
 8004dc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004dcc:	f7fc fffe 	bl	8001dcc <HAL_GetTick>
 8004dd0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004dd2:	e008      	b.n	8004de6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dd4:	f7fc fffa 	bl	8001dcc <HAL_GetTick>
 8004dd8:	4602      	mov	r2, r0
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	1ad3      	subs	r3, r2, r3
 8004dde:	2b02      	cmp	r3, #2
 8004de0:	d901      	bls.n	8004de6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004de2:	2303      	movs	r3, #3
 8004de4:	e17a      	b.n	80050dc <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004de6:	4b15      	ldr	r3, [pc, #84]	; (8004e3c <HAL_RCC_OscConfig+0x508>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d0f0      	beq.n	8004dd4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	2b01      	cmp	r3, #1
 8004df8:	d108      	bne.n	8004e0c <HAL_RCC_OscConfig+0x4d8>
 8004dfa:	4b0f      	ldr	r3, [pc, #60]	; (8004e38 <HAL_RCC_OscConfig+0x504>)
 8004dfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e00:	4a0d      	ldr	r2, [pc, #52]	; (8004e38 <HAL_RCC_OscConfig+0x504>)
 8004e02:	f043 0301 	orr.w	r3, r3, #1
 8004e06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004e0a:	e029      	b.n	8004e60 <HAL_RCC_OscConfig+0x52c>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	2b05      	cmp	r3, #5
 8004e12:	d115      	bne.n	8004e40 <HAL_RCC_OscConfig+0x50c>
 8004e14:	4b08      	ldr	r3, [pc, #32]	; (8004e38 <HAL_RCC_OscConfig+0x504>)
 8004e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e1a:	4a07      	ldr	r2, [pc, #28]	; (8004e38 <HAL_RCC_OscConfig+0x504>)
 8004e1c:	f043 0304 	orr.w	r3, r3, #4
 8004e20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004e24:	4b04      	ldr	r3, [pc, #16]	; (8004e38 <HAL_RCC_OscConfig+0x504>)
 8004e26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e2a:	4a03      	ldr	r2, [pc, #12]	; (8004e38 <HAL_RCC_OscConfig+0x504>)
 8004e2c:	f043 0301 	orr.w	r3, r3, #1
 8004e30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004e34:	e014      	b.n	8004e60 <HAL_RCC_OscConfig+0x52c>
 8004e36:	bf00      	nop
 8004e38:	40021000 	.word	0x40021000
 8004e3c:	40007000 	.word	0x40007000
 8004e40:	4b9c      	ldr	r3, [pc, #624]	; (80050b4 <HAL_RCC_OscConfig+0x780>)
 8004e42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e46:	4a9b      	ldr	r2, [pc, #620]	; (80050b4 <HAL_RCC_OscConfig+0x780>)
 8004e48:	f023 0301 	bic.w	r3, r3, #1
 8004e4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004e50:	4b98      	ldr	r3, [pc, #608]	; (80050b4 <HAL_RCC_OscConfig+0x780>)
 8004e52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e56:	4a97      	ldr	r2, [pc, #604]	; (80050b4 <HAL_RCC_OscConfig+0x780>)
 8004e58:	f023 0304 	bic.w	r3, r3, #4
 8004e5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d016      	beq.n	8004e96 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e68:	f7fc ffb0 	bl	8001dcc <HAL_GetTick>
 8004e6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e6e:	e00a      	b.n	8004e86 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e70:	f7fc ffac 	bl	8001dcc <HAL_GetTick>
 8004e74:	4602      	mov	r2, r0
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	1ad3      	subs	r3, r2, r3
 8004e7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d901      	bls.n	8004e86 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004e82:	2303      	movs	r3, #3
 8004e84:	e12a      	b.n	80050dc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e86:	4b8b      	ldr	r3, [pc, #556]	; (80050b4 <HAL_RCC_OscConfig+0x780>)
 8004e88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e8c:	f003 0302 	and.w	r3, r3, #2
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d0ed      	beq.n	8004e70 <HAL_RCC_OscConfig+0x53c>
 8004e94:	e015      	b.n	8004ec2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e96:	f7fc ff99 	bl	8001dcc <HAL_GetTick>
 8004e9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004e9c:	e00a      	b.n	8004eb4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e9e:	f7fc ff95 	bl	8001dcc <HAL_GetTick>
 8004ea2:	4602      	mov	r2, r0
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	1ad3      	subs	r3, r2, r3
 8004ea8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d901      	bls.n	8004eb4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004eb0:	2303      	movs	r3, #3
 8004eb2:	e113      	b.n	80050dc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004eb4:	4b7f      	ldr	r3, [pc, #508]	; (80050b4 <HAL_RCC_OscConfig+0x780>)
 8004eb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eba:	f003 0302 	and.w	r3, r3, #2
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d1ed      	bne.n	8004e9e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ec2:	7ffb      	ldrb	r3, [r7, #31]
 8004ec4:	2b01      	cmp	r3, #1
 8004ec6:	d105      	bne.n	8004ed4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ec8:	4b7a      	ldr	r3, [pc, #488]	; (80050b4 <HAL_RCC_OscConfig+0x780>)
 8004eca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ecc:	4a79      	ldr	r2, [pc, #484]	; (80050b4 <HAL_RCC_OscConfig+0x780>)
 8004ece:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ed2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	f000 80fe 	beq.w	80050da <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ee2:	2b02      	cmp	r3, #2
 8004ee4:	f040 80d0 	bne.w	8005088 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004ee8:	4b72      	ldr	r3, [pc, #456]	; (80050b4 <HAL_RCC_OscConfig+0x780>)
 8004eea:	68db      	ldr	r3, [r3, #12]
 8004eec:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	f003 0203 	and.w	r2, r3, #3
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d130      	bne.n	8004f5e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f06:	3b01      	subs	r3, #1
 8004f08:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f0a:	429a      	cmp	r2, r3
 8004f0c:	d127      	bne.n	8004f5e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f18:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	d11f      	bne.n	8004f5e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f24:	687a      	ldr	r2, [r7, #4]
 8004f26:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004f28:	2a07      	cmp	r2, #7
 8004f2a:	bf14      	ite	ne
 8004f2c:	2201      	movne	r2, #1
 8004f2e:	2200      	moveq	r2, #0
 8004f30:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d113      	bne.n	8004f5e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f40:	085b      	lsrs	r3, r3, #1
 8004f42:	3b01      	subs	r3, #1
 8004f44:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004f46:	429a      	cmp	r2, r3
 8004f48:	d109      	bne.n	8004f5e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f54:	085b      	lsrs	r3, r3, #1
 8004f56:	3b01      	subs	r3, #1
 8004f58:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	d06e      	beq.n	800503c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004f5e:	69bb      	ldr	r3, [r7, #24]
 8004f60:	2b0c      	cmp	r3, #12
 8004f62:	d069      	beq.n	8005038 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004f64:	4b53      	ldr	r3, [pc, #332]	; (80050b4 <HAL_RCC_OscConfig+0x780>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d105      	bne.n	8004f7c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004f70:	4b50      	ldr	r3, [pc, #320]	; (80050b4 <HAL_RCC_OscConfig+0x780>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d001      	beq.n	8004f80 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	e0ad      	b.n	80050dc <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004f80:	4b4c      	ldr	r3, [pc, #304]	; (80050b4 <HAL_RCC_OscConfig+0x780>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a4b      	ldr	r2, [pc, #300]	; (80050b4 <HAL_RCC_OscConfig+0x780>)
 8004f86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f8a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004f8c:	f7fc ff1e 	bl	8001dcc <HAL_GetTick>
 8004f90:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f92:	e008      	b.n	8004fa6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f94:	f7fc ff1a 	bl	8001dcc <HAL_GetTick>
 8004f98:	4602      	mov	r2, r0
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	1ad3      	subs	r3, r2, r3
 8004f9e:	2b02      	cmp	r3, #2
 8004fa0:	d901      	bls.n	8004fa6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004fa2:	2303      	movs	r3, #3
 8004fa4:	e09a      	b.n	80050dc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004fa6:	4b43      	ldr	r3, [pc, #268]	; (80050b4 <HAL_RCC_OscConfig+0x780>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d1f0      	bne.n	8004f94 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004fb2:	4b40      	ldr	r3, [pc, #256]	; (80050b4 <HAL_RCC_OscConfig+0x780>)
 8004fb4:	68da      	ldr	r2, [r3, #12]
 8004fb6:	4b40      	ldr	r3, [pc, #256]	; (80050b8 <HAL_RCC_OscConfig+0x784>)
 8004fb8:	4013      	ands	r3, r2
 8004fba:	687a      	ldr	r2, [r7, #4]
 8004fbc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004fbe:	687a      	ldr	r2, [r7, #4]
 8004fc0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004fc2:	3a01      	subs	r2, #1
 8004fc4:	0112      	lsls	r2, r2, #4
 8004fc6:	4311      	orrs	r1, r2
 8004fc8:	687a      	ldr	r2, [r7, #4]
 8004fca:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004fcc:	0212      	lsls	r2, r2, #8
 8004fce:	4311      	orrs	r1, r2
 8004fd0:	687a      	ldr	r2, [r7, #4]
 8004fd2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004fd4:	0852      	lsrs	r2, r2, #1
 8004fd6:	3a01      	subs	r2, #1
 8004fd8:	0552      	lsls	r2, r2, #21
 8004fda:	4311      	orrs	r1, r2
 8004fdc:	687a      	ldr	r2, [r7, #4]
 8004fde:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004fe0:	0852      	lsrs	r2, r2, #1
 8004fe2:	3a01      	subs	r2, #1
 8004fe4:	0652      	lsls	r2, r2, #25
 8004fe6:	4311      	orrs	r1, r2
 8004fe8:	687a      	ldr	r2, [r7, #4]
 8004fea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004fec:	0912      	lsrs	r2, r2, #4
 8004fee:	0452      	lsls	r2, r2, #17
 8004ff0:	430a      	orrs	r2, r1
 8004ff2:	4930      	ldr	r1, [pc, #192]	; (80050b4 <HAL_RCC_OscConfig+0x780>)
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004ff8:	4b2e      	ldr	r3, [pc, #184]	; (80050b4 <HAL_RCC_OscConfig+0x780>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a2d      	ldr	r2, [pc, #180]	; (80050b4 <HAL_RCC_OscConfig+0x780>)
 8004ffe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005002:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005004:	4b2b      	ldr	r3, [pc, #172]	; (80050b4 <HAL_RCC_OscConfig+0x780>)
 8005006:	68db      	ldr	r3, [r3, #12]
 8005008:	4a2a      	ldr	r2, [pc, #168]	; (80050b4 <HAL_RCC_OscConfig+0x780>)
 800500a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800500e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005010:	f7fc fedc 	bl	8001dcc <HAL_GetTick>
 8005014:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005016:	e008      	b.n	800502a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005018:	f7fc fed8 	bl	8001dcc <HAL_GetTick>
 800501c:	4602      	mov	r2, r0
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	1ad3      	subs	r3, r2, r3
 8005022:	2b02      	cmp	r3, #2
 8005024:	d901      	bls.n	800502a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8005026:	2303      	movs	r3, #3
 8005028:	e058      	b.n	80050dc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800502a:	4b22      	ldr	r3, [pc, #136]	; (80050b4 <HAL_RCC_OscConfig+0x780>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005032:	2b00      	cmp	r3, #0
 8005034:	d0f0      	beq.n	8005018 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005036:	e050      	b.n	80050da <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005038:	2301      	movs	r3, #1
 800503a:	e04f      	b.n	80050dc <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800503c:	4b1d      	ldr	r3, [pc, #116]	; (80050b4 <HAL_RCC_OscConfig+0x780>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005044:	2b00      	cmp	r3, #0
 8005046:	d148      	bne.n	80050da <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005048:	4b1a      	ldr	r3, [pc, #104]	; (80050b4 <HAL_RCC_OscConfig+0x780>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a19      	ldr	r2, [pc, #100]	; (80050b4 <HAL_RCC_OscConfig+0x780>)
 800504e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005052:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005054:	4b17      	ldr	r3, [pc, #92]	; (80050b4 <HAL_RCC_OscConfig+0x780>)
 8005056:	68db      	ldr	r3, [r3, #12]
 8005058:	4a16      	ldr	r2, [pc, #88]	; (80050b4 <HAL_RCC_OscConfig+0x780>)
 800505a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800505e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005060:	f7fc feb4 	bl	8001dcc <HAL_GetTick>
 8005064:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005066:	e008      	b.n	800507a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005068:	f7fc feb0 	bl	8001dcc <HAL_GetTick>
 800506c:	4602      	mov	r2, r0
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	1ad3      	subs	r3, r2, r3
 8005072:	2b02      	cmp	r3, #2
 8005074:	d901      	bls.n	800507a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8005076:	2303      	movs	r3, #3
 8005078:	e030      	b.n	80050dc <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800507a:	4b0e      	ldr	r3, [pc, #56]	; (80050b4 <HAL_RCC_OscConfig+0x780>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005082:	2b00      	cmp	r3, #0
 8005084:	d0f0      	beq.n	8005068 <HAL_RCC_OscConfig+0x734>
 8005086:	e028      	b.n	80050da <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005088:	69bb      	ldr	r3, [r7, #24]
 800508a:	2b0c      	cmp	r3, #12
 800508c:	d023      	beq.n	80050d6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800508e:	4b09      	ldr	r3, [pc, #36]	; (80050b4 <HAL_RCC_OscConfig+0x780>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a08      	ldr	r2, [pc, #32]	; (80050b4 <HAL_RCC_OscConfig+0x780>)
 8005094:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005098:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800509a:	f7fc fe97 	bl	8001dcc <HAL_GetTick>
 800509e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80050a0:	e00c      	b.n	80050bc <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050a2:	f7fc fe93 	bl	8001dcc <HAL_GetTick>
 80050a6:	4602      	mov	r2, r0
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	1ad3      	subs	r3, r2, r3
 80050ac:	2b02      	cmp	r3, #2
 80050ae:	d905      	bls.n	80050bc <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80050b0:	2303      	movs	r3, #3
 80050b2:	e013      	b.n	80050dc <HAL_RCC_OscConfig+0x7a8>
 80050b4:	40021000 	.word	0x40021000
 80050b8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80050bc:	4b09      	ldr	r3, [pc, #36]	; (80050e4 <HAL_RCC_OscConfig+0x7b0>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d1ec      	bne.n	80050a2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80050c8:	4b06      	ldr	r3, [pc, #24]	; (80050e4 <HAL_RCC_OscConfig+0x7b0>)
 80050ca:	68da      	ldr	r2, [r3, #12]
 80050cc:	4905      	ldr	r1, [pc, #20]	; (80050e4 <HAL_RCC_OscConfig+0x7b0>)
 80050ce:	4b06      	ldr	r3, [pc, #24]	; (80050e8 <HAL_RCC_OscConfig+0x7b4>)
 80050d0:	4013      	ands	r3, r2
 80050d2:	60cb      	str	r3, [r1, #12]
 80050d4:	e001      	b.n	80050da <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	e000      	b.n	80050dc <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80050da:	2300      	movs	r3, #0
}
 80050dc:	4618      	mov	r0, r3
 80050de:	3720      	adds	r7, #32
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}
 80050e4:	40021000 	.word	0x40021000
 80050e8:	feeefffc 	.word	0xfeeefffc

080050ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b084      	sub	sp, #16
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
 80050f4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d101      	bne.n	8005100 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80050fc:	2301      	movs	r3, #1
 80050fe:	e0e7      	b.n	80052d0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005100:	4b75      	ldr	r3, [pc, #468]	; (80052d8 <HAL_RCC_ClockConfig+0x1ec>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f003 0307 	and.w	r3, r3, #7
 8005108:	683a      	ldr	r2, [r7, #0]
 800510a:	429a      	cmp	r2, r3
 800510c:	d910      	bls.n	8005130 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800510e:	4b72      	ldr	r3, [pc, #456]	; (80052d8 <HAL_RCC_ClockConfig+0x1ec>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f023 0207 	bic.w	r2, r3, #7
 8005116:	4970      	ldr	r1, [pc, #448]	; (80052d8 <HAL_RCC_ClockConfig+0x1ec>)
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	4313      	orrs	r3, r2
 800511c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800511e:	4b6e      	ldr	r3, [pc, #440]	; (80052d8 <HAL_RCC_ClockConfig+0x1ec>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f003 0307 	and.w	r3, r3, #7
 8005126:	683a      	ldr	r2, [r7, #0]
 8005128:	429a      	cmp	r2, r3
 800512a:	d001      	beq.n	8005130 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800512c:	2301      	movs	r3, #1
 800512e:	e0cf      	b.n	80052d0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f003 0302 	and.w	r3, r3, #2
 8005138:	2b00      	cmp	r3, #0
 800513a:	d010      	beq.n	800515e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	689a      	ldr	r2, [r3, #8]
 8005140:	4b66      	ldr	r3, [pc, #408]	; (80052dc <HAL_RCC_ClockConfig+0x1f0>)
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005148:	429a      	cmp	r2, r3
 800514a:	d908      	bls.n	800515e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800514c:	4b63      	ldr	r3, [pc, #396]	; (80052dc <HAL_RCC_ClockConfig+0x1f0>)
 800514e:	689b      	ldr	r3, [r3, #8]
 8005150:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	689b      	ldr	r3, [r3, #8]
 8005158:	4960      	ldr	r1, [pc, #384]	; (80052dc <HAL_RCC_ClockConfig+0x1f0>)
 800515a:	4313      	orrs	r3, r2
 800515c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f003 0301 	and.w	r3, r3, #1
 8005166:	2b00      	cmp	r3, #0
 8005168:	d04c      	beq.n	8005204 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	2b03      	cmp	r3, #3
 8005170:	d107      	bne.n	8005182 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005172:	4b5a      	ldr	r3, [pc, #360]	; (80052dc <HAL_RCC_ClockConfig+0x1f0>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800517a:	2b00      	cmp	r3, #0
 800517c:	d121      	bne.n	80051c2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800517e:	2301      	movs	r3, #1
 8005180:	e0a6      	b.n	80052d0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	2b02      	cmp	r3, #2
 8005188:	d107      	bne.n	800519a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800518a:	4b54      	ldr	r3, [pc, #336]	; (80052dc <HAL_RCC_ClockConfig+0x1f0>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005192:	2b00      	cmp	r3, #0
 8005194:	d115      	bne.n	80051c2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005196:	2301      	movs	r3, #1
 8005198:	e09a      	b.n	80052d0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d107      	bne.n	80051b2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80051a2:	4b4e      	ldr	r3, [pc, #312]	; (80052dc <HAL_RCC_ClockConfig+0x1f0>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f003 0302 	and.w	r3, r3, #2
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d109      	bne.n	80051c2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80051ae:	2301      	movs	r3, #1
 80051b0:	e08e      	b.n	80052d0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80051b2:	4b4a      	ldr	r3, [pc, #296]	; (80052dc <HAL_RCC_ClockConfig+0x1f0>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d101      	bne.n	80051c2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80051be:	2301      	movs	r3, #1
 80051c0:	e086      	b.n	80052d0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80051c2:	4b46      	ldr	r3, [pc, #280]	; (80052dc <HAL_RCC_ClockConfig+0x1f0>)
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	f023 0203 	bic.w	r2, r3, #3
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	4943      	ldr	r1, [pc, #268]	; (80052dc <HAL_RCC_ClockConfig+0x1f0>)
 80051d0:	4313      	orrs	r3, r2
 80051d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051d4:	f7fc fdfa 	bl	8001dcc <HAL_GetTick>
 80051d8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051da:	e00a      	b.n	80051f2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051dc:	f7fc fdf6 	bl	8001dcc <HAL_GetTick>
 80051e0:	4602      	mov	r2, r0
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	1ad3      	subs	r3, r2, r3
 80051e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d901      	bls.n	80051f2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80051ee:	2303      	movs	r3, #3
 80051f0:	e06e      	b.n	80052d0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051f2:	4b3a      	ldr	r3, [pc, #232]	; (80052dc <HAL_RCC_ClockConfig+0x1f0>)
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	f003 020c 	and.w	r2, r3, #12
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	009b      	lsls	r3, r3, #2
 8005200:	429a      	cmp	r2, r3
 8005202:	d1eb      	bne.n	80051dc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f003 0302 	and.w	r3, r3, #2
 800520c:	2b00      	cmp	r3, #0
 800520e:	d010      	beq.n	8005232 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	689a      	ldr	r2, [r3, #8]
 8005214:	4b31      	ldr	r3, [pc, #196]	; (80052dc <HAL_RCC_ClockConfig+0x1f0>)
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800521c:	429a      	cmp	r2, r3
 800521e:	d208      	bcs.n	8005232 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005220:	4b2e      	ldr	r3, [pc, #184]	; (80052dc <HAL_RCC_ClockConfig+0x1f0>)
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	492b      	ldr	r1, [pc, #172]	; (80052dc <HAL_RCC_ClockConfig+0x1f0>)
 800522e:	4313      	orrs	r3, r2
 8005230:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005232:	4b29      	ldr	r3, [pc, #164]	; (80052d8 <HAL_RCC_ClockConfig+0x1ec>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f003 0307 	and.w	r3, r3, #7
 800523a:	683a      	ldr	r2, [r7, #0]
 800523c:	429a      	cmp	r2, r3
 800523e:	d210      	bcs.n	8005262 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005240:	4b25      	ldr	r3, [pc, #148]	; (80052d8 <HAL_RCC_ClockConfig+0x1ec>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f023 0207 	bic.w	r2, r3, #7
 8005248:	4923      	ldr	r1, [pc, #140]	; (80052d8 <HAL_RCC_ClockConfig+0x1ec>)
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	4313      	orrs	r3, r2
 800524e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005250:	4b21      	ldr	r3, [pc, #132]	; (80052d8 <HAL_RCC_ClockConfig+0x1ec>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f003 0307 	and.w	r3, r3, #7
 8005258:	683a      	ldr	r2, [r7, #0]
 800525a:	429a      	cmp	r2, r3
 800525c:	d001      	beq.n	8005262 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	e036      	b.n	80052d0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f003 0304 	and.w	r3, r3, #4
 800526a:	2b00      	cmp	r3, #0
 800526c:	d008      	beq.n	8005280 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800526e:	4b1b      	ldr	r3, [pc, #108]	; (80052dc <HAL_RCC_ClockConfig+0x1f0>)
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	68db      	ldr	r3, [r3, #12]
 800527a:	4918      	ldr	r1, [pc, #96]	; (80052dc <HAL_RCC_ClockConfig+0x1f0>)
 800527c:	4313      	orrs	r3, r2
 800527e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f003 0308 	and.w	r3, r3, #8
 8005288:	2b00      	cmp	r3, #0
 800528a:	d009      	beq.n	80052a0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800528c:	4b13      	ldr	r3, [pc, #76]	; (80052dc <HAL_RCC_ClockConfig+0x1f0>)
 800528e:	689b      	ldr	r3, [r3, #8]
 8005290:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	691b      	ldr	r3, [r3, #16]
 8005298:	00db      	lsls	r3, r3, #3
 800529a:	4910      	ldr	r1, [pc, #64]	; (80052dc <HAL_RCC_ClockConfig+0x1f0>)
 800529c:	4313      	orrs	r3, r2
 800529e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80052a0:	f000 f824 	bl	80052ec <HAL_RCC_GetSysClockFreq>
 80052a4:	4602      	mov	r2, r0
 80052a6:	4b0d      	ldr	r3, [pc, #52]	; (80052dc <HAL_RCC_ClockConfig+0x1f0>)
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	091b      	lsrs	r3, r3, #4
 80052ac:	f003 030f 	and.w	r3, r3, #15
 80052b0:	490b      	ldr	r1, [pc, #44]	; (80052e0 <HAL_RCC_ClockConfig+0x1f4>)
 80052b2:	5ccb      	ldrb	r3, [r1, r3]
 80052b4:	f003 031f 	and.w	r3, r3, #31
 80052b8:	fa22 f303 	lsr.w	r3, r2, r3
 80052bc:	4a09      	ldr	r2, [pc, #36]	; (80052e4 <HAL_RCC_ClockConfig+0x1f8>)
 80052be:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80052c0:	4b09      	ldr	r3, [pc, #36]	; (80052e8 <HAL_RCC_ClockConfig+0x1fc>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4618      	mov	r0, r3
 80052c6:	f7fc fd31 	bl	8001d2c <HAL_InitTick>
 80052ca:	4603      	mov	r3, r0
 80052cc:	72fb      	strb	r3, [r7, #11]

  return status;
 80052ce:	7afb      	ldrb	r3, [r7, #11]
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	3710      	adds	r7, #16
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}
 80052d8:	40022000 	.word	0x40022000
 80052dc:	40021000 	.word	0x40021000
 80052e0:	0800ac6c 	.word	0x0800ac6c
 80052e4:	20000000 	.word	0x20000000
 80052e8:	20000004 	.word	0x20000004

080052ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b089      	sub	sp, #36	; 0x24
 80052f0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80052f2:	2300      	movs	r3, #0
 80052f4:	61fb      	str	r3, [r7, #28]
 80052f6:	2300      	movs	r3, #0
 80052f8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80052fa:	4b3e      	ldr	r3, [pc, #248]	; (80053f4 <HAL_RCC_GetSysClockFreq+0x108>)
 80052fc:	689b      	ldr	r3, [r3, #8]
 80052fe:	f003 030c 	and.w	r3, r3, #12
 8005302:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005304:	4b3b      	ldr	r3, [pc, #236]	; (80053f4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005306:	68db      	ldr	r3, [r3, #12]
 8005308:	f003 0303 	and.w	r3, r3, #3
 800530c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d005      	beq.n	8005320 <HAL_RCC_GetSysClockFreq+0x34>
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	2b0c      	cmp	r3, #12
 8005318:	d121      	bne.n	800535e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2b01      	cmp	r3, #1
 800531e:	d11e      	bne.n	800535e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005320:	4b34      	ldr	r3, [pc, #208]	; (80053f4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f003 0308 	and.w	r3, r3, #8
 8005328:	2b00      	cmp	r3, #0
 800532a:	d107      	bne.n	800533c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800532c:	4b31      	ldr	r3, [pc, #196]	; (80053f4 <HAL_RCC_GetSysClockFreq+0x108>)
 800532e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005332:	0a1b      	lsrs	r3, r3, #8
 8005334:	f003 030f 	and.w	r3, r3, #15
 8005338:	61fb      	str	r3, [r7, #28]
 800533a:	e005      	b.n	8005348 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800533c:	4b2d      	ldr	r3, [pc, #180]	; (80053f4 <HAL_RCC_GetSysClockFreq+0x108>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	091b      	lsrs	r3, r3, #4
 8005342:	f003 030f 	and.w	r3, r3, #15
 8005346:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005348:	4a2b      	ldr	r2, [pc, #172]	; (80053f8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800534a:	69fb      	ldr	r3, [r7, #28]
 800534c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005350:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d10d      	bne.n	8005374 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005358:	69fb      	ldr	r3, [r7, #28]
 800535a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800535c:	e00a      	b.n	8005374 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	2b04      	cmp	r3, #4
 8005362:	d102      	bne.n	800536a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005364:	4b25      	ldr	r3, [pc, #148]	; (80053fc <HAL_RCC_GetSysClockFreq+0x110>)
 8005366:	61bb      	str	r3, [r7, #24]
 8005368:	e004      	b.n	8005374 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	2b08      	cmp	r3, #8
 800536e:	d101      	bne.n	8005374 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005370:	4b23      	ldr	r3, [pc, #140]	; (8005400 <HAL_RCC_GetSysClockFreq+0x114>)
 8005372:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	2b0c      	cmp	r3, #12
 8005378:	d134      	bne.n	80053e4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800537a:	4b1e      	ldr	r3, [pc, #120]	; (80053f4 <HAL_RCC_GetSysClockFreq+0x108>)
 800537c:	68db      	ldr	r3, [r3, #12]
 800537e:	f003 0303 	and.w	r3, r3, #3
 8005382:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	2b02      	cmp	r3, #2
 8005388:	d003      	beq.n	8005392 <HAL_RCC_GetSysClockFreq+0xa6>
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	2b03      	cmp	r3, #3
 800538e:	d003      	beq.n	8005398 <HAL_RCC_GetSysClockFreq+0xac>
 8005390:	e005      	b.n	800539e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005392:	4b1a      	ldr	r3, [pc, #104]	; (80053fc <HAL_RCC_GetSysClockFreq+0x110>)
 8005394:	617b      	str	r3, [r7, #20]
      break;
 8005396:	e005      	b.n	80053a4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005398:	4b19      	ldr	r3, [pc, #100]	; (8005400 <HAL_RCC_GetSysClockFreq+0x114>)
 800539a:	617b      	str	r3, [r7, #20]
      break;
 800539c:	e002      	b.n	80053a4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800539e:	69fb      	ldr	r3, [r7, #28]
 80053a0:	617b      	str	r3, [r7, #20]
      break;
 80053a2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80053a4:	4b13      	ldr	r3, [pc, #76]	; (80053f4 <HAL_RCC_GetSysClockFreq+0x108>)
 80053a6:	68db      	ldr	r3, [r3, #12]
 80053a8:	091b      	lsrs	r3, r3, #4
 80053aa:	f003 0307 	and.w	r3, r3, #7
 80053ae:	3301      	adds	r3, #1
 80053b0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80053b2:	4b10      	ldr	r3, [pc, #64]	; (80053f4 <HAL_RCC_GetSysClockFreq+0x108>)
 80053b4:	68db      	ldr	r3, [r3, #12]
 80053b6:	0a1b      	lsrs	r3, r3, #8
 80053b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053bc:	697a      	ldr	r2, [r7, #20]
 80053be:	fb03 f202 	mul.w	r2, r3, r2
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80053c8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80053ca:	4b0a      	ldr	r3, [pc, #40]	; (80053f4 <HAL_RCC_GetSysClockFreq+0x108>)
 80053cc:	68db      	ldr	r3, [r3, #12]
 80053ce:	0e5b      	lsrs	r3, r3, #25
 80053d0:	f003 0303 	and.w	r3, r3, #3
 80053d4:	3301      	adds	r3, #1
 80053d6:	005b      	lsls	r3, r3, #1
 80053d8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80053da:	697a      	ldr	r2, [r7, #20]
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	fbb2 f3f3 	udiv	r3, r2, r3
 80053e2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80053e4:	69bb      	ldr	r3, [r7, #24]
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	3724      	adds	r7, #36	; 0x24
 80053ea:	46bd      	mov	sp, r7
 80053ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f0:	4770      	bx	lr
 80053f2:	bf00      	nop
 80053f4:	40021000 	.word	0x40021000
 80053f8:	0800ac84 	.word	0x0800ac84
 80053fc:	00f42400 	.word	0x00f42400
 8005400:	007a1200 	.word	0x007a1200

08005404 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005404:	b480      	push	{r7}
 8005406:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005408:	4b03      	ldr	r3, [pc, #12]	; (8005418 <HAL_RCC_GetHCLKFreq+0x14>)
 800540a:	681b      	ldr	r3, [r3, #0]
}
 800540c:	4618      	mov	r0, r3
 800540e:	46bd      	mov	sp, r7
 8005410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005414:	4770      	bx	lr
 8005416:	bf00      	nop
 8005418:	20000000 	.word	0x20000000

0800541c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005420:	f7ff fff0 	bl	8005404 <HAL_RCC_GetHCLKFreq>
 8005424:	4602      	mov	r2, r0
 8005426:	4b06      	ldr	r3, [pc, #24]	; (8005440 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005428:	689b      	ldr	r3, [r3, #8]
 800542a:	0a1b      	lsrs	r3, r3, #8
 800542c:	f003 0307 	and.w	r3, r3, #7
 8005430:	4904      	ldr	r1, [pc, #16]	; (8005444 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005432:	5ccb      	ldrb	r3, [r1, r3]
 8005434:	f003 031f 	and.w	r3, r3, #31
 8005438:	fa22 f303 	lsr.w	r3, r2, r3
}
 800543c:	4618      	mov	r0, r3
 800543e:	bd80      	pop	{r7, pc}
 8005440:	40021000 	.word	0x40021000
 8005444:	0800ac7c 	.word	0x0800ac7c

08005448 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800544c:	f7ff ffda 	bl	8005404 <HAL_RCC_GetHCLKFreq>
 8005450:	4602      	mov	r2, r0
 8005452:	4b06      	ldr	r3, [pc, #24]	; (800546c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005454:	689b      	ldr	r3, [r3, #8]
 8005456:	0adb      	lsrs	r3, r3, #11
 8005458:	f003 0307 	and.w	r3, r3, #7
 800545c:	4904      	ldr	r1, [pc, #16]	; (8005470 <HAL_RCC_GetPCLK2Freq+0x28>)
 800545e:	5ccb      	ldrb	r3, [r1, r3]
 8005460:	f003 031f 	and.w	r3, r3, #31
 8005464:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005468:	4618      	mov	r0, r3
 800546a:	bd80      	pop	{r7, pc}
 800546c:	40021000 	.word	0x40021000
 8005470:	0800ac7c 	.word	0x0800ac7c

08005474 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b086      	sub	sp, #24
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800547c:	2300      	movs	r3, #0
 800547e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005480:	4b2a      	ldr	r3, [pc, #168]	; (800552c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005482:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005484:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005488:	2b00      	cmp	r3, #0
 800548a:	d003      	beq.n	8005494 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800548c:	f7ff f9ee 	bl	800486c <HAL_PWREx_GetVoltageRange>
 8005490:	6178      	str	r0, [r7, #20]
 8005492:	e014      	b.n	80054be <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005494:	4b25      	ldr	r3, [pc, #148]	; (800552c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005496:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005498:	4a24      	ldr	r2, [pc, #144]	; (800552c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800549a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800549e:	6593      	str	r3, [r2, #88]	; 0x58
 80054a0:	4b22      	ldr	r3, [pc, #136]	; (800552c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80054a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054a8:	60fb      	str	r3, [r7, #12]
 80054aa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80054ac:	f7ff f9de 	bl	800486c <HAL_PWREx_GetVoltageRange>
 80054b0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80054b2:	4b1e      	ldr	r3, [pc, #120]	; (800552c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80054b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054b6:	4a1d      	ldr	r2, [pc, #116]	; (800552c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80054b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054bc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054c4:	d10b      	bne.n	80054de <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2b80      	cmp	r3, #128	; 0x80
 80054ca:	d919      	bls.n	8005500 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2ba0      	cmp	r3, #160	; 0xa0
 80054d0:	d902      	bls.n	80054d8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80054d2:	2302      	movs	r3, #2
 80054d4:	613b      	str	r3, [r7, #16]
 80054d6:	e013      	b.n	8005500 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80054d8:	2301      	movs	r3, #1
 80054da:	613b      	str	r3, [r7, #16]
 80054dc:	e010      	b.n	8005500 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2b80      	cmp	r3, #128	; 0x80
 80054e2:	d902      	bls.n	80054ea <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80054e4:	2303      	movs	r3, #3
 80054e6:	613b      	str	r3, [r7, #16]
 80054e8:	e00a      	b.n	8005500 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2b80      	cmp	r3, #128	; 0x80
 80054ee:	d102      	bne.n	80054f6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80054f0:	2302      	movs	r3, #2
 80054f2:	613b      	str	r3, [r7, #16]
 80054f4:	e004      	b.n	8005500 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2b70      	cmp	r3, #112	; 0x70
 80054fa:	d101      	bne.n	8005500 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80054fc:	2301      	movs	r3, #1
 80054fe:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005500:	4b0b      	ldr	r3, [pc, #44]	; (8005530 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f023 0207 	bic.w	r2, r3, #7
 8005508:	4909      	ldr	r1, [pc, #36]	; (8005530 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	4313      	orrs	r3, r2
 800550e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005510:	4b07      	ldr	r3, [pc, #28]	; (8005530 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f003 0307 	and.w	r3, r3, #7
 8005518:	693a      	ldr	r2, [r7, #16]
 800551a:	429a      	cmp	r2, r3
 800551c:	d001      	beq.n	8005522 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	e000      	b.n	8005524 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005522:	2300      	movs	r3, #0
}
 8005524:	4618      	mov	r0, r3
 8005526:	3718      	adds	r7, #24
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}
 800552c:	40021000 	.word	0x40021000
 8005530:	40022000 	.word	0x40022000

08005534 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b086      	sub	sp, #24
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800553c:	2300      	movs	r3, #0
 800553e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005540:	2300      	movs	r3, #0
 8005542:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800554c:	2b00      	cmp	r3, #0
 800554e:	d041      	beq.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005554:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005558:	d02a      	beq.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800555a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800555e:	d824      	bhi.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005560:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005564:	d008      	beq.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005566:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800556a:	d81e      	bhi.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0x76>
 800556c:	2b00      	cmp	r3, #0
 800556e:	d00a      	beq.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005570:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005574:	d010      	beq.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005576:	e018      	b.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005578:	4b86      	ldr	r3, [pc, #536]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800557a:	68db      	ldr	r3, [r3, #12]
 800557c:	4a85      	ldr	r2, [pc, #532]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800557e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005582:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005584:	e015      	b.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	3304      	adds	r3, #4
 800558a:	2100      	movs	r1, #0
 800558c:	4618      	mov	r0, r3
 800558e:	f000 fabb 	bl	8005b08 <RCCEx_PLLSAI1_Config>
 8005592:	4603      	mov	r3, r0
 8005594:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005596:	e00c      	b.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	3320      	adds	r3, #32
 800559c:	2100      	movs	r1, #0
 800559e:	4618      	mov	r0, r3
 80055a0:	f000 fba6 	bl	8005cf0 <RCCEx_PLLSAI2_Config>
 80055a4:	4603      	mov	r3, r0
 80055a6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80055a8:	e003      	b.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	74fb      	strb	r3, [r7, #19]
      break;
 80055ae:	e000      	b.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80055b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80055b2:	7cfb      	ldrb	r3, [r7, #19]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d10b      	bne.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80055b8:	4b76      	ldr	r3, [pc, #472]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055be:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80055c6:	4973      	ldr	r1, [pc, #460]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055c8:	4313      	orrs	r3, r2
 80055ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80055ce:	e001      	b.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055d0:	7cfb      	ldrb	r3, [r7, #19]
 80055d2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d041      	beq.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80055e4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80055e8:	d02a      	beq.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80055ea:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80055ee:	d824      	bhi.n	800563a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80055f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80055f4:	d008      	beq.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80055f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80055fa:	d81e      	bhi.n	800563a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d00a      	beq.n	8005616 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005600:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005604:	d010      	beq.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005606:	e018      	b.n	800563a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005608:	4b62      	ldr	r3, [pc, #392]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800560a:	68db      	ldr	r3, [r3, #12]
 800560c:	4a61      	ldr	r2, [pc, #388]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800560e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005612:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005614:	e015      	b.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	3304      	adds	r3, #4
 800561a:	2100      	movs	r1, #0
 800561c:	4618      	mov	r0, r3
 800561e:	f000 fa73 	bl	8005b08 <RCCEx_PLLSAI1_Config>
 8005622:	4603      	mov	r3, r0
 8005624:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005626:	e00c      	b.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	3320      	adds	r3, #32
 800562c:	2100      	movs	r1, #0
 800562e:	4618      	mov	r0, r3
 8005630:	f000 fb5e 	bl	8005cf0 <RCCEx_PLLSAI2_Config>
 8005634:	4603      	mov	r3, r0
 8005636:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005638:	e003      	b.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800563a:	2301      	movs	r3, #1
 800563c:	74fb      	strb	r3, [r7, #19]
      break;
 800563e:	e000      	b.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005640:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005642:	7cfb      	ldrb	r3, [r7, #19]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d10b      	bne.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005648:	4b52      	ldr	r3, [pc, #328]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800564a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800564e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005656:	494f      	ldr	r1, [pc, #316]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005658:	4313      	orrs	r3, r2
 800565a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800565e:	e001      	b.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005660:	7cfb      	ldrb	r3, [r7, #19]
 8005662:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800566c:	2b00      	cmp	r3, #0
 800566e:	f000 80a0 	beq.w	80057b2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005672:	2300      	movs	r3, #0
 8005674:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005676:	4b47      	ldr	r3, [pc, #284]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005678:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800567a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800567e:	2b00      	cmp	r3, #0
 8005680:	d101      	bne.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8005682:	2301      	movs	r3, #1
 8005684:	e000      	b.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8005686:	2300      	movs	r3, #0
 8005688:	2b00      	cmp	r3, #0
 800568a:	d00d      	beq.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800568c:	4b41      	ldr	r3, [pc, #260]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800568e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005690:	4a40      	ldr	r2, [pc, #256]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005692:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005696:	6593      	str	r3, [r2, #88]	; 0x58
 8005698:	4b3e      	ldr	r3, [pc, #248]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800569a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800569c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056a0:	60bb      	str	r3, [r7, #8]
 80056a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80056a4:	2301      	movs	r3, #1
 80056a6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80056a8:	4b3b      	ldr	r3, [pc, #236]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a3a      	ldr	r2, [pc, #232]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80056ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056b2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80056b4:	f7fc fb8a 	bl	8001dcc <HAL_GetTick>
 80056b8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80056ba:	e009      	b.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056bc:	f7fc fb86 	bl	8001dcc <HAL_GetTick>
 80056c0:	4602      	mov	r2, r0
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	1ad3      	subs	r3, r2, r3
 80056c6:	2b02      	cmp	r3, #2
 80056c8:	d902      	bls.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80056ca:	2303      	movs	r3, #3
 80056cc:	74fb      	strb	r3, [r7, #19]
        break;
 80056ce:	e005      	b.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80056d0:	4b31      	ldr	r3, [pc, #196]	; (8005798 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d0ef      	beq.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80056dc:	7cfb      	ldrb	r3, [r7, #19]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d15c      	bne.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80056e2:	4b2c      	ldr	r3, [pc, #176]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80056e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056ec:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d01f      	beq.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056fa:	697a      	ldr	r2, [r7, #20]
 80056fc:	429a      	cmp	r2, r3
 80056fe:	d019      	beq.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005700:	4b24      	ldr	r3, [pc, #144]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005702:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005706:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800570a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800570c:	4b21      	ldr	r3, [pc, #132]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800570e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005712:	4a20      	ldr	r2, [pc, #128]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005714:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005718:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800571c:	4b1d      	ldr	r3, [pc, #116]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800571e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005722:	4a1c      	ldr	r2, [pc, #112]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005724:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005728:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800572c:	4a19      	ldr	r2, [pc, #100]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	f003 0301 	and.w	r3, r3, #1
 800573a:	2b00      	cmp	r3, #0
 800573c:	d016      	beq.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800573e:	f7fc fb45 	bl	8001dcc <HAL_GetTick>
 8005742:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005744:	e00b      	b.n	800575e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005746:	f7fc fb41 	bl	8001dcc <HAL_GetTick>
 800574a:	4602      	mov	r2, r0
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	1ad3      	subs	r3, r2, r3
 8005750:	f241 3288 	movw	r2, #5000	; 0x1388
 8005754:	4293      	cmp	r3, r2
 8005756:	d902      	bls.n	800575e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005758:	2303      	movs	r3, #3
 800575a:	74fb      	strb	r3, [r7, #19]
            break;
 800575c:	e006      	b.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800575e:	4b0d      	ldr	r3, [pc, #52]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005760:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005764:	f003 0302 	and.w	r3, r3, #2
 8005768:	2b00      	cmp	r3, #0
 800576a:	d0ec      	beq.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800576c:	7cfb      	ldrb	r3, [r7, #19]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d10c      	bne.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005772:	4b08      	ldr	r3, [pc, #32]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005774:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005778:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005782:	4904      	ldr	r1, [pc, #16]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005784:	4313      	orrs	r3, r2
 8005786:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800578a:	e009      	b.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800578c:	7cfb      	ldrb	r3, [r7, #19]
 800578e:	74bb      	strb	r3, [r7, #18]
 8005790:	e006      	b.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005792:	bf00      	nop
 8005794:	40021000 	.word	0x40021000
 8005798:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800579c:	7cfb      	ldrb	r3, [r7, #19]
 800579e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80057a0:	7c7b      	ldrb	r3, [r7, #17]
 80057a2:	2b01      	cmp	r3, #1
 80057a4:	d105      	bne.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057a6:	4b9e      	ldr	r3, [pc, #632]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057aa:	4a9d      	ldr	r2, [pc, #628]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057b0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f003 0301 	and.w	r3, r3, #1
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d00a      	beq.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80057be:	4b98      	ldr	r3, [pc, #608]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057c4:	f023 0203 	bic.w	r2, r3, #3
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057cc:	4994      	ldr	r1, [pc, #592]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057ce:	4313      	orrs	r3, r2
 80057d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f003 0302 	and.w	r3, r3, #2
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d00a      	beq.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80057e0:	4b8f      	ldr	r3, [pc, #572]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057e6:	f023 020c 	bic.w	r2, r3, #12
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057ee:	498c      	ldr	r1, [pc, #560]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057f0:	4313      	orrs	r3, r2
 80057f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f003 0304 	and.w	r3, r3, #4
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d00a      	beq.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005802:	4b87      	ldr	r3, [pc, #540]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005804:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005808:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005810:	4983      	ldr	r1, [pc, #524]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005812:	4313      	orrs	r3, r2
 8005814:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f003 0308 	and.w	r3, r3, #8
 8005820:	2b00      	cmp	r3, #0
 8005822:	d00a      	beq.n	800583a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005824:	4b7e      	ldr	r3, [pc, #504]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005826:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800582a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005832:	497b      	ldr	r1, [pc, #492]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005834:	4313      	orrs	r3, r2
 8005836:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f003 0310 	and.w	r3, r3, #16
 8005842:	2b00      	cmp	r3, #0
 8005844:	d00a      	beq.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005846:	4b76      	ldr	r3, [pc, #472]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005848:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800584c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005854:	4972      	ldr	r1, [pc, #456]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005856:	4313      	orrs	r3, r2
 8005858:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f003 0320 	and.w	r3, r3, #32
 8005864:	2b00      	cmp	r3, #0
 8005866:	d00a      	beq.n	800587e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005868:	4b6d      	ldr	r3, [pc, #436]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800586a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800586e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005876:	496a      	ldr	r1, [pc, #424]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005878:	4313      	orrs	r3, r2
 800587a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005886:	2b00      	cmp	r3, #0
 8005888:	d00a      	beq.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800588a:	4b65      	ldr	r3, [pc, #404]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800588c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005890:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005898:	4961      	ldr	r1, [pc, #388]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800589a:	4313      	orrs	r3, r2
 800589c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d00a      	beq.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80058ac:	4b5c      	ldr	r3, [pc, #368]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058b2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058ba:	4959      	ldr	r1, [pc, #356]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058bc:	4313      	orrs	r3, r2
 80058be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d00a      	beq.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80058ce:	4b54      	ldr	r3, [pc, #336]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058d4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058dc:	4950      	ldr	r1, [pc, #320]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058de:	4313      	orrs	r3, r2
 80058e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d00a      	beq.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80058f0:	4b4b      	ldr	r3, [pc, #300]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058f6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058fe:	4948      	ldr	r1, [pc, #288]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005900:	4313      	orrs	r3, r2
 8005902:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800590e:	2b00      	cmp	r3, #0
 8005910:	d00a      	beq.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005912:	4b43      	ldr	r3, [pc, #268]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005914:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005918:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005920:	493f      	ldr	r1, [pc, #252]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005922:	4313      	orrs	r3, r2
 8005924:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005930:	2b00      	cmp	r3, #0
 8005932:	d028      	beq.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005934:	4b3a      	ldr	r3, [pc, #232]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005936:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800593a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005942:	4937      	ldr	r1, [pc, #220]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005944:	4313      	orrs	r3, r2
 8005946:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800594e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005952:	d106      	bne.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005954:	4b32      	ldr	r3, [pc, #200]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005956:	68db      	ldr	r3, [r3, #12]
 8005958:	4a31      	ldr	r2, [pc, #196]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800595a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800595e:	60d3      	str	r3, [r2, #12]
 8005960:	e011      	b.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005966:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800596a:	d10c      	bne.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	3304      	adds	r3, #4
 8005970:	2101      	movs	r1, #1
 8005972:	4618      	mov	r0, r3
 8005974:	f000 f8c8 	bl	8005b08 <RCCEx_PLLSAI1_Config>
 8005978:	4603      	mov	r3, r0
 800597a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800597c:	7cfb      	ldrb	r3, [r7, #19]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d001      	beq.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005982:	7cfb      	ldrb	r3, [r7, #19]
 8005984:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800598e:	2b00      	cmp	r3, #0
 8005990:	d028      	beq.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005992:	4b23      	ldr	r3, [pc, #140]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005994:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005998:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059a0:	491f      	ldr	r1, [pc, #124]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059a2:	4313      	orrs	r3, r2
 80059a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80059b0:	d106      	bne.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80059b2:	4b1b      	ldr	r3, [pc, #108]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059b4:	68db      	ldr	r3, [r3, #12]
 80059b6:	4a1a      	ldr	r2, [pc, #104]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80059bc:	60d3      	str	r3, [r2, #12]
 80059be:	e011      	b.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059c4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80059c8:	d10c      	bne.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	3304      	adds	r3, #4
 80059ce:	2101      	movs	r1, #1
 80059d0:	4618      	mov	r0, r3
 80059d2:	f000 f899 	bl	8005b08 <RCCEx_PLLSAI1_Config>
 80059d6:	4603      	mov	r3, r0
 80059d8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80059da:	7cfb      	ldrb	r3, [r7, #19]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d001      	beq.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80059e0:	7cfb      	ldrb	r3, [r7, #19]
 80059e2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d02b      	beq.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80059f0:	4b0b      	ldr	r3, [pc, #44]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059f6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059fe:	4908      	ldr	r1, [pc, #32]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a00:	4313      	orrs	r3, r2
 8005a02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a0a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a0e:	d109      	bne.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a10:	4b03      	ldr	r3, [pc, #12]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a12:	68db      	ldr	r3, [r3, #12]
 8005a14:	4a02      	ldr	r2, [pc, #8]	; (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a1a:	60d3      	str	r3, [r2, #12]
 8005a1c:	e014      	b.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005a1e:	bf00      	nop
 8005a20:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a28:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005a2c:	d10c      	bne.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	3304      	adds	r3, #4
 8005a32:	2101      	movs	r1, #1
 8005a34:	4618      	mov	r0, r3
 8005a36:	f000 f867 	bl	8005b08 <RCCEx_PLLSAI1_Config>
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005a3e:	7cfb      	ldrb	r3, [r7, #19]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d001      	beq.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005a44:	7cfb      	ldrb	r3, [r7, #19]
 8005a46:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d02f      	beq.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005a54:	4b2b      	ldr	r3, [pc, #172]	; (8005b04 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a5a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a62:	4928      	ldr	r1, [pc, #160]	; (8005b04 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005a64:	4313      	orrs	r3, r2
 8005a66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a6e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a72:	d10d      	bne.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	3304      	adds	r3, #4
 8005a78:	2102      	movs	r1, #2
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f000 f844 	bl	8005b08 <RCCEx_PLLSAI1_Config>
 8005a80:	4603      	mov	r3, r0
 8005a82:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005a84:	7cfb      	ldrb	r3, [r7, #19]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d014      	beq.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005a8a:	7cfb      	ldrb	r3, [r7, #19]
 8005a8c:	74bb      	strb	r3, [r7, #18]
 8005a8e:	e011      	b.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a98:	d10c      	bne.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	3320      	adds	r3, #32
 8005a9e:	2102      	movs	r1, #2
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	f000 f925 	bl	8005cf0 <RCCEx_PLLSAI2_Config>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005aaa:	7cfb      	ldrb	r3, [r7, #19]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d001      	beq.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005ab0:	7cfb      	ldrb	r3, [r7, #19]
 8005ab2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d00a      	beq.n	8005ad6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005ac0:	4b10      	ldr	r3, [pc, #64]	; (8005b04 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ac6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ace:	490d      	ldr	r1, [pc, #52]	; (8005b04 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d00b      	beq.n	8005afa <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005ae2:	4b08      	ldr	r3, [pc, #32]	; (8005b04 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005ae4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ae8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005af2:	4904      	ldr	r1, [pc, #16]	; (8005b04 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005af4:	4313      	orrs	r3, r2
 8005af6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005afa:	7cbb      	ldrb	r3, [r7, #18]
}
 8005afc:	4618      	mov	r0, r3
 8005afe:	3718      	adds	r7, #24
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bd80      	pop	{r7, pc}
 8005b04:	40021000 	.word	0x40021000

08005b08 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b084      	sub	sp, #16
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
 8005b10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005b12:	2300      	movs	r3, #0
 8005b14:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005b16:	4b75      	ldr	r3, [pc, #468]	; (8005cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b18:	68db      	ldr	r3, [r3, #12]
 8005b1a:	f003 0303 	and.w	r3, r3, #3
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d018      	beq.n	8005b54 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005b22:	4b72      	ldr	r3, [pc, #456]	; (8005cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b24:	68db      	ldr	r3, [r3, #12]
 8005b26:	f003 0203 	and.w	r2, r3, #3
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	429a      	cmp	r2, r3
 8005b30:	d10d      	bne.n	8005b4e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
       ||
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d009      	beq.n	8005b4e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005b3a:	4b6c      	ldr	r3, [pc, #432]	; (8005cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b3c:	68db      	ldr	r3, [r3, #12]
 8005b3e:	091b      	lsrs	r3, r3, #4
 8005b40:	f003 0307 	and.w	r3, r3, #7
 8005b44:	1c5a      	adds	r2, r3, #1
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	685b      	ldr	r3, [r3, #4]
       ||
 8005b4a:	429a      	cmp	r2, r3
 8005b4c:	d047      	beq.n	8005bde <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005b4e:	2301      	movs	r3, #1
 8005b50:	73fb      	strb	r3, [r7, #15]
 8005b52:	e044      	b.n	8005bde <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	2b03      	cmp	r3, #3
 8005b5a:	d018      	beq.n	8005b8e <RCCEx_PLLSAI1_Config+0x86>
 8005b5c:	2b03      	cmp	r3, #3
 8005b5e:	d825      	bhi.n	8005bac <RCCEx_PLLSAI1_Config+0xa4>
 8005b60:	2b01      	cmp	r3, #1
 8005b62:	d002      	beq.n	8005b6a <RCCEx_PLLSAI1_Config+0x62>
 8005b64:	2b02      	cmp	r3, #2
 8005b66:	d009      	beq.n	8005b7c <RCCEx_PLLSAI1_Config+0x74>
 8005b68:	e020      	b.n	8005bac <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005b6a:	4b60      	ldr	r3, [pc, #384]	; (8005cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f003 0302 	and.w	r3, r3, #2
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d11d      	bne.n	8005bb2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005b76:	2301      	movs	r3, #1
 8005b78:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b7a:	e01a      	b.n	8005bb2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005b7c:	4b5b      	ldr	r3, [pc, #364]	; (8005cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d116      	bne.n	8005bb6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005b88:	2301      	movs	r3, #1
 8005b8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b8c:	e013      	b.n	8005bb6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005b8e:	4b57      	ldr	r3, [pc, #348]	; (8005cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d10f      	bne.n	8005bba <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005b9a:	4b54      	ldr	r3, [pc, #336]	; (8005cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d109      	bne.n	8005bba <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005baa:	e006      	b.n	8005bba <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005bac:	2301      	movs	r3, #1
 8005bae:	73fb      	strb	r3, [r7, #15]
      break;
 8005bb0:	e004      	b.n	8005bbc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005bb2:	bf00      	nop
 8005bb4:	e002      	b.n	8005bbc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005bb6:	bf00      	nop
 8005bb8:	e000      	b.n	8005bbc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005bba:	bf00      	nop
    }

    if(status == HAL_OK)
 8005bbc:	7bfb      	ldrb	r3, [r7, #15]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d10d      	bne.n	8005bde <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005bc2:	4b4a      	ldr	r3, [pc, #296]	; (8005cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8005bc4:	68db      	ldr	r3, [r3, #12]
 8005bc6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6819      	ldr	r1, [r3, #0]
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	3b01      	subs	r3, #1
 8005bd4:	011b      	lsls	r3, r3, #4
 8005bd6:	430b      	orrs	r3, r1
 8005bd8:	4944      	ldr	r1, [pc, #272]	; (8005cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005bde:	7bfb      	ldrb	r3, [r7, #15]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d17d      	bne.n	8005ce0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005be4:	4b41      	ldr	r3, [pc, #260]	; (8005cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a40      	ldr	r2, [pc, #256]	; (8005cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8005bea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005bee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005bf0:	f7fc f8ec 	bl	8001dcc <HAL_GetTick>
 8005bf4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005bf6:	e009      	b.n	8005c0c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005bf8:	f7fc f8e8 	bl	8001dcc <HAL_GetTick>
 8005bfc:	4602      	mov	r2, r0
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	1ad3      	subs	r3, r2, r3
 8005c02:	2b02      	cmp	r3, #2
 8005c04:	d902      	bls.n	8005c0c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005c06:	2303      	movs	r3, #3
 8005c08:	73fb      	strb	r3, [r7, #15]
        break;
 8005c0a:	e005      	b.n	8005c18 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005c0c:	4b37      	ldr	r3, [pc, #220]	; (8005cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d1ef      	bne.n	8005bf8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005c18:	7bfb      	ldrb	r3, [r7, #15]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d160      	bne.n	8005ce0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d111      	bne.n	8005c48 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005c24:	4b31      	ldr	r3, [pc, #196]	; (8005cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c26:	691b      	ldr	r3, [r3, #16]
 8005c28:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005c2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c30:	687a      	ldr	r2, [r7, #4]
 8005c32:	6892      	ldr	r2, [r2, #8]
 8005c34:	0211      	lsls	r1, r2, #8
 8005c36:	687a      	ldr	r2, [r7, #4]
 8005c38:	68d2      	ldr	r2, [r2, #12]
 8005c3a:	0912      	lsrs	r2, r2, #4
 8005c3c:	0452      	lsls	r2, r2, #17
 8005c3e:	430a      	orrs	r2, r1
 8005c40:	492a      	ldr	r1, [pc, #168]	; (8005cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c42:	4313      	orrs	r3, r2
 8005c44:	610b      	str	r3, [r1, #16]
 8005c46:	e027      	b.n	8005c98 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	2b01      	cmp	r3, #1
 8005c4c:	d112      	bne.n	8005c74 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005c4e:	4b27      	ldr	r3, [pc, #156]	; (8005cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c50:	691b      	ldr	r3, [r3, #16]
 8005c52:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005c56:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005c5a:	687a      	ldr	r2, [r7, #4]
 8005c5c:	6892      	ldr	r2, [r2, #8]
 8005c5e:	0211      	lsls	r1, r2, #8
 8005c60:	687a      	ldr	r2, [r7, #4]
 8005c62:	6912      	ldr	r2, [r2, #16]
 8005c64:	0852      	lsrs	r2, r2, #1
 8005c66:	3a01      	subs	r2, #1
 8005c68:	0552      	lsls	r2, r2, #21
 8005c6a:	430a      	orrs	r2, r1
 8005c6c:	491f      	ldr	r1, [pc, #124]	; (8005cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	610b      	str	r3, [r1, #16]
 8005c72:	e011      	b.n	8005c98 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005c74:	4b1d      	ldr	r3, [pc, #116]	; (8005cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c76:	691b      	ldr	r3, [r3, #16]
 8005c78:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005c7c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005c80:	687a      	ldr	r2, [r7, #4]
 8005c82:	6892      	ldr	r2, [r2, #8]
 8005c84:	0211      	lsls	r1, r2, #8
 8005c86:	687a      	ldr	r2, [r7, #4]
 8005c88:	6952      	ldr	r2, [r2, #20]
 8005c8a:	0852      	lsrs	r2, r2, #1
 8005c8c:	3a01      	subs	r2, #1
 8005c8e:	0652      	lsls	r2, r2, #25
 8005c90:	430a      	orrs	r2, r1
 8005c92:	4916      	ldr	r1, [pc, #88]	; (8005cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c94:	4313      	orrs	r3, r2
 8005c96:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005c98:	4b14      	ldr	r3, [pc, #80]	; (8005cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a13      	ldr	r2, [pc, #76]	; (8005cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c9e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005ca2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ca4:	f7fc f892 	bl	8001dcc <HAL_GetTick>
 8005ca8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005caa:	e009      	b.n	8005cc0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005cac:	f7fc f88e 	bl	8001dcc <HAL_GetTick>
 8005cb0:	4602      	mov	r2, r0
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	1ad3      	subs	r3, r2, r3
 8005cb6:	2b02      	cmp	r3, #2
 8005cb8:	d902      	bls.n	8005cc0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005cba:	2303      	movs	r3, #3
 8005cbc:	73fb      	strb	r3, [r7, #15]
          break;
 8005cbe:	e005      	b.n	8005ccc <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005cc0:	4b0a      	ldr	r3, [pc, #40]	; (8005cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d0ef      	beq.n	8005cac <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005ccc:	7bfb      	ldrb	r3, [r7, #15]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d106      	bne.n	8005ce0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005cd2:	4b06      	ldr	r3, [pc, #24]	; (8005cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8005cd4:	691a      	ldr	r2, [r3, #16]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	699b      	ldr	r3, [r3, #24]
 8005cda:	4904      	ldr	r1, [pc, #16]	; (8005cec <RCCEx_PLLSAI1_Config+0x1e4>)
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005ce0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	3710      	adds	r7, #16
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bd80      	pop	{r7, pc}
 8005cea:	bf00      	nop
 8005cec:	40021000 	.word	0x40021000

08005cf0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b084      	sub	sp, #16
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
 8005cf8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005cfe:	4b6a      	ldr	r3, [pc, #424]	; (8005ea8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d00:	68db      	ldr	r3, [r3, #12]
 8005d02:	f003 0303 	and.w	r3, r3, #3
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d018      	beq.n	8005d3c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005d0a:	4b67      	ldr	r3, [pc, #412]	; (8005ea8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d0c:	68db      	ldr	r3, [r3, #12]
 8005d0e:	f003 0203 	and.w	r2, r3, #3
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	429a      	cmp	r2, r3
 8005d18:	d10d      	bne.n	8005d36 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
       ||
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d009      	beq.n	8005d36 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005d22:	4b61      	ldr	r3, [pc, #388]	; (8005ea8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d24:	68db      	ldr	r3, [r3, #12]
 8005d26:	091b      	lsrs	r3, r3, #4
 8005d28:	f003 0307 	and.w	r3, r3, #7
 8005d2c:	1c5a      	adds	r2, r3, #1
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	685b      	ldr	r3, [r3, #4]
       ||
 8005d32:	429a      	cmp	r2, r3
 8005d34:	d047      	beq.n	8005dc6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005d36:	2301      	movs	r3, #1
 8005d38:	73fb      	strb	r3, [r7, #15]
 8005d3a:	e044      	b.n	8005dc6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	2b03      	cmp	r3, #3
 8005d42:	d018      	beq.n	8005d76 <RCCEx_PLLSAI2_Config+0x86>
 8005d44:	2b03      	cmp	r3, #3
 8005d46:	d825      	bhi.n	8005d94 <RCCEx_PLLSAI2_Config+0xa4>
 8005d48:	2b01      	cmp	r3, #1
 8005d4a:	d002      	beq.n	8005d52 <RCCEx_PLLSAI2_Config+0x62>
 8005d4c:	2b02      	cmp	r3, #2
 8005d4e:	d009      	beq.n	8005d64 <RCCEx_PLLSAI2_Config+0x74>
 8005d50:	e020      	b.n	8005d94 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005d52:	4b55      	ldr	r3, [pc, #340]	; (8005ea8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f003 0302 	and.w	r3, r3, #2
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d11d      	bne.n	8005d9a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005d5e:	2301      	movs	r3, #1
 8005d60:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d62:	e01a      	b.n	8005d9a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005d64:	4b50      	ldr	r3, [pc, #320]	; (8005ea8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d116      	bne.n	8005d9e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005d70:	2301      	movs	r3, #1
 8005d72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d74:	e013      	b.n	8005d9e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005d76:	4b4c      	ldr	r3, [pc, #304]	; (8005ea8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d10f      	bne.n	8005da2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005d82:	4b49      	ldr	r3, [pc, #292]	; (8005ea8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d109      	bne.n	8005da2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005d92:	e006      	b.n	8005da2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005d94:	2301      	movs	r3, #1
 8005d96:	73fb      	strb	r3, [r7, #15]
      break;
 8005d98:	e004      	b.n	8005da4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005d9a:	bf00      	nop
 8005d9c:	e002      	b.n	8005da4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005d9e:	bf00      	nop
 8005da0:	e000      	b.n	8005da4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005da2:	bf00      	nop
    }

    if(status == HAL_OK)
 8005da4:	7bfb      	ldrb	r3, [r7, #15]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d10d      	bne.n	8005dc6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005daa:	4b3f      	ldr	r3, [pc, #252]	; (8005ea8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005dac:	68db      	ldr	r3, [r3, #12]
 8005dae:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6819      	ldr	r1, [r3, #0]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	3b01      	subs	r3, #1
 8005dbc:	011b      	lsls	r3, r3, #4
 8005dbe:	430b      	orrs	r3, r1
 8005dc0:	4939      	ldr	r1, [pc, #228]	; (8005ea8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005dc6:	7bfb      	ldrb	r3, [r7, #15]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d167      	bne.n	8005e9c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005dcc:	4b36      	ldr	r3, [pc, #216]	; (8005ea8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a35      	ldr	r2, [pc, #212]	; (8005ea8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005dd2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005dd6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005dd8:	f7fb fff8 	bl	8001dcc <HAL_GetTick>
 8005ddc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005dde:	e009      	b.n	8005df4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005de0:	f7fb fff4 	bl	8001dcc <HAL_GetTick>
 8005de4:	4602      	mov	r2, r0
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	1ad3      	subs	r3, r2, r3
 8005dea:	2b02      	cmp	r3, #2
 8005dec:	d902      	bls.n	8005df4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005dee:	2303      	movs	r3, #3
 8005df0:	73fb      	strb	r3, [r7, #15]
        break;
 8005df2:	e005      	b.n	8005e00 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005df4:	4b2c      	ldr	r3, [pc, #176]	; (8005ea8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d1ef      	bne.n	8005de0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005e00:	7bfb      	ldrb	r3, [r7, #15]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d14a      	bne.n	8005e9c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d111      	bne.n	8005e30 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005e0c:	4b26      	ldr	r3, [pc, #152]	; (8005ea8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e0e:	695b      	ldr	r3, [r3, #20]
 8005e10:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005e14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e18:	687a      	ldr	r2, [r7, #4]
 8005e1a:	6892      	ldr	r2, [r2, #8]
 8005e1c:	0211      	lsls	r1, r2, #8
 8005e1e:	687a      	ldr	r2, [r7, #4]
 8005e20:	68d2      	ldr	r2, [r2, #12]
 8005e22:	0912      	lsrs	r2, r2, #4
 8005e24:	0452      	lsls	r2, r2, #17
 8005e26:	430a      	orrs	r2, r1
 8005e28:	491f      	ldr	r1, [pc, #124]	; (8005ea8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	614b      	str	r3, [r1, #20]
 8005e2e:	e011      	b.n	8005e54 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005e30:	4b1d      	ldr	r3, [pc, #116]	; (8005ea8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e32:	695b      	ldr	r3, [r3, #20]
 8005e34:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005e38:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005e3c:	687a      	ldr	r2, [r7, #4]
 8005e3e:	6892      	ldr	r2, [r2, #8]
 8005e40:	0211      	lsls	r1, r2, #8
 8005e42:	687a      	ldr	r2, [r7, #4]
 8005e44:	6912      	ldr	r2, [r2, #16]
 8005e46:	0852      	lsrs	r2, r2, #1
 8005e48:	3a01      	subs	r2, #1
 8005e4a:	0652      	lsls	r2, r2, #25
 8005e4c:	430a      	orrs	r2, r1
 8005e4e:	4916      	ldr	r1, [pc, #88]	; (8005ea8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e50:	4313      	orrs	r3, r2
 8005e52:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005e54:	4b14      	ldr	r3, [pc, #80]	; (8005ea8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a13      	ldr	r2, [pc, #76]	; (8005ea8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e5e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e60:	f7fb ffb4 	bl	8001dcc <HAL_GetTick>
 8005e64:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005e66:	e009      	b.n	8005e7c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005e68:	f7fb ffb0 	bl	8001dcc <HAL_GetTick>
 8005e6c:	4602      	mov	r2, r0
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	1ad3      	subs	r3, r2, r3
 8005e72:	2b02      	cmp	r3, #2
 8005e74:	d902      	bls.n	8005e7c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005e76:	2303      	movs	r3, #3
 8005e78:	73fb      	strb	r3, [r7, #15]
          break;
 8005e7a:	e005      	b.n	8005e88 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005e7c:	4b0a      	ldr	r3, [pc, #40]	; (8005ea8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d0ef      	beq.n	8005e68 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005e88:	7bfb      	ldrb	r3, [r7, #15]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d106      	bne.n	8005e9c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005e8e:	4b06      	ldr	r3, [pc, #24]	; (8005ea8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e90:	695a      	ldr	r2, [r3, #20]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	695b      	ldr	r3, [r3, #20]
 8005e96:	4904      	ldr	r1, [pc, #16]	; (8005ea8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005e9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	3710      	adds	r7, #16
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bd80      	pop	{r7, pc}
 8005ea6:	bf00      	nop
 8005ea8:	40021000 	.word	0x40021000

08005eac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005eac:	b480      	push	{r7}
 8005eae:	b085      	sub	sp, #20
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005eba:	b2db      	uxtb	r3, r3
 8005ebc:	2b01      	cmp	r3, #1
 8005ebe:	d001      	beq.n	8005ec4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	e04f      	b.n	8005f64 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2202      	movs	r2, #2
 8005ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	68da      	ldr	r2, [r3, #12]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f042 0201 	orr.w	r2, r2, #1
 8005eda:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a23      	ldr	r2, [pc, #140]	; (8005f70 <HAL_TIM_Base_Start_IT+0xc4>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d01d      	beq.n	8005f22 <HAL_TIM_Base_Start_IT+0x76>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005eee:	d018      	beq.n	8005f22 <HAL_TIM_Base_Start_IT+0x76>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a1f      	ldr	r2, [pc, #124]	; (8005f74 <HAL_TIM_Base_Start_IT+0xc8>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d013      	beq.n	8005f22 <HAL_TIM_Base_Start_IT+0x76>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a1e      	ldr	r2, [pc, #120]	; (8005f78 <HAL_TIM_Base_Start_IT+0xcc>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d00e      	beq.n	8005f22 <HAL_TIM_Base_Start_IT+0x76>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a1c      	ldr	r2, [pc, #112]	; (8005f7c <HAL_TIM_Base_Start_IT+0xd0>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d009      	beq.n	8005f22 <HAL_TIM_Base_Start_IT+0x76>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a1b      	ldr	r2, [pc, #108]	; (8005f80 <HAL_TIM_Base_Start_IT+0xd4>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d004      	beq.n	8005f22 <HAL_TIM_Base_Start_IT+0x76>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a19      	ldr	r2, [pc, #100]	; (8005f84 <HAL_TIM_Base_Start_IT+0xd8>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d115      	bne.n	8005f4e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	689a      	ldr	r2, [r3, #8]
 8005f28:	4b17      	ldr	r3, [pc, #92]	; (8005f88 <HAL_TIM_Base_Start_IT+0xdc>)
 8005f2a:	4013      	ands	r3, r2
 8005f2c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	2b06      	cmp	r3, #6
 8005f32:	d015      	beq.n	8005f60 <HAL_TIM_Base_Start_IT+0xb4>
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f3a:	d011      	beq.n	8005f60 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	681a      	ldr	r2, [r3, #0]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f042 0201 	orr.w	r2, r2, #1
 8005f4a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f4c:	e008      	b.n	8005f60 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	681a      	ldr	r2, [r3, #0]
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f042 0201 	orr.w	r2, r2, #1
 8005f5c:	601a      	str	r2, [r3, #0]
 8005f5e:	e000      	b.n	8005f62 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f60:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005f62:	2300      	movs	r3, #0
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	3714      	adds	r7, #20
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6e:	4770      	bx	lr
 8005f70:	40012c00 	.word	0x40012c00
 8005f74:	40000400 	.word	0x40000400
 8005f78:	40000800 	.word	0x40000800
 8005f7c:	40000c00 	.word	0x40000c00
 8005f80:	40013400 	.word	0x40013400
 8005f84:	40014000 	.word	0x40014000
 8005f88:	00010007 	.word	0x00010007

08005f8c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b082      	sub	sp, #8
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d101      	bne.n	8005f9e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	e049      	b.n	8006032 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fa4:	b2db      	uxtb	r3, r3
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d106      	bne.n	8005fb8 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2200      	movs	r2, #0
 8005fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f7fb fc96 	bl	80018e4 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2202      	movs	r2, #2
 8005fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681a      	ldr	r2, [r3, #0]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	3304      	adds	r3, #4
 8005fc8:	4619      	mov	r1, r3
 8005fca:	4610      	mov	r0, r2
 8005fcc:	f000 f9da 	bl	8006384 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2201      	movs	r2, #1
 8005fdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2201      	movs	r2, #1
 8005fec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2201      	movs	r2, #1
 8005ffc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2201      	movs	r2, #1
 8006004:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2201      	movs	r2, #1
 800600c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2201      	movs	r2, #1
 8006014:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2201      	movs	r2, #1
 800601c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2201      	movs	r2, #1
 8006024:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2201      	movs	r2, #1
 800602c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006030:	2300      	movs	r3, #0
}
 8006032:	4618      	mov	r0, r3
 8006034:	3708      	adds	r7, #8
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}

0800603a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800603a:	b580      	push	{r7, lr}
 800603c:	b084      	sub	sp, #16
 800603e:	af00      	add	r7, sp, #0
 8006040:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	68db      	ldr	r3, [r3, #12]
 8006048:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	691b      	ldr	r3, [r3, #16]
 8006050:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	f003 0302 	and.w	r3, r3, #2
 8006058:	2b00      	cmp	r3, #0
 800605a:	d020      	beq.n	800609e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	f003 0302 	and.w	r3, r3, #2
 8006062:	2b00      	cmp	r3, #0
 8006064:	d01b      	beq.n	800609e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f06f 0202 	mvn.w	r2, #2
 800606e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2201      	movs	r2, #1
 8006074:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	699b      	ldr	r3, [r3, #24]
 800607c:	f003 0303 	and.w	r3, r3, #3
 8006080:	2b00      	cmp	r3, #0
 8006082:	d003      	beq.n	800608c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006084:	6878      	ldr	r0, [r7, #4]
 8006086:	f000 f95f 	bl	8006348 <HAL_TIM_IC_CaptureCallback>
 800608a:	e005      	b.n	8006098 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f000 f951 	bl	8006334 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f000 f962 	bl	800635c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2200      	movs	r2, #0
 800609c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	f003 0304 	and.w	r3, r3, #4
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d020      	beq.n	80060ea <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	f003 0304 	and.w	r3, r3, #4
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d01b      	beq.n	80060ea <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f06f 0204 	mvn.w	r2, #4
 80060ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2202      	movs	r2, #2
 80060c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	699b      	ldr	r3, [r3, #24]
 80060c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d003      	beq.n	80060d8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	f000 f939 	bl	8006348 <HAL_TIM_IC_CaptureCallback>
 80060d6:	e005      	b.n	80060e4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	f000 f92b 	bl	8006334 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	f000 f93c 	bl	800635c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2200      	movs	r2, #0
 80060e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	f003 0308 	and.w	r3, r3, #8
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d020      	beq.n	8006136 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	f003 0308 	and.w	r3, r3, #8
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d01b      	beq.n	8006136 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f06f 0208 	mvn.w	r2, #8
 8006106:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2204      	movs	r2, #4
 800610c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	69db      	ldr	r3, [r3, #28]
 8006114:	f003 0303 	and.w	r3, r3, #3
 8006118:	2b00      	cmp	r3, #0
 800611a:	d003      	beq.n	8006124 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800611c:	6878      	ldr	r0, [r7, #4]
 800611e:	f000 f913 	bl	8006348 <HAL_TIM_IC_CaptureCallback>
 8006122:	e005      	b.n	8006130 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006124:	6878      	ldr	r0, [r7, #4]
 8006126:	f000 f905 	bl	8006334 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	f000 f916 	bl	800635c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2200      	movs	r2, #0
 8006134:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	f003 0310 	and.w	r3, r3, #16
 800613c:	2b00      	cmp	r3, #0
 800613e:	d020      	beq.n	8006182 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	f003 0310 	and.w	r3, r3, #16
 8006146:	2b00      	cmp	r3, #0
 8006148:	d01b      	beq.n	8006182 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f06f 0210 	mvn.w	r2, #16
 8006152:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2208      	movs	r2, #8
 8006158:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	69db      	ldr	r3, [r3, #28]
 8006160:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006164:	2b00      	cmp	r3, #0
 8006166:	d003      	beq.n	8006170 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	f000 f8ed 	bl	8006348 <HAL_TIM_IC_CaptureCallback>
 800616e:	e005      	b.n	800617c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	f000 f8df 	bl	8006334 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f000 f8f0 	bl	800635c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2200      	movs	r2, #0
 8006180:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	f003 0301 	and.w	r3, r3, #1
 8006188:	2b00      	cmp	r3, #0
 800618a:	d00c      	beq.n	80061a6 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	f003 0301 	and.w	r3, r3, #1
 8006192:	2b00      	cmp	r3, #0
 8006194:	d007      	beq.n	80061a6 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f06f 0201 	mvn.w	r2, #1
 800619e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80061a0:	6878      	ldr	r0, [r7, #4]
 80061a2:	f7fa fecf 	bl	8000f44 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d00c      	beq.n	80061ca <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d007      	beq.n	80061ca <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80061c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80061c4:	6878      	ldr	r0, [r7, #4]
 80061c6:	f000 fcdf 	bl	8006b88 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d00c      	beq.n	80061ee <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d007      	beq.n	80061ee <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80061e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	f000 fcd7 	bl	8006b9c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d00c      	beq.n	8006212 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d007      	beq.n	8006212 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800620a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800620c:	6878      	ldr	r0, [r7, #4]
 800620e:	f000 f8af 	bl	8006370 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	f003 0320 	and.w	r3, r3, #32
 8006218:	2b00      	cmp	r3, #0
 800621a:	d00c      	beq.n	8006236 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	f003 0320 	and.w	r3, r3, #32
 8006222:	2b00      	cmp	r3, #0
 8006224:	d007      	beq.n	8006236 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f06f 0220 	mvn.w	r2, #32
 800622e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006230:	6878      	ldr	r0, [r7, #4]
 8006232:	f000 fc9f 	bl	8006b74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006236:	bf00      	nop
 8006238:	3710      	adds	r7, #16
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}
	...

08006240 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b086      	sub	sp, #24
 8006244:	af00      	add	r7, sp, #0
 8006246:	60f8      	str	r0, [r7, #12]
 8006248:	60b9      	str	r1, [r7, #8]
 800624a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800624c:	2300      	movs	r3, #0
 800624e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006256:	2b01      	cmp	r3, #1
 8006258:	d101      	bne.n	800625e <HAL_TIM_OC_ConfigChannel+0x1e>
 800625a:	2302      	movs	r3, #2
 800625c:	e066      	b.n	800632c <HAL_TIM_OC_ConfigChannel+0xec>
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	2201      	movs	r2, #1
 8006262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2b14      	cmp	r3, #20
 800626a:	d857      	bhi.n	800631c <HAL_TIM_OC_ConfigChannel+0xdc>
 800626c:	a201      	add	r2, pc, #4	; (adr r2, 8006274 <HAL_TIM_OC_ConfigChannel+0x34>)
 800626e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006272:	bf00      	nop
 8006274:	080062c9 	.word	0x080062c9
 8006278:	0800631d 	.word	0x0800631d
 800627c:	0800631d 	.word	0x0800631d
 8006280:	0800631d 	.word	0x0800631d
 8006284:	080062d7 	.word	0x080062d7
 8006288:	0800631d 	.word	0x0800631d
 800628c:	0800631d 	.word	0x0800631d
 8006290:	0800631d 	.word	0x0800631d
 8006294:	080062e5 	.word	0x080062e5
 8006298:	0800631d 	.word	0x0800631d
 800629c:	0800631d 	.word	0x0800631d
 80062a0:	0800631d 	.word	0x0800631d
 80062a4:	080062f3 	.word	0x080062f3
 80062a8:	0800631d 	.word	0x0800631d
 80062ac:	0800631d 	.word	0x0800631d
 80062b0:	0800631d 	.word	0x0800631d
 80062b4:	08006301 	.word	0x08006301
 80062b8:	0800631d 	.word	0x0800631d
 80062bc:	0800631d 	.word	0x0800631d
 80062c0:	0800631d 	.word	0x0800631d
 80062c4:	0800630f 	.word	0x0800630f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	68b9      	ldr	r1, [r7, #8]
 80062ce:	4618      	mov	r0, r3
 80062d0:	f000 f8f2 	bl	80064b8 <TIM_OC1_SetConfig>
      break;
 80062d4:	e025      	b.n	8006322 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	68b9      	ldr	r1, [r7, #8]
 80062dc:	4618      	mov	r0, r3
 80062de:	f000 f97b 	bl	80065d8 <TIM_OC2_SetConfig>
      break;
 80062e2:	e01e      	b.n	8006322 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	68b9      	ldr	r1, [r7, #8]
 80062ea:	4618      	mov	r0, r3
 80062ec:	f000 f9fe 	bl	80066ec <TIM_OC3_SetConfig>
      break;
 80062f0:	e017      	b.n	8006322 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	68b9      	ldr	r1, [r7, #8]
 80062f8:	4618      	mov	r0, r3
 80062fa:	f000 fa7f 	bl	80067fc <TIM_OC4_SetConfig>
      break;
 80062fe:	e010      	b.n	8006322 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	68b9      	ldr	r1, [r7, #8]
 8006306:	4618      	mov	r0, r3
 8006308:	f000 fae2 	bl	80068d0 <TIM_OC5_SetConfig>
      break;
 800630c:	e009      	b.n	8006322 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	68b9      	ldr	r1, [r7, #8]
 8006314:	4618      	mov	r0, r3
 8006316:	f000 fb3f 	bl	8006998 <TIM_OC6_SetConfig>
      break;
 800631a:	e002      	b.n	8006322 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 800631c:	2301      	movs	r3, #1
 800631e:	75fb      	strb	r3, [r7, #23]
      break;
 8006320:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2200      	movs	r2, #0
 8006326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800632a:	7dfb      	ldrb	r3, [r7, #23]
}
 800632c:	4618      	mov	r0, r3
 800632e:	3718      	adds	r7, #24
 8006330:	46bd      	mov	sp, r7
 8006332:	bd80      	pop	{r7, pc}

08006334 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006334:	b480      	push	{r7}
 8006336:	b083      	sub	sp, #12
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800633c:	bf00      	nop
 800633e:	370c      	adds	r7, #12
 8006340:	46bd      	mov	sp, r7
 8006342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006346:	4770      	bx	lr

08006348 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006348:	b480      	push	{r7}
 800634a:	b083      	sub	sp, #12
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006350:	bf00      	nop
 8006352:	370c      	adds	r7, #12
 8006354:	46bd      	mov	sp, r7
 8006356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635a:	4770      	bx	lr

0800635c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800635c:	b480      	push	{r7}
 800635e:	b083      	sub	sp, #12
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006364:	bf00      	nop
 8006366:	370c      	adds	r7, #12
 8006368:	46bd      	mov	sp, r7
 800636a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636e:	4770      	bx	lr

08006370 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006370:	b480      	push	{r7}
 8006372:	b083      	sub	sp, #12
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006378:	bf00      	nop
 800637a:	370c      	adds	r7, #12
 800637c:	46bd      	mov	sp, r7
 800637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006382:	4770      	bx	lr

08006384 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006384:	b480      	push	{r7}
 8006386:	b085      	sub	sp, #20
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
 800638c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	4a40      	ldr	r2, [pc, #256]	; (8006498 <TIM_Base_SetConfig+0x114>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d013      	beq.n	80063c4 <TIM_Base_SetConfig+0x40>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063a2:	d00f      	beq.n	80063c4 <TIM_Base_SetConfig+0x40>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	4a3d      	ldr	r2, [pc, #244]	; (800649c <TIM_Base_SetConfig+0x118>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d00b      	beq.n	80063c4 <TIM_Base_SetConfig+0x40>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	4a3c      	ldr	r2, [pc, #240]	; (80064a0 <TIM_Base_SetConfig+0x11c>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d007      	beq.n	80063c4 <TIM_Base_SetConfig+0x40>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	4a3b      	ldr	r2, [pc, #236]	; (80064a4 <TIM_Base_SetConfig+0x120>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d003      	beq.n	80063c4 <TIM_Base_SetConfig+0x40>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	4a3a      	ldr	r2, [pc, #232]	; (80064a8 <TIM_Base_SetConfig+0x124>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d108      	bne.n	80063d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	68fa      	ldr	r2, [r7, #12]
 80063d2:	4313      	orrs	r3, r2
 80063d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	4a2f      	ldr	r2, [pc, #188]	; (8006498 <TIM_Base_SetConfig+0x114>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d01f      	beq.n	800641e <TIM_Base_SetConfig+0x9a>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063e4:	d01b      	beq.n	800641e <TIM_Base_SetConfig+0x9a>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	4a2c      	ldr	r2, [pc, #176]	; (800649c <TIM_Base_SetConfig+0x118>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d017      	beq.n	800641e <TIM_Base_SetConfig+0x9a>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	4a2b      	ldr	r2, [pc, #172]	; (80064a0 <TIM_Base_SetConfig+0x11c>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d013      	beq.n	800641e <TIM_Base_SetConfig+0x9a>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	4a2a      	ldr	r2, [pc, #168]	; (80064a4 <TIM_Base_SetConfig+0x120>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d00f      	beq.n	800641e <TIM_Base_SetConfig+0x9a>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	4a29      	ldr	r2, [pc, #164]	; (80064a8 <TIM_Base_SetConfig+0x124>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d00b      	beq.n	800641e <TIM_Base_SetConfig+0x9a>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	4a28      	ldr	r2, [pc, #160]	; (80064ac <TIM_Base_SetConfig+0x128>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d007      	beq.n	800641e <TIM_Base_SetConfig+0x9a>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	4a27      	ldr	r2, [pc, #156]	; (80064b0 <TIM_Base_SetConfig+0x12c>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d003      	beq.n	800641e <TIM_Base_SetConfig+0x9a>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	4a26      	ldr	r2, [pc, #152]	; (80064b4 <TIM_Base_SetConfig+0x130>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d108      	bne.n	8006430 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006424:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	68db      	ldr	r3, [r3, #12]
 800642a:	68fa      	ldr	r2, [r7, #12]
 800642c:	4313      	orrs	r3, r2
 800642e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	695b      	ldr	r3, [r3, #20]
 800643a:	4313      	orrs	r3, r2
 800643c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	68fa      	ldr	r2, [r7, #12]
 8006442:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	689a      	ldr	r2, [r3, #8]
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	681a      	ldr	r2, [r3, #0]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	4a10      	ldr	r2, [pc, #64]	; (8006498 <TIM_Base_SetConfig+0x114>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d00f      	beq.n	800647c <TIM_Base_SetConfig+0xf8>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	4a12      	ldr	r2, [pc, #72]	; (80064a8 <TIM_Base_SetConfig+0x124>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d00b      	beq.n	800647c <TIM_Base_SetConfig+0xf8>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	4a11      	ldr	r2, [pc, #68]	; (80064ac <TIM_Base_SetConfig+0x128>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d007      	beq.n	800647c <TIM_Base_SetConfig+0xf8>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	4a10      	ldr	r2, [pc, #64]	; (80064b0 <TIM_Base_SetConfig+0x12c>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d003      	beq.n	800647c <TIM_Base_SetConfig+0xf8>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	4a0f      	ldr	r2, [pc, #60]	; (80064b4 <TIM_Base_SetConfig+0x130>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d103      	bne.n	8006484 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	691a      	ldr	r2, [r3, #16]
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2201      	movs	r2, #1
 8006488:	615a      	str	r2, [r3, #20]
}
 800648a:	bf00      	nop
 800648c:	3714      	adds	r7, #20
 800648e:	46bd      	mov	sp, r7
 8006490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006494:	4770      	bx	lr
 8006496:	bf00      	nop
 8006498:	40012c00 	.word	0x40012c00
 800649c:	40000400 	.word	0x40000400
 80064a0:	40000800 	.word	0x40000800
 80064a4:	40000c00 	.word	0x40000c00
 80064a8:	40013400 	.word	0x40013400
 80064ac:	40014000 	.word	0x40014000
 80064b0:	40014400 	.word	0x40014400
 80064b4:	40014800 	.word	0x40014800

080064b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b087      	sub	sp, #28
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
 80064c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6a1b      	ldr	r3, [r3, #32]
 80064c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6a1b      	ldr	r3, [r3, #32]
 80064cc:	f023 0201 	bic.w	r2, r3, #1
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	685b      	ldr	r3, [r3, #4]
 80064d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	699b      	ldr	r3, [r3, #24]
 80064de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	f023 0303 	bic.w	r3, r3, #3
 80064f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	68fa      	ldr	r2, [r7, #12]
 80064fa:	4313      	orrs	r3, r2
 80064fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80064fe:	697b      	ldr	r3, [r7, #20]
 8006500:	f023 0302 	bic.w	r3, r3, #2
 8006504:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	689b      	ldr	r3, [r3, #8]
 800650a:	697a      	ldr	r2, [r7, #20]
 800650c:	4313      	orrs	r3, r2
 800650e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	4a2c      	ldr	r2, [pc, #176]	; (80065c4 <TIM_OC1_SetConfig+0x10c>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d00f      	beq.n	8006538 <TIM_OC1_SetConfig+0x80>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	4a2b      	ldr	r2, [pc, #172]	; (80065c8 <TIM_OC1_SetConfig+0x110>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d00b      	beq.n	8006538 <TIM_OC1_SetConfig+0x80>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	4a2a      	ldr	r2, [pc, #168]	; (80065cc <TIM_OC1_SetConfig+0x114>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d007      	beq.n	8006538 <TIM_OC1_SetConfig+0x80>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	4a29      	ldr	r2, [pc, #164]	; (80065d0 <TIM_OC1_SetConfig+0x118>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d003      	beq.n	8006538 <TIM_OC1_SetConfig+0x80>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	4a28      	ldr	r2, [pc, #160]	; (80065d4 <TIM_OC1_SetConfig+0x11c>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d10c      	bne.n	8006552 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	f023 0308 	bic.w	r3, r3, #8
 800653e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	68db      	ldr	r3, [r3, #12]
 8006544:	697a      	ldr	r2, [r7, #20]
 8006546:	4313      	orrs	r3, r2
 8006548:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800654a:	697b      	ldr	r3, [r7, #20]
 800654c:	f023 0304 	bic.w	r3, r3, #4
 8006550:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	4a1b      	ldr	r2, [pc, #108]	; (80065c4 <TIM_OC1_SetConfig+0x10c>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d00f      	beq.n	800657a <TIM_OC1_SetConfig+0xc2>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	4a1a      	ldr	r2, [pc, #104]	; (80065c8 <TIM_OC1_SetConfig+0x110>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d00b      	beq.n	800657a <TIM_OC1_SetConfig+0xc2>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	4a19      	ldr	r2, [pc, #100]	; (80065cc <TIM_OC1_SetConfig+0x114>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d007      	beq.n	800657a <TIM_OC1_SetConfig+0xc2>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	4a18      	ldr	r2, [pc, #96]	; (80065d0 <TIM_OC1_SetConfig+0x118>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d003      	beq.n	800657a <TIM_OC1_SetConfig+0xc2>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	4a17      	ldr	r2, [pc, #92]	; (80065d4 <TIM_OC1_SetConfig+0x11c>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d111      	bne.n	800659e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006580:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006582:	693b      	ldr	r3, [r7, #16]
 8006584:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006588:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	695b      	ldr	r3, [r3, #20]
 800658e:	693a      	ldr	r2, [r7, #16]
 8006590:	4313      	orrs	r3, r2
 8006592:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	699b      	ldr	r3, [r3, #24]
 8006598:	693a      	ldr	r2, [r7, #16]
 800659a:	4313      	orrs	r3, r2
 800659c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	693a      	ldr	r2, [r7, #16]
 80065a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	68fa      	ldr	r2, [r7, #12]
 80065a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	685a      	ldr	r2, [r3, #4]
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	697a      	ldr	r2, [r7, #20]
 80065b6:	621a      	str	r2, [r3, #32]
}
 80065b8:	bf00      	nop
 80065ba:	371c      	adds	r7, #28
 80065bc:	46bd      	mov	sp, r7
 80065be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c2:	4770      	bx	lr
 80065c4:	40012c00 	.word	0x40012c00
 80065c8:	40013400 	.word	0x40013400
 80065cc:	40014000 	.word	0x40014000
 80065d0:	40014400 	.word	0x40014400
 80065d4:	40014800 	.word	0x40014800

080065d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80065d8:	b480      	push	{r7}
 80065da:	b087      	sub	sp, #28
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
 80065e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6a1b      	ldr	r3, [r3, #32]
 80065e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6a1b      	ldr	r3, [r3, #32]
 80065ec:	f023 0210 	bic.w	r2, r3, #16
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	685b      	ldr	r3, [r3, #4]
 80065f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	699b      	ldr	r3, [r3, #24]
 80065fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006606:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800660a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006612:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	021b      	lsls	r3, r3, #8
 800661a:	68fa      	ldr	r2, [r7, #12]
 800661c:	4313      	orrs	r3, r2
 800661e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006620:	697b      	ldr	r3, [r7, #20]
 8006622:	f023 0320 	bic.w	r3, r3, #32
 8006626:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	689b      	ldr	r3, [r3, #8]
 800662c:	011b      	lsls	r3, r3, #4
 800662e:	697a      	ldr	r2, [r7, #20]
 8006630:	4313      	orrs	r3, r2
 8006632:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	4a28      	ldr	r2, [pc, #160]	; (80066d8 <TIM_OC2_SetConfig+0x100>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d003      	beq.n	8006644 <TIM_OC2_SetConfig+0x6c>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	4a27      	ldr	r2, [pc, #156]	; (80066dc <TIM_OC2_SetConfig+0x104>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d10d      	bne.n	8006660 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800664a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	68db      	ldr	r3, [r3, #12]
 8006650:	011b      	lsls	r3, r3, #4
 8006652:	697a      	ldr	r2, [r7, #20]
 8006654:	4313      	orrs	r3, r2
 8006656:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006658:	697b      	ldr	r3, [r7, #20]
 800665a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800665e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	4a1d      	ldr	r2, [pc, #116]	; (80066d8 <TIM_OC2_SetConfig+0x100>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d00f      	beq.n	8006688 <TIM_OC2_SetConfig+0xb0>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	4a1c      	ldr	r2, [pc, #112]	; (80066dc <TIM_OC2_SetConfig+0x104>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d00b      	beq.n	8006688 <TIM_OC2_SetConfig+0xb0>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	4a1b      	ldr	r2, [pc, #108]	; (80066e0 <TIM_OC2_SetConfig+0x108>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d007      	beq.n	8006688 <TIM_OC2_SetConfig+0xb0>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	4a1a      	ldr	r2, [pc, #104]	; (80066e4 <TIM_OC2_SetConfig+0x10c>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d003      	beq.n	8006688 <TIM_OC2_SetConfig+0xb0>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	4a19      	ldr	r2, [pc, #100]	; (80066e8 <TIM_OC2_SetConfig+0x110>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d113      	bne.n	80066b0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006688:	693b      	ldr	r3, [r7, #16]
 800668a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800668e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006696:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	695b      	ldr	r3, [r3, #20]
 800669c:	009b      	lsls	r3, r3, #2
 800669e:	693a      	ldr	r2, [r7, #16]
 80066a0:	4313      	orrs	r3, r2
 80066a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	699b      	ldr	r3, [r3, #24]
 80066a8:	009b      	lsls	r3, r3, #2
 80066aa:	693a      	ldr	r2, [r7, #16]
 80066ac:	4313      	orrs	r3, r2
 80066ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	693a      	ldr	r2, [r7, #16]
 80066b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	68fa      	ldr	r2, [r7, #12]
 80066ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	685a      	ldr	r2, [r3, #4]
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	697a      	ldr	r2, [r7, #20]
 80066c8:	621a      	str	r2, [r3, #32]
}
 80066ca:	bf00      	nop
 80066cc:	371c      	adds	r7, #28
 80066ce:	46bd      	mov	sp, r7
 80066d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d4:	4770      	bx	lr
 80066d6:	bf00      	nop
 80066d8:	40012c00 	.word	0x40012c00
 80066dc:	40013400 	.word	0x40013400
 80066e0:	40014000 	.word	0x40014000
 80066e4:	40014400 	.word	0x40014400
 80066e8:	40014800 	.word	0x40014800

080066ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80066ec:	b480      	push	{r7}
 80066ee:	b087      	sub	sp, #28
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
 80066f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6a1b      	ldr	r3, [r3, #32]
 80066fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6a1b      	ldr	r3, [r3, #32]
 8006700:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	685b      	ldr	r3, [r3, #4]
 800670c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	69db      	ldr	r3, [r3, #28]
 8006712:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800671a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800671e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	f023 0303 	bic.w	r3, r3, #3
 8006726:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	68fa      	ldr	r2, [r7, #12]
 800672e:	4313      	orrs	r3, r2
 8006730:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006738:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	689b      	ldr	r3, [r3, #8]
 800673e:	021b      	lsls	r3, r3, #8
 8006740:	697a      	ldr	r2, [r7, #20]
 8006742:	4313      	orrs	r3, r2
 8006744:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	4a27      	ldr	r2, [pc, #156]	; (80067e8 <TIM_OC3_SetConfig+0xfc>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d003      	beq.n	8006756 <TIM_OC3_SetConfig+0x6a>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	4a26      	ldr	r2, [pc, #152]	; (80067ec <TIM_OC3_SetConfig+0x100>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d10d      	bne.n	8006772 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800675c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	68db      	ldr	r3, [r3, #12]
 8006762:	021b      	lsls	r3, r3, #8
 8006764:	697a      	ldr	r2, [r7, #20]
 8006766:	4313      	orrs	r3, r2
 8006768:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006770:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	4a1c      	ldr	r2, [pc, #112]	; (80067e8 <TIM_OC3_SetConfig+0xfc>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d00f      	beq.n	800679a <TIM_OC3_SetConfig+0xae>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	4a1b      	ldr	r2, [pc, #108]	; (80067ec <TIM_OC3_SetConfig+0x100>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d00b      	beq.n	800679a <TIM_OC3_SetConfig+0xae>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	4a1a      	ldr	r2, [pc, #104]	; (80067f0 <TIM_OC3_SetConfig+0x104>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d007      	beq.n	800679a <TIM_OC3_SetConfig+0xae>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	4a19      	ldr	r2, [pc, #100]	; (80067f4 <TIM_OC3_SetConfig+0x108>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d003      	beq.n	800679a <TIM_OC3_SetConfig+0xae>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	4a18      	ldr	r2, [pc, #96]	; (80067f8 <TIM_OC3_SetConfig+0x10c>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d113      	bne.n	80067c2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800679a:	693b      	ldr	r3, [r7, #16]
 800679c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80067a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80067a2:	693b      	ldr	r3, [r7, #16]
 80067a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80067a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	695b      	ldr	r3, [r3, #20]
 80067ae:	011b      	lsls	r3, r3, #4
 80067b0:	693a      	ldr	r2, [r7, #16]
 80067b2:	4313      	orrs	r3, r2
 80067b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	699b      	ldr	r3, [r3, #24]
 80067ba:	011b      	lsls	r3, r3, #4
 80067bc:	693a      	ldr	r2, [r7, #16]
 80067be:	4313      	orrs	r3, r2
 80067c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	693a      	ldr	r2, [r7, #16]
 80067c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	68fa      	ldr	r2, [r7, #12]
 80067cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	685a      	ldr	r2, [r3, #4]
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	697a      	ldr	r2, [r7, #20]
 80067da:	621a      	str	r2, [r3, #32]
}
 80067dc:	bf00      	nop
 80067de:	371c      	adds	r7, #28
 80067e0:	46bd      	mov	sp, r7
 80067e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e6:	4770      	bx	lr
 80067e8:	40012c00 	.word	0x40012c00
 80067ec:	40013400 	.word	0x40013400
 80067f0:	40014000 	.word	0x40014000
 80067f4:	40014400 	.word	0x40014400
 80067f8:	40014800 	.word	0x40014800

080067fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b087      	sub	sp, #28
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
 8006804:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6a1b      	ldr	r3, [r3, #32]
 800680a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6a1b      	ldr	r3, [r3, #32]
 8006810:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	685b      	ldr	r3, [r3, #4]
 800681c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	69db      	ldr	r3, [r3, #28]
 8006822:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800682a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800682e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006836:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	021b      	lsls	r3, r3, #8
 800683e:	68fa      	ldr	r2, [r7, #12]
 8006840:	4313      	orrs	r3, r2
 8006842:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006844:	693b      	ldr	r3, [r7, #16]
 8006846:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800684a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	689b      	ldr	r3, [r3, #8]
 8006850:	031b      	lsls	r3, r3, #12
 8006852:	693a      	ldr	r2, [r7, #16]
 8006854:	4313      	orrs	r3, r2
 8006856:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	4a18      	ldr	r2, [pc, #96]	; (80068bc <TIM_OC4_SetConfig+0xc0>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d00f      	beq.n	8006880 <TIM_OC4_SetConfig+0x84>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	4a17      	ldr	r2, [pc, #92]	; (80068c0 <TIM_OC4_SetConfig+0xc4>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d00b      	beq.n	8006880 <TIM_OC4_SetConfig+0x84>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	4a16      	ldr	r2, [pc, #88]	; (80068c4 <TIM_OC4_SetConfig+0xc8>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d007      	beq.n	8006880 <TIM_OC4_SetConfig+0x84>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	4a15      	ldr	r2, [pc, #84]	; (80068c8 <TIM_OC4_SetConfig+0xcc>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d003      	beq.n	8006880 <TIM_OC4_SetConfig+0x84>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	4a14      	ldr	r2, [pc, #80]	; (80068cc <TIM_OC4_SetConfig+0xd0>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d109      	bne.n	8006894 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006886:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	695b      	ldr	r3, [r3, #20]
 800688c:	019b      	lsls	r3, r3, #6
 800688e:	697a      	ldr	r2, [r7, #20]
 8006890:	4313      	orrs	r3, r2
 8006892:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	697a      	ldr	r2, [r7, #20]
 8006898:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	68fa      	ldr	r2, [r7, #12]
 800689e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	685a      	ldr	r2, [r3, #4]
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	693a      	ldr	r2, [r7, #16]
 80068ac:	621a      	str	r2, [r3, #32]
}
 80068ae:	bf00      	nop
 80068b0:	371c      	adds	r7, #28
 80068b2:	46bd      	mov	sp, r7
 80068b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b8:	4770      	bx	lr
 80068ba:	bf00      	nop
 80068bc:	40012c00 	.word	0x40012c00
 80068c0:	40013400 	.word	0x40013400
 80068c4:	40014000 	.word	0x40014000
 80068c8:	40014400 	.word	0x40014400
 80068cc:	40014800 	.word	0x40014800

080068d0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80068d0:	b480      	push	{r7}
 80068d2:	b087      	sub	sp, #28
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
 80068d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6a1b      	ldr	r3, [r3, #32]
 80068de:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6a1b      	ldr	r3, [r3, #32]
 80068e4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	685b      	ldr	r3, [r3, #4]
 80068f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006902:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	68fa      	ldr	r2, [r7, #12]
 800690a:	4313      	orrs	r3, r2
 800690c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006914:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	689b      	ldr	r3, [r3, #8]
 800691a:	041b      	lsls	r3, r3, #16
 800691c:	693a      	ldr	r2, [r7, #16]
 800691e:	4313      	orrs	r3, r2
 8006920:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	4a17      	ldr	r2, [pc, #92]	; (8006984 <TIM_OC5_SetConfig+0xb4>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d00f      	beq.n	800694a <TIM_OC5_SetConfig+0x7a>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	4a16      	ldr	r2, [pc, #88]	; (8006988 <TIM_OC5_SetConfig+0xb8>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d00b      	beq.n	800694a <TIM_OC5_SetConfig+0x7a>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	4a15      	ldr	r2, [pc, #84]	; (800698c <TIM_OC5_SetConfig+0xbc>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d007      	beq.n	800694a <TIM_OC5_SetConfig+0x7a>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	4a14      	ldr	r2, [pc, #80]	; (8006990 <TIM_OC5_SetConfig+0xc0>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d003      	beq.n	800694a <TIM_OC5_SetConfig+0x7a>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	4a13      	ldr	r2, [pc, #76]	; (8006994 <TIM_OC5_SetConfig+0xc4>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d109      	bne.n	800695e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006950:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	695b      	ldr	r3, [r3, #20]
 8006956:	021b      	lsls	r3, r3, #8
 8006958:	697a      	ldr	r2, [r7, #20]
 800695a:	4313      	orrs	r3, r2
 800695c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	697a      	ldr	r2, [r7, #20]
 8006962:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	68fa      	ldr	r2, [r7, #12]
 8006968:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	685a      	ldr	r2, [r3, #4]
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	693a      	ldr	r2, [r7, #16]
 8006976:	621a      	str	r2, [r3, #32]
}
 8006978:	bf00      	nop
 800697a:	371c      	adds	r7, #28
 800697c:	46bd      	mov	sp, r7
 800697e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006982:	4770      	bx	lr
 8006984:	40012c00 	.word	0x40012c00
 8006988:	40013400 	.word	0x40013400
 800698c:	40014000 	.word	0x40014000
 8006990:	40014400 	.word	0x40014400
 8006994:	40014800 	.word	0x40014800

08006998 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006998:	b480      	push	{r7}
 800699a:	b087      	sub	sp, #28
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
 80069a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6a1b      	ldr	r3, [r3, #32]
 80069a6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6a1b      	ldr	r3, [r3, #32]
 80069ac:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80069c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	021b      	lsls	r3, r3, #8
 80069d2:	68fa      	ldr	r2, [r7, #12]
 80069d4:	4313      	orrs	r3, r2
 80069d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80069d8:	693b      	ldr	r3, [r7, #16]
 80069da:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80069de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	689b      	ldr	r3, [r3, #8]
 80069e4:	051b      	lsls	r3, r3, #20
 80069e6:	693a      	ldr	r2, [r7, #16]
 80069e8:	4313      	orrs	r3, r2
 80069ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	4a18      	ldr	r2, [pc, #96]	; (8006a50 <TIM_OC6_SetConfig+0xb8>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d00f      	beq.n	8006a14 <TIM_OC6_SetConfig+0x7c>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	4a17      	ldr	r2, [pc, #92]	; (8006a54 <TIM_OC6_SetConfig+0xbc>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d00b      	beq.n	8006a14 <TIM_OC6_SetConfig+0x7c>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	4a16      	ldr	r2, [pc, #88]	; (8006a58 <TIM_OC6_SetConfig+0xc0>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d007      	beq.n	8006a14 <TIM_OC6_SetConfig+0x7c>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	4a15      	ldr	r2, [pc, #84]	; (8006a5c <TIM_OC6_SetConfig+0xc4>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d003      	beq.n	8006a14 <TIM_OC6_SetConfig+0x7c>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	4a14      	ldr	r2, [pc, #80]	; (8006a60 <TIM_OC6_SetConfig+0xc8>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d109      	bne.n	8006a28 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a1a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	695b      	ldr	r3, [r3, #20]
 8006a20:	029b      	lsls	r3, r3, #10
 8006a22:	697a      	ldr	r2, [r7, #20]
 8006a24:	4313      	orrs	r3, r2
 8006a26:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	697a      	ldr	r2, [r7, #20]
 8006a2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	68fa      	ldr	r2, [r7, #12]
 8006a32:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	685a      	ldr	r2, [r3, #4]
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	693a      	ldr	r2, [r7, #16]
 8006a40:	621a      	str	r2, [r3, #32]
}
 8006a42:	bf00      	nop
 8006a44:	371c      	adds	r7, #28
 8006a46:	46bd      	mov	sp, r7
 8006a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4c:	4770      	bx	lr
 8006a4e:	bf00      	nop
 8006a50:	40012c00 	.word	0x40012c00
 8006a54:	40013400 	.word	0x40013400
 8006a58:	40014000 	.word	0x40014000
 8006a5c:	40014400 	.word	0x40014400
 8006a60:	40014800 	.word	0x40014800

08006a64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006a64:	b480      	push	{r7}
 8006a66:	b085      	sub	sp, #20
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
 8006a6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a74:	2b01      	cmp	r3, #1
 8006a76:	d101      	bne.n	8006a7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006a78:	2302      	movs	r3, #2
 8006a7a:	e068      	b.n	8006b4e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2201      	movs	r2, #1
 8006a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2202      	movs	r2, #2
 8006a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	685b      	ldr	r3, [r3, #4]
 8006a92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	689b      	ldr	r3, [r3, #8]
 8006a9a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4a2e      	ldr	r2, [pc, #184]	; (8006b5c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d004      	beq.n	8006ab0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4a2d      	ldr	r2, [pc, #180]	; (8006b60 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d108      	bne.n	8006ac2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006ab6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	68fa      	ldr	r2, [r7, #12]
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ac8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	68fa      	ldr	r2, [r7, #12]
 8006ad0:	4313      	orrs	r3, r2
 8006ad2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	68fa      	ldr	r2, [r7, #12]
 8006ada:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4a1e      	ldr	r2, [pc, #120]	; (8006b5c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d01d      	beq.n	8006b22 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006aee:	d018      	beq.n	8006b22 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	4a1b      	ldr	r2, [pc, #108]	; (8006b64 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d013      	beq.n	8006b22 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4a1a      	ldr	r2, [pc, #104]	; (8006b68 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d00e      	beq.n	8006b22 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	4a18      	ldr	r2, [pc, #96]	; (8006b6c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d009      	beq.n	8006b22 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4a13      	ldr	r2, [pc, #76]	; (8006b60 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d004      	beq.n	8006b22 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4a14      	ldr	r2, [pc, #80]	; (8006b70 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d10c      	bne.n	8006b3c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b28:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	689b      	ldr	r3, [r3, #8]
 8006b2e:	68ba      	ldr	r2, [r7, #8]
 8006b30:	4313      	orrs	r3, r2
 8006b32:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	68ba      	ldr	r2, [r7, #8]
 8006b3a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2201      	movs	r2, #1
 8006b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2200      	movs	r2, #0
 8006b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b4c:	2300      	movs	r3, #0
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3714      	adds	r7, #20
 8006b52:	46bd      	mov	sp, r7
 8006b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b58:	4770      	bx	lr
 8006b5a:	bf00      	nop
 8006b5c:	40012c00 	.word	0x40012c00
 8006b60:	40013400 	.word	0x40013400
 8006b64:	40000400 	.word	0x40000400
 8006b68:	40000800 	.word	0x40000800
 8006b6c:	40000c00 	.word	0x40000c00
 8006b70:	40014000 	.word	0x40014000

08006b74 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006b74:	b480      	push	{r7}
 8006b76:	b083      	sub	sp, #12
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006b7c:	bf00      	nop
 8006b7e:	370c      	adds	r7, #12
 8006b80:	46bd      	mov	sp, r7
 8006b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b86:	4770      	bx	lr

08006b88 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b083      	sub	sp, #12
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006b90:	bf00      	nop
 8006b92:	370c      	adds	r7, #12
 8006b94:	46bd      	mov	sp, r7
 8006b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9a:	4770      	bx	lr

08006b9c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b083      	sub	sp, #12
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006ba4:	bf00      	nop
 8006ba6:	370c      	adds	r7, #12
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bae:	4770      	bx	lr

08006bb0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b082      	sub	sp, #8
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d101      	bne.n	8006bc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	e040      	b.n	8006c44 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d106      	bne.n	8006bd8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f7fa fec6 	bl	8001964 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2224      	movs	r2, #36	; 0x24
 8006bdc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	681a      	ldr	r2, [r3, #0]
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f022 0201 	bic.w	r2, r2, #1
 8006bec:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d002      	beq.n	8006bfc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f000 fe48 	bl	800788c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	f000 fb8d 	bl	800731c <UART_SetConfig>
 8006c02:	4603      	mov	r3, r0
 8006c04:	2b01      	cmp	r3, #1
 8006c06:	d101      	bne.n	8006c0c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006c08:	2301      	movs	r3, #1
 8006c0a:	e01b      	b.n	8006c44 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	685a      	ldr	r2, [r3, #4]
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006c1a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	689a      	ldr	r2, [r3, #8]
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006c2a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	681a      	ldr	r2, [r3, #0]
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f042 0201 	orr.w	r2, r2, #1
 8006c3a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006c3c:	6878      	ldr	r0, [r7, #4]
 8006c3e:	f000 fec7 	bl	80079d0 <UART_CheckIdleState>
 8006c42:	4603      	mov	r3, r0
}
 8006c44:	4618      	mov	r0, r3
 8006c46:	3708      	adds	r7, #8
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bd80      	pop	{r7, pc}

08006c4c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b08b      	sub	sp, #44	; 0x2c
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	60f8      	str	r0, [r7, #12]
 8006c54:	60b9      	str	r1, [r7, #8]
 8006c56:	4613      	mov	r3, r2
 8006c58:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c5e:	2b20      	cmp	r3, #32
 8006c60:	d147      	bne.n	8006cf2 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d002      	beq.n	8006c6e <HAL_UART_Transmit_IT+0x22>
 8006c68:	88fb      	ldrh	r3, [r7, #6]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d101      	bne.n	8006c72 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8006c6e:	2301      	movs	r3, #1
 8006c70:	e040      	b.n	8006cf4 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	68ba      	ldr	r2, [r7, #8]
 8006c76:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	88fa      	ldrh	r2, [r7, #6]
 8006c7c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	88fa      	ldrh	r2, [r7, #6]
 8006c84:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	2200      	movs	r2, #0
 8006c92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	2221      	movs	r2, #33	; 0x21
 8006c9a:	67da      	str	r2, [r3, #124]	; 0x7c
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	689b      	ldr	r3, [r3, #8]
 8006ca0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ca4:	d107      	bne.n	8006cb6 <HAL_UART_Transmit_IT+0x6a>
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	691b      	ldr	r3, [r3, #16]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d103      	bne.n	8006cb6 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	4a13      	ldr	r2, [pc, #76]	; (8006d00 <HAL_UART_Transmit_IT+0xb4>)
 8006cb2:	66da      	str	r2, [r3, #108]	; 0x6c
 8006cb4:	e002      	b.n	8006cbc <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	4a12      	ldr	r2, [pc, #72]	; (8006d04 <HAL_UART_Transmit_IT+0xb8>)
 8006cba:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	e853 3f00 	ldrex	r3, [r3]
 8006cc8:	613b      	str	r3, [r7, #16]
   return(result);
 8006cca:	693b      	ldr	r3, [r7, #16]
 8006ccc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cd0:	627b      	str	r3, [r7, #36]	; 0x24
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	461a      	mov	r2, r3
 8006cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cda:	623b      	str	r3, [r7, #32]
 8006cdc:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cde:	69f9      	ldr	r1, [r7, #28]
 8006ce0:	6a3a      	ldr	r2, [r7, #32]
 8006ce2:	e841 2300 	strex	r3, r2, [r1]
 8006ce6:	61bb      	str	r3, [r7, #24]
   return(result);
 8006ce8:	69bb      	ldr	r3, [r7, #24]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d1e6      	bne.n	8006cbc <HAL_UART_Transmit_IT+0x70>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8006cee:	2300      	movs	r3, #0
 8006cf0:	e000      	b.n	8006cf4 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8006cf2:	2302      	movs	r3, #2
  }
}
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	372c      	adds	r7, #44	; 0x2c
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfe:	4770      	bx	lr
 8006d00:	08007d9b 	.word	0x08007d9b
 8006d04:	08007ce3 	.word	0x08007ce3

08006d08 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b0ba      	sub	sp, #232	; 0xe8
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	69db      	ldr	r3, [r3, #28]
 8006d16:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	689b      	ldr	r3, [r3, #8]
 8006d2a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006d2e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006d32:	f640 030f 	movw	r3, #2063	; 0x80f
 8006d36:	4013      	ands	r3, r2
 8006d38:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006d3c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d115      	bne.n	8006d70 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006d44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d48:	f003 0320 	and.w	r3, r3, #32
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d00f      	beq.n	8006d70 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006d50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d54:	f003 0320 	and.w	r3, r3, #32
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d009      	beq.n	8006d70 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	f000 82ae 	beq.w	80072c2 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	4798      	blx	r3
      }
      return;
 8006d6e:	e2a8      	b.n	80072c2 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8006d70:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	f000 8117 	beq.w	8006fa8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006d7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d7e:	f003 0301 	and.w	r3, r3, #1
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d106      	bne.n	8006d94 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006d86:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006d8a:	4b85      	ldr	r3, [pc, #532]	; (8006fa0 <HAL_UART_IRQHandler+0x298>)
 8006d8c:	4013      	ands	r3, r2
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	f000 810a 	beq.w	8006fa8 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006d94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d98:	f003 0301 	and.w	r3, r3, #1
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d011      	beq.n	8006dc4 <HAL_UART_IRQHandler+0xbc>
 8006da0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006da4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d00b      	beq.n	8006dc4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	2201      	movs	r2, #1
 8006db2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006dba:	f043 0201 	orr.w	r2, r3, #1
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006dc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006dc8:	f003 0302 	and.w	r3, r3, #2
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d011      	beq.n	8006df4 <HAL_UART_IRQHandler+0xec>
 8006dd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006dd4:	f003 0301 	and.w	r3, r3, #1
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d00b      	beq.n	8006df4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	2202      	movs	r2, #2
 8006de2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006dea:	f043 0204 	orr.w	r2, r3, #4
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006df4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006df8:	f003 0304 	and.w	r3, r3, #4
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d011      	beq.n	8006e24 <HAL_UART_IRQHandler+0x11c>
 8006e00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e04:	f003 0301 	and.w	r3, r3, #1
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d00b      	beq.n	8006e24 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	2204      	movs	r2, #4
 8006e12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e1a:	f043 0202 	orr.w	r2, r3, #2
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006e24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e28:	f003 0308 	and.w	r3, r3, #8
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d017      	beq.n	8006e60 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006e30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e34:	f003 0320 	and.w	r3, r3, #32
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d105      	bne.n	8006e48 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006e3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e40:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d00b      	beq.n	8006e60 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	2208      	movs	r2, #8
 8006e4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e56:	f043 0208 	orr.w	r2, r3, #8
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006e60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d012      	beq.n	8006e92 <HAL_UART_IRQHandler+0x18a>
 8006e6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e70:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d00c      	beq.n	8006e92 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006e80:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e88:	f043 0220 	orr.w	r2, r3, #32
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	f000 8214 	beq.w	80072c6 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006e9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ea2:	f003 0320 	and.w	r3, r3, #32
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d00d      	beq.n	8006ec6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006eaa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006eae:	f003 0320 	and.w	r3, r3, #32
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d007      	beq.n	8006ec6 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d003      	beq.n	8006ec6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ecc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	689b      	ldr	r3, [r3, #8]
 8006ed6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006eda:	2b40      	cmp	r3, #64	; 0x40
 8006edc:	d005      	beq.n	8006eea <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006ede:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006ee2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d04f      	beq.n	8006f8a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f000 fe7f 	bl	8007bee <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	689b      	ldr	r3, [r3, #8]
 8006ef6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006efa:	2b40      	cmp	r3, #64	; 0x40
 8006efc:	d141      	bne.n	8006f82 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	3308      	adds	r3, #8
 8006f04:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f08:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006f0c:	e853 3f00 	ldrex	r3, [r3]
 8006f10:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006f14:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006f18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f1c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	3308      	adds	r3, #8
 8006f26:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006f2a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006f2e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f32:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006f36:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006f3a:	e841 2300 	strex	r3, r2, [r1]
 8006f3e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006f42:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d1d9      	bne.n	8006efe <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d013      	beq.n	8006f7a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f56:	4a13      	ldr	r2, [pc, #76]	; (8006fa4 <HAL_UART_IRQHandler+0x29c>)
 8006f58:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f5e:	4618      	mov	r0, r3
 8006f60:	f7fb f8c1 	bl	80020e6 <HAL_DMA_Abort_IT>
 8006f64:	4603      	mov	r3, r0
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d017      	beq.n	8006f9a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f70:	687a      	ldr	r2, [r7, #4]
 8006f72:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006f74:	4610      	mov	r0, r2
 8006f76:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f78:	e00f      	b.n	8006f9a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f000 f9b8 	bl	80072f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f80:	e00b      	b.n	8006f9a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	f000 f9b4 	bl	80072f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f88:	e007      	b.n	8006f9a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f000 f9b0 	bl	80072f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2200      	movs	r2, #0
 8006f94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8006f98:	e195      	b.n	80072c6 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f9a:	bf00      	nop
    return;
 8006f9c:	e193      	b.n	80072c6 <HAL_UART_IRQHandler+0x5be>
 8006f9e:	bf00      	nop
 8006fa0:	04000120 	.word	0x04000120
 8006fa4:	08007cb7 	.word	0x08007cb7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006fac:	2b01      	cmp	r3, #1
 8006fae:	f040 814e 	bne.w	800724e <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006fb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fb6:	f003 0310 	and.w	r3, r3, #16
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	f000 8147 	beq.w	800724e <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006fc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006fc4:	f003 0310 	and.w	r3, r3, #16
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	f000 8140 	beq.w	800724e <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	2210      	movs	r2, #16
 8006fd4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	689b      	ldr	r3, [r3, #8]
 8006fdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fe0:	2b40      	cmp	r3, #64	; 0x40
 8006fe2:	f040 80b8 	bne.w	8007156 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	685b      	ldr	r3, [r3, #4]
 8006fee:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006ff2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	f000 8167 	beq.w	80072ca <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007002:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007006:	429a      	cmp	r2, r3
 8007008:	f080 815f 	bcs.w	80072ca <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007012:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f003 0320 	and.w	r3, r3, #32
 8007022:	2b00      	cmp	r3, #0
 8007024:	f040 8086 	bne.w	8007134 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007030:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007034:	e853 3f00 	ldrex	r3, [r3]
 8007038:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800703c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007040:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007044:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	461a      	mov	r2, r3
 800704e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007052:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007056:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800705a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800705e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007062:	e841 2300 	strex	r3, r2, [r1]
 8007066:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800706a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800706e:	2b00      	cmp	r3, #0
 8007070:	d1da      	bne.n	8007028 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	3308      	adds	r3, #8
 8007078:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800707a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800707c:	e853 3f00 	ldrex	r3, [r3]
 8007080:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007082:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007084:	f023 0301 	bic.w	r3, r3, #1
 8007088:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	3308      	adds	r3, #8
 8007092:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007096:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800709a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800709c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800709e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80070a2:	e841 2300 	strex	r3, r2, [r1]
 80070a6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80070a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d1e1      	bne.n	8007072 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	3308      	adds	r3, #8
 80070b4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80070b8:	e853 3f00 	ldrex	r3, [r3]
 80070bc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80070be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80070c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	3308      	adds	r3, #8
 80070ce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80070d2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80070d4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070d6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80070d8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80070da:	e841 2300 	strex	r3, r2, [r1]
 80070de:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80070e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d1e3      	bne.n	80070ae <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2220      	movs	r2, #32
 80070ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2200      	movs	r2, #0
 80070f2:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070fc:	e853 3f00 	ldrex	r3, [r3]
 8007100:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007102:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007104:	f023 0310 	bic.w	r3, r3, #16
 8007108:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	461a      	mov	r2, r3
 8007112:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007116:	65bb      	str	r3, [r7, #88]	; 0x58
 8007118:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800711a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800711c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800711e:	e841 2300 	strex	r3, r2, [r1]
 8007122:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007124:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007126:	2b00      	cmp	r3, #0
 8007128:	d1e4      	bne.n	80070f4 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800712e:	4618      	mov	r0, r3
 8007130:	f7fa ff9b 	bl	800206a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2202      	movs	r2, #2
 8007138:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007146:	b29b      	uxth	r3, r3
 8007148:	1ad3      	subs	r3, r2, r3
 800714a:	b29b      	uxth	r3, r3
 800714c:	4619      	mov	r1, r3
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f000 f8d8 	bl	8007304 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007154:	e0b9      	b.n	80072ca <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007162:	b29b      	uxth	r3, r3
 8007164:	1ad3      	subs	r3, r2, r3
 8007166:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007170:	b29b      	uxth	r3, r3
 8007172:	2b00      	cmp	r3, #0
 8007174:	f000 80ab 	beq.w	80072ce <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8007178:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800717c:	2b00      	cmp	r3, #0
 800717e:	f000 80a6 	beq.w	80072ce <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800718a:	e853 3f00 	ldrex	r3, [r3]
 800718e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007190:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007192:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007196:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	461a      	mov	r2, r3
 80071a0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80071a4:	647b      	str	r3, [r7, #68]	; 0x44
 80071a6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071a8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80071aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80071ac:	e841 2300 	strex	r3, r2, [r1]
 80071b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80071b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d1e4      	bne.n	8007182 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	3308      	adds	r3, #8
 80071be:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071c2:	e853 3f00 	ldrex	r3, [r3]
 80071c6:	623b      	str	r3, [r7, #32]
   return(result);
 80071c8:	6a3b      	ldr	r3, [r7, #32]
 80071ca:	f023 0301 	bic.w	r3, r3, #1
 80071ce:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	3308      	adds	r3, #8
 80071d8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80071dc:	633a      	str	r2, [r7, #48]	; 0x30
 80071de:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071e0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80071e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071e4:	e841 2300 	strex	r3, r2, [r1]
 80071e8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80071ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d1e3      	bne.n	80071b8 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2220      	movs	r2, #32
 80071f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2200      	movs	r2, #0
 80071fc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2200      	movs	r2, #0
 8007202:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800720a:	693b      	ldr	r3, [r7, #16]
 800720c:	e853 3f00 	ldrex	r3, [r3]
 8007210:	60fb      	str	r3, [r7, #12]
   return(result);
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	f023 0310 	bic.w	r3, r3, #16
 8007218:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	461a      	mov	r2, r3
 8007222:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007226:	61fb      	str	r3, [r7, #28]
 8007228:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800722a:	69b9      	ldr	r1, [r7, #24]
 800722c:	69fa      	ldr	r2, [r7, #28]
 800722e:	e841 2300 	strex	r3, r2, [r1]
 8007232:	617b      	str	r3, [r7, #20]
   return(result);
 8007234:	697b      	ldr	r3, [r7, #20]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d1e4      	bne.n	8007204 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2202      	movs	r2, #2
 800723e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007240:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007244:	4619      	mov	r1, r3
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	f000 f85c 	bl	8007304 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800724c:	e03f      	b.n	80072ce <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800724e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007252:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007256:	2b00      	cmp	r3, #0
 8007258:	d00e      	beq.n	8007278 <HAL_UART_IRQHandler+0x570>
 800725a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800725e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007262:	2b00      	cmp	r3, #0
 8007264:	d008      	beq.n	8007278 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800726e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	f000 fe1c 	bl	8007eae <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007276:	e02d      	b.n	80072d4 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007278:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800727c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007280:	2b00      	cmp	r3, #0
 8007282:	d00e      	beq.n	80072a2 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007284:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007288:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800728c:	2b00      	cmp	r3, #0
 800728e:	d008      	beq.n	80072a2 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007294:	2b00      	cmp	r3, #0
 8007296:	d01c      	beq.n	80072d2 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	4798      	blx	r3
    }
    return;
 80072a0:	e017      	b.n	80072d2 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80072a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d012      	beq.n	80072d4 <HAL_UART_IRQHandler+0x5cc>
 80072ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d00c      	beq.n	80072d4 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f000 fdcd 	bl	8007e5a <UART_EndTransmit_IT>
    return;
 80072c0:	e008      	b.n	80072d4 <HAL_UART_IRQHandler+0x5cc>
      return;
 80072c2:	bf00      	nop
 80072c4:	e006      	b.n	80072d4 <HAL_UART_IRQHandler+0x5cc>
    return;
 80072c6:	bf00      	nop
 80072c8:	e004      	b.n	80072d4 <HAL_UART_IRQHandler+0x5cc>
      return;
 80072ca:	bf00      	nop
 80072cc:	e002      	b.n	80072d4 <HAL_UART_IRQHandler+0x5cc>
      return;
 80072ce:	bf00      	nop
 80072d0:	e000      	b.n	80072d4 <HAL_UART_IRQHandler+0x5cc>
    return;
 80072d2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80072d4:	37e8      	adds	r7, #232	; 0xe8
 80072d6:	46bd      	mov	sp, r7
 80072d8:	bd80      	pop	{r7, pc}
 80072da:	bf00      	nop

080072dc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80072dc:	b480      	push	{r7}
 80072de:	b083      	sub	sp, #12
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80072e4:	bf00      	nop
 80072e6:	370c      	adds	r7, #12
 80072e8:	46bd      	mov	sp, r7
 80072ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ee:	4770      	bx	lr

080072f0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80072f0:	b480      	push	{r7}
 80072f2:	b083      	sub	sp, #12
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80072f8:	bf00      	nop
 80072fa:	370c      	adds	r7, #12
 80072fc:	46bd      	mov	sp, r7
 80072fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007302:	4770      	bx	lr

08007304 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007304:	b480      	push	{r7}
 8007306:	b083      	sub	sp, #12
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
 800730c:	460b      	mov	r3, r1
 800730e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007310:	bf00      	nop
 8007312:	370c      	adds	r7, #12
 8007314:	46bd      	mov	sp, r7
 8007316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731a:	4770      	bx	lr

0800731c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800731c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007320:	b08a      	sub	sp, #40	; 0x28
 8007322:	af00      	add	r7, sp, #0
 8007324:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007326:	2300      	movs	r3, #0
 8007328:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	689a      	ldr	r2, [r3, #8]
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	691b      	ldr	r3, [r3, #16]
 8007334:	431a      	orrs	r2, r3
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	695b      	ldr	r3, [r3, #20]
 800733a:	431a      	orrs	r2, r3
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	69db      	ldr	r3, [r3, #28]
 8007340:	4313      	orrs	r3, r2
 8007342:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	681a      	ldr	r2, [r3, #0]
 800734a:	4ba4      	ldr	r3, [pc, #656]	; (80075dc <UART_SetConfig+0x2c0>)
 800734c:	4013      	ands	r3, r2
 800734e:	68fa      	ldr	r2, [r7, #12]
 8007350:	6812      	ldr	r2, [r2, #0]
 8007352:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007354:	430b      	orrs	r3, r1
 8007356:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	685b      	ldr	r3, [r3, #4]
 800735e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	68da      	ldr	r2, [r3, #12]
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	430a      	orrs	r2, r1
 800736c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	699b      	ldr	r3, [r3, #24]
 8007372:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4a99      	ldr	r2, [pc, #612]	; (80075e0 <UART_SetConfig+0x2c4>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d004      	beq.n	8007388 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	6a1b      	ldr	r3, [r3, #32]
 8007382:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007384:	4313      	orrs	r3, r2
 8007386:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	689b      	ldr	r3, [r3, #8]
 800738e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007398:	430a      	orrs	r2, r1
 800739a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4a90      	ldr	r2, [pc, #576]	; (80075e4 <UART_SetConfig+0x2c8>)
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d126      	bne.n	80073f4 <UART_SetConfig+0xd8>
 80073a6:	4b90      	ldr	r3, [pc, #576]	; (80075e8 <UART_SetConfig+0x2cc>)
 80073a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073ac:	f003 0303 	and.w	r3, r3, #3
 80073b0:	2b03      	cmp	r3, #3
 80073b2:	d81b      	bhi.n	80073ec <UART_SetConfig+0xd0>
 80073b4:	a201      	add	r2, pc, #4	; (adr r2, 80073bc <UART_SetConfig+0xa0>)
 80073b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073ba:	bf00      	nop
 80073bc:	080073cd 	.word	0x080073cd
 80073c0:	080073dd 	.word	0x080073dd
 80073c4:	080073d5 	.word	0x080073d5
 80073c8:	080073e5 	.word	0x080073e5
 80073cc:	2301      	movs	r3, #1
 80073ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80073d2:	e116      	b.n	8007602 <UART_SetConfig+0x2e6>
 80073d4:	2302      	movs	r3, #2
 80073d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80073da:	e112      	b.n	8007602 <UART_SetConfig+0x2e6>
 80073dc:	2304      	movs	r3, #4
 80073de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80073e2:	e10e      	b.n	8007602 <UART_SetConfig+0x2e6>
 80073e4:	2308      	movs	r3, #8
 80073e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80073ea:	e10a      	b.n	8007602 <UART_SetConfig+0x2e6>
 80073ec:	2310      	movs	r3, #16
 80073ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80073f2:	e106      	b.n	8007602 <UART_SetConfig+0x2e6>
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	4a7c      	ldr	r2, [pc, #496]	; (80075ec <UART_SetConfig+0x2d0>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d138      	bne.n	8007470 <UART_SetConfig+0x154>
 80073fe:	4b7a      	ldr	r3, [pc, #488]	; (80075e8 <UART_SetConfig+0x2cc>)
 8007400:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007404:	f003 030c 	and.w	r3, r3, #12
 8007408:	2b0c      	cmp	r3, #12
 800740a:	d82d      	bhi.n	8007468 <UART_SetConfig+0x14c>
 800740c:	a201      	add	r2, pc, #4	; (adr r2, 8007414 <UART_SetConfig+0xf8>)
 800740e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007412:	bf00      	nop
 8007414:	08007449 	.word	0x08007449
 8007418:	08007469 	.word	0x08007469
 800741c:	08007469 	.word	0x08007469
 8007420:	08007469 	.word	0x08007469
 8007424:	08007459 	.word	0x08007459
 8007428:	08007469 	.word	0x08007469
 800742c:	08007469 	.word	0x08007469
 8007430:	08007469 	.word	0x08007469
 8007434:	08007451 	.word	0x08007451
 8007438:	08007469 	.word	0x08007469
 800743c:	08007469 	.word	0x08007469
 8007440:	08007469 	.word	0x08007469
 8007444:	08007461 	.word	0x08007461
 8007448:	2300      	movs	r3, #0
 800744a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800744e:	e0d8      	b.n	8007602 <UART_SetConfig+0x2e6>
 8007450:	2302      	movs	r3, #2
 8007452:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007456:	e0d4      	b.n	8007602 <UART_SetConfig+0x2e6>
 8007458:	2304      	movs	r3, #4
 800745a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800745e:	e0d0      	b.n	8007602 <UART_SetConfig+0x2e6>
 8007460:	2308      	movs	r3, #8
 8007462:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007466:	e0cc      	b.n	8007602 <UART_SetConfig+0x2e6>
 8007468:	2310      	movs	r3, #16
 800746a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800746e:	e0c8      	b.n	8007602 <UART_SetConfig+0x2e6>
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	4a5e      	ldr	r2, [pc, #376]	; (80075f0 <UART_SetConfig+0x2d4>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d125      	bne.n	80074c6 <UART_SetConfig+0x1aa>
 800747a:	4b5b      	ldr	r3, [pc, #364]	; (80075e8 <UART_SetConfig+0x2cc>)
 800747c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007480:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007484:	2b30      	cmp	r3, #48	; 0x30
 8007486:	d016      	beq.n	80074b6 <UART_SetConfig+0x19a>
 8007488:	2b30      	cmp	r3, #48	; 0x30
 800748a:	d818      	bhi.n	80074be <UART_SetConfig+0x1a2>
 800748c:	2b20      	cmp	r3, #32
 800748e:	d00a      	beq.n	80074a6 <UART_SetConfig+0x18a>
 8007490:	2b20      	cmp	r3, #32
 8007492:	d814      	bhi.n	80074be <UART_SetConfig+0x1a2>
 8007494:	2b00      	cmp	r3, #0
 8007496:	d002      	beq.n	800749e <UART_SetConfig+0x182>
 8007498:	2b10      	cmp	r3, #16
 800749a:	d008      	beq.n	80074ae <UART_SetConfig+0x192>
 800749c:	e00f      	b.n	80074be <UART_SetConfig+0x1a2>
 800749e:	2300      	movs	r3, #0
 80074a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80074a4:	e0ad      	b.n	8007602 <UART_SetConfig+0x2e6>
 80074a6:	2302      	movs	r3, #2
 80074a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80074ac:	e0a9      	b.n	8007602 <UART_SetConfig+0x2e6>
 80074ae:	2304      	movs	r3, #4
 80074b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80074b4:	e0a5      	b.n	8007602 <UART_SetConfig+0x2e6>
 80074b6:	2308      	movs	r3, #8
 80074b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80074bc:	e0a1      	b.n	8007602 <UART_SetConfig+0x2e6>
 80074be:	2310      	movs	r3, #16
 80074c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80074c4:	e09d      	b.n	8007602 <UART_SetConfig+0x2e6>
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	4a4a      	ldr	r2, [pc, #296]	; (80075f4 <UART_SetConfig+0x2d8>)
 80074cc:	4293      	cmp	r3, r2
 80074ce:	d125      	bne.n	800751c <UART_SetConfig+0x200>
 80074d0:	4b45      	ldr	r3, [pc, #276]	; (80075e8 <UART_SetConfig+0x2cc>)
 80074d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074d6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80074da:	2bc0      	cmp	r3, #192	; 0xc0
 80074dc:	d016      	beq.n	800750c <UART_SetConfig+0x1f0>
 80074de:	2bc0      	cmp	r3, #192	; 0xc0
 80074e0:	d818      	bhi.n	8007514 <UART_SetConfig+0x1f8>
 80074e2:	2b80      	cmp	r3, #128	; 0x80
 80074e4:	d00a      	beq.n	80074fc <UART_SetConfig+0x1e0>
 80074e6:	2b80      	cmp	r3, #128	; 0x80
 80074e8:	d814      	bhi.n	8007514 <UART_SetConfig+0x1f8>
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d002      	beq.n	80074f4 <UART_SetConfig+0x1d8>
 80074ee:	2b40      	cmp	r3, #64	; 0x40
 80074f0:	d008      	beq.n	8007504 <UART_SetConfig+0x1e8>
 80074f2:	e00f      	b.n	8007514 <UART_SetConfig+0x1f8>
 80074f4:	2300      	movs	r3, #0
 80074f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80074fa:	e082      	b.n	8007602 <UART_SetConfig+0x2e6>
 80074fc:	2302      	movs	r3, #2
 80074fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007502:	e07e      	b.n	8007602 <UART_SetConfig+0x2e6>
 8007504:	2304      	movs	r3, #4
 8007506:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800750a:	e07a      	b.n	8007602 <UART_SetConfig+0x2e6>
 800750c:	2308      	movs	r3, #8
 800750e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007512:	e076      	b.n	8007602 <UART_SetConfig+0x2e6>
 8007514:	2310      	movs	r3, #16
 8007516:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800751a:	e072      	b.n	8007602 <UART_SetConfig+0x2e6>
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	4a35      	ldr	r2, [pc, #212]	; (80075f8 <UART_SetConfig+0x2dc>)
 8007522:	4293      	cmp	r3, r2
 8007524:	d12a      	bne.n	800757c <UART_SetConfig+0x260>
 8007526:	4b30      	ldr	r3, [pc, #192]	; (80075e8 <UART_SetConfig+0x2cc>)
 8007528:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800752c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007530:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007534:	d01a      	beq.n	800756c <UART_SetConfig+0x250>
 8007536:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800753a:	d81b      	bhi.n	8007574 <UART_SetConfig+0x258>
 800753c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007540:	d00c      	beq.n	800755c <UART_SetConfig+0x240>
 8007542:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007546:	d815      	bhi.n	8007574 <UART_SetConfig+0x258>
 8007548:	2b00      	cmp	r3, #0
 800754a:	d003      	beq.n	8007554 <UART_SetConfig+0x238>
 800754c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007550:	d008      	beq.n	8007564 <UART_SetConfig+0x248>
 8007552:	e00f      	b.n	8007574 <UART_SetConfig+0x258>
 8007554:	2300      	movs	r3, #0
 8007556:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800755a:	e052      	b.n	8007602 <UART_SetConfig+0x2e6>
 800755c:	2302      	movs	r3, #2
 800755e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007562:	e04e      	b.n	8007602 <UART_SetConfig+0x2e6>
 8007564:	2304      	movs	r3, #4
 8007566:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800756a:	e04a      	b.n	8007602 <UART_SetConfig+0x2e6>
 800756c:	2308      	movs	r3, #8
 800756e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007572:	e046      	b.n	8007602 <UART_SetConfig+0x2e6>
 8007574:	2310      	movs	r3, #16
 8007576:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800757a:	e042      	b.n	8007602 <UART_SetConfig+0x2e6>
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	4a17      	ldr	r2, [pc, #92]	; (80075e0 <UART_SetConfig+0x2c4>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d13a      	bne.n	80075fc <UART_SetConfig+0x2e0>
 8007586:	4b18      	ldr	r3, [pc, #96]	; (80075e8 <UART_SetConfig+0x2cc>)
 8007588:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800758c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007590:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007594:	d01a      	beq.n	80075cc <UART_SetConfig+0x2b0>
 8007596:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800759a:	d81b      	bhi.n	80075d4 <UART_SetConfig+0x2b8>
 800759c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80075a0:	d00c      	beq.n	80075bc <UART_SetConfig+0x2a0>
 80075a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80075a6:	d815      	bhi.n	80075d4 <UART_SetConfig+0x2b8>
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d003      	beq.n	80075b4 <UART_SetConfig+0x298>
 80075ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075b0:	d008      	beq.n	80075c4 <UART_SetConfig+0x2a8>
 80075b2:	e00f      	b.n	80075d4 <UART_SetConfig+0x2b8>
 80075b4:	2300      	movs	r3, #0
 80075b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80075ba:	e022      	b.n	8007602 <UART_SetConfig+0x2e6>
 80075bc:	2302      	movs	r3, #2
 80075be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80075c2:	e01e      	b.n	8007602 <UART_SetConfig+0x2e6>
 80075c4:	2304      	movs	r3, #4
 80075c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80075ca:	e01a      	b.n	8007602 <UART_SetConfig+0x2e6>
 80075cc:	2308      	movs	r3, #8
 80075ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80075d2:	e016      	b.n	8007602 <UART_SetConfig+0x2e6>
 80075d4:	2310      	movs	r3, #16
 80075d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80075da:	e012      	b.n	8007602 <UART_SetConfig+0x2e6>
 80075dc:	efff69f3 	.word	0xefff69f3
 80075e0:	40008000 	.word	0x40008000
 80075e4:	40013800 	.word	0x40013800
 80075e8:	40021000 	.word	0x40021000
 80075ec:	40004400 	.word	0x40004400
 80075f0:	40004800 	.word	0x40004800
 80075f4:	40004c00 	.word	0x40004c00
 80075f8:	40005000 	.word	0x40005000
 80075fc:	2310      	movs	r3, #16
 80075fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	4a9f      	ldr	r2, [pc, #636]	; (8007884 <UART_SetConfig+0x568>)
 8007608:	4293      	cmp	r3, r2
 800760a:	d17a      	bne.n	8007702 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800760c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007610:	2b08      	cmp	r3, #8
 8007612:	d824      	bhi.n	800765e <UART_SetConfig+0x342>
 8007614:	a201      	add	r2, pc, #4	; (adr r2, 800761c <UART_SetConfig+0x300>)
 8007616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800761a:	bf00      	nop
 800761c:	08007641 	.word	0x08007641
 8007620:	0800765f 	.word	0x0800765f
 8007624:	08007649 	.word	0x08007649
 8007628:	0800765f 	.word	0x0800765f
 800762c:	0800764f 	.word	0x0800764f
 8007630:	0800765f 	.word	0x0800765f
 8007634:	0800765f 	.word	0x0800765f
 8007638:	0800765f 	.word	0x0800765f
 800763c:	08007657 	.word	0x08007657
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007640:	f7fd feec 	bl	800541c <HAL_RCC_GetPCLK1Freq>
 8007644:	61f8      	str	r0, [r7, #28]
        break;
 8007646:	e010      	b.n	800766a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007648:	4b8f      	ldr	r3, [pc, #572]	; (8007888 <UART_SetConfig+0x56c>)
 800764a:	61fb      	str	r3, [r7, #28]
        break;
 800764c:	e00d      	b.n	800766a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800764e:	f7fd fe4d 	bl	80052ec <HAL_RCC_GetSysClockFreq>
 8007652:	61f8      	str	r0, [r7, #28]
        break;
 8007654:	e009      	b.n	800766a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007656:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800765a:	61fb      	str	r3, [r7, #28]
        break;
 800765c:	e005      	b.n	800766a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800765e:	2300      	movs	r3, #0
 8007660:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007662:	2301      	movs	r3, #1
 8007664:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007668:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800766a:	69fb      	ldr	r3, [r7, #28]
 800766c:	2b00      	cmp	r3, #0
 800766e:	f000 80fb 	beq.w	8007868 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	685a      	ldr	r2, [r3, #4]
 8007676:	4613      	mov	r3, r2
 8007678:	005b      	lsls	r3, r3, #1
 800767a:	4413      	add	r3, r2
 800767c:	69fa      	ldr	r2, [r7, #28]
 800767e:	429a      	cmp	r2, r3
 8007680:	d305      	bcc.n	800768e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	685b      	ldr	r3, [r3, #4]
 8007686:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007688:	69fa      	ldr	r2, [r7, #28]
 800768a:	429a      	cmp	r2, r3
 800768c:	d903      	bls.n	8007696 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800768e:	2301      	movs	r3, #1
 8007690:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007694:	e0e8      	b.n	8007868 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007696:	69fb      	ldr	r3, [r7, #28]
 8007698:	2200      	movs	r2, #0
 800769a:	461c      	mov	r4, r3
 800769c:	4615      	mov	r5, r2
 800769e:	f04f 0200 	mov.w	r2, #0
 80076a2:	f04f 0300 	mov.w	r3, #0
 80076a6:	022b      	lsls	r3, r5, #8
 80076a8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80076ac:	0222      	lsls	r2, r4, #8
 80076ae:	68f9      	ldr	r1, [r7, #12]
 80076b0:	6849      	ldr	r1, [r1, #4]
 80076b2:	0849      	lsrs	r1, r1, #1
 80076b4:	2000      	movs	r0, #0
 80076b6:	4688      	mov	r8, r1
 80076b8:	4681      	mov	r9, r0
 80076ba:	eb12 0a08 	adds.w	sl, r2, r8
 80076be:	eb43 0b09 	adc.w	fp, r3, r9
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	685b      	ldr	r3, [r3, #4]
 80076c6:	2200      	movs	r2, #0
 80076c8:	603b      	str	r3, [r7, #0]
 80076ca:	607a      	str	r2, [r7, #4]
 80076cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80076d0:	4650      	mov	r0, sl
 80076d2:	4659      	mov	r1, fp
 80076d4:	f7f9 fab8 	bl	8000c48 <__aeabi_uldivmod>
 80076d8:	4602      	mov	r2, r0
 80076da:	460b      	mov	r3, r1
 80076dc:	4613      	mov	r3, r2
 80076de:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80076e0:	69bb      	ldr	r3, [r7, #24]
 80076e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80076e6:	d308      	bcc.n	80076fa <UART_SetConfig+0x3de>
 80076e8:	69bb      	ldr	r3, [r7, #24]
 80076ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80076ee:	d204      	bcs.n	80076fa <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	69ba      	ldr	r2, [r7, #24]
 80076f6:	60da      	str	r2, [r3, #12]
 80076f8:	e0b6      	b.n	8007868 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80076fa:	2301      	movs	r3, #1
 80076fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007700:	e0b2      	b.n	8007868 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	69db      	ldr	r3, [r3, #28]
 8007706:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800770a:	d15e      	bne.n	80077ca <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800770c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007710:	2b08      	cmp	r3, #8
 8007712:	d828      	bhi.n	8007766 <UART_SetConfig+0x44a>
 8007714:	a201      	add	r2, pc, #4	; (adr r2, 800771c <UART_SetConfig+0x400>)
 8007716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800771a:	bf00      	nop
 800771c:	08007741 	.word	0x08007741
 8007720:	08007749 	.word	0x08007749
 8007724:	08007751 	.word	0x08007751
 8007728:	08007767 	.word	0x08007767
 800772c:	08007757 	.word	0x08007757
 8007730:	08007767 	.word	0x08007767
 8007734:	08007767 	.word	0x08007767
 8007738:	08007767 	.word	0x08007767
 800773c:	0800775f 	.word	0x0800775f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007740:	f7fd fe6c 	bl	800541c <HAL_RCC_GetPCLK1Freq>
 8007744:	61f8      	str	r0, [r7, #28]
        break;
 8007746:	e014      	b.n	8007772 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007748:	f7fd fe7e 	bl	8005448 <HAL_RCC_GetPCLK2Freq>
 800774c:	61f8      	str	r0, [r7, #28]
        break;
 800774e:	e010      	b.n	8007772 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007750:	4b4d      	ldr	r3, [pc, #308]	; (8007888 <UART_SetConfig+0x56c>)
 8007752:	61fb      	str	r3, [r7, #28]
        break;
 8007754:	e00d      	b.n	8007772 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007756:	f7fd fdc9 	bl	80052ec <HAL_RCC_GetSysClockFreq>
 800775a:	61f8      	str	r0, [r7, #28]
        break;
 800775c:	e009      	b.n	8007772 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800775e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007762:	61fb      	str	r3, [r7, #28]
        break;
 8007764:	e005      	b.n	8007772 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8007766:	2300      	movs	r3, #0
 8007768:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800776a:	2301      	movs	r3, #1
 800776c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007770:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007772:	69fb      	ldr	r3, [r7, #28]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d077      	beq.n	8007868 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007778:	69fb      	ldr	r3, [r7, #28]
 800777a:	005a      	lsls	r2, r3, #1
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	685b      	ldr	r3, [r3, #4]
 8007780:	085b      	lsrs	r3, r3, #1
 8007782:	441a      	add	r2, r3
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	685b      	ldr	r3, [r3, #4]
 8007788:	fbb2 f3f3 	udiv	r3, r2, r3
 800778c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800778e:	69bb      	ldr	r3, [r7, #24]
 8007790:	2b0f      	cmp	r3, #15
 8007792:	d916      	bls.n	80077c2 <UART_SetConfig+0x4a6>
 8007794:	69bb      	ldr	r3, [r7, #24]
 8007796:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800779a:	d212      	bcs.n	80077c2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800779c:	69bb      	ldr	r3, [r7, #24]
 800779e:	b29b      	uxth	r3, r3
 80077a0:	f023 030f 	bic.w	r3, r3, #15
 80077a4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80077a6:	69bb      	ldr	r3, [r7, #24]
 80077a8:	085b      	lsrs	r3, r3, #1
 80077aa:	b29b      	uxth	r3, r3
 80077ac:	f003 0307 	and.w	r3, r3, #7
 80077b0:	b29a      	uxth	r2, r3
 80077b2:	8afb      	ldrh	r3, [r7, #22]
 80077b4:	4313      	orrs	r3, r2
 80077b6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	8afa      	ldrh	r2, [r7, #22]
 80077be:	60da      	str	r2, [r3, #12]
 80077c0:	e052      	b.n	8007868 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80077c2:	2301      	movs	r3, #1
 80077c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80077c8:	e04e      	b.n	8007868 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80077ca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80077ce:	2b08      	cmp	r3, #8
 80077d0:	d827      	bhi.n	8007822 <UART_SetConfig+0x506>
 80077d2:	a201      	add	r2, pc, #4	; (adr r2, 80077d8 <UART_SetConfig+0x4bc>)
 80077d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077d8:	080077fd 	.word	0x080077fd
 80077dc:	08007805 	.word	0x08007805
 80077e0:	0800780d 	.word	0x0800780d
 80077e4:	08007823 	.word	0x08007823
 80077e8:	08007813 	.word	0x08007813
 80077ec:	08007823 	.word	0x08007823
 80077f0:	08007823 	.word	0x08007823
 80077f4:	08007823 	.word	0x08007823
 80077f8:	0800781b 	.word	0x0800781b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80077fc:	f7fd fe0e 	bl	800541c <HAL_RCC_GetPCLK1Freq>
 8007800:	61f8      	str	r0, [r7, #28]
        break;
 8007802:	e014      	b.n	800782e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007804:	f7fd fe20 	bl	8005448 <HAL_RCC_GetPCLK2Freq>
 8007808:	61f8      	str	r0, [r7, #28]
        break;
 800780a:	e010      	b.n	800782e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800780c:	4b1e      	ldr	r3, [pc, #120]	; (8007888 <UART_SetConfig+0x56c>)
 800780e:	61fb      	str	r3, [r7, #28]
        break;
 8007810:	e00d      	b.n	800782e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007812:	f7fd fd6b 	bl	80052ec <HAL_RCC_GetSysClockFreq>
 8007816:	61f8      	str	r0, [r7, #28]
        break;
 8007818:	e009      	b.n	800782e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800781a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800781e:	61fb      	str	r3, [r7, #28]
        break;
 8007820:	e005      	b.n	800782e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8007822:	2300      	movs	r3, #0
 8007824:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007826:	2301      	movs	r3, #1
 8007828:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800782c:	bf00      	nop
    }

    if (pclk != 0U)
 800782e:	69fb      	ldr	r3, [r7, #28]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d019      	beq.n	8007868 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	685b      	ldr	r3, [r3, #4]
 8007838:	085a      	lsrs	r2, r3, #1
 800783a:	69fb      	ldr	r3, [r7, #28]
 800783c:	441a      	add	r2, r3
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	685b      	ldr	r3, [r3, #4]
 8007842:	fbb2 f3f3 	udiv	r3, r2, r3
 8007846:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007848:	69bb      	ldr	r3, [r7, #24]
 800784a:	2b0f      	cmp	r3, #15
 800784c:	d909      	bls.n	8007862 <UART_SetConfig+0x546>
 800784e:	69bb      	ldr	r3, [r7, #24]
 8007850:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007854:	d205      	bcs.n	8007862 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007856:	69bb      	ldr	r3, [r7, #24]
 8007858:	b29a      	uxth	r2, r3
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	60da      	str	r2, [r3, #12]
 8007860:	e002      	b.n	8007868 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007862:	2301      	movs	r3, #1
 8007864:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	2200      	movs	r2, #0
 800786c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	2200      	movs	r2, #0
 8007872:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007874:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8007878:	4618      	mov	r0, r3
 800787a:	3728      	adds	r7, #40	; 0x28
 800787c:	46bd      	mov	sp, r7
 800787e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007882:	bf00      	nop
 8007884:	40008000 	.word	0x40008000
 8007888:	00f42400 	.word	0x00f42400

0800788c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800788c:	b480      	push	{r7}
 800788e:	b083      	sub	sp, #12
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007898:	f003 0308 	and.w	r3, r3, #8
 800789c:	2b00      	cmp	r3, #0
 800789e:	d00a      	beq.n	80078b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	685b      	ldr	r3, [r3, #4]
 80078a6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	430a      	orrs	r2, r1
 80078b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ba:	f003 0301 	and.w	r3, r3, #1
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d00a      	beq.n	80078d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	685b      	ldr	r3, [r3, #4]
 80078c8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	430a      	orrs	r2, r1
 80078d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078dc:	f003 0302 	and.w	r3, r3, #2
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d00a      	beq.n	80078fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	685b      	ldr	r3, [r3, #4]
 80078ea:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	430a      	orrs	r2, r1
 80078f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078fe:	f003 0304 	and.w	r3, r3, #4
 8007902:	2b00      	cmp	r3, #0
 8007904:	d00a      	beq.n	800791c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	685b      	ldr	r3, [r3, #4]
 800790c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	430a      	orrs	r2, r1
 800791a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007920:	f003 0310 	and.w	r3, r3, #16
 8007924:	2b00      	cmp	r3, #0
 8007926:	d00a      	beq.n	800793e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	689b      	ldr	r3, [r3, #8]
 800792e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	430a      	orrs	r2, r1
 800793c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007942:	f003 0320 	and.w	r3, r3, #32
 8007946:	2b00      	cmp	r3, #0
 8007948:	d00a      	beq.n	8007960 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	689b      	ldr	r3, [r3, #8]
 8007950:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	430a      	orrs	r2, r1
 800795e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007964:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007968:	2b00      	cmp	r3, #0
 800796a:	d01a      	beq.n	80079a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	685b      	ldr	r3, [r3, #4]
 8007972:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	430a      	orrs	r2, r1
 8007980:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007986:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800798a:	d10a      	bne.n	80079a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	685b      	ldr	r3, [r3, #4]
 8007992:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	430a      	orrs	r2, r1
 80079a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d00a      	beq.n	80079c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	685b      	ldr	r3, [r3, #4]
 80079b4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	430a      	orrs	r2, r1
 80079c2:	605a      	str	r2, [r3, #4]
  }
}
 80079c4:	bf00      	nop
 80079c6:	370c      	adds	r7, #12
 80079c8:	46bd      	mov	sp, r7
 80079ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ce:	4770      	bx	lr

080079d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b098      	sub	sp, #96	; 0x60
 80079d4:	af02      	add	r7, sp, #8
 80079d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2200      	movs	r2, #0
 80079dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80079e0:	f7fa f9f4 	bl	8001dcc <HAL_GetTick>
 80079e4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f003 0308 	and.w	r3, r3, #8
 80079f0:	2b08      	cmp	r3, #8
 80079f2:	d12e      	bne.n	8007a52 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80079f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80079f8:	9300      	str	r3, [sp, #0]
 80079fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80079fc:	2200      	movs	r2, #0
 80079fe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f000 f88c 	bl	8007b20 <UART_WaitOnFlagUntilTimeout>
 8007a08:	4603      	mov	r3, r0
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d021      	beq.n	8007a52 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a16:	e853 3f00 	ldrex	r3, [r3]
 8007a1a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007a1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a22:	653b      	str	r3, [r7, #80]	; 0x50
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	461a      	mov	r2, r3
 8007a2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a2c:	647b      	str	r3, [r7, #68]	; 0x44
 8007a2e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a30:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007a32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007a34:	e841 2300 	strex	r3, r2, [r1]
 8007a38:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007a3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d1e6      	bne.n	8007a0e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2220      	movs	r2, #32
 8007a44:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2200      	movs	r2, #0
 8007a4a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007a4e:	2303      	movs	r3, #3
 8007a50:	e062      	b.n	8007b18 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f003 0304 	and.w	r3, r3, #4
 8007a5c:	2b04      	cmp	r3, #4
 8007a5e:	d149      	bne.n	8007af4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a60:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007a64:	9300      	str	r3, [sp, #0]
 8007a66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a68:	2200      	movs	r2, #0
 8007a6a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007a6e:	6878      	ldr	r0, [r7, #4]
 8007a70:	f000 f856 	bl	8007b20 <UART_WaitOnFlagUntilTimeout>
 8007a74:	4603      	mov	r3, r0
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d03c      	beq.n	8007af4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a82:	e853 3f00 	ldrex	r3, [r3]
 8007a86:	623b      	str	r3, [r7, #32]
   return(result);
 8007a88:	6a3b      	ldr	r3, [r7, #32]
 8007a8a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007a8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	461a      	mov	r2, r3
 8007a96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a98:	633b      	str	r3, [r7, #48]	; 0x30
 8007a9a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a9c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007a9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007aa0:	e841 2300 	strex	r3, r2, [r1]
 8007aa4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d1e6      	bne.n	8007a7a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	3308      	adds	r3, #8
 8007ab2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ab4:	693b      	ldr	r3, [r7, #16]
 8007ab6:	e853 3f00 	ldrex	r3, [r3]
 8007aba:	60fb      	str	r3, [r7, #12]
   return(result);
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	f023 0301 	bic.w	r3, r3, #1
 8007ac2:	64bb      	str	r3, [r7, #72]	; 0x48
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	3308      	adds	r3, #8
 8007aca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007acc:	61fa      	str	r2, [r7, #28]
 8007ace:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ad0:	69b9      	ldr	r1, [r7, #24]
 8007ad2:	69fa      	ldr	r2, [r7, #28]
 8007ad4:	e841 2300 	strex	r3, r2, [r1]
 8007ad8:	617b      	str	r3, [r7, #20]
   return(result);
 8007ada:	697b      	ldr	r3, [r7, #20]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d1e5      	bne.n	8007aac <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2220      	movs	r2, #32
 8007ae4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2200      	movs	r2, #0
 8007aec:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007af0:	2303      	movs	r3, #3
 8007af2:	e011      	b.n	8007b18 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2220      	movs	r2, #32
 8007af8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2220      	movs	r2, #32
 8007afe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2200      	movs	r2, #0
 8007b06:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2200      	movs	r2, #0
 8007b12:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007b16:	2300      	movs	r3, #0
}
 8007b18:	4618      	mov	r0, r3
 8007b1a:	3758      	adds	r7, #88	; 0x58
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	bd80      	pop	{r7, pc}

08007b20 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b084      	sub	sp, #16
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	60f8      	str	r0, [r7, #12]
 8007b28:	60b9      	str	r1, [r7, #8]
 8007b2a:	603b      	str	r3, [r7, #0]
 8007b2c:	4613      	mov	r3, r2
 8007b2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b30:	e049      	b.n	8007bc6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b32:	69bb      	ldr	r3, [r7, #24]
 8007b34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b38:	d045      	beq.n	8007bc6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b3a:	f7fa f947 	bl	8001dcc <HAL_GetTick>
 8007b3e:	4602      	mov	r2, r0
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	1ad3      	subs	r3, r2, r3
 8007b44:	69ba      	ldr	r2, [r7, #24]
 8007b46:	429a      	cmp	r2, r3
 8007b48:	d302      	bcc.n	8007b50 <UART_WaitOnFlagUntilTimeout+0x30>
 8007b4a:	69bb      	ldr	r3, [r7, #24]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d101      	bne.n	8007b54 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007b50:	2303      	movs	r3, #3
 8007b52:	e048      	b.n	8007be6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f003 0304 	and.w	r3, r3, #4
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d031      	beq.n	8007bc6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	69db      	ldr	r3, [r3, #28]
 8007b68:	f003 0308 	and.w	r3, r3, #8
 8007b6c:	2b08      	cmp	r3, #8
 8007b6e:	d110      	bne.n	8007b92 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	2208      	movs	r2, #8
 8007b76:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007b78:	68f8      	ldr	r0, [r7, #12]
 8007b7a:	f000 f838 	bl	8007bee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	2208      	movs	r2, #8
 8007b82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	2200      	movs	r2, #0
 8007b8a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8007b8e:	2301      	movs	r3, #1
 8007b90:	e029      	b.n	8007be6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	69db      	ldr	r3, [r3, #28]
 8007b98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ba0:	d111      	bne.n	8007bc6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007baa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007bac:	68f8      	ldr	r0, [r7, #12]
 8007bae:	f000 f81e 	bl	8007bee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	2220      	movs	r2, #32
 8007bb6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007bc2:	2303      	movs	r3, #3
 8007bc4:	e00f      	b.n	8007be6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	69da      	ldr	r2, [r3, #28]
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	4013      	ands	r3, r2
 8007bd0:	68ba      	ldr	r2, [r7, #8]
 8007bd2:	429a      	cmp	r2, r3
 8007bd4:	bf0c      	ite	eq
 8007bd6:	2301      	moveq	r3, #1
 8007bd8:	2300      	movne	r3, #0
 8007bda:	b2db      	uxtb	r3, r3
 8007bdc:	461a      	mov	r2, r3
 8007bde:	79fb      	ldrb	r3, [r7, #7]
 8007be0:	429a      	cmp	r2, r3
 8007be2:	d0a6      	beq.n	8007b32 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007be4:	2300      	movs	r3, #0
}
 8007be6:	4618      	mov	r0, r3
 8007be8:	3710      	adds	r7, #16
 8007bea:	46bd      	mov	sp, r7
 8007bec:	bd80      	pop	{r7, pc}

08007bee <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007bee:	b480      	push	{r7}
 8007bf0:	b095      	sub	sp, #84	; 0x54
 8007bf2:	af00      	add	r7, sp, #0
 8007bf4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bfe:	e853 3f00 	ldrex	r3, [r3]
 8007c02:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c06:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007c0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	461a      	mov	r2, r3
 8007c12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c14:	643b      	str	r3, [r7, #64]	; 0x40
 8007c16:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c18:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007c1a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007c1c:	e841 2300 	strex	r3, r2, [r1]
 8007c20:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d1e6      	bne.n	8007bf6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	3308      	adds	r3, #8
 8007c2e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c30:	6a3b      	ldr	r3, [r7, #32]
 8007c32:	e853 3f00 	ldrex	r3, [r3]
 8007c36:	61fb      	str	r3, [r7, #28]
   return(result);
 8007c38:	69fb      	ldr	r3, [r7, #28]
 8007c3a:	f023 0301 	bic.w	r3, r3, #1
 8007c3e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	3308      	adds	r3, #8
 8007c46:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007c48:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007c4a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007c4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c50:	e841 2300 	strex	r3, r2, [r1]
 8007c54:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d1e5      	bne.n	8007c28 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c60:	2b01      	cmp	r3, #1
 8007c62:	d118      	bne.n	8007c96 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	e853 3f00 	ldrex	r3, [r3]
 8007c70:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c72:	68bb      	ldr	r3, [r7, #8]
 8007c74:	f023 0310 	bic.w	r3, r3, #16
 8007c78:	647b      	str	r3, [r7, #68]	; 0x44
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	461a      	mov	r2, r3
 8007c80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c82:	61bb      	str	r3, [r7, #24]
 8007c84:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c86:	6979      	ldr	r1, [r7, #20]
 8007c88:	69ba      	ldr	r2, [r7, #24]
 8007c8a:	e841 2300 	strex	r3, r2, [r1]
 8007c8e:	613b      	str	r3, [r7, #16]
   return(result);
 8007c90:	693b      	ldr	r3, [r7, #16]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d1e6      	bne.n	8007c64 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2220      	movs	r2, #32
 8007c9a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007caa:	bf00      	nop
 8007cac:	3754      	adds	r7, #84	; 0x54
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb4:	4770      	bx	lr

08007cb6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007cb6:	b580      	push	{r7, lr}
 8007cb8:	b084      	sub	sp, #16
 8007cba:	af00      	add	r7, sp, #0
 8007cbc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cc2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	2200      	movs	r2, #0
 8007cd0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007cd4:	68f8      	ldr	r0, [r7, #12]
 8007cd6:	f7ff fb0b 	bl	80072f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007cda:	bf00      	nop
 8007cdc:	3710      	adds	r7, #16
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	bd80      	pop	{r7, pc}

08007ce2 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007ce2:	b480      	push	{r7}
 8007ce4:	b08f      	sub	sp, #60	; 0x3c
 8007ce6:	af00      	add	r7, sp, #0
 8007ce8:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007cee:	2b21      	cmp	r3, #33	; 0x21
 8007cf0:	d14d      	bne.n	8007d8e <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007cf8:	b29b      	uxth	r3, r3
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d132      	bne.n	8007d64 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d04:	6a3b      	ldr	r3, [r7, #32]
 8007d06:	e853 3f00 	ldrex	r3, [r3]
 8007d0a:	61fb      	str	r3, [r7, #28]
   return(result);
 8007d0c:	69fb      	ldr	r3, [r7, #28]
 8007d0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d12:	637b      	str	r3, [r7, #52]	; 0x34
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	461a      	mov	r2, r3
 8007d1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007d1e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d20:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007d22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d24:	e841 2300 	strex	r3, r2, [r1]
 8007d28:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d1e6      	bne.n	8007cfe <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	e853 3f00 	ldrex	r3, [r3]
 8007d3c:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d3e:	68bb      	ldr	r3, [r7, #8]
 8007d40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d44:	633b      	str	r3, [r7, #48]	; 0x30
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	461a      	mov	r2, r3
 8007d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d4e:	61bb      	str	r3, [r7, #24]
 8007d50:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d52:	6979      	ldr	r1, [r7, #20]
 8007d54:	69ba      	ldr	r2, [r7, #24]
 8007d56:	e841 2300 	strex	r3, r2, [r1]
 8007d5a:	613b      	str	r3, [r7, #16]
   return(result);
 8007d5c:	693b      	ldr	r3, [r7, #16]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d1e6      	bne.n	8007d30 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8007d62:	e014      	b.n	8007d8e <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d68:	781a      	ldrb	r2, [r3, #0]
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	b292      	uxth	r2, r2
 8007d70:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d76:	1c5a      	adds	r2, r3, #1
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007d82:	b29b      	uxth	r3, r3
 8007d84:	3b01      	subs	r3, #1
 8007d86:	b29a      	uxth	r2, r3
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8007d8e:	bf00      	nop
 8007d90:	373c      	adds	r7, #60	; 0x3c
 8007d92:	46bd      	mov	sp, r7
 8007d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d98:	4770      	bx	lr

08007d9a <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007d9a:	b480      	push	{r7}
 8007d9c:	b091      	sub	sp, #68	; 0x44
 8007d9e:	af00      	add	r7, sp, #0
 8007da0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007da6:	2b21      	cmp	r3, #33	; 0x21
 8007da8:	d151      	bne.n	8007e4e <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007db0:	b29b      	uxth	r3, r3
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d132      	bne.n	8007e1c <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dbe:	e853 3f00 	ldrex	r3, [r3]
 8007dc2:	623b      	str	r3, [r7, #32]
   return(result);
 8007dc4:	6a3b      	ldr	r3, [r7, #32]
 8007dc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007dca:	63bb      	str	r3, [r7, #56]	; 0x38
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	461a      	mov	r2, r3
 8007dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dd4:	633b      	str	r3, [r7, #48]	; 0x30
 8007dd6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dd8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007dda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ddc:	e841 2300 	strex	r3, r2, [r1]
 8007de0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d1e6      	bne.n	8007db6 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dee:	693b      	ldr	r3, [r7, #16]
 8007df0:	e853 3f00 	ldrex	r3, [r3]
 8007df4:	60fb      	str	r3, [r7, #12]
   return(result);
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007dfc:	637b      	str	r3, [r7, #52]	; 0x34
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	461a      	mov	r2, r3
 8007e04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e06:	61fb      	str	r3, [r7, #28]
 8007e08:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e0a:	69b9      	ldr	r1, [r7, #24]
 8007e0c:	69fa      	ldr	r2, [r7, #28]
 8007e0e:	e841 2300 	strex	r3, r2, [r1]
 8007e12:	617b      	str	r3, [r7, #20]
   return(result);
 8007e14:	697b      	ldr	r3, [r7, #20]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d1e6      	bne.n	8007de8 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8007e1a:	e018      	b.n	8007e4e <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e20:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8007e22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e24:	881a      	ldrh	r2, [r3, #0]
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007e2e:	b292      	uxth	r2, r2
 8007e30:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e36:	1c9a      	adds	r2, r3, #2
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007e42:	b29b      	uxth	r3, r3
 8007e44:	3b01      	subs	r3, #1
 8007e46:	b29a      	uxth	r2, r3
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8007e4e:	bf00      	nop
 8007e50:	3744      	adds	r7, #68	; 0x44
 8007e52:	46bd      	mov	sp, r7
 8007e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e58:	4770      	bx	lr

08007e5a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007e5a:	b580      	push	{r7, lr}
 8007e5c:	b088      	sub	sp, #32
 8007e5e:	af00      	add	r7, sp, #0
 8007e60:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	e853 3f00 	ldrex	r3, [r3]
 8007e6e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e70:	68bb      	ldr	r3, [r7, #8]
 8007e72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e76:	61fb      	str	r3, [r7, #28]
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	461a      	mov	r2, r3
 8007e7e:	69fb      	ldr	r3, [r7, #28]
 8007e80:	61bb      	str	r3, [r7, #24]
 8007e82:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e84:	6979      	ldr	r1, [r7, #20]
 8007e86:	69ba      	ldr	r2, [r7, #24]
 8007e88:	e841 2300 	strex	r3, r2, [r1]
 8007e8c:	613b      	str	r3, [r7, #16]
   return(result);
 8007e8e:	693b      	ldr	r3, [r7, #16]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d1e6      	bne.n	8007e62 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2220      	movs	r2, #32
 8007e98:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007ea0:	6878      	ldr	r0, [r7, #4]
 8007ea2:	f7ff fa1b 	bl	80072dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007ea6:	bf00      	nop
 8007ea8:	3720      	adds	r7, #32
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	bd80      	pop	{r7, pc}

08007eae <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007eae:	b480      	push	{r7}
 8007eb0:	b083      	sub	sp, #12
 8007eb2:	af00      	add	r7, sp, #0
 8007eb4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007eb6:	bf00      	nop
 8007eb8:	370c      	adds	r7, #12
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec0:	4770      	bx	lr

08007ec2 <__cvt>:
 8007ec2:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007ec6:	ec55 4b10 	vmov	r4, r5, d0
 8007eca:	2d00      	cmp	r5, #0
 8007ecc:	460e      	mov	r6, r1
 8007ece:	4619      	mov	r1, r3
 8007ed0:	462b      	mov	r3, r5
 8007ed2:	bfbb      	ittet	lt
 8007ed4:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007ed8:	461d      	movlt	r5, r3
 8007eda:	2300      	movge	r3, #0
 8007edc:	232d      	movlt	r3, #45	; 0x2d
 8007ede:	700b      	strb	r3, [r1, #0]
 8007ee0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007ee2:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007ee6:	4691      	mov	r9, r2
 8007ee8:	f023 0820 	bic.w	r8, r3, #32
 8007eec:	bfbc      	itt	lt
 8007eee:	4622      	movlt	r2, r4
 8007ef0:	4614      	movlt	r4, r2
 8007ef2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007ef6:	d005      	beq.n	8007f04 <__cvt+0x42>
 8007ef8:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007efc:	d100      	bne.n	8007f00 <__cvt+0x3e>
 8007efe:	3601      	adds	r6, #1
 8007f00:	2102      	movs	r1, #2
 8007f02:	e000      	b.n	8007f06 <__cvt+0x44>
 8007f04:	2103      	movs	r1, #3
 8007f06:	ab03      	add	r3, sp, #12
 8007f08:	9301      	str	r3, [sp, #4]
 8007f0a:	ab02      	add	r3, sp, #8
 8007f0c:	9300      	str	r3, [sp, #0]
 8007f0e:	ec45 4b10 	vmov	d0, r4, r5
 8007f12:	4653      	mov	r3, sl
 8007f14:	4632      	mov	r2, r6
 8007f16:	f000 fe7f 	bl	8008c18 <_dtoa_r>
 8007f1a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007f1e:	4607      	mov	r7, r0
 8007f20:	d102      	bne.n	8007f28 <__cvt+0x66>
 8007f22:	f019 0f01 	tst.w	r9, #1
 8007f26:	d022      	beq.n	8007f6e <__cvt+0xac>
 8007f28:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007f2c:	eb07 0906 	add.w	r9, r7, r6
 8007f30:	d110      	bne.n	8007f54 <__cvt+0x92>
 8007f32:	783b      	ldrb	r3, [r7, #0]
 8007f34:	2b30      	cmp	r3, #48	; 0x30
 8007f36:	d10a      	bne.n	8007f4e <__cvt+0x8c>
 8007f38:	2200      	movs	r2, #0
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	4620      	mov	r0, r4
 8007f3e:	4629      	mov	r1, r5
 8007f40:	f7f8 fdc2 	bl	8000ac8 <__aeabi_dcmpeq>
 8007f44:	b918      	cbnz	r0, 8007f4e <__cvt+0x8c>
 8007f46:	f1c6 0601 	rsb	r6, r6, #1
 8007f4a:	f8ca 6000 	str.w	r6, [sl]
 8007f4e:	f8da 3000 	ldr.w	r3, [sl]
 8007f52:	4499      	add	r9, r3
 8007f54:	2200      	movs	r2, #0
 8007f56:	2300      	movs	r3, #0
 8007f58:	4620      	mov	r0, r4
 8007f5a:	4629      	mov	r1, r5
 8007f5c:	f7f8 fdb4 	bl	8000ac8 <__aeabi_dcmpeq>
 8007f60:	b108      	cbz	r0, 8007f66 <__cvt+0xa4>
 8007f62:	f8cd 900c 	str.w	r9, [sp, #12]
 8007f66:	2230      	movs	r2, #48	; 0x30
 8007f68:	9b03      	ldr	r3, [sp, #12]
 8007f6a:	454b      	cmp	r3, r9
 8007f6c:	d307      	bcc.n	8007f7e <__cvt+0xbc>
 8007f6e:	9b03      	ldr	r3, [sp, #12]
 8007f70:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007f72:	1bdb      	subs	r3, r3, r7
 8007f74:	4638      	mov	r0, r7
 8007f76:	6013      	str	r3, [r2, #0]
 8007f78:	b004      	add	sp, #16
 8007f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f7e:	1c59      	adds	r1, r3, #1
 8007f80:	9103      	str	r1, [sp, #12]
 8007f82:	701a      	strb	r2, [r3, #0]
 8007f84:	e7f0      	b.n	8007f68 <__cvt+0xa6>

08007f86 <__exponent>:
 8007f86:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007f88:	4603      	mov	r3, r0
 8007f8a:	2900      	cmp	r1, #0
 8007f8c:	bfb8      	it	lt
 8007f8e:	4249      	neglt	r1, r1
 8007f90:	f803 2b02 	strb.w	r2, [r3], #2
 8007f94:	bfb4      	ite	lt
 8007f96:	222d      	movlt	r2, #45	; 0x2d
 8007f98:	222b      	movge	r2, #43	; 0x2b
 8007f9a:	2909      	cmp	r1, #9
 8007f9c:	7042      	strb	r2, [r0, #1]
 8007f9e:	dd2a      	ble.n	8007ff6 <__exponent+0x70>
 8007fa0:	f10d 0207 	add.w	r2, sp, #7
 8007fa4:	4617      	mov	r7, r2
 8007fa6:	260a      	movs	r6, #10
 8007fa8:	4694      	mov	ip, r2
 8007faa:	fb91 f5f6 	sdiv	r5, r1, r6
 8007fae:	fb06 1415 	mls	r4, r6, r5, r1
 8007fb2:	3430      	adds	r4, #48	; 0x30
 8007fb4:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8007fb8:	460c      	mov	r4, r1
 8007fba:	2c63      	cmp	r4, #99	; 0x63
 8007fbc:	f102 32ff 	add.w	r2, r2, #4294967295
 8007fc0:	4629      	mov	r1, r5
 8007fc2:	dcf1      	bgt.n	8007fa8 <__exponent+0x22>
 8007fc4:	3130      	adds	r1, #48	; 0x30
 8007fc6:	f1ac 0402 	sub.w	r4, ip, #2
 8007fca:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007fce:	1c41      	adds	r1, r0, #1
 8007fd0:	4622      	mov	r2, r4
 8007fd2:	42ba      	cmp	r2, r7
 8007fd4:	d30a      	bcc.n	8007fec <__exponent+0x66>
 8007fd6:	f10d 0209 	add.w	r2, sp, #9
 8007fda:	eba2 020c 	sub.w	r2, r2, ip
 8007fde:	42bc      	cmp	r4, r7
 8007fe0:	bf88      	it	hi
 8007fe2:	2200      	movhi	r2, #0
 8007fe4:	4413      	add	r3, r2
 8007fe6:	1a18      	subs	r0, r3, r0
 8007fe8:	b003      	add	sp, #12
 8007fea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007fec:	f812 5b01 	ldrb.w	r5, [r2], #1
 8007ff0:	f801 5f01 	strb.w	r5, [r1, #1]!
 8007ff4:	e7ed      	b.n	8007fd2 <__exponent+0x4c>
 8007ff6:	2330      	movs	r3, #48	; 0x30
 8007ff8:	3130      	adds	r1, #48	; 0x30
 8007ffa:	7083      	strb	r3, [r0, #2]
 8007ffc:	70c1      	strb	r1, [r0, #3]
 8007ffe:	1d03      	adds	r3, r0, #4
 8008000:	e7f1      	b.n	8007fe6 <__exponent+0x60>
	...

08008004 <_printf_float>:
 8008004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008008:	ed2d 8b02 	vpush	{d8}
 800800c:	b08d      	sub	sp, #52	; 0x34
 800800e:	460c      	mov	r4, r1
 8008010:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008014:	4616      	mov	r6, r2
 8008016:	461f      	mov	r7, r3
 8008018:	4605      	mov	r5, r0
 800801a:	f000 fcfb 	bl	8008a14 <_localeconv_r>
 800801e:	f8d0 a000 	ldr.w	sl, [r0]
 8008022:	4650      	mov	r0, sl
 8008024:	f7f8 f924 	bl	8000270 <strlen>
 8008028:	2300      	movs	r3, #0
 800802a:	930a      	str	r3, [sp, #40]	; 0x28
 800802c:	6823      	ldr	r3, [r4, #0]
 800802e:	9305      	str	r3, [sp, #20]
 8008030:	f8d8 3000 	ldr.w	r3, [r8]
 8008034:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008038:	3307      	adds	r3, #7
 800803a:	f023 0307 	bic.w	r3, r3, #7
 800803e:	f103 0208 	add.w	r2, r3, #8
 8008042:	f8c8 2000 	str.w	r2, [r8]
 8008046:	e9d3 8900 	ldrd	r8, r9, [r3]
 800804a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800804e:	9307      	str	r3, [sp, #28]
 8008050:	f8cd 8018 	str.w	r8, [sp, #24]
 8008054:	ee08 0a10 	vmov	s16, r0
 8008058:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800805c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008060:	4b9e      	ldr	r3, [pc, #632]	; (80082dc <_printf_float+0x2d8>)
 8008062:	f04f 32ff 	mov.w	r2, #4294967295
 8008066:	f7f8 fd61 	bl	8000b2c <__aeabi_dcmpun>
 800806a:	bb88      	cbnz	r0, 80080d0 <_printf_float+0xcc>
 800806c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008070:	4b9a      	ldr	r3, [pc, #616]	; (80082dc <_printf_float+0x2d8>)
 8008072:	f04f 32ff 	mov.w	r2, #4294967295
 8008076:	f7f8 fd3b 	bl	8000af0 <__aeabi_dcmple>
 800807a:	bb48      	cbnz	r0, 80080d0 <_printf_float+0xcc>
 800807c:	2200      	movs	r2, #0
 800807e:	2300      	movs	r3, #0
 8008080:	4640      	mov	r0, r8
 8008082:	4649      	mov	r1, r9
 8008084:	f7f8 fd2a 	bl	8000adc <__aeabi_dcmplt>
 8008088:	b110      	cbz	r0, 8008090 <_printf_float+0x8c>
 800808a:	232d      	movs	r3, #45	; 0x2d
 800808c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008090:	4a93      	ldr	r2, [pc, #588]	; (80082e0 <_printf_float+0x2dc>)
 8008092:	4b94      	ldr	r3, [pc, #592]	; (80082e4 <_printf_float+0x2e0>)
 8008094:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008098:	bf94      	ite	ls
 800809a:	4690      	movls	r8, r2
 800809c:	4698      	movhi	r8, r3
 800809e:	2303      	movs	r3, #3
 80080a0:	6123      	str	r3, [r4, #16]
 80080a2:	9b05      	ldr	r3, [sp, #20]
 80080a4:	f023 0304 	bic.w	r3, r3, #4
 80080a8:	6023      	str	r3, [r4, #0]
 80080aa:	f04f 0900 	mov.w	r9, #0
 80080ae:	9700      	str	r7, [sp, #0]
 80080b0:	4633      	mov	r3, r6
 80080b2:	aa0b      	add	r2, sp, #44	; 0x2c
 80080b4:	4621      	mov	r1, r4
 80080b6:	4628      	mov	r0, r5
 80080b8:	f000 f9da 	bl	8008470 <_printf_common>
 80080bc:	3001      	adds	r0, #1
 80080be:	f040 8090 	bne.w	80081e2 <_printf_float+0x1de>
 80080c2:	f04f 30ff 	mov.w	r0, #4294967295
 80080c6:	b00d      	add	sp, #52	; 0x34
 80080c8:	ecbd 8b02 	vpop	{d8}
 80080cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080d0:	4642      	mov	r2, r8
 80080d2:	464b      	mov	r3, r9
 80080d4:	4640      	mov	r0, r8
 80080d6:	4649      	mov	r1, r9
 80080d8:	f7f8 fd28 	bl	8000b2c <__aeabi_dcmpun>
 80080dc:	b140      	cbz	r0, 80080f0 <_printf_float+0xec>
 80080de:	464b      	mov	r3, r9
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	bfbc      	itt	lt
 80080e4:	232d      	movlt	r3, #45	; 0x2d
 80080e6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80080ea:	4a7f      	ldr	r2, [pc, #508]	; (80082e8 <_printf_float+0x2e4>)
 80080ec:	4b7f      	ldr	r3, [pc, #508]	; (80082ec <_printf_float+0x2e8>)
 80080ee:	e7d1      	b.n	8008094 <_printf_float+0x90>
 80080f0:	6863      	ldr	r3, [r4, #4]
 80080f2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80080f6:	9206      	str	r2, [sp, #24]
 80080f8:	1c5a      	adds	r2, r3, #1
 80080fa:	d13f      	bne.n	800817c <_printf_float+0x178>
 80080fc:	2306      	movs	r3, #6
 80080fe:	6063      	str	r3, [r4, #4]
 8008100:	9b05      	ldr	r3, [sp, #20]
 8008102:	6861      	ldr	r1, [r4, #4]
 8008104:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008108:	2300      	movs	r3, #0
 800810a:	9303      	str	r3, [sp, #12]
 800810c:	ab0a      	add	r3, sp, #40	; 0x28
 800810e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008112:	ab09      	add	r3, sp, #36	; 0x24
 8008114:	ec49 8b10 	vmov	d0, r8, r9
 8008118:	9300      	str	r3, [sp, #0]
 800811a:	6022      	str	r2, [r4, #0]
 800811c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008120:	4628      	mov	r0, r5
 8008122:	f7ff fece 	bl	8007ec2 <__cvt>
 8008126:	9b06      	ldr	r3, [sp, #24]
 8008128:	9909      	ldr	r1, [sp, #36]	; 0x24
 800812a:	2b47      	cmp	r3, #71	; 0x47
 800812c:	4680      	mov	r8, r0
 800812e:	d108      	bne.n	8008142 <_printf_float+0x13e>
 8008130:	1cc8      	adds	r0, r1, #3
 8008132:	db02      	blt.n	800813a <_printf_float+0x136>
 8008134:	6863      	ldr	r3, [r4, #4]
 8008136:	4299      	cmp	r1, r3
 8008138:	dd41      	ble.n	80081be <_printf_float+0x1ba>
 800813a:	f1ab 0302 	sub.w	r3, fp, #2
 800813e:	fa5f fb83 	uxtb.w	fp, r3
 8008142:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008146:	d820      	bhi.n	800818a <_printf_float+0x186>
 8008148:	3901      	subs	r1, #1
 800814a:	465a      	mov	r2, fp
 800814c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008150:	9109      	str	r1, [sp, #36]	; 0x24
 8008152:	f7ff ff18 	bl	8007f86 <__exponent>
 8008156:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008158:	1813      	adds	r3, r2, r0
 800815a:	2a01      	cmp	r2, #1
 800815c:	4681      	mov	r9, r0
 800815e:	6123      	str	r3, [r4, #16]
 8008160:	dc02      	bgt.n	8008168 <_printf_float+0x164>
 8008162:	6822      	ldr	r2, [r4, #0]
 8008164:	07d2      	lsls	r2, r2, #31
 8008166:	d501      	bpl.n	800816c <_printf_float+0x168>
 8008168:	3301      	adds	r3, #1
 800816a:	6123      	str	r3, [r4, #16]
 800816c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008170:	2b00      	cmp	r3, #0
 8008172:	d09c      	beq.n	80080ae <_printf_float+0xaa>
 8008174:	232d      	movs	r3, #45	; 0x2d
 8008176:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800817a:	e798      	b.n	80080ae <_printf_float+0xaa>
 800817c:	9a06      	ldr	r2, [sp, #24]
 800817e:	2a47      	cmp	r2, #71	; 0x47
 8008180:	d1be      	bne.n	8008100 <_printf_float+0xfc>
 8008182:	2b00      	cmp	r3, #0
 8008184:	d1bc      	bne.n	8008100 <_printf_float+0xfc>
 8008186:	2301      	movs	r3, #1
 8008188:	e7b9      	b.n	80080fe <_printf_float+0xfa>
 800818a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800818e:	d118      	bne.n	80081c2 <_printf_float+0x1be>
 8008190:	2900      	cmp	r1, #0
 8008192:	6863      	ldr	r3, [r4, #4]
 8008194:	dd0b      	ble.n	80081ae <_printf_float+0x1aa>
 8008196:	6121      	str	r1, [r4, #16]
 8008198:	b913      	cbnz	r3, 80081a0 <_printf_float+0x19c>
 800819a:	6822      	ldr	r2, [r4, #0]
 800819c:	07d0      	lsls	r0, r2, #31
 800819e:	d502      	bpl.n	80081a6 <_printf_float+0x1a2>
 80081a0:	3301      	adds	r3, #1
 80081a2:	440b      	add	r3, r1
 80081a4:	6123      	str	r3, [r4, #16]
 80081a6:	65a1      	str	r1, [r4, #88]	; 0x58
 80081a8:	f04f 0900 	mov.w	r9, #0
 80081ac:	e7de      	b.n	800816c <_printf_float+0x168>
 80081ae:	b913      	cbnz	r3, 80081b6 <_printf_float+0x1b2>
 80081b0:	6822      	ldr	r2, [r4, #0]
 80081b2:	07d2      	lsls	r2, r2, #31
 80081b4:	d501      	bpl.n	80081ba <_printf_float+0x1b6>
 80081b6:	3302      	adds	r3, #2
 80081b8:	e7f4      	b.n	80081a4 <_printf_float+0x1a0>
 80081ba:	2301      	movs	r3, #1
 80081bc:	e7f2      	b.n	80081a4 <_printf_float+0x1a0>
 80081be:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80081c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081c4:	4299      	cmp	r1, r3
 80081c6:	db05      	blt.n	80081d4 <_printf_float+0x1d0>
 80081c8:	6823      	ldr	r3, [r4, #0]
 80081ca:	6121      	str	r1, [r4, #16]
 80081cc:	07d8      	lsls	r0, r3, #31
 80081ce:	d5ea      	bpl.n	80081a6 <_printf_float+0x1a2>
 80081d0:	1c4b      	adds	r3, r1, #1
 80081d2:	e7e7      	b.n	80081a4 <_printf_float+0x1a0>
 80081d4:	2900      	cmp	r1, #0
 80081d6:	bfd4      	ite	le
 80081d8:	f1c1 0202 	rsble	r2, r1, #2
 80081dc:	2201      	movgt	r2, #1
 80081de:	4413      	add	r3, r2
 80081e0:	e7e0      	b.n	80081a4 <_printf_float+0x1a0>
 80081e2:	6823      	ldr	r3, [r4, #0]
 80081e4:	055a      	lsls	r2, r3, #21
 80081e6:	d407      	bmi.n	80081f8 <_printf_float+0x1f4>
 80081e8:	6923      	ldr	r3, [r4, #16]
 80081ea:	4642      	mov	r2, r8
 80081ec:	4631      	mov	r1, r6
 80081ee:	4628      	mov	r0, r5
 80081f0:	47b8      	blx	r7
 80081f2:	3001      	adds	r0, #1
 80081f4:	d12c      	bne.n	8008250 <_printf_float+0x24c>
 80081f6:	e764      	b.n	80080c2 <_printf_float+0xbe>
 80081f8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80081fc:	f240 80e0 	bls.w	80083c0 <_printf_float+0x3bc>
 8008200:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008204:	2200      	movs	r2, #0
 8008206:	2300      	movs	r3, #0
 8008208:	f7f8 fc5e 	bl	8000ac8 <__aeabi_dcmpeq>
 800820c:	2800      	cmp	r0, #0
 800820e:	d034      	beq.n	800827a <_printf_float+0x276>
 8008210:	4a37      	ldr	r2, [pc, #220]	; (80082f0 <_printf_float+0x2ec>)
 8008212:	2301      	movs	r3, #1
 8008214:	4631      	mov	r1, r6
 8008216:	4628      	mov	r0, r5
 8008218:	47b8      	blx	r7
 800821a:	3001      	adds	r0, #1
 800821c:	f43f af51 	beq.w	80080c2 <_printf_float+0xbe>
 8008220:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008224:	429a      	cmp	r2, r3
 8008226:	db02      	blt.n	800822e <_printf_float+0x22a>
 8008228:	6823      	ldr	r3, [r4, #0]
 800822a:	07d8      	lsls	r0, r3, #31
 800822c:	d510      	bpl.n	8008250 <_printf_float+0x24c>
 800822e:	ee18 3a10 	vmov	r3, s16
 8008232:	4652      	mov	r2, sl
 8008234:	4631      	mov	r1, r6
 8008236:	4628      	mov	r0, r5
 8008238:	47b8      	blx	r7
 800823a:	3001      	adds	r0, #1
 800823c:	f43f af41 	beq.w	80080c2 <_printf_float+0xbe>
 8008240:	f04f 0800 	mov.w	r8, #0
 8008244:	f104 091a 	add.w	r9, r4, #26
 8008248:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800824a:	3b01      	subs	r3, #1
 800824c:	4543      	cmp	r3, r8
 800824e:	dc09      	bgt.n	8008264 <_printf_float+0x260>
 8008250:	6823      	ldr	r3, [r4, #0]
 8008252:	079b      	lsls	r3, r3, #30
 8008254:	f100 8107 	bmi.w	8008466 <_printf_float+0x462>
 8008258:	68e0      	ldr	r0, [r4, #12]
 800825a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800825c:	4298      	cmp	r0, r3
 800825e:	bfb8      	it	lt
 8008260:	4618      	movlt	r0, r3
 8008262:	e730      	b.n	80080c6 <_printf_float+0xc2>
 8008264:	2301      	movs	r3, #1
 8008266:	464a      	mov	r2, r9
 8008268:	4631      	mov	r1, r6
 800826a:	4628      	mov	r0, r5
 800826c:	47b8      	blx	r7
 800826e:	3001      	adds	r0, #1
 8008270:	f43f af27 	beq.w	80080c2 <_printf_float+0xbe>
 8008274:	f108 0801 	add.w	r8, r8, #1
 8008278:	e7e6      	b.n	8008248 <_printf_float+0x244>
 800827a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800827c:	2b00      	cmp	r3, #0
 800827e:	dc39      	bgt.n	80082f4 <_printf_float+0x2f0>
 8008280:	4a1b      	ldr	r2, [pc, #108]	; (80082f0 <_printf_float+0x2ec>)
 8008282:	2301      	movs	r3, #1
 8008284:	4631      	mov	r1, r6
 8008286:	4628      	mov	r0, r5
 8008288:	47b8      	blx	r7
 800828a:	3001      	adds	r0, #1
 800828c:	f43f af19 	beq.w	80080c2 <_printf_float+0xbe>
 8008290:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008294:	4313      	orrs	r3, r2
 8008296:	d102      	bne.n	800829e <_printf_float+0x29a>
 8008298:	6823      	ldr	r3, [r4, #0]
 800829a:	07d9      	lsls	r1, r3, #31
 800829c:	d5d8      	bpl.n	8008250 <_printf_float+0x24c>
 800829e:	ee18 3a10 	vmov	r3, s16
 80082a2:	4652      	mov	r2, sl
 80082a4:	4631      	mov	r1, r6
 80082a6:	4628      	mov	r0, r5
 80082a8:	47b8      	blx	r7
 80082aa:	3001      	adds	r0, #1
 80082ac:	f43f af09 	beq.w	80080c2 <_printf_float+0xbe>
 80082b0:	f04f 0900 	mov.w	r9, #0
 80082b4:	f104 0a1a 	add.w	sl, r4, #26
 80082b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082ba:	425b      	negs	r3, r3
 80082bc:	454b      	cmp	r3, r9
 80082be:	dc01      	bgt.n	80082c4 <_printf_float+0x2c0>
 80082c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082c2:	e792      	b.n	80081ea <_printf_float+0x1e6>
 80082c4:	2301      	movs	r3, #1
 80082c6:	4652      	mov	r2, sl
 80082c8:	4631      	mov	r1, r6
 80082ca:	4628      	mov	r0, r5
 80082cc:	47b8      	blx	r7
 80082ce:	3001      	adds	r0, #1
 80082d0:	f43f aef7 	beq.w	80080c2 <_printf_float+0xbe>
 80082d4:	f109 0901 	add.w	r9, r9, #1
 80082d8:	e7ee      	b.n	80082b8 <_printf_float+0x2b4>
 80082da:	bf00      	nop
 80082dc:	7fefffff 	.word	0x7fefffff
 80082e0:	0800acb4 	.word	0x0800acb4
 80082e4:	0800acb8 	.word	0x0800acb8
 80082e8:	0800acbc 	.word	0x0800acbc
 80082ec:	0800acc0 	.word	0x0800acc0
 80082f0:	0800acc4 	.word	0x0800acc4
 80082f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80082f6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80082f8:	429a      	cmp	r2, r3
 80082fa:	bfa8      	it	ge
 80082fc:	461a      	movge	r2, r3
 80082fe:	2a00      	cmp	r2, #0
 8008300:	4691      	mov	r9, r2
 8008302:	dc37      	bgt.n	8008374 <_printf_float+0x370>
 8008304:	f04f 0b00 	mov.w	fp, #0
 8008308:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800830c:	f104 021a 	add.w	r2, r4, #26
 8008310:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008312:	9305      	str	r3, [sp, #20]
 8008314:	eba3 0309 	sub.w	r3, r3, r9
 8008318:	455b      	cmp	r3, fp
 800831a:	dc33      	bgt.n	8008384 <_printf_float+0x380>
 800831c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008320:	429a      	cmp	r2, r3
 8008322:	db3b      	blt.n	800839c <_printf_float+0x398>
 8008324:	6823      	ldr	r3, [r4, #0]
 8008326:	07da      	lsls	r2, r3, #31
 8008328:	d438      	bmi.n	800839c <_printf_float+0x398>
 800832a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800832e:	eba2 0903 	sub.w	r9, r2, r3
 8008332:	9b05      	ldr	r3, [sp, #20]
 8008334:	1ad2      	subs	r2, r2, r3
 8008336:	4591      	cmp	r9, r2
 8008338:	bfa8      	it	ge
 800833a:	4691      	movge	r9, r2
 800833c:	f1b9 0f00 	cmp.w	r9, #0
 8008340:	dc35      	bgt.n	80083ae <_printf_float+0x3aa>
 8008342:	f04f 0800 	mov.w	r8, #0
 8008346:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800834a:	f104 0a1a 	add.w	sl, r4, #26
 800834e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008352:	1a9b      	subs	r3, r3, r2
 8008354:	eba3 0309 	sub.w	r3, r3, r9
 8008358:	4543      	cmp	r3, r8
 800835a:	f77f af79 	ble.w	8008250 <_printf_float+0x24c>
 800835e:	2301      	movs	r3, #1
 8008360:	4652      	mov	r2, sl
 8008362:	4631      	mov	r1, r6
 8008364:	4628      	mov	r0, r5
 8008366:	47b8      	blx	r7
 8008368:	3001      	adds	r0, #1
 800836a:	f43f aeaa 	beq.w	80080c2 <_printf_float+0xbe>
 800836e:	f108 0801 	add.w	r8, r8, #1
 8008372:	e7ec      	b.n	800834e <_printf_float+0x34a>
 8008374:	4613      	mov	r3, r2
 8008376:	4631      	mov	r1, r6
 8008378:	4642      	mov	r2, r8
 800837a:	4628      	mov	r0, r5
 800837c:	47b8      	blx	r7
 800837e:	3001      	adds	r0, #1
 8008380:	d1c0      	bne.n	8008304 <_printf_float+0x300>
 8008382:	e69e      	b.n	80080c2 <_printf_float+0xbe>
 8008384:	2301      	movs	r3, #1
 8008386:	4631      	mov	r1, r6
 8008388:	4628      	mov	r0, r5
 800838a:	9205      	str	r2, [sp, #20]
 800838c:	47b8      	blx	r7
 800838e:	3001      	adds	r0, #1
 8008390:	f43f ae97 	beq.w	80080c2 <_printf_float+0xbe>
 8008394:	9a05      	ldr	r2, [sp, #20]
 8008396:	f10b 0b01 	add.w	fp, fp, #1
 800839a:	e7b9      	b.n	8008310 <_printf_float+0x30c>
 800839c:	ee18 3a10 	vmov	r3, s16
 80083a0:	4652      	mov	r2, sl
 80083a2:	4631      	mov	r1, r6
 80083a4:	4628      	mov	r0, r5
 80083a6:	47b8      	blx	r7
 80083a8:	3001      	adds	r0, #1
 80083aa:	d1be      	bne.n	800832a <_printf_float+0x326>
 80083ac:	e689      	b.n	80080c2 <_printf_float+0xbe>
 80083ae:	9a05      	ldr	r2, [sp, #20]
 80083b0:	464b      	mov	r3, r9
 80083b2:	4442      	add	r2, r8
 80083b4:	4631      	mov	r1, r6
 80083b6:	4628      	mov	r0, r5
 80083b8:	47b8      	blx	r7
 80083ba:	3001      	adds	r0, #1
 80083bc:	d1c1      	bne.n	8008342 <_printf_float+0x33e>
 80083be:	e680      	b.n	80080c2 <_printf_float+0xbe>
 80083c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80083c2:	2a01      	cmp	r2, #1
 80083c4:	dc01      	bgt.n	80083ca <_printf_float+0x3c6>
 80083c6:	07db      	lsls	r3, r3, #31
 80083c8:	d53a      	bpl.n	8008440 <_printf_float+0x43c>
 80083ca:	2301      	movs	r3, #1
 80083cc:	4642      	mov	r2, r8
 80083ce:	4631      	mov	r1, r6
 80083d0:	4628      	mov	r0, r5
 80083d2:	47b8      	blx	r7
 80083d4:	3001      	adds	r0, #1
 80083d6:	f43f ae74 	beq.w	80080c2 <_printf_float+0xbe>
 80083da:	ee18 3a10 	vmov	r3, s16
 80083de:	4652      	mov	r2, sl
 80083e0:	4631      	mov	r1, r6
 80083e2:	4628      	mov	r0, r5
 80083e4:	47b8      	blx	r7
 80083e6:	3001      	adds	r0, #1
 80083e8:	f43f ae6b 	beq.w	80080c2 <_printf_float+0xbe>
 80083ec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80083f0:	2200      	movs	r2, #0
 80083f2:	2300      	movs	r3, #0
 80083f4:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80083f8:	f7f8 fb66 	bl	8000ac8 <__aeabi_dcmpeq>
 80083fc:	b9d8      	cbnz	r0, 8008436 <_printf_float+0x432>
 80083fe:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008402:	f108 0201 	add.w	r2, r8, #1
 8008406:	4631      	mov	r1, r6
 8008408:	4628      	mov	r0, r5
 800840a:	47b8      	blx	r7
 800840c:	3001      	adds	r0, #1
 800840e:	d10e      	bne.n	800842e <_printf_float+0x42a>
 8008410:	e657      	b.n	80080c2 <_printf_float+0xbe>
 8008412:	2301      	movs	r3, #1
 8008414:	4652      	mov	r2, sl
 8008416:	4631      	mov	r1, r6
 8008418:	4628      	mov	r0, r5
 800841a:	47b8      	blx	r7
 800841c:	3001      	adds	r0, #1
 800841e:	f43f ae50 	beq.w	80080c2 <_printf_float+0xbe>
 8008422:	f108 0801 	add.w	r8, r8, #1
 8008426:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008428:	3b01      	subs	r3, #1
 800842a:	4543      	cmp	r3, r8
 800842c:	dcf1      	bgt.n	8008412 <_printf_float+0x40e>
 800842e:	464b      	mov	r3, r9
 8008430:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008434:	e6da      	b.n	80081ec <_printf_float+0x1e8>
 8008436:	f04f 0800 	mov.w	r8, #0
 800843a:	f104 0a1a 	add.w	sl, r4, #26
 800843e:	e7f2      	b.n	8008426 <_printf_float+0x422>
 8008440:	2301      	movs	r3, #1
 8008442:	4642      	mov	r2, r8
 8008444:	e7df      	b.n	8008406 <_printf_float+0x402>
 8008446:	2301      	movs	r3, #1
 8008448:	464a      	mov	r2, r9
 800844a:	4631      	mov	r1, r6
 800844c:	4628      	mov	r0, r5
 800844e:	47b8      	blx	r7
 8008450:	3001      	adds	r0, #1
 8008452:	f43f ae36 	beq.w	80080c2 <_printf_float+0xbe>
 8008456:	f108 0801 	add.w	r8, r8, #1
 800845a:	68e3      	ldr	r3, [r4, #12]
 800845c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800845e:	1a5b      	subs	r3, r3, r1
 8008460:	4543      	cmp	r3, r8
 8008462:	dcf0      	bgt.n	8008446 <_printf_float+0x442>
 8008464:	e6f8      	b.n	8008258 <_printf_float+0x254>
 8008466:	f04f 0800 	mov.w	r8, #0
 800846a:	f104 0919 	add.w	r9, r4, #25
 800846e:	e7f4      	b.n	800845a <_printf_float+0x456>

08008470 <_printf_common>:
 8008470:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008474:	4616      	mov	r6, r2
 8008476:	4699      	mov	r9, r3
 8008478:	688a      	ldr	r2, [r1, #8]
 800847a:	690b      	ldr	r3, [r1, #16]
 800847c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008480:	4293      	cmp	r3, r2
 8008482:	bfb8      	it	lt
 8008484:	4613      	movlt	r3, r2
 8008486:	6033      	str	r3, [r6, #0]
 8008488:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800848c:	4607      	mov	r7, r0
 800848e:	460c      	mov	r4, r1
 8008490:	b10a      	cbz	r2, 8008496 <_printf_common+0x26>
 8008492:	3301      	adds	r3, #1
 8008494:	6033      	str	r3, [r6, #0]
 8008496:	6823      	ldr	r3, [r4, #0]
 8008498:	0699      	lsls	r1, r3, #26
 800849a:	bf42      	ittt	mi
 800849c:	6833      	ldrmi	r3, [r6, #0]
 800849e:	3302      	addmi	r3, #2
 80084a0:	6033      	strmi	r3, [r6, #0]
 80084a2:	6825      	ldr	r5, [r4, #0]
 80084a4:	f015 0506 	ands.w	r5, r5, #6
 80084a8:	d106      	bne.n	80084b8 <_printf_common+0x48>
 80084aa:	f104 0a19 	add.w	sl, r4, #25
 80084ae:	68e3      	ldr	r3, [r4, #12]
 80084b0:	6832      	ldr	r2, [r6, #0]
 80084b2:	1a9b      	subs	r3, r3, r2
 80084b4:	42ab      	cmp	r3, r5
 80084b6:	dc26      	bgt.n	8008506 <_printf_common+0x96>
 80084b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80084bc:	1e13      	subs	r3, r2, #0
 80084be:	6822      	ldr	r2, [r4, #0]
 80084c0:	bf18      	it	ne
 80084c2:	2301      	movne	r3, #1
 80084c4:	0692      	lsls	r2, r2, #26
 80084c6:	d42b      	bmi.n	8008520 <_printf_common+0xb0>
 80084c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80084cc:	4649      	mov	r1, r9
 80084ce:	4638      	mov	r0, r7
 80084d0:	47c0      	blx	r8
 80084d2:	3001      	adds	r0, #1
 80084d4:	d01e      	beq.n	8008514 <_printf_common+0xa4>
 80084d6:	6823      	ldr	r3, [r4, #0]
 80084d8:	6922      	ldr	r2, [r4, #16]
 80084da:	f003 0306 	and.w	r3, r3, #6
 80084de:	2b04      	cmp	r3, #4
 80084e0:	bf02      	ittt	eq
 80084e2:	68e5      	ldreq	r5, [r4, #12]
 80084e4:	6833      	ldreq	r3, [r6, #0]
 80084e6:	1aed      	subeq	r5, r5, r3
 80084e8:	68a3      	ldr	r3, [r4, #8]
 80084ea:	bf0c      	ite	eq
 80084ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80084f0:	2500      	movne	r5, #0
 80084f2:	4293      	cmp	r3, r2
 80084f4:	bfc4      	itt	gt
 80084f6:	1a9b      	subgt	r3, r3, r2
 80084f8:	18ed      	addgt	r5, r5, r3
 80084fa:	2600      	movs	r6, #0
 80084fc:	341a      	adds	r4, #26
 80084fe:	42b5      	cmp	r5, r6
 8008500:	d11a      	bne.n	8008538 <_printf_common+0xc8>
 8008502:	2000      	movs	r0, #0
 8008504:	e008      	b.n	8008518 <_printf_common+0xa8>
 8008506:	2301      	movs	r3, #1
 8008508:	4652      	mov	r2, sl
 800850a:	4649      	mov	r1, r9
 800850c:	4638      	mov	r0, r7
 800850e:	47c0      	blx	r8
 8008510:	3001      	adds	r0, #1
 8008512:	d103      	bne.n	800851c <_printf_common+0xac>
 8008514:	f04f 30ff 	mov.w	r0, #4294967295
 8008518:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800851c:	3501      	adds	r5, #1
 800851e:	e7c6      	b.n	80084ae <_printf_common+0x3e>
 8008520:	18e1      	adds	r1, r4, r3
 8008522:	1c5a      	adds	r2, r3, #1
 8008524:	2030      	movs	r0, #48	; 0x30
 8008526:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800852a:	4422      	add	r2, r4
 800852c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008530:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008534:	3302      	adds	r3, #2
 8008536:	e7c7      	b.n	80084c8 <_printf_common+0x58>
 8008538:	2301      	movs	r3, #1
 800853a:	4622      	mov	r2, r4
 800853c:	4649      	mov	r1, r9
 800853e:	4638      	mov	r0, r7
 8008540:	47c0      	blx	r8
 8008542:	3001      	adds	r0, #1
 8008544:	d0e6      	beq.n	8008514 <_printf_common+0xa4>
 8008546:	3601      	adds	r6, #1
 8008548:	e7d9      	b.n	80084fe <_printf_common+0x8e>
	...

0800854c <_printf_i>:
 800854c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008550:	7e0f      	ldrb	r7, [r1, #24]
 8008552:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008554:	2f78      	cmp	r7, #120	; 0x78
 8008556:	4691      	mov	r9, r2
 8008558:	4680      	mov	r8, r0
 800855a:	460c      	mov	r4, r1
 800855c:	469a      	mov	sl, r3
 800855e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008562:	d807      	bhi.n	8008574 <_printf_i+0x28>
 8008564:	2f62      	cmp	r7, #98	; 0x62
 8008566:	d80a      	bhi.n	800857e <_printf_i+0x32>
 8008568:	2f00      	cmp	r7, #0
 800856a:	f000 80d4 	beq.w	8008716 <_printf_i+0x1ca>
 800856e:	2f58      	cmp	r7, #88	; 0x58
 8008570:	f000 80c0 	beq.w	80086f4 <_printf_i+0x1a8>
 8008574:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008578:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800857c:	e03a      	b.n	80085f4 <_printf_i+0xa8>
 800857e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008582:	2b15      	cmp	r3, #21
 8008584:	d8f6      	bhi.n	8008574 <_printf_i+0x28>
 8008586:	a101      	add	r1, pc, #4	; (adr r1, 800858c <_printf_i+0x40>)
 8008588:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800858c:	080085e5 	.word	0x080085e5
 8008590:	080085f9 	.word	0x080085f9
 8008594:	08008575 	.word	0x08008575
 8008598:	08008575 	.word	0x08008575
 800859c:	08008575 	.word	0x08008575
 80085a0:	08008575 	.word	0x08008575
 80085a4:	080085f9 	.word	0x080085f9
 80085a8:	08008575 	.word	0x08008575
 80085ac:	08008575 	.word	0x08008575
 80085b0:	08008575 	.word	0x08008575
 80085b4:	08008575 	.word	0x08008575
 80085b8:	080086fd 	.word	0x080086fd
 80085bc:	08008625 	.word	0x08008625
 80085c0:	080086b7 	.word	0x080086b7
 80085c4:	08008575 	.word	0x08008575
 80085c8:	08008575 	.word	0x08008575
 80085cc:	0800871f 	.word	0x0800871f
 80085d0:	08008575 	.word	0x08008575
 80085d4:	08008625 	.word	0x08008625
 80085d8:	08008575 	.word	0x08008575
 80085dc:	08008575 	.word	0x08008575
 80085e0:	080086bf 	.word	0x080086bf
 80085e4:	682b      	ldr	r3, [r5, #0]
 80085e6:	1d1a      	adds	r2, r3, #4
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	602a      	str	r2, [r5, #0]
 80085ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80085f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80085f4:	2301      	movs	r3, #1
 80085f6:	e09f      	b.n	8008738 <_printf_i+0x1ec>
 80085f8:	6820      	ldr	r0, [r4, #0]
 80085fa:	682b      	ldr	r3, [r5, #0]
 80085fc:	0607      	lsls	r7, r0, #24
 80085fe:	f103 0104 	add.w	r1, r3, #4
 8008602:	6029      	str	r1, [r5, #0]
 8008604:	d501      	bpl.n	800860a <_printf_i+0xbe>
 8008606:	681e      	ldr	r6, [r3, #0]
 8008608:	e003      	b.n	8008612 <_printf_i+0xc6>
 800860a:	0646      	lsls	r6, r0, #25
 800860c:	d5fb      	bpl.n	8008606 <_printf_i+0xba>
 800860e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008612:	2e00      	cmp	r6, #0
 8008614:	da03      	bge.n	800861e <_printf_i+0xd2>
 8008616:	232d      	movs	r3, #45	; 0x2d
 8008618:	4276      	negs	r6, r6
 800861a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800861e:	485a      	ldr	r0, [pc, #360]	; (8008788 <_printf_i+0x23c>)
 8008620:	230a      	movs	r3, #10
 8008622:	e012      	b.n	800864a <_printf_i+0xfe>
 8008624:	682b      	ldr	r3, [r5, #0]
 8008626:	6820      	ldr	r0, [r4, #0]
 8008628:	1d19      	adds	r1, r3, #4
 800862a:	6029      	str	r1, [r5, #0]
 800862c:	0605      	lsls	r5, r0, #24
 800862e:	d501      	bpl.n	8008634 <_printf_i+0xe8>
 8008630:	681e      	ldr	r6, [r3, #0]
 8008632:	e002      	b.n	800863a <_printf_i+0xee>
 8008634:	0641      	lsls	r1, r0, #25
 8008636:	d5fb      	bpl.n	8008630 <_printf_i+0xe4>
 8008638:	881e      	ldrh	r6, [r3, #0]
 800863a:	4853      	ldr	r0, [pc, #332]	; (8008788 <_printf_i+0x23c>)
 800863c:	2f6f      	cmp	r7, #111	; 0x6f
 800863e:	bf0c      	ite	eq
 8008640:	2308      	moveq	r3, #8
 8008642:	230a      	movne	r3, #10
 8008644:	2100      	movs	r1, #0
 8008646:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800864a:	6865      	ldr	r5, [r4, #4]
 800864c:	60a5      	str	r5, [r4, #8]
 800864e:	2d00      	cmp	r5, #0
 8008650:	bfa2      	ittt	ge
 8008652:	6821      	ldrge	r1, [r4, #0]
 8008654:	f021 0104 	bicge.w	r1, r1, #4
 8008658:	6021      	strge	r1, [r4, #0]
 800865a:	b90e      	cbnz	r6, 8008660 <_printf_i+0x114>
 800865c:	2d00      	cmp	r5, #0
 800865e:	d04b      	beq.n	80086f8 <_printf_i+0x1ac>
 8008660:	4615      	mov	r5, r2
 8008662:	fbb6 f1f3 	udiv	r1, r6, r3
 8008666:	fb03 6711 	mls	r7, r3, r1, r6
 800866a:	5dc7      	ldrb	r7, [r0, r7]
 800866c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008670:	4637      	mov	r7, r6
 8008672:	42bb      	cmp	r3, r7
 8008674:	460e      	mov	r6, r1
 8008676:	d9f4      	bls.n	8008662 <_printf_i+0x116>
 8008678:	2b08      	cmp	r3, #8
 800867a:	d10b      	bne.n	8008694 <_printf_i+0x148>
 800867c:	6823      	ldr	r3, [r4, #0]
 800867e:	07de      	lsls	r6, r3, #31
 8008680:	d508      	bpl.n	8008694 <_printf_i+0x148>
 8008682:	6923      	ldr	r3, [r4, #16]
 8008684:	6861      	ldr	r1, [r4, #4]
 8008686:	4299      	cmp	r1, r3
 8008688:	bfde      	ittt	le
 800868a:	2330      	movle	r3, #48	; 0x30
 800868c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008690:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008694:	1b52      	subs	r2, r2, r5
 8008696:	6122      	str	r2, [r4, #16]
 8008698:	f8cd a000 	str.w	sl, [sp]
 800869c:	464b      	mov	r3, r9
 800869e:	aa03      	add	r2, sp, #12
 80086a0:	4621      	mov	r1, r4
 80086a2:	4640      	mov	r0, r8
 80086a4:	f7ff fee4 	bl	8008470 <_printf_common>
 80086a8:	3001      	adds	r0, #1
 80086aa:	d14a      	bne.n	8008742 <_printf_i+0x1f6>
 80086ac:	f04f 30ff 	mov.w	r0, #4294967295
 80086b0:	b004      	add	sp, #16
 80086b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086b6:	6823      	ldr	r3, [r4, #0]
 80086b8:	f043 0320 	orr.w	r3, r3, #32
 80086bc:	6023      	str	r3, [r4, #0]
 80086be:	4833      	ldr	r0, [pc, #204]	; (800878c <_printf_i+0x240>)
 80086c0:	2778      	movs	r7, #120	; 0x78
 80086c2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80086c6:	6823      	ldr	r3, [r4, #0]
 80086c8:	6829      	ldr	r1, [r5, #0]
 80086ca:	061f      	lsls	r7, r3, #24
 80086cc:	f851 6b04 	ldr.w	r6, [r1], #4
 80086d0:	d402      	bmi.n	80086d8 <_printf_i+0x18c>
 80086d2:	065f      	lsls	r7, r3, #25
 80086d4:	bf48      	it	mi
 80086d6:	b2b6      	uxthmi	r6, r6
 80086d8:	07df      	lsls	r7, r3, #31
 80086da:	bf48      	it	mi
 80086dc:	f043 0320 	orrmi.w	r3, r3, #32
 80086e0:	6029      	str	r1, [r5, #0]
 80086e2:	bf48      	it	mi
 80086e4:	6023      	strmi	r3, [r4, #0]
 80086e6:	b91e      	cbnz	r6, 80086f0 <_printf_i+0x1a4>
 80086e8:	6823      	ldr	r3, [r4, #0]
 80086ea:	f023 0320 	bic.w	r3, r3, #32
 80086ee:	6023      	str	r3, [r4, #0]
 80086f0:	2310      	movs	r3, #16
 80086f2:	e7a7      	b.n	8008644 <_printf_i+0xf8>
 80086f4:	4824      	ldr	r0, [pc, #144]	; (8008788 <_printf_i+0x23c>)
 80086f6:	e7e4      	b.n	80086c2 <_printf_i+0x176>
 80086f8:	4615      	mov	r5, r2
 80086fa:	e7bd      	b.n	8008678 <_printf_i+0x12c>
 80086fc:	682b      	ldr	r3, [r5, #0]
 80086fe:	6826      	ldr	r6, [r4, #0]
 8008700:	6961      	ldr	r1, [r4, #20]
 8008702:	1d18      	adds	r0, r3, #4
 8008704:	6028      	str	r0, [r5, #0]
 8008706:	0635      	lsls	r5, r6, #24
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	d501      	bpl.n	8008710 <_printf_i+0x1c4>
 800870c:	6019      	str	r1, [r3, #0]
 800870e:	e002      	b.n	8008716 <_printf_i+0x1ca>
 8008710:	0670      	lsls	r0, r6, #25
 8008712:	d5fb      	bpl.n	800870c <_printf_i+0x1c0>
 8008714:	8019      	strh	r1, [r3, #0]
 8008716:	2300      	movs	r3, #0
 8008718:	6123      	str	r3, [r4, #16]
 800871a:	4615      	mov	r5, r2
 800871c:	e7bc      	b.n	8008698 <_printf_i+0x14c>
 800871e:	682b      	ldr	r3, [r5, #0]
 8008720:	1d1a      	adds	r2, r3, #4
 8008722:	602a      	str	r2, [r5, #0]
 8008724:	681d      	ldr	r5, [r3, #0]
 8008726:	6862      	ldr	r2, [r4, #4]
 8008728:	2100      	movs	r1, #0
 800872a:	4628      	mov	r0, r5
 800872c:	f7f7 fd50 	bl	80001d0 <memchr>
 8008730:	b108      	cbz	r0, 8008736 <_printf_i+0x1ea>
 8008732:	1b40      	subs	r0, r0, r5
 8008734:	6060      	str	r0, [r4, #4]
 8008736:	6863      	ldr	r3, [r4, #4]
 8008738:	6123      	str	r3, [r4, #16]
 800873a:	2300      	movs	r3, #0
 800873c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008740:	e7aa      	b.n	8008698 <_printf_i+0x14c>
 8008742:	6923      	ldr	r3, [r4, #16]
 8008744:	462a      	mov	r2, r5
 8008746:	4649      	mov	r1, r9
 8008748:	4640      	mov	r0, r8
 800874a:	47d0      	blx	sl
 800874c:	3001      	adds	r0, #1
 800874e:	d0ad      	beq.n	80086ac <_printf_i+0x160>
 8008750:	6823      	ldr	r3, [r4, #0]
 8008752:	079b      	lsls	r3, r3, #30
 8008754:	d413      	bmi.n	800877e <_printf_i+0x232>
 8008756:	68e0      	ldr	r0, [r4, #12]
 8008758:	9b03      	ldr	r3, [sp, #12]
 800875a:	4298      	cmp	r0, r3
 800875c:	bfb8      	it	lt
 800875e:	4618      	movlt	r0, r3
 8008760:	e7a6      	b.n	80086b0 <_printf_i+0x164>
 8008762:	2301      	movs	r3, #1
 8008764:	4632      	mov	r2, r6
 8008766:	4649      	mov	r1, r9
 8008768:	4640      	mov	r0, r8
 800876a:	47d0      	blx	sl
 800876c:	3001      	adds	r0, #1
 800876e:	d09d      	beq.n	80086ac <_printf_i+0x160>
 8008770:	3501      	adds	r5, #1
 8008772:	68e3      	ldr	r3, [r4, #12]
 8008774:	9903      	ldr	r1, [sp, #12]
 8008776:	1a5b      	subs	r3, r3, r1
 8008778:	42ab      	cmp	r3, r5
 800877a:	dcf2      	bgt.n	8008762 <_printf_i+0x216>
 800877c:	e7eb      	b.n	8008756 <_printf_i+0x20a>
 800877e:	2500      	movs	r5, #0
 8008780:	f104 0619 	add.w	r6, r4, #25
 8008784:	e7f5      	b.n	8008772 <_printf_i+0x226>
 8008786:	bf00      	nop
 8008788:	0800acc6 	.word	0x0800acc6
 800878c:	0800acd7 	.word	0x0800acd7

08008790 <std>:
 8008790:	2300      	movs	r3, #0
 8008792:	b510      	push	{r4, lr}
 8008794:	4604      	mov	r4, r0
 8008796:	e9c0 3300 	strd	r3, r3, [r0]
 800879a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800879e:	6083      	str	r3, [r0, #8]
 80087a0:	8181      	strh	r1, [r0, #12]
 80087a2:	6643      	str	r3, [r0, #100]	; 0x64
 80087a4:	81c2      	strh	r2, [r0, #14]
 80087a6:	6183      	str	r3, [r0, #24]
 80087a8:	4619      	mov	r1, r3
 80087aa:	2208      	movs	r2, #8
 80087ac:	305c      	adds	r0, #92	; 0x5c
 80087ae:	f000 f928 	bl	8008a02 <memset>
 80087b2:	4b0d      	ldr	r3, [pc, #52]	; (80087e8 <std+0x58>)
 80087b4:	6263      	str	r3, [r4, #36]	; 0x24
 80087b6:	4b0d      	ldr	r3, [pc, #52]	; (80087ec <std+0x5c>)
 80087b8:	62a3      	str	r3, [r4, #40]	; 0x28
 80087ba:	4b0d      	ldr	r3, [pc, #52]	; (80087f0 <std+0x60>)
 80087bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80087be:	4b0d      	ldr	r3, [pc, #52]	; (80087f4 <std+0x64>)
 80087c0:	6323      	str	r3, [r4, #48]	; 0x30
 80087c2:	4b0d      	ldr	r3, [pc, #52]	; (80087f8 <std+0x68>)
 80087c4:	6224      	str	r4, [r4, #32]
 80087c6:	429c      	cmp	r4, r3
 80087c8:	d006      	beq.n	80087d8 <std+0x48>
 80087ca:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80087ce:	4294      	cmp	r4, r2
 80087d0:	d002      	beq.n	80087d8 <std+0x48>
 80087d2:	33d0      	adds	r3, #208	; 0xd0
 80087d4:	429c      	cmp	r4, r3
 80087d6:	d105      	bne.n	80087e4 <std+0x54>
 80087d8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80087dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80087e0:	f000 b98c 	b.w	8008afc <__retarget_lock_init_recursive>
 80087e4:	bd10      	pop	{r4, pc}
 80087e6:	bf00      	nop
 80087e8:	0800897d 	.word	0x0800897d
 80087ec:	0800899f 	.word	0x0800899f
 80087f0:	080089d7 	.word	0x080089d7
 80087f4:	080089fb 	.word	0x080089fb
 80087f8:	20000428 	.word	0x20000428

080087fc <stdio_exit_handler>:
 80087fc:	4a02      	ldr	r2, [pc, #8]	; (8008808 <stdio_exit_handler+0xc>)
 80087fe:	4903      	ldr	r1, [pc, #12]	; (800880c <stdio_exit_handler+0x10>)
 8008800:	4803      	ldr	r0, [pc, #12]	; (8008810 <stdio_exit_handler+0x14>)
 8008802:	f000 b869 	b.w	80088d8 <_fwalk_sglue>
 8008806:	bf00      	nop
 8008808:	2000000c 	.word	0x2000000c
 800880c:	0800a4b1 	.word	0x0800a4b1
 8008810:	20000018 	.word	0x20000018

08008814 <cleanup_stdio>:
 8008814:	6841      	ldr	r1, [r0, #4]
 8008816:	4b0c      	ldr	r3, [pc, #48]	; (8008848 <cleanup_stdio+0x34>)
 8008818:	4299      	cmp	r1, r3
 800881a:	b510      	push	{r4, lr}
 800881c:	4604      	mov	r4, r0
 800881e:	d001      	beq.n	8008824 <cleanup_stdio+0x10>
 8008820:	f001 fe46 	bl	800a4b0 <_fflush_r>
 8008824:	68a1      	ldr	r1, [r4, #8]
 8008826:	4b09      	ldr	r3, [pc, #36]	; (800884c <cleanup_stdio+0x38>)
 8008828:	4299      	cmp	r1, r3
 800882a:	d002      	beq.n	8008832 <cleanup_stdio+0x1e>
 800882c:	4620      	mov	r0, r4
 800882e:	f001 fe3f 	bl	800a4b0 <_fflush_r>
 8008832:	68e1      	ldr	r1, [r4, #12]
 8008834:	4b06      	ldr	r3, [pc, #24]	; (8008850 <cleanup_stdio+0x3c>)
 8008836:	4299      	cmp	r1, r3
 8008838:	d004      	beq.n	8008844 <cleanup_stdio+0x30>
 800883a:	4620      	mov	r0, r4
 800883c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008840:	f001 be36 	b.w	800a4b0 <_fflush_r>
 8008844:	bd10      	pop	{r4, pc}
 8008846:	bf00      	nop
 8008848:	20000428 	.word	0x20000428
 800884c:	20000490 	.word	0x20000490
 8008850:	200004f8 	.word	0x200004f8

08008854 <global_stdio_init.part.0>:
 8008854:	b510      	push	{r4, lr}
 8008856:	4b0b      	ldr	r3, [pc, #44]	; (8008884 <global_stdio_init.part.0+0x30>)
 8008858:	4c0b      	ldr	r4, [pc, #44]	; (8008888 <global_stdio_init.part.0+0x34>)
 800885a:	4a0c      	ldr	r2, [pc, #48]	; (800888c <global_stdio_init.part.0+0x38>)
 800885c:	601a      	str	r2, [r3, #0]
 800885e:	4620      	mov	r0, r4
 8008860:	2200      	movs	r2, #0
 8008862:	2104      	movs	r1, #4
 8008864:	f7ff ff94 	bl	8008790 <std>
 8008868:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800886c:	2201      	movs	r2, #1
 800886e:	2109      	movs	r1, #9
 8008870:	f7ff ff8e 	bl	8008790 <std>
 8008874:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008878:	2202      	movs	r2, #2
 800887a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800887e:	2112      	movs	r1, #18
 8008880:	f7ff bf86 	b.w	8008790 <std>
 8008884:	20000560 	.word	0x20000560
 8008888:	20000428 	.word	0x20000428
 800888c:	080087fd 	.word	0x080087fd

08008890 <__sfp_lock_acquire>:
 8008890:	4801      	ldr	r0, [pc, #4]	; (8008898 <__sfp_lock_acquire+0x8>)
 8008892:	f000 b934 	b.w	8008afe <__retarget_lock_acquire_recursive>
 8008896:	bf00      	nop
 8008898:	20000569 	.word	0x20000569

0800889c <__sfp_lock_release>:
 800889c:	4801      	ldr	r0, [pc, #4]	; (80088a4 <__sfp_lock_release+0x8>)
 800889e:	f000 b92f 	b.w	8008b00 <__retarget_lock_release_recursive>
 80088a2:	bf00      	nop
 80088a4:	20000569 	.word	0x20000569

080088a8 <__sinit>:
 80088a8:	b510      	push	{r4, lr}
 80088aa:	4604      	mov	r4, r0
 80088ac:	f7ff fff0 	bl	8008890 <__sfp_lock_acquire>
 80088b0:	6a23      	ldr	r3, [r4, #32]
 80088b2:	b11b      	cbz	r3, 80088bc <__sinit+0x14>
 80088b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80088b8:	f7ff bff0 	b.w	800889c <__sfp_lock_release>
 80088bc:	4b04      	ldr	r3, [pc, #16]	; (80088d0 <__sinit+0x28>)
 80088be:	6223      	str	r3, [r4, #32]
 80088c0:	4b04      	ldr	r3, [pc, #16]	; (80088d4 <__sinit+0x2c>)
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d1f5      	bne.n	80088b4 <__sinit+0xc>
 80088c8:	f7ff ffc4 	bl	8008854 <global_stdio_init.part.0>
 80088cc:	e7f2      	b.n	80088b4 <__sinit+0xc>
 80088ce:	bf00      	nop
 80088d0:	08008815 	.word	0x08008815
 80088d4:	20000560 	.word	0x20000560

080088d8 <_fwalk_sglue>:
 80088d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088dc:	4607      	mov	r7, r0
 80088de:	4688      	mov	r8, r1
 80088e0:	4614      	mov	r4, r2
 80088e2:	2600      	movs	r6, #0
 80088e4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80088e8:	f1b9 0901 	subs.w	r9, r9, #1
 80088ec:	d505      	bpl.n	80088fa <_fwalk_sglue+0x22>
 80088ee:	6824      	ldr	r4, [r4, #0]
 80088f0:	2c00      	cmp	r4, #0
 80088f2:	d1f7      	bne.n	80088e4 <_fwalk_sglue+0xc>
 80088f4:	4630      	mov	r0, r6
 80088f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088fa:	89ab      	ldrh	r3, [r5, #12]
 80088fc:	2b01      	cmp	r3, #1
 80088fe:	d907      	bls.n	8008910 <_fwalk_sglue+0x38>
 8008900:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008904:	3301      	adds	r3, #1
 8008906:	d003      	beq.n	8008910 <_fwalk_sglue+0x38>
 8008908:	4629      	mov	r1, r5
 800890a:	4638      	mov	r0, r7
 800890c:	47c0      	blx	r8
 800890e:	4306      	orrs	r6, r0
 8008910:	3568      	adds	r5, #104	; 0x68
 8008912:	e7e9      	b.n	80088e8 <_fwalk_sglue+0x10>

08008914 <sniprintf>:
 8008914:	b40c      	push	{r2, r3}
 8008916:	b530      	push	{r4, r5, lr}
 8008918:	4b17      	ldr	r3, [pc, #92]	; (8008978 <sniprintf+0x64>)
 800891a:	1e0c      	subs	r4, r1, #0
 800891c:	681d      	ldr	r5, [r3, #0]
 800891e:	b09d      	sub	sp, #116	; 0x74
 8008920:	da08      	bge.n	8008934 <sniprintf+0x20>
 8008922:	238b      	movs	r3, #139	; 0x8b
 8008924:	602b      	str	r3, [r5, #0]
 8008926:	f04f 30ff 	mov.w	r0, #4294967295
 800892a:	b01d      	add	sp, #116	; 0x74
 800892c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008930:	b002      	add	sp, #8
 8008932:	4770      	bx	lr
 8008934:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008938:	f8ad 3014 	strh.w	r3, [sp, #20]
 800893c:	bf14      	ite	ne
 800893e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008942:	4623      	moveq	r3, r4
 8008944:	9304      	str	r3, [sp, #16]
 8008946:	9307      	str	r3, [sp, #28]
 8008948:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800894c:	9002      	str	r0, [sp, #8]
 800894e:	9006      	str	r0, [sp, #24]
 8008950:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008954:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008956:	ab21      	add	r3, sp, #132	; 0x84
 8008958:	a902      	add	r1, sp, #8
 800895a:	4628      	mov	r0, r5
 800895c:	9301      	str	r3, [sp, #4]
 800895e:	f001 fc23 	bl	800a1a8 <_svfiprintf_r>
 8008962:	1c43      	adds	r3, r0, #1
 8008964:	bfbc      	itt	lt
 8008966:	238b      	movlt	r3, #139	; 0x8b
 8008968:	602b      	strlt	r3, [r5, #0]
 800896a:	2c00      	cmp	r4, #0
 800896c:	d0dd      	beq.n	800892a <sniprintf+0x16>
 800896e:	9b02      	ldr	r3, [sp, #8]
 8008970:	2200      	movs	r2, #0
 8008972:	701a      	strb	r2, [r3, #0]
 8008974:	e7d9      	b.n	800892a <sniprintf+0x16>
 8008976:	bf00      	nop
 8008978:	20000064 	.word	0x20000064

0800897c <__sread>:
 800897c:	b510      	push	{r4, lr}
 800897e:	460c      	mov	r4, r1
 8008980:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008984:	f000 f86c 	bl	8008a60 <_read_r>
 8008988:	2800      	cmp	r0, #0
 800898a:	bfab      	itete	ge
 800898c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800898e:	89a3      	ldrhlt	r3, [r4, #12]
 8008990:	181b      	addge	r3, r3, r0
 8008992:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008996:	bfac      	ite	ge
 8008998:	6563      	strge	r3, [r4, #84]	; 0x54
 800899a:	81a3      	strhlt	r3, [r4, #12]
 800899c:	bd10      	pop	{r4, pc}

0800899e <__swrite>:
 800899e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089a2:	461f      	mov	r7, r3
 80089a4:	898b      	ldrh	r3, [r1, #12]
 80089a6:	05db      	lsls	r3, r3, #23
 80089a8:	4605      	mov	r5, r0
 80089aa:	460c      	mov	r4, r1
 80089ac:	4616      	mov	r6, r2
 80089ae:	d505      	bpl.n	80089bc <__swrite+0x1e>
 80089b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089b4:	2302      	movs	r3, #2
 80089b6:	2200      	movs	r2, #0
 80089b8:	f000 f840 	bl	8008a3c <_lseek_r>
 80089bc:	89a3      	ldrh	r3, [r4, #12]
 80089be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80089c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80089c6:	81a3      	strh	r3, [r4, #12]
 80089c8:	4632      	mov	r2, r6
 80089ca:	463b      	mov	r3, r7
 80089cc:	4628      	mov	r0, r5
 80089ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80089d2:	f000 b857 	b.w	8008a84 <_write_r>

080089d6 <__sseek>:
 80089d6:	b510      	push	{r4, lr}
 80089d8:	460c      	mov	r4, r1
 80089da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089de:	f000 f82d 	bl	8008a3c <_lseek_r>
 80089e2:	1c43      	adds	r3, r0, #1
 80089e4:	89a3      	ldrh	r3, [r4, #12]
 80089e6:	bf15      	itete	ne
 80089e8:	6560      	strne	r0, [r4, #84]	; 0x54
 80089ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80089ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80089f2:	81a3      	strheq	r3, [r4, #12]
 80089f4:	bf18      	it	ne
 80089f6:	81a3      	strhne	r3, [r4, #12]
 80089f8:	bd10      	pop	{r4, pc}

080089fa <__sclose>:
 80089fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089fe:	f000 b80d 	b.w	8008a1c <_close_r>

08008a02 <memset>:
 8008a02:	4402      	add	r2, r0
 8008a04:	4603      	mov	r3, r0
 8008a06:	4293      	cmp	r3, r2
 8008a08:	d100      	bne.n	8008a0c <memset+0xa>
 8008a0a:	4770      	bx	lr
 8008a0c:	f803 1b01 	strb.w	r1, [r3], #1
 8008a10:	e7f9      	b.n	8008a06 <memset+0x4>
	...

08008a14 <_localeconv_r>:
 8008a14:	4800      	ldr	r0, [pc, #0]	; (8008a18 <_localeconv_r+0x4>)
 8008a16:	4770      	bx	lr
 8008a18:	20000158 	.word	0x20000158

08008a1c <_close_r>:
 8008a1c:	b538      	push	{r3, r4, r5, lr}
 8008a1e:	4d06      	ldr	r5, [pc, #24]	; (8008a38 <_close_r+0x1c>)
 8008a20:	2300      	movs	r3, #0
 8008a22:	4604      	mov	r4, r0
 8008a24:	4608      	mov	r0, r1
 8008a26:	602b      	str	r3, [r5, #0]
 8008a28:	f7f9 f8b9 	bl	8001b9e <_close>
 8008a2c:	1c43      	adds	r3, r0, #1
 8008a2e:	d102      	bne.n	8008a36 <_close_r+0x1a>
 8008a30:	682b      	ldr	r3, [r5, #0]
 8008a32:	b103      	cbz	r3, 8008a36 <_close_r+0x1a>
 8008a34:	6023      	str	r3, [r4, #0]
 8008a36:	bd38      	pop	{r3, r4, r5, pc}
 8008a38:	20000564 	.word	0x20000564

08008a3c <_lseek_r>:
 8008a3c:	b538      	push	{r3, r4, r5, lr}
 8008a3e:	4d07      	ldr	r5, [pc, #28]	; (8008a5c <_lseek_r+0x20>)
 8008a40:	4604      	mov	r4, r0
 8008a42:	4608      	mov	r0, r1
 8008a44:	4611      	mov	r1, r2
 8008a46:	2200      	movs	r2, #0
 8008a48:	602a      	str	r2, [r5, #0]
 8008a4a:	461a      	mov	r2, r3
 8008a4c:	f7f9 f8ce 	bl	8001bec <_lseek>
 8008a50:	1c43      	adds	r3, r0, #1
 8008a52:	d102      	bne.n	8008a5a <_lseek_r+0x1e>
 8008a54:	682b      	ldr	r3, [r5, #0]
 8008a56:	b103      	cbz	r3, 8008a5a <_lseek_r+0x1e>
 8008a58:	6023      	str	r3, [r4, #0]
 8008a5a:	bd38      	pop	{r3, r4, r5, pc}
 8008a5c:	20000564 	.word	0x20000564

08008a60 <_read_r>:
 8008a60:	b538      	push	{r3, r4, r5, lr}
 8008a62:	4d07      	ldr	r5, [pc, #28]	; (8008a80 <_read_r+0x20>)
 8008a64:	4604      	mov	r4, r0
 8008a66:	4608      	mov	r0, r1
 8008a68:	4611      	mov	r1, r2
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	602a      	str	r2, [r5, #0]
 8008a6e:	461a      	mov	r2, r3
 8008a70:	f7f9 f85c 	bl	8001b2c <_read>
 8008a74:	1c43      	adds	r3, r0, #1
 8008a76:	d102      	bne.n	8008a7e <_read_r+0x1e>
 8008a78:	682b      	ldr	r3, [r5, #0]
 8008a7a:	b103      	cbz	r3, 8008a7e <_read_r+0x1e>
 8008a7c:	6023      	str	r3, [r4, #0]
 8008a7e:	bd38      	pop	{r3, r4, r5, pc}
 8008a80:	20000564 	.word	0x20000564

08008a84 <_write_r>:
 8008a84:	b538      	push	{r3, r4, r5, lr}
 8008a86:	4d07      	ldr	r5, [pc, #28]	; (8008aa4 <_write_r+0x20>)
 8008a88:	4604      	mov	r4, r0
 8008a8a:	4608      	mov	r0, r1
 8008a8c:	4611      	mov	r1, r2
 8008a8e:	2200      	movs	r2, #0
 8008a90:	602a      	str	r2, [r5, #0]
 8008a92:	461a      	mov	r2, r3
 8008a94:	f7f9 f867 	bl	8001b66 <_write>
 8008a98:	1c43      	adds	r3, r0, #1
 8008a9a:	d102      	bne.n	8008aa2 <_write_r+0x1e>
 8008a9c:	682b      	ldr	r3, [r5, #0]
 8008a9e:	b103      	cbz	r3, 8008aa2 <_write_r+0x1e>
 8008aa0:	6023      	str	r3, [r4, #0]
 8008aa2:	bd38      	pop	{r3, r4, r5, pc}
 8008aa4:	20000564 	.word	0x20000564

08008aa8 <__errno>:
 8008aa8:	4b01      	ldr	r3, [pc, #4]	; (8008ab0 <__errno+0x8>)
 8008aaa:	6818      	ldr	r0, [r3, #0]
 8008aac:	4770      	bx	lr
 8008aae:	bf00      	nop
 8008ab0:	20000064 	.word	0x20000064

08008ab4 <__libc_init_array>:
 8008ab4:	b570      	push	{r4, r5, r6, lr}
 8008ab6:	4d0d      	ldr	r5, [pc, #52]	; (8008aec <__libc_init_array+0x38>)
 8008ab8:	4c0d      	ldr	r4, [pc, #52]	; (8008af0 <__libc_init_array+0x3c>)
 8008aba:	1b64      	subs	r4, r4, r5
 8008abc:	10a4      	asrs	r4, r4, #2
 8008abe:	2600      	movs	r6, #0
 8008ac0:	42a6      	cmp	r6, r4
 8008ac2:	d109      	bne.n	8008ad8 <__libc_init_array+0x24>
 8008ac4:	4d0b      	ldr	r5, [pc, #44]	; (8008af4 <__libc_init_array+0x40>)
 8008ac6:	4c0c      	ldr	r4, [pc, #48]	; (8008af8 <__libc_init_array+0x44>)
 8008ac8:	f002 f896 	bl	800abf8 <_init>
 8008acc:	1b64      	subs	r4, r4, r5
 8008ace:	10a4      	asrs	r4, r4, #2
 8008ad0:	2600      	movs	r6, #0
 8008ad2:	42a6      	cmp	r6, r4
 8008ad4:	d105      	bne.n	8008ae2 <__libc_init_array+0x2e>
 8008ad6:	bd70      	pop	{r4, r5, r6, pc}
 8008ad8:	f855 3b04 	ldr.w	r3, [r5], #4
 8008adc:	4798      	blx	r3
 8008ade:	3601      	adds	r6, #1
 8008ae0:	e7ee      	b.n	8008ac0 <__libc_init_array+0xc>
 8008ae2:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ae6:	4798      	blx	r3
 8008ae8:	3601      	adds	r6, #1
 8008aea:	e7f2      	b.n	8008ad2 <__libc_init_array+0x1e>
 8008aec:	0800b02c 	.word	0x0800b02c
 8008af0:	0800b02c 	.word	0x0800b02c
 8008af4:	0800b02c 	.word	0x0800b02c
 8008af8:	0800b030 	.word	0x0800b030

08008afc <__retarget_lock_init_recursive>:
 8008afc:	4770      	bx	lr

08008afe <__retarget_lock_acquire_recursive>:
 8008afe:	4770      	bx	lr

08008b00 <__retarget_lock_release_recursive>:
 8008b00:	4770      	bx	lr

08008b02 <quorem>:
 8008b02:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b06:	6903      	ldr	r3, [r0, #16]
 8008b08:	690c      	ldr	r4, [r1, #16]
 8008b0a:	42a3      	cmp	r3, r4
 8008b0c:	4607      	mov	r7, r0
 8008b0e:	db7e      	blt.n	8008c0e <quorem+0x10c>
 8008b10:	3c01      	subs	r4, #1
 8008b12:	f101 0814 	add.w	r8, r1, #20
 8008b16:	f100 0514 	add.w	r5, r0, #20
 8008b1a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008b1e:	9301      	str	r3, [sp, #4]
 8008b20:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008b24:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008b28:	3301      	adds	r3, #1
 8008b2a:	429a      	cmp	r2, r3
 8008b2c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008b30:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008b34:	fbb2 f6f3 	udiv	r6, r2, r3
 8008b38:	d331      	bcc.n	8008b9e <quorem+0x9c>
 8008b3a:	f04f 0e00 	mov.w	lr, #0
 8008b3e:	4640      	mov	r0, r8
 8008b40:	46ac      	mov	ip, r5
 8008b42:	46f2      	mov	sl, lr
 8008b44:	f850 2b04 	ldr.w	r2, [r0], #4
 8008b48:	b293      	uxth	r3, r2
 8008b4a:	fb06 e303 	mla	r3, r6, r3, lr
 8008b4e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008b52:	0c1a      	lsrs	r2, r3, #16
 8008b54:	b29b      	uxth	r3, r3
 8008b56:	ebaa 0303 	sub.w	r3, sl, r3
 8008b5a:	f8dc a000 	ldr.w	sl, [ip]
 8008b5e:	fa13 f38a 	uxtah	r3, r3, sl
 8008b62:	fb06 220e 	mla	r2, r6, lr, r2
 8008b66:	9300      	str	r3, [sp, #0]
 8008b68:	9b00      	ldr	r3, [sp, #0]
 8008b6a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008b6e:	b292      	uxth	r2, r2
 8008b70:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008b74:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008b78:	f8bd 3000 	ldrh.w	r3, [sp]
 8008b7c:	4581      	cmp	r9, r0
 8008b7e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008b82:	f84c 3b04 	str.w	r3, [ip], #4
 8008b86:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008b8a:	d2db      	bcs.n	8008b44 <quorem+0x42>
 8008b8c:	f855 300b 	ldr.w	r3, [r5, fp]
 8008b90:	b92b      	cbnz	r3, 8008b9e <quorem+0x9c>
 8008b92:	9b01      	ldr	r3, [sp, #4]
 8008b94:	3b04      	subs	r3, #4
 8008b96:	429d      	cmp	r5, r3
 8008b98:	461a      	mov	r2, r3
 8008b9a:	d32c      	bcc.n	8008bf6 <quorem+0xf4>
 8008b9c:	613c      	str	r4, [r7, #16]
 8008b9e:	4638      	mov	r0, r7
 8008ba0:	f001 f9a8 	bl	8009ef4 <__mcmp>
 8008ba4:	2800      	cmp	r0, #0
 8008ba6:	db22      	blt.n	8008bee <quorem+0xec>
 8008ba8:	3601      	adds	r6, #1
 8008baa:	4629      	mov	r1, r5
 8008bac:	2000      	movs	r0, #0
 8008bae:	f858 2b04 	ldr.w	r2, [r8], #4
 8008bb2:	f8d1 c000 	ldr.w	ip, [r1]
 8008bb6:	b293      	uxth	r3, r2
 8008bb8:	1ac3      	subs	r3, r0, r3
 8008bba:	0c12      	lsrs	r2, r2, #16
 8008bbc:	fa13 f38c 	uxtah	r3, r3, ip
 8008bc0:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8008bc4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008bc8:	b29b      	uxth	r3, r3
 8008bca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008bce:	45c1      	cmp	r9, r8
 8008bd0:	f841 3b04 	str.w	r3, [r1], #4
 8008bd4:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008bd8:	d2e9      	bcs.n	8008bae <quorem+0xac>
 8008bda:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008bde:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008be2:	b922      	cbnz	r2, 8008bee <quorem+0xec>
 8008be4:	3b04      	subs	r3, #4
 8008be6:	429d      	cmp	r5, r3
 8008be8:	461a      	mov	r2, r3
 8008bea:	d30a      	bcc.n	8008c02 <quorem+0x100>
 8008bec:	613c      	str	r4, [r7, #16]
 8008bee:	4630      	mov	r0, r6
 8008bf0:	b003      	add	sp, #12
 8008bf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bf6:	6812      	ldr	r2, [r2, #0]
 8008bf8:	3b04      	subs	r3, #4
 8008bfa:	2a00      	cmp	r2, #0
 8008bfc:	d1ce      	bne.n	8008b9c <quorem+0x9a>
 8008bfe:	3c01      	subs	r4, #1
 8008c00:	e7c9      	b.n	8008b96 <quorem+0x94>
 8008c02:	6812      	ldr	r2, [r2, #0]
 8008c04:	3b04      	subs	r3, #4
 8008c06:	2a00      	cmp	r2, #0
 8008c08:	d1f0      	bne.n	8008bec <quorem+0xea>
 8008c0a:	3c01      	subs	r4, #1
 8008c0c:	e7eb      	b.n	8008be6 <quorem+0xe4>
 8008c0e:	2000      	movs	r0, #0
 8008c10:	e7ee      	b.n	8008bf0 <quorem+0xee>
 8008c12:	0000      	movs	r0, r0
 8008c14:	0000      	movs	r0, r0
	...

08008c18 <_dtoa_r>:
 8008c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c1c:	ed2d 8b04 	vpush	{d8-d9}
 8008c20:	69c5      	ldr	r5, [r0, #28]
 8008c22:	b093      	sub	sp, #76	; 0x4c
 8008c24:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008c28:	ec57 6b10 	vmov	r6, r7, d0
 8008c2c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008c30:	9107      	str	r1, [sp, #28]
 8008c32:	4604      	mov	r4, r0
 8008c34:	920a      	str	r2, [sp, #40]	; 0x28
 8008c36:	930d      	str	r3, [sp, #52]	; 0x34
 8008c38:	b975      	cbnz	r5, 8008c58 <_dtoa_r+0x40>
 8008c3a:	2010      	movs	r0, #16
 8008c3c:	f000 fe2a 	bl	8009894 <malloc>
 8008c40:	4602      	mov	r2, r0
 8008c42:	61e0      	str	r0, [r4, #28]
 8008c44:	b920      	cbnz	r0, 8008c50 <_dtoa_r+0x38>
 8008c46:	4bae      	ldr	r3, [pc, #696]	; (8008f00 <_dtoa_r+0x2e8>)
 8008c48:	21ef      	movs	r1, #239	; 0xef
 8008c4a:	48ae      	ldr	r0, [pc, #696]	; (8008f04 <_dtoa_r+0x2ec>)
 8008c4c:	f001 fc90 	bl	800a570 <__assert_func>
 8008c50:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008c54:	6005      	str	r5, [r0, #0]
 8008c56:	60c5      	str	r5, [r0, #12]
 8008c58:	69e3      	ldr	r3, [r4, #28]
 8008c5a:	6819      	ldr	r1, [r3, #0]
 8008c5c:	b151      	cbz	r1, 8008c74 <_dtoa_r+0x5c>
 8008c5e:	685a      	ldr	r2, [r3, #4]
 8008c60:	604a      	str	r2, [r1, #4]
 8008c62:	2301      	movs	r3, #1
 8008c64:	4093      	lsls	r3, r2
 8008c66:	608b      	str	r3, [r1, #8]
 8008c68:	4620      	mov	r0, r4
 8008c6a:	f000 ff07 	bl	8009a7c <_Bfree>
 8008c6e:	69e3      	ldr	r3, [r4, #28]
 8008c70:	2200      	movs	r2, #0
 8008c72:	601a      	str	r2, [r3, #0]
 8008c74:	1e3b      	subs	r3, r7, #0
 8008c76:	bfbb      	ittet	lt
 8008c78:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008c7c:	9303      	strlt	r3, [sp, #12]
 8008c7e:	2300      	movge	r3, #0
 8008c80:	2201      	movlt	r2, #1
 8008c82:	bfac      	ite	ge
 8008c84:	f8c8 3000 	strge.w	r3, [r8]
 8008c88:	f8c8 2000 	strlt.w	r2, [r8]
 8008c8c:	4b9e      	ldr	r3, [pc, #632]	; (8008f08 <_dtoa_r+0x2f0>)
 8008c8e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008c92:	ea33 0308 	bics.w	r3, r3, r8
 8008c96:	d11b      	bne.n	8008cd0 <_dtoa_r+0xb8>
 8008c98:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008c9a:	f242 730f 	movw	r3, #9999	; 0x270f
 8008c9e:	6013      	str	r3, [r2, #0]
 8008ca0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8008ca4:	4333      	orrs	r3, r6
 8008ca6:	f000 8593 	beq.w	80097d0 <_dtoa_r+0xbb8>
 8008caa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008cac:	b963      	cbnz	r3, 8008cc8 <_dtoa_r+0xb0>
 8008cae:	4b97      	ldr	r3, [pc, #604]	; (8008f0c <_dtoa_r+0x2f4>)
 8008cb0:	e027      	b.n	8008d02 <_dtoa_r+0xea>
 8008cb2:	4b97      	ldr	r3, [pc, #604]	; (8008f10 <_dtoa_r+0x2f8>)
 8008cb4:	9300      	str	r3, [sp, #0]
 8008cb6:	3308      	adds	r3, #8
 8008cb8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008cba:	6013      	str	r3, [r2, #0]
 8008cbc:	9800      	ldr	r0, [sp, #0]
 8008cbe:	b013      	add	sp, #76	; 0x4c
 8008cc0:	ecbd 8b04 	vpop	{d8-d9}
 8008cc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cc8:	4b90      	ldr	r3, [pc, #576]	; (8008f0c <_dtoa_r+0x2f4>)
 8008cca:	9300      	str	r3, [sp, #0]
 8008ccc:	3303      	adds	r3, #3
 8008cce:	e7f3      	b.n	8008cb8 <_dtoa_r+0xa0>
 8008cd0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	ec51 0b17 	vmov	r0, r1, d7
 8008cda:	eeb0 8a47 	vmov.f32	s16, s14
 8008cde:	eef0 8a67 	vmov.f32	s17, s15
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	f7f7 fef0 	bl	8000ac8 <__aeabi_dcmpeq>
 8008ce8:	4681      	mov	r9, r0
 8008cea:	b160      	cbz	r0, 8008d06 <_dtoa_r+0xee>
 8008cec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008cee:	2301      	movs	r3, #1
 8008cf0:	6013      	str	r3, [r2, #0]
 8008cf2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	f000 8568 	beq.w	80097ca <_dtoa_r+0xbb2>
 8008cfa:	4b86      	ldr	r3, [pc, #536]	; (8008f14 <_dtoa_r+0x2fc>)
 8008cfc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008cfe:	6013      	str	r3, [r2, #0]
 8008d00:	3b01      	subs	r3, #1
 8008d02:	9300      	str	r3, [sp, #0]
 8008d04:	e7da      	b.n	8008cbc <_dtoa_r+0xa4>
 8008d06:	aa10      	add	r2, sp, #64	; 0x40
 8008d08:	a911      	add	r1, sp, #68	; 0x44
 8008d0a:	4620      	mov	r0, r4
 8008d0c:	eeb0 0a48 	vmov.f32	s0, s16
 8008d10:	eef0 0a68 	vmov.f32	s1, s17
 8008d14:	f001 f994 	bl	800a040 <__d2b>
 8008d18:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008d1c:	4682      	mov	sl, r0
 8008d1e:	2d00      	cmp	r5, #0
 8008d20:	d07f      	beq.n	8008e22 <_dtoa_r+0x20a>
 8008d22:	ee18 3a90 	vmov	r3, s17
 8008d26:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008d2a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8008d2e:	ec51 0b18 	vmov	r0, r1, d8
 8008d32:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008d36:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008d3a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8008d3e:	4619      	mov	r1, r3
 8008d40:	2200      	movs	r2, #0
 8008d42:	4b75      	ldr	r3, [pc, #468]	; (8008f18 <_dtoa_r+0x300>)
 8008d44:	f7f7 faa0 	bl	8000288 <__aeabi_dsub>
 8008d48:	a367      	add	r3, pc, #412	; (adr r3, 8008ee8 <_dtoa_r+0x2d0>)
 8008d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d4e:	f7f7 fc53 	bl	80005f8 <__aeabi_dmul>
 8008d52:	a367      	add	r3, pc, #412	; (adr r3, 8008ef0 <_dtoa_r+0x2d8>)
 8008d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d58:	f7f7 fa98 	bl	800028c <__adddf3>
 8008d5c:	4606      	mov	r6, r0
 8008d5e:	4628      	mov	r0, r5
 8008d60:	460f      	mov	r7, r1
 8008d62:	f7f7 fbdf 	bl	8000524 <__aeabi_i2d>
 8008d66:	a364      	add	r3, pc, #400	; (adr r3, 8008ef8 <_dtoa_r+0x2e0>)
 8008d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d6c:	f7f7 fc44 	bl	80005f8 <__aeabi_dmul>
 8008d70:	4602      	mov	r2, r0
 8008d72:	460b      	mov	r3, r1
 8008d74:	4630      	mov	r0, r6
 8008d76:	4639      	mov	r1, r7
 8008d78:	f7f7 fa88 	bl	800028c <__adddf3>
 8008d7c:	4606      	mov	r6, r0
 8008d7e:	460f      	mov	r7, r1
 8008d80:	f7f7 feea 	bl	8000b58 <__aeabi_d2iz>
 8008d84:	2200      	movs	r2, #0
 8008d86:	4683      	mov	fp, r0
 8008d88:	2300      	movs	r3, #0
 8008d8a:	4630      	mov	r0, r6
 8008d8c:	4639      	mov	r1, r7
 8008d8e:	f7f7 fea5 	bl	8000adc <__aeabi_dcmplt>
 8008d92:	b148      	cbz	r0, 8008da8 <_dtoa_r+0x190>
 8008d94:	4658      	mov	r0, fp
 8008d96:	f7f7 fbc5 	bl	8000524 <__aeabi_i2d>
 8008d9a:	4632      	mov	r2, r6
 8008d9c:	463b      	mov	r3, r7
 8008d9e:	f7f7 fe93 	bl	8000ac8 <__aeabi_dcmpeq>
 8008da2:	b908      	cbnz	r0, 8008da8 <_dtoa_r+0x190>
 8008da4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008da8:	f1bb 0f16 	cmp.w	fp, #22
 8008dac:	d857      	bhi.n	8008e5e <_dtoa_r+0x246>
 8008dae:	4b5b      	ldr	r3, [pc, #364]	; (8008f1c <_dtoa_r+0x304>)
 8008db0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008db8:	ec51 0b18 	vmov	r0, r1, d8
 8008dbc:	f7f7 fe8e 	bl	8000adc <__aeabi_dcmplt>
 8008dc0:	2800      	cmp	r0, #0
 8008dc2:	d04e      	beq.n	8008e62 <_dtoa_r+0x24a>
 8008dc4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008dc8:	2300      	movs	r3, #0
 8008dca:	930c      	str	r3, [sp, #48]	; 0x30
 8008dcc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008dce:	1b5b      	subs	r3, r3, r5
 8008dd0:	1e5a      	subs	r2, r3, #1
 8008dd2:	bf45      	ittet	mi
 8008dd4:	f1c3 0301 	rsbmi	r3, r3, #1
 8008dd8:	9305      	strmi	r3, [sp, #20]
 8008dda:	2300      	movpl	r3, #0
 8008ddc:	2300      	movmi	r3, #0
 8008dde:	9206      	str	r2, [sp, #24]
 8008de0:	bf54      	ite	pl
 8008de2:	9305      	strpl	r3, [sp, #20]
 8008de4:	9306      	strmi	r3, [sp, #24]
 8008de6:	f1bb 0f00 	cmp.w	fp, #0
 8008dea:	db3c      	blt.n	8008e66 <_dtoa_r+0x24e>
 8008dec:	9b06      	ldr	r3, [sp, #24]
 8008dee:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8008df2:	445b      	add	r3, fp
 8008df4:	9306      	str	r3, [sp, #24]
 8008df6:	2300      	movs	r3, #0
 8008df8:	9308      	str	r3, [sp, #32]
 8008dfa:	9b07      	ldr	r3, [sp, #28]
 8008dfc:	2b09      	cmp	r3, #9
 8008dfe:	d868      	bhi.n	8008ed2 <_dtoa_r+0x2ba>
 8008e00:	2b05      	cmp	r3, #5
 8008e02:	bfc4      	itt	gt
 8008e04:	3b04      	subgt	r3, #4
 8008e06:	9307      	strgt	r3, [sp, #28]
 8008e08:	9b07      	ldr	r3, [sp, #28]
 8008e0a:	f1a3 0302 	sub.w	r3, r3, #2
 8008e0e:	bfcc      	ite	gt
 8008e10:	2500      	movgt	r5, #0
 8008e12:	2501      	movle	r5, #1
 8008e14:	2b03      	cmp	r3, #3
 8008e16:	f200 8085 	bhi.w	8008f24 <_dtoa_r+0x30c>
 8008e1a:	e8df f003 	tbb	[pc, r3]
 8008e1e:	3b2e      	.short	0x3b2e
 8008e20:	5839      	.short	0x5839
 8008e22:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008e26:	441d      	add	r5, r3
 8008e28:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008e2c:	2b20      	cmp	r3, #32
 8008e2e:	bfc1      	itttt	gt
 8008e30:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008e34:	fa08 f803 	lslgt.w	r8, r8, r3
 8008e38:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8008e3c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8008e40:	bfd6      	itet	le
 8008e42:	f1c3 0320 	rsble	r3, r3, #32
 8008e46:	ea48 0003 	orrgt.w	r0, r8, r3
 8008e4a:	fa06 f003 	lslle.w	r0, r6, r3
 8008e4e:	f7f7 fb59 	bl	8000504 <__aeabi_ui2d>
 8008e52:	2201      	movs	r2, #1
 8008e54:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8008e58:	3d01      	subs	r5, #1
 8008e5a:	920e      	str	r2, [sp, #56]	; 0x38
 8008e5c:	e76f      	b.n	8008d3e <_dtoa_r+0x126>
 8008e5e:	2301      	movs	r3, #1
 8008e60:	e7b3      	b.n	8008dca <_dtoa_r+0x1b2>
 8008e62:	900c      	str	r0, [sp, #48]	; 0x30
 8008e64:	e7b2      	b.n	8008dcc <_dtoa_r+0x1b4>
 8008e66:	9b05      	ldr	r3, [sp, #20]
 8008e68:	eba3 030b 	sub.w	r3, r3, fp
 8008e6c:	9305      	str	r3, [sp, #20]
 8008e6e:	f1cb 0300 	rsb	r3, fp, #0
 8008e72:	9308      	str	r3, [sp, #32]
 8008e74:	2300      	movs	r3, #0
 8008e76:	930b      	str	r3, [sp, #44]	; 0x2c
 8008e78:	e7bf      	b.n	8008dfa <_dtoa_r+0x1e2>
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	9309      	str	r3, [sp, #36]	; 0x24
 8008e7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	dc52      	bgt.n	8008f2a <_dtoa_r+0x312>
 8008e84:	2301      	movs	r3, #1
 8008e86:	9301      	str	r3, [sp, #4]
 8008e88:	9304      	str	r3, [sp, #16]
 8008e8a:	461a      	mov	r2, r3
 8008e8c:	920a      	str	r2, [sp, #40]	; 0x28
 8008e8e:	e00b      	b.n	8008ea8 <_dtoa_r+0x290>
 8008e90:	2301      	movs	r3, #1
 8008e92:	e7f3      	b.n	8008e7c <_dtoa_r+0x264>
 8008e94:	2300      	movs	r3, #0
 8008e96:	9309      	str	r3, [sp, #36]	; 0x24
 8008e98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e9a:	445b      	add	r3, fp
 8008e9c:	9301      	str	r3, [sp, #4]
 8008e9e:	3301      	adds	r3, #1
 8008ea0:	2b01      	cmp	r3, #1
 8008ea2:	9304      	str	r3, [sp, #16]
 8008ea4:	bfb8      	it	lt
 8008ea6:	2301      	movlt	r3, #1
 8008ea8:	69e0      	ldr	r0, [r4, #28]
 8008eaa:	2100      	movs	r1, #0
 8008eac:	2204      	movs	r2, #4
 8008eae:	f102 0614 	add.w	r6, r2, #20
 8008eb2:	429e      	cmp	r6, r3
 8008eb4:	d93d      	bls.n	8008f32 <_dtoa_r+0x31a>
 8008eb6:	6041      	str	r1, [r0, #4]
 8008eb8:	4620      	mov	r0, r4
 8008eba:	f000 fd9f 	bl	80099fc <_Balloc>
 8008ebe:	9000      	str	r0, [sp, #0]
 8008ec0:	2800      	cmp	r0, #0
 8008ec2:	d139      	bne.n	8008f38 <_dtoa_r+0x320>
 8008ec4:	4b16      	ldr	r3, [pc, #88]	; (8008f20 <_dtoa_r+0x308>)
 8008ec6:	4602      	mov	r2, r0
 8008ec8:	f240 11af 	movw	r1, #431	; 0x1af
 8008ecc:	e6bd      	b.n	8008c4a <_dtoa_r+0x32>
 8008ece:	2301      	movs	r3, #1
 8008ed0:	e7e1      	b.n	8008e96 <_dtoa_r+0x27e>
 8008ed2:	2501      	movs	r5, #1
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	9307      	str	r3, [sp, #28]
 8008ed8:	9509      	str	r5, [sp, #36]	; 0x24
 8008eda:	f04f 33ff 	mov.w	r3, #4294967295
 8008ede:	9301      	str	r3, [sp, #4]
 8008ee0:	9304      	str	r3, [sp, #16]
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	2312      	movs	r3, #18
 8008ee6:	e7d1      	b.n	8008e8c <_dtoa_r+0x274>
 8008ee8:	636f4361 	.word	0x636f4361
 8008eec:	3fd287a7 	.word	0x3fd287a7
 8008ef0:	8b60c8b3 	.word	0x8b60c8b3
 8008ef4:	3fc68a28 	.word	0x3fc68a28
 8008ef8:	509f79fb 	.word	0x509f79fb
 8008efc:	3fd34413 	.word	0x3fd34413
 8008f00:	0800acf5 	.word	0x0800acf5
 8008f04:	0800ad0c 	.word	0x0800ad0c
 8008f08:	7ff00000 	.word	0x7ff00000
 8008f0c:	0800acf1 	.word	0x0800acf1
 8008f10:	0800ace8 	.word	0x0800ace8
 8008f14:	0800acc5 	.word	0x0800acc5
 8008f18:	3ff80000 	.word	0x3ff80000
 8008f1c:	0800adf8 	.word	0x0800adf8
 8008f20:	0800ad64 	.word	0x0800ad64
 8008f24:	2301      	movs	r3, #1
 8008f26:	9309      	str	r3, [sp, #36]	; 0x24
 8008f28:	e7d7      	b.n	8008eda <_dtoa_r+0x2c2>
 8008f2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f2c:	9301      	str	r3, [sp, #4]
 8008f2e:	9304      	str	r3, [sp, #16]
 8008f30:	e7ba      	b.n	8008ea8 <_dtoa_r+0x290>
 8008f32:	3101      	adds	r1, #1
 8008f34:	0052      	lsls	r2, r2, #1
 8008f36:	e7ba      	b.n	8008eae <_dtoa_r+0x296>
 8008f38:	69e3      	ldr	r3, [r4, #28]
 8008f3a:	9a00      	ldr	r2, [sp, #0]
 8008f3c:	601a      	str	r2, [r3, #0]
 8008f3e:	9b04      	ldr	r3, [sp, #16]
 8008f40:	2b0e      	cmp	r3, #14
 8008f42:	f200 80a8 	bhi.w	8009096 <_dtoa_r+0x47e>
 8008f46:	2d00      	cmp	r5, #0
 8008f48:	f000 80a5 	beq.w	8009096 <_dtoa_r+0x47e>
 8008f4c:	f1bb 0f00 	cmp.w	fp, #0
 8008f50:	dd38      	ble.n	8008fc4 <_dtoa_r+0x3ac>
 8008f52:	4bc0      	ldr	r3, [pc, #768]	; (8009254 <_dtoa_r+0x63c>)
 8008f54:	f00b 020f 	and.w	r2, fp, #15
 8008f58:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008f5c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008f60:	e9d3 6700 	ldrd	r6, r7, [r3]
 8008f64:	ea4f 182b 	mov.w	r8, fp, asr #4
 8008f68:	d019      	beq.n	8008f9e <_dtoa_r+0x386>
 8008f6a:	4bbb      	ldr	r3, [pc, #748]	; (8009258 <_dtoa_r+0x640>)
 8008f6c:	ec51 0b18 	vmov	r0, r1, d8
 8008f70:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008f74:	f7f7 fc6a 	bl	800084c <__aeabi_ddiv>
 8008f78:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008f7c:	f008 080f 	and.w	r8, r8, #15
 8008f80:	2503      	movs	r5, #3
 8008f82:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8009258 <_dtoa_r+0x640>
 8008f86:	f1b8 0f00 	cmp.w	r8, #0
 8008f8a:	d10a      	bne.n	8008fa2 <_dtoa_r+0x38a>
 8008f8c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008f90:	4632      	mov	r2, r6
 8008f92:	463b      	mov	r3, r7
 8008f94:	f7f7 fc5a 	bl	800084c <__aeabi_ddiv>
 8008f98:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008f9c:	e02b      	b.n	8008ff6 <_dtoa_r+0x3de>
 8008f9e:	2502      	movs	r5, #2
 8008fa0:	e7ef      	b.n	8008f82 <_dtoa_r+0x36a>
 8008fa2:	f018 0f01 	tst.w	r8, #1
 8008fa6:	d008      	beq.n	8008fba <_dtoa_r+0x3a2>
 8008fa8:	4630      	mov	r0, r6
 8008faa:	4639      	mov	r1, r7
 8008fac:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008fb0:	f7f7 fb22 	bl	80005f8 <__aeabi_dmul>
 8008fb4:	3501      	adds	r5, #1
 8008fb6:	4606      	mov	r6, r0
 8008fb8:	460f      	mov	r7, r1
 8008fba:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008fbe:	f109 0908 	add.w	r9, r9, #8
 8008fc2:	e7e0      	b.n	8008f86 <_dtoa_r+0x36e>
 8008fc4:	f000 809f 	beq.w	8009106 <_dtoa_r+0x4ee>
 8008fc8:	f1cb 0600 	rsb	r6, fp, #0
 8008fcc:	4ba1      	ldr	r3, [pc, #644]	; (8009254 <_dtoa_r+0x63c>)
 8008fce:	4fa2      	ldr	r7, [pc, #648]	; (8009258 <_dtoa_r+0x640>)
 8008fd0:	f006 020f 	and.w	r2, r6, #15
 8008fd4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fdc:	ec51 0b18 	vmov	r0, r1, d8
 8008fe0:	f7f7 fb0a 	bl	80005f8 <__aeabi_dmul>
 8008fe4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008fe8:	1136      	asrs	r6, r6, #4
 8008fea:	2300      	movs	r3, #0
 8008fec:	2502      	movs	r5, #2
 8008fee:	2e00      	cmp	r6, #0
 8008ff0:	d17e      	bne.n	80090f0 <_dtoa_r+0x4d8>
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d1d0      	bne.n	8008f98 <_dtoa_r+0x380>
 8008ff6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008ff8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	f000 8084 	beq.w	800910a <_dtoa_r+0x4f2>
 8009002:	4b96      	ldr	r3, [pc, #600]	; (800925c <_dtoa_r+0x644>)
 8009004:	2200      	movs	r2, #0
 8009006:	4640      	mov	r0, r8
 8009008:	4649      	mov	r1, r9
 800900a:	f7f7 fd67 	bl	8000adc <__aeabi_dcmplt>
 800900e:	2800      	cmp	r0, #0
 8009010:	d07b      	beq.n	800910a <_dtoa_r+0x4f2>
 8009012:	9b04      	ldr	r3, [sp, #16]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d078      	beq.n	800910a <_dtoa_r+0x4f2>
 8009018:	9b01      	ldr	r3, [sp, #4]
 800901a:	2b00      	cmp	r3, #0
 800901c:	dd39      	ble.n	8009092 <_dtoa_r+0x47a>
 800901e:	4b90      	ldr	r3, [pc, #576]	; (8009260 <_dtoa_r+0x648>)
 8009020:	2200      	movs	r2, #0
 8009022:	4640      	mov	r0, r8
 8009024:	4649      	mov	r1, r9
 8009026:	f7f7 fae7 	bl	80005f8 <__aeabi_dmul>
 800902a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800902e:	9e01      	ldr	r6, [sp, #4]
 8009030:	f10b 37ff 	add.w	r7, fp, #4294967295
 8009034:	3501      	adds	r5, #1
 8009036:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800903a:	4628      	mov	r0, r5
 800903c:	f7f7 fa72 	bl	8000524 <__aeabi_i2d>
 8009040:	4642      	mov	r2, r8
 8009042:	464b      	mov	r3, r9
 8009044:	f7f7 fad8 	bl	80005f8 <__aeabi_dmul>
 8009048:	4b86      	ldr	r3, [pc, #536]	; (8009264 <_dtoa_r+0x64c>)
 800904a:	2200      	movs	r2, #0
 800904c:	f7f7 f91e 	bl	800028c <__adddf3>
 8009050:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8009054:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009058:	9303      	str	r3, [sp, #12]
 800905a:	2e00      	cmp	r6, #0
 800905c:	d158      	bne.n	8009110 <_dtoa_r+0x4f8>
 800905e:	4b82      	ldr	r3, [pc, #520]	; (8009268 <_dtoa_r+0x650>)
 8009060:	2200      	movs	r2, #0
 8009062:	4640      	mov	r0, r8
 8009064:	4649      	mov	r1, r9
 8009066:	f7f7 f90f 	bl	8000288 <__aeabi_dsub>
 800906a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800906e:	4680      	mov	r8, r0
 8009070:	4689      	mov	r9, r1
 8009072:	f7f7 fd51 	bl	8000b18 <__aeabi_dcmpgt>
 8009076:	2800      	cmp	r0, #0
 8009078:	f040 8296 	bne.w	80095a8 <_dtoa_r+0x990>
 800907c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009080:	4640      	mov	r0, r8
 8009082:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009086:	4649      	mov	r1, r9
 8009088:	f7f7 fd28 	bl	8000adc <__aeabi_dcmplt>
 800908c:	2800      	cmp	r0, #0
 800908e:	f040 8289 	bne.w	80095a4 <_dtoa_r+0x98c>
 8009092:	ed8d 8b02 	vstr	d8, [sp, #8]
 8009096:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009098:	2b00      	cmp	r3, #0
 800909a:	f2c0 814e 	blt.w	800933a <_dtoa_r+0x722>
 800909e:	f1bb 0f0e 	cmp.w	fp, #14
 80090a2:	f300 814a 	bgt.w	800933a <_dtoa_r+0x722>
 80090a6:	4b6b      	ldr	r3, [pc, #428]	; (8009254 <_dtoa_r+0x63c>)
 80090a8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80090ac:	e9d3 8900 	ldrd	r8, r9, [r3]
 80090b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	f280 80dc 	bge.w	8009270 <_dtoa_r+0x658>
 80090b8:	9b04      	ldr	r3, [sp, #16]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	f300 80d8 	bgt.w	8009270 <_dtoa_r+0x658>
 80090c0:	f040 826f 	bne.w	80095a2 <_dtoa_r+0x98a>
 80090c4:	4b68      	ldr	r3, [pc, #416]	; (8009268 <_dtoa_r+0x650>)
 80090c6:	2200      	movs	r2, #0
 80090c8:	4640      	mov	r0, r8
 80090ca:	4649      	mov	r1, r9
 80090cc:	f7f7 fa94 	bl	80005f8 <__aeabi_dmul>
 80090d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80090d4:	f7f7 fd16 	bl	8000b04 <__aeabi_dcmpge>
 80090d8:	9e04      	ldr	r6, [sp, #16]
 80090da:	4637      	mov	r7, r6
 80090dc:	2800      	cmp	r0, #0
 80090de:	f040 8245 	bne.w	800956c <_dtoa_r+0x954>
 80090e2:	9d00      	ldr	r5, [sp, #0]
 80090e4:	2331      	movs	r3, #49	; 0x31
 80090e6:	f805 3b01 	strb.w	r3, [r5], #1
 80090ea:	f10b 0b01 	add.w	fp, fp, #1
 80090ee:	e241      	b.n	8009574 <_dtoa_r+0x95c>
 80090f0:	07f2      	lsls	r2, r6, #31
 80090f2:	d505      	bpl.n	8009100 <_dtoa_r+0x4e8>
 80090f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80090f8:	f7f7 fa7e 	bl	80005f8 <__aeabi_dmul>
 80090fc:	3501      	adds	r5, #1
 80090fe:	2301      	movs	r3, #1
 8009100:	1076      	asrs	r6, r6, #1
 8009102:	3708      	adds	r7, #8
 8009104:	e773      	b.n	8008fee <_dtoa_r+0x3d6>
 8009106:	2502      	movs	r5, #2
 8009108:	e775      	b.n	8008ff6 <_dtoa_r+0x3de>
 800910a:	9e04      	ldr	r6, [sp, #16]
 800910c:	465f      	mov	r7, fp
 800910e:	e792      	b.n	8009036 <_dtoa_r+0x41e>
 8009110:	9900      	ldr	r1, [sp, #0]
 8009112:	4b50      	ldr	r3, [pc, #320]	; (8009254 <_dtoa_r+0x63c>)
 8009114:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009118:	4431      	add	r1, r6
 800911a:	9102      	str	r1, [sp, #8]
 800911c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800911e:	eeb0 9a47 	vmov.f32	s18, s14
 8009122:	eef0 9a67 	vmov.f32	s19, s15
 8009126:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800912a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800912e:	2900      	cmp	r1, #0
 8009130:	d044      	beq.n	80091bc <_dtoa_r+0x5a4>
 8009132:	494e      	ldr	r1, [pc, #312]	; (800926c <_dtoa_r+0x654>)
 8009134:	2000      	movs	r0, #0
 8009136:	f7f7 fb89 	bl	800084c <__aeabi_ddiv>
 800913a:	ec53 2b19 	vmov	r2, r3, d9
 800913e:	f7f7 f8a3 	bl	8000288 <__aeabi_dsub>
 8009142:	9d00      	ldr	r5, [sp, #0]
 8009144:	ec41 0b19 	vmov	d9, r0, r1
 8009148:	4649      	mov	r1, r9
 800914a:	4640      	mov	r0, r8
 800914c:	f7f7 fd04 	bl	8000b58 <__aeabi_d2iz>
 8009150:	4606      	mov	r6, r0
 8009152:	f7f7 f9e7 	bl	8000524 <__aeabi_i2d>
 8009156:	4602      	mov	r2, r0
 8009158:	460b      	mov	r3, r1
 800915a:	4640      	mov	r0, r8
 800915c:	4649      	mov	r1, r9
 800915e:	f7f7 f893 	bl	8000288 <__aeabi_dsub>
 8009162:	3630      	adds	r6, #48	; 0x30
 8009164:	f805 6b01 	strb.w	r6, [r5], #1
 8009168:	ec53 2b19 	vmov	r2, r3, d9
 800916c:	4680      	mov	r8, r0
 800916e:	4689      	mov	r9, r1
 8009170:	f7f7 fcb4 	bl	8000adc <__aeabi_dcmplt>
 8009174:	2800      	cmp	r0, #0
 8009176:	d164      	bne.n	8009242 <_dtoa_r+0x62a>
 8009178:	4642      	mov	r2, r8
 800917a:	464b      	mov	r3, r9
 800917c:	4937      	ldr	r1, [pc, #220]	; (800925c <_dtoa_r+0x644>)
 800917e:	2000      	movs	r0, #0
 8009180:	f7f7 f882 	bl	8000288 <__aeabi_dsub>
 8009184:	ec53 2b19 	vmov	r2, r3, d9
 8009188:	f7f7 fca8 	bl	8000adc <__aeabi_dcmplt>
 800918c:	2800      	cmp	r0, #0
 800918e:	f040 80b6 	bne.w	80092fe <_dtoa_r+0x6e6>
 8009192:	9b02      	ldr	r3, [sp, #8]
 8009194:	429d      	cmp	r5, r3
 8009196:	f43f af7c 	beq.w	8009092 <_dtoa_r+0x47a>
 800919a:	4b31      	ldr	r3, [pc, #196]	; (8009260 <_dtoa_r+0x648>)
 800919c:	ec51 0b19 	vmov	r0, r1, d9
 80091a0:	2200      	movs	r2, #0
 80091a2:	f7f7 fa29 	bl	80005f8 <__aeabi_dmul>
 80091a6:	4b2e      	ldr	r3, [pc, #184]	; (8009260 <_dtoa_r+0x648>)
 80091a8:	ec41 0b19 	vmov	d9, r0, r1
 80091ac:	2200      	movs	r2, #0
 80091ae:	4640      	mov	r0, r8
 80091b0:	4649      	mov	r1, r9
 80091b2:	f7f7 fa21 	bl	80005f8 <__aeabi_dmul>
 80091b6:	4680      	mov	r8, r0
 80091b8:	4689      	mov	r9, r1
 80091ba:	e7c5      	b.n	8009148 <_dtoa_r+0x530>
 80091bc:	ec51 0b17 	vmov	r0, r1, d7
 80091c0:	f7f7 fa1a 	bl	80005f8 <__aeabi_dmul>
 80091c4:	9b02      	ldr	r3, [sp, #8]
 80091c6:	9d00      	ldr	r5, [sp, #0]
 80091c8:	930f      	str	r3, [sp, #60]	; 0x3c
 80091ca:	ec41 0b19 	vmov	d9, r0, r1
 80091ce:	4649      	mov	r1, r9
 80091d0:	4640      	mov	r0, r8
 80091d2:	f7f7 fcc1 	bl	8000b58 <__aeabi_d2iz>
 80091d6:	4606      	mov	r6, r0
 80091d8:	f7f7 f9a4 	bl	8000524 <__aeabi_i2d>
 80091dc:	3630      	adds	r6, #48	; 0x30
 80091de:	4602      	mov	r2, r0
 80091e0:	460b      	mov	r3, r1
 80091e2:	4640      	mov	r0, r8
 80091e4:	4649      	mov	r1, r9
 80091e6:	f7f7 f84f 	bl	8000288 <__aeabi_dsub>
 80091ea:	f805 6b01 	strb.w	r6, [r5], #1
 80091ee:	9b02      	ldr	r3, [sp, #8]
 80091f0:	429d      	cmp	r5, r3
 80091f2:	4680      	mov	r8, r0
 80091f4:	4689      	mov	r9, r1
 80091f6:	f04f 0200 	mov.w	r2, #0
 80091fa:	d124      	bne.n	8009246 <_dtoa_r+0x62e>
 80091fc:	4b1b      	ldr	r3, [pc, #108]	; (800926c <_dtoa_r+0x654>)
 80091fe:	ec51 0b19 	vmov	r0, r1, d9
 8009202:	f7f7 f843 	bl	800028c <__adddf3>
 8009206:	4602      	mov	r2, r0
 8009208:	460b      	mov	r3, r1
 800920a:	4640      	mov	r0, r8
 800920c:	4649      	mov	r1, r9
 800920e:	f7f7 fc83 	bl	8000b18 <__aeabi_dcmpgt>
 8009212:	2800      	cmp	r0, #0
 8009214:	d173      	bne.n	80092fe <_dtoa_r+0x6e6>
 8009216:	ec53 2b19 	vmov	r2, r3, d9
 800921a:	4914      	ldr	r1, [pc, #80]	; (800926c <_dtoa_r+0x654>)
 800921c:	2000      	movs	r0, #0
 800921e:	f7f7 f833 	bl	8000288 <__aeabi_dsub>
 8009222:	4602      	mov	r2, r0
 8009224:	460b      	mov	r3, r1
 8009226:	4640      	mov	r0, r8
 8009228:	4649      	mov	r1, r9
 800922a:	f7f7 fc57 	bl	8000adc <__aeabi_dcmplt>
 800922e:	2800      	cmp	r0, #0
 8009230:	f43f af2f 	beq.w	8009092 <_dtoa_r+0x47a>
 8009234:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009236:	1e6b      	subs	r3, r5, #1
 8009238:	930f      	str	r3, [sp, #60]	; 0x3c
 800923a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800923e:	2b30      	cmp	r3, #48	; 0x30
 8009240:	d0f8      	beq.n	8009234 <_dtoa_r+0x61c>
 8009242:	46bb      	mov	fp, r7
 8009244:	e04a      	b.n	80092dc <_dtoa_r+0x6c4>
 8009246:	4b06      	ldr	r3, [pc, #24]	; (8009260 <_dtoa_r+0x648>)
 8009248:	f7f7 f9d6 	bl	80005f8 <__aeabi_dmul>
 800924c:	4680      	mov	r8, r0
 800924e:	4689      	mov	r9, r1
 8009250:	e7bd      	b.n	80091ce <_dtoa_r+0x5b6>
 8009252:	bf00      	nop
 8009254:	0800adf8 	.word	0x0800adf8
 8009258:	0800add0 	.word	0x0800add0
 800925c:	3ff00000 	.word	0x3ff00000
 8009260:	40240000 	.word	0x40240000
 8009264:	401c0000 	.word	0x401c0000
 8009268:	40140000 	.word	0x40140000
 800926c:	3fe00000 	.word	0x3fe00000
 8009270:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009274:	9d00      	ldr	r5, [sp, #0]
 8009276:	4642      	mov	r2, r8
 8009278:	464b      	mov	r3, r9
 800927a:	4630      	mov	r0, r6
 800927c:	4639      	mov	r1, r7
 800927e:	f7f7 fae5 	bl	800084c <__aeabi_ddiv>
 8009282:	f7f7 fc69 	bl	8000b58 <__aeabi_d2iz>
 8009286:	9001      	str	r0, [sp, #4]
 8009288:	f7f7 f94c 	bl	8000524 <__aeabi_i2d>
 800928c:	4642      	mov	r2, r8
 800928e:	464b      	mov	r3, r9
 8009290:	f7f7 f9b2 	bl	80005f8 <__aeabi_dmul>
 8009294:	4602      	mov	r2, r0
 8009296:	460b      	mov	r3, r1
 8009298:	4630      	mov	r0, r6
 800929a:	4639      	mov	r1, r7
 800929c:	f7f6 fff4 	bl	8000288 <__aeabi_dsub>
 80092a0:	9e01      	ldr	r6, [sp, #4]
 80092a2:	9f04      	ldr	r7, [sp, #16]
 80092a4:	3630      	adds	r6, #48	; 0x30
 80092a6:	f805 6b01 	strb.w	r6, [r5], #1
 80092aa:	9e00      	ldr	r6, [sp, #0]
 80092ac:	1bae      	subs	r6, r5, r6
 80092ae:	42b7      	cmp	r7, r6
 80092b0:	4602      	mov	r2, r0
 80092b2:	460b      	mov	r3, r1
 80092b4:	d134      	bne.n	8009320 <_dtoa_r+0x708>
 80092b6:	f7f6 ffe9 	bl	800028c <__adddf3>
 80092ba:	4642      	mov	r2, r8
 80092bc:	464b      	mov	r3, r9
 80092be:	4606      	mov	r6, r0
 80092c0:	460f      	mov	r7, r1
 80092c2:	f7f7 fc29 	bl	8000b18 <__aeabi_dcmpgt>
 80092c6:	b9c8      	cbnz	r0, 80092fc <_dtoa_r+0x6e4>
 80092c8:	4642      	mov	r2, r8
 80092ca:	464b      	mov	r3, r9
 80092cc:	4630      	mov	r0, r6
 80092ce:	4639      	mov	r1, r7
 80092d0:	f7f7 fbfa 	bl	8000ac8 <__aeabi_dcmpeq>
 80092d4:	b110      	cbz	r0, 80092dc <_dtoa_r+0x6c4>
 80092d6:	9b01      	ldr	r3, [sp, #4]
 80092d8:	07db      	lsls	r3, r3, #31
 80092da:	d40f      	bmi.n	80092fc <_dtoa_r+0x6e4>
 80092dc:	4651      	mov	r1, sl
 80092de:	4620      	mov	r0, r4
 80092e0:	f000 fbcc 	bl	8009a7c <_Bfree>
 80092e4:	2300      	movs	r3, #0
 80092e6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80092e8:	702b      	strb	r3, [r5, #0]
 80092ea:	f10b 0301 	add.w	r3, fp, #1
 80092ee:	6013      	str	r3, [r2, #0]
 80092f0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	f43f ace2 	beq.w	8008cbc <_dtoa_r+0xa4>
 80092f8:	601d      	str	r5, [r3, #0]
 80092fa:	e4df      	b.n	8008cbc <_dtoa_r+0xa4>
 80092fc:	465f      	mov	r7, fp
 80092fe:	462b      	mov	r3, r5
 8009300:	461d      	mov	r5, r3
 8009302:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009306:	2a39      	cmp	r2, #57	; 0x39
 8009308:	d106      	bne.n	8009318 <_dtoa_r+0x700>
 800930a:	9a00      	ldr	r2, [sp, #0]
 800930c:	429a      	cmp	r2, r3
 800930e:	d1f7      	bne.n	8009300 <_dtoa_r+0x6e8>
 8009310:	9900      	ldr	r1, [sp, #0]
 8009312:	2230      	movs	r2, #48	; 0x30
 8009314:	3701      	adds	r7, #1
 8009316:	700a      	strb	r2, [r1, #0]
 8009318:	781a      	ldrb	r2, [r3, #0]
 800931a:	3201      	adds	r2, #1
 800931c:	701a      	strb	r2, [r3, #0]
 800931e:	e790      	b.n	8009242 <_dtoa_r+0x62a>
 8009320:	4ba3      	ldr	r3, [pc, #652]	; (80095b0 <_dtoa_r+0x998>)
 8009322:	2200      	movs	r2, #0
 8009324:	f7f7 f968 	bl	80005f8 <__aeabi_dmul>
 8009328:	2200      	movs	r2, #0
 800932a:	2300      	movs	r3, #0
 800932c:	4606      	mov	r6, r0
 800932e:	460f      	mov	r7, r1
 8009330:	f7f7 fbca 	bl	8000ac8 <__aeabi_dcmpeq>
 8009334:	2800      	cmp	r0, #0
 8009336:	d09e      	beq.n	8009276 <_dtoa_r+0x65e>
 8009338:	e7d0      	b.n	80092dc <_dtoa_r+0x6c4>
 800933a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800933c:	2a00      	cmp	r2, #0
 800933e:	f000 80ca 	beq.w	80094d6 <_dtoa_r+0x8be>
 8009342:	9a07      	ldr	r2, [sp, #28]
 8009344:	2a01      	cmp	r2, #1
 8009346:	f300 80ad 	bgt.w	80094a4 <_dtoa_r+0x88c>
 800934a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800934c:	2a00      	cmp	r2, #0
 800934e:	f000 80a5 	beq.w	800949c <_dtoa_r+0x884>
 8009352:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009356:	9e08      	ldr	r6, [sp, #32]
 8009358:	9d05      	ldr	r5, [sp, #20]
 800935a:	9a05      	ldr	r2, [sp, #20]
 800935c:	441a      	add	r2, r3
 800935e:	9205      	str	r2, [sp, #20]
 8009360:	9a06      	ldr	r2, [sp, #24]
 8009362:	2101      	movs	r1, #1
 8009364:	441a      	add	r2, r3
 8009366:	4620      	mov	r0, r4
 8009368:	9206      	str	r2, [sp, #24]
 800936a:	f000 fc3d 	bl	8009be8 <__i2b>
 800936e:	4607      	mov	r7, r0
 8009370:	b165      	cbz	r5, 800938c <_dtoa_r+0x774>
 8009372:	9b06      	ldr	r3, [sp, #24]
 8009374:	2b00      	cmp	r3, #0
 8009376:	dd09      	ble.n	800938c <_dtoa_r+0x774>
 8009378:	42ab      	cmp	r3, r5
 800937a:	9a05      	ldr	r2, [sp, #20]
 800937c:	bfa8      	it	ge
 800937e:	462b      	movge	r3, r5
 8009380:	1ad2      	subs	r2, r2, r3
 8009382:	9205      	str	r2, [sp, #20]
 8009384:	9a06      	ldr	r2, [sp, #24]
 8009386:	1aed      	subs	r5, r5, r3
 8009388:	1ad3      	subs	r3, r2, r3
 800938a:	9306      	str	r3, [sp, #24]
 800938c:	9b08      	ldr	r3, [sp, #32]
 800938e:	b1f3      	cbz	r3, 80093ce <_dtoa_r+0x7b6>
 8009390:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009392:	2b00      	cmp	r3, #0
 8009394:	f000 80a3 	beq.w	80094de <_dtoa_r+0x8c6>
 8009398:	2e00      	cmp	r6, #0
 800939a:	dd10      	ble.n	80093be <_dtoa_r+0x7a6>
 800939c:	4639      	mov	r1, r7
 800939e:	4632      	mov	r2, r6
 80093a0:	4620      	mov	r0, r4
 80093a2:	f000 fce1 	bl	8009d68 <__pow5mult>
 80093a6:	4652      	mov	r2, sl
 80093a8:	4601      	mov	r1, r0
 80093aa:	4607      	mov	r7, r0
 80093ac:	4620      	mov	r0, r4
 80093ae:	f000 fc31 	bl	8009c14 <__multiply>
 80093b2:	4651      	mov	r1, sl
 80093b4:	4680      	mov	r8, r0
 80093b6:	4620      	mov	r0, r4
 80093b8:	f000 fb60 	bl	8009a7c <_Bfree>
 80093bc:	46c2      	mov	sl, r8
 80093be:	9b08      	ldr	r3, [sp, #32]
 80093c0:	1b9a      	subs	r2, r3, r6
 80093c2:	d004      	beq.n	80093ce <_dtoa_r+0x7b6>
 80093c4:	4651      	mov	r1, sl
 80093c6:	4620      	mov	r0, r4
 80093c8:	f000 fcce 	bl	8009d68 <__pow5mult>
 80093cc:	4682      	mov	sl, r0
 80093ce:	2101      	movs	r1, #1
 80093d0:	4620      	mov	r0, r4
 80093d2:	f000 fc09 	bl	8009be8 <__i2b>
 80093d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80093d8:	2b00      	cmp	r3, #0
 80093da:	4606      	mov	r6, r0
 80093dc:	f340 8081 	ble.w	80094e2 <_dtoa_r+0x8ca>
 80093e0:	461a      	mov	r2, r3
 80093e2:	4601      	mov	r1, r0
 80093e4:	4620      	mov	r0, r4
 80093e6:	f000 fcbf 	bl	8009d68 <__pow5mult>
 80093ea:	9b07      	ldr	r3, [sp, #28]
 80093ec:	2b01      	cmp	r3, #1
 80093ee:	4606      	mov	r6, r0
 80093f0:	dd7a      	ble.n	80094e8 <_dtoa_r+0x8d0>
 80093f2:	f04f 0800 	mov.w	r8, #0
 80093f6:	6933      	ldr	r3, [r6, #16]
 80093f8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80093fc:	6918      	ldr	r0, [r3, #16]
 80093fe:	f000 fba5 	bl	8009b4c <__hi0bits>
 8009402:	f1c0 0020 	rsb	r0, r0, #32
 8009406:	9b06      	ldr	r3, [sp, #24]
 8009408:	4418      	add	r0, r3
 800940a:	f010 001f 	ands.w	r0, r0, #31
 800940e:	f000 8094 	beq.w	800953a <_dtoa_r+0x922>
 8009412:	f1c0 0320 	rsb	r3, r0, #32
 8009416:	2b04      	cmp	r3, #4
 8009418:	f340 8085 	ble.w	8009526 <_dtoa_r+0x90e>
 800941c:	9b05      	ldr	r3, [sp, #20]
 800941e:	f1c0 001c 	rsb	r0, r0, #28
 8009422:	4403      	add	r3, r0
 8009424:	9305      	str	r3, [sp, #20]
 8009426:	9b06      	ldr	r3, [sp, #24]
 8009428:	4403      	add	r3, r0
 800942a:	4405      	add	r5, r0
 800942c:	9306      	str	r3, [sp, #24]
 800942e:	9b05      	ldr	r3, [sp, #20]
 8009430:	2b00      	cmp	r3, #0
 8009432:	dd05      	ble.n	8009440 <_dtoa_r+0x828>
 8009434:	4651      	mov	r1, sl
 8009436:	461a      	mov	r2, r3
 8009438:	4620      	mov	r0, r4
 800943a:	f000 fcef 	bl	8009e1c <__lshift>
 800943e:	4682      	mov	sl, r0
 8009440:	9b06      	ldr	r3, [sp, #24]
 8009442:	2b00      	cmp	r3, #0
 8009444:	dd05      	ble.n	8009452 <_dtoa_r+0x83a>
 8009446:	4631      	mov	r1, r6
 8009448:	461a      	mov	r2, r3
 800944a:	4620      	mov	r0, r4
 800944c:	f000 fce6 	bl	8009e1c <__lshift>
 8009450:	4606      	mov	r6, r0
 8009452:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009454:	2b00      	cmp	r3, #0
 8009456:	d072      	beq.n	800953e <_dtoa_r+0x926>
 8009458:	4631      	mov	r1, r6
 800945a:	4650      	mov	r0, sl
 800945c:	f000 fd4a 	bl	8009ef4 <__mcmp>
 8009460:	2800      	cmp	r0, #0
 8009462:	da6c      	bge.n	800953e <_dtoa_r+0x926>
 8009464:	2300      	movs	r3, #0
 8009466:	4651      	mov	r1, sl
 8009468:	220a      	movs	r2, #10
 800946a:	4620      	mov	r0, r4
 800946c:	f000 fb28 	bl	8009ac0 <__multadd>
 8009470:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009472:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009476:	4682      	mov	sl, r0
 8009478:	2b00      	cmp	r3, #0
 800947a:	f000 81b0 	beq.w	80097de <_dtoa_r+0xbc6>
 800947e:	2300      	movs	r3, #0
 8009480:	4639      	mov	r1, r7
 8009482:	220a      	movs	r2, #10
 8009484:	4620      	mov	r0, r4
 8009486:	f000 fb1b 	bl	8009ac0 <__multadd>
 800948a:	9b01      	ldr	r3, [sp, #4]
 800948c:	2b00      	cmp	r3, #0
 800948e:	4607      	mov	r7, r0
 8009490:	f300 8096 	bgt.w	80095c0 <_dtoa_r+0x9a8>
 8009494:	9b07      	ldr	r3, [sp, #28]
 8009496:	2b02      	cmp	r3, #2
 8009498:	dc59      	bgt.n	800954e <_dtoa_r+0x936>
 800949a:	e091      	b.n	80095c0 <_dtoa_r+0x9a8>
 800949c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800949e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80094a2:	e758      	b.n	8009356 <_dtoa_r+0x73e>
 80094a4:	9b04      	ldr	r3, [sp, #16]
 80094a6:	1e5e      	subs	r6, r3, #1
 80094a8:	9b08      	ldr	r3, [sp, #32]
 80094aa:	42b3      	cmp	r3, r6
 80094ac:	bfbf      	itttt	lt
 80094ae:	9b08      	ldrlt	r3, [sp, #32]
 80094b0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80094b2:	9608      	strlt	r6, [sp, #32]
 80094b4:	1af3      	sublt	r3, r6, r3
 80094b6:	bfb4      	ite	lt
 80094b8:	18d2      	addlt	r2, r2, r3
 80094ba:	1b9e      	subge	r6, r3, r6
 80094bc:	9b04      	ldr	r3, [sp, #16]
 80094be:	bfbc      	itt	lt
 80094c0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80094c2:	2600      	movlt	r6, #0
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	bfb7      	itett	lt
 80094c8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80094cc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80094d0:	1a9d      	sublt	r5, r3, r2
 80094d2:	2300      	movlt	r3, #0
 80094d4:	e741      	b.n	800935a <_dtoa_r+0x742>
 80094d6:	9e08      	ldr	r6, [sp, #32]
 80094d8:	9d05      	ldr	r5, [sp, #20]
 80094da:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80094dc:	e748      	b.n	8009370 <_dtoa_r+0x758>
 80094de:	9a08      	ldr	r2, [sp, #32]
 80094e0:	e770      	b.n	80093c4 <_dtoa_r+0x7ac>
 80094e2:	9b07      	ldr	r3, [sp, #28]
 80094e4:	2b01      	cmp	r3, #1
 80094e6:	dc19      	bgt.n	800951c <_dtoa_r+0x904>
 80094e8:	9b02      	ldr	r3, [sp, #8]
 80094ea:	b9bb      	cbnz	r3, 800951c <_dtoa_r+0x904>
 80094ec:	9b03      	ldr	r3, [sp, #12]
 80094ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80094f2:	b99b      	cbnz	r3, 800951c <_dtoa_r+0x904>
 80094f4:	9b03      	ldr	r3, [sp, #12]
 80094f6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80094fa:	0d1b      	lsrs	r3, r3, #20
 80094fc:	051b      	lsls	r3, r3, #20
 80094fe:	b183      	cbz	r3, 8009522 <_dtoa_r+0x90a>
 8009500:	9b05      	ldr	r3, [sp, #20]
 8009502:	3301      	adds	r3, #1
 8009504:	9305      	str	r3, [sp, #20]
 8009506:	9b06      	ldr	r3, [sp, #24]
 8009508:	3301      	adds	r3, #1
 800950a:	9306      	str	r3, [sp, #24]
 800950c:	f04f 0801 	mov.w	r8, #1
 8009510:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009512:	2b00      	cmp	r3, #0
 8009514:	f47f af6f 	bne.w	80093f6 <_dtoa_r+0x7de>
 8009518:	2001      	movs	r0, #1
 800951a:	e774      	b.n	8009406 <_dtoa_r+0x7ee>
 800951c:	f04f 0800 	mov.w	r8, #0
 8009520:	e7f6      	b.n	8009510 <_dtoa_r+0x8f8>
 8009522:	4698      	mov	r8, r3
 8009524:	e7f4      	b.n	8009510 <_dtoa_r+0x8f8>
 8009526:	d082      	beq.n	800942e <_dtoa_r+0x816>
 8009528:	9a05      	ldr	r2, [sp, #20]
 800952a:	331c      	adds	r3, #28
 800952c:	441a      	add	r2, r3
 800952e:	9205      	str	r2, [sp, #20]
 8009530:	9a06      	ldr	r2, [sp, #24]
 8009532:	441a      	add	r2, r3
 8009534:	441d      	add	r5, r3
 8009536:	9206      	str	r2, [sp, #24]
 8009538:	e779      	b.n	800942e <_dtoa_r+0x816>
 800953a:	4603      	mov	r3, r0
 800953c:	e7f4      	b.n	8009528 <_dtoa_r+0x910>
 800953e:	9b04      	ldr	r3, [sp, #16]
 8009540:	2b00      	cmp	r3, #0
 8009542:	dc37      	bgt.n	80095b4 <_dtoa_r+0x99c>
 8009544:	9b07      	ldr	r3, [sp, #28]
 8009546:	2b02      	cmp	r3, #2
 8009548:	dd34      	ble.n	80095b4 <_dtoa_r+0x99c>
 800954a:	9b04      	ldr	r3, [sp, #16]
 800954c:	9301      	str	r3, [sp, #4]
 800954e:	9b01      	ldr	r3, [sp, #4]
 8009550:	b963      	cbnz	r3, 800956c <_dtoa_r+0x954>
 8009552:	4631      	mov	r1, r6
 8009554:	2205      	movs	r2, #5
 8009556:	4620      	mov	r0, r4
 8009558:	f000 fab2 	bl	8009ac0 <__multadd>
 800955c:	4601      	mov	r1, r0
 800955e:	4606      	mov	r6, r0
 8009560:	4650      	mov	r0, sl
 8009562:	f000 fcc7 	bl	8009ef4 <__mcmp>
 8009566:	2800      	cmp	r0, #0
 8009568:	f73f adbb 	bgt.w	80090e2 <_dtoa_r+0x4ca>
 800956c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800956e:	9d00      	ldr	r5, [sp, #0]
 8009570:	ea6f 0b03 	mvn.w	fp, r3
 8009574:	f04f 0800 	mov.w	r8, #0
 8009578:	4631      	mov	r1, r6
 800957a:	4620      	mov	r0, r4
 800957c:	f000 fa7e 	bl	8009a7c <_Bfree>
 8009580:	2f00      	cmp	r7, #0
 8009582:	f43f aeab 	beq.w	80092dc <_dtoa_r+0x6c4>
 8009586:	f1b8 0f00 	cmp.w	r8, #0
 800958a:	d005      	beq.n	8009598 <_dtoa_r+0x980>
 800958c:	45b8      	cmp	r8, r7
 800958e:	d003      	beq.n	8009598 <_dtoa_r+0x980>
 8009590:	4641      	mov	r1, r8
 8009592:	4620      	mov	r0, r4
 8009594:	f000 fa72 	bl	8009a7c <_Bfree>
 8009598:	4639      	mov	r1, r7
 800959a:	4620      	mov	r0, r4
 800959c:	f000 fa6e 	bl	8009a7c <_Bfree>
 80095a0:	e69c      	b.n	80092dc <_dtoa_r+0x6c4>
 80095a2:	2600      	movs	r6, #0
 80095a4:	4637      	mov	r7, r6
 80095a6:	e7e1      	b.n	800956c <_dtoa_r+0x954>
 80095a8:	46bb      	mov	fp, r7
 80095aa:	4637      	mov	r7, r6
 80095ac:	e599      	b.n	80090e2 <_dtoa_r+0x4ca>
 80095ae:	bf00      	nop
 80095b0:	40240000 	.word	0x40240000
 80095b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	f000 80c8 	beq.w	800974c <_dtoa_r+0xb34>
 80095bc:	9b04      	ldr	r3, [sp, #16]
 80095be:	9301      	str	r3, [sp, #4]
 80095c0:	2d00      	cmp	r5, #0
 80095c2:	dd05      	ble.n	80095d0 <_dtoa_r+0x9b8>
 80095c4:	4639      	mov	r1, r7
 80095c6:	462a      	mov	r2, r5
 80095c8:	4620      	mov	r0, r4
 80095ca:	f000 fc27 	bl	8009e1c <__lshift>
 80095ce:	4607      	mov	r7, r0
 80095d0:	f1b8 0f00 	cmp.w	r8, #0
 80095d4:	d05b      	beq.n	800968e <_dtoa_r+0xa76>
 80095d6:	6879      	ldr	r1, [r7, #4]
 80095d8:	4620      	mov	r0, r4
 80095da:	f000 fa0f 	bl	80099fc <_Balloc>
 80095de:	4605      	mov	r5, r0
 80095e0:	b928      	cbnz	r0, 80095ee <_dtoa_r+0x9d6>
 80095e2:	4b83      	ldr	r3, [pc, #524]	; (80097f0 <_dtoa_r+0xbd8>)
 80095e4:	4602      	mov	r2, r0
 80095e6:	f240 21ef 	movw	r1, #751	; 0x2ef
 80095ea:	f7ff bb2e 	b.w	8008c4a <_dtoa_r+0x32>
 80095ee:	693a      	ldr	r2, [r7, #16]
 80095f0:	3202      	adds	r2, #2
 80095f2:	0092      	lsls	r2, r2, #2
 80095f4:	f107 010c 	add.w	r1, r7, #12
 80095f8:	300c      	adds	r0, #12
 80095fa:	f000 ffab 	bl	800a554 <memcpy>
 80095fe:	2201      	movs	r2, #1
 8009600:	4629      	mov	r1, r5
 8009602:	4620      	mov	r0, r4
 8009604:	f000 fc0a 	bl	8009e1c <__lshift>
 8009608:	9b00      	ldr	r3, [sp, #0]
 800960a:	3301      	adds	r3, #1
 800960c:	9304      	str	r3, [sp, #16]
 800960e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009612:	4413      	add	r3, r2
 8009614:	9308      	str	r3, [sp, #32]
 8009616:	9b02      	ldr	r3, [sp, #8]
 8009618:	f003 0301 	and.w	r3, r3, #1
 800961c:	46b8      	mov	r8, r7
 800961e:	9306      	str	r3, [sp, #24]
 8009620:	4607      	mov	r7, r0
 8009622:	9b04      	ldr	r3, [sp, #16]
 8009624:	4631      	mov	r1, r6
 8009626:	3b01      	subs	r3, #1
 8009628:	4650      	mov	r0, sl
 800962a:	9301      	str	r3, [sp, #4]
 800962c:	f7ff fa69 	bl	8008b02 <quorem>
 8009630:	4641      	mov	r1, r8
 8009632:	9002      	str	r0, [sp, #8]
 8009634:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009638:	4650      	mov	r0, sl
 800963a:	f000 fc5b 	bl	8009ef4 <__mcmp>
 800963e:	463a      	mov	r2, r7
 8009640:	9005      	str	r0, [sp, #20]
 8009642:	4631      	mov	r1, r6
 8009644:	4620      	mov	r0, r4
 8009646:	f000 fc71 	bl	8009f2c <__mdiff>
 800964a:	68c2      	ldr	r2, [r0, #12]
 800964c:	4605      	mov	r5, r0
 800964e:	bb02      	cbnz	r2, 8009692 <_dtoa_r+0xa7a>
 8009650:	4601      	mov	r1, r0
 8009652:	4650      	mov	r0, sl
 8009654:	f000 fc4e 	bl	8009ef4 <__mcmp>
 8009658:	4602      	mov	r2, r0
 800965a:	4629      	mov	r1, r5
 800965c:	4620      	mov	r0, r4
 800965e:	9209      	str	r2, [sp, #36]	; 0x24
 8009660:	f000 fa0c 	bl	8009a7c <_Bfree>
 8009664:	9b07      	ldr	r3, [sp, #28]
 8009666:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009668:	9d04      	ldr	r5, [sp, #16]
 800966a:	ea43 0102 	orr.w	r1, r3, r2
 800966e:	9b06      	ldr	r3, [sp, #24]
 8009670:	4319      	orrs	r1, r3
 8009672:	d110      	bne.n	8009696 <_dtoa_r+0xa7e>
 8009674:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009678:	d029      	beq.n	80096ce <_dtoa_r+0xab6>
 800967a:	9b05      	ldr	r3, [sp, #20]
 800967c:	2b00      	cmp	r3, #0
 800967e:	dd02      	ble.n	8009686 <_dtoa_r+0xa6e>
 8009680:	9b02      	ldr	r3, [sp, #8]
 8009682:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8009686:	9b01      	ldr	r3, [sp, #4]
 8009688:	f883 9000 	strb.w	r9, [r3]
 800968c:	e774      	b.n	8009578 <_dtoa_r+0x960>
 800968e:	4638      	mov	r0, r7
 8009690:	e7ba      	b.n	8009608 <_dtoa_r+0x9f0>
 8009692:	2201      	movs	r2, #1
 8009694:	e7e1      	b.n	800965a <_dtoa_r+0xa42>
 8009696:	9b05      	ldr	r3, [sp, #20]
 8009698:	2b00      	cmp	r3, #0
 800969a:	db04      	blt.n	80096a6 <_dtoa_r+0xa8e>
 800969c:	9907      	ldr	r1, [sp, #28]
 800969e:	430b      	orrs	r3, r1
 80096a0:	9906      	ldr	r1, [sp, #24]
 80096a2:	430b      	orrs	r3, r1
 80096a4:	d120      	bne.n	80096e8 <_dtoa_r+0xad0>
 80096a6:	2a00      	cmp	r2, #0
 80096a8:	dded      	ble.n	8009686 <_dtoa_r+0xa6e>
 80096aa:	4651      	mov	r1, sl
 80096ac:	2201      	movs	r2, #1
 80096ae:	4620      	mov	r0, r4
 80096b0:	f000 fbb4 	bl	8009e1c <__lshift>
 80096b4:	4631      	mov	r1, r6
 80096b6:	4682      	mov	sl, r0
 80096b8:	f000 fc1c 	bl	8009ef4 <__mcmp>
 80096bc:	2800      	cmp	r0, #0
 80096be:	dc03      	bgt.n	80096c8 <_dtoa_r+0xab0>
 80096c0:	d1e1      	bne.n	8009686 <_dtoa_r+0xa6e>
 80096c2:	f019 0f01 	tst.w	r9, #1
 80096c6:	d0de      	beq.n	8009686 <_dtoa_r+0xa6e>
 80096c8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80096cc:	d1d8      	bne.n	8009680 <_dtoa_r+0xa68>
 80096ce:	9a01      	ldr	r2, [sp, #4]
 80096d0:	2339      	movs	r3, #57	; 0x39
 80096d2:	7013      	strb	r3, [r2, #0]
 80096d4:	462b      	mov	r3, r5
 80096d6:	461d      	mov	r5, r3
 80096d8:	3b01      	subs	r3, #1
 80096da:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80096de:	2a39      	cmp	r2, #57	; 0x39
 80096e0:	d06c      	beq.n	80097bc <_dtoa_r+0xba4>
 80096e2:	3201      	adds	r2, #1
 80096e4:	701a      	strb	r2, [r3, #0]
 80096e6:	e747      	b.n	8009578 <_dtoa_r+0x960>
 80096e8:	2a00      	cmp	r2, #0
 80096ea:	dd07      	ble.n	80096fc <_dtoa_r+0xae4>
 80096ec:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80096f0:	d0ed      	beq.n	80096ce <_dtoa_r+0xab6>
 80096f2:	9a01      	ldr	r2, [sp, #4]
 80096f4:	f109 0301 	add.w	r3, r9, #1
 80096f8:	7013      	strb	r3, [r2, #0]
 80096fa:	e73d      	b.n	8009578 <_dtoa_r+0x960>
 80096fc:	9b04      	ldr	r3, [sp, #16]
 80096fe:	9a08      	ldr	r2, [sp, #32]
 8009700:	f803 9c01 	strb.w	r9, [r3, #-1]
 8009704:	4293      	cmp	r3, r2
 8009706:	d043      	beq.n	8009790 <_dtoa_r+0xb78>
 8009708:	4651      	mov	r1, sl
 800970a:	2300      	movs	r3, #0
 800970c:	220a      	movs	r2, #10
 800970e:	4620      	mov	r0, r4
 8009710:	f000 f9d6 	bl	8009ac0 <__multadd>
 8009714:	45b8      	cmp	r8, r7
 8009716:	4682      	mov	sl, r0
 8009718:	f04f 0300 	mov.w	r3, #0
 800971c:	f04f 020a 	mov.w	r2, #10
 8009720:	4641      	mov	r1, r8
 8009722:	4620      	mov	r0, r4
 8009724:	d107      	bne.n	8009736 <_dtoa_r+0xb1e>
 8009726:	f000 f9cb 	bl	8009ac0 <__multadd>
 800972a:	4680      	mov	r8, r0
 800972c:	4607      	mov	r7, r0
 800972e:	9b04      	ldr	r3, [sp, #16]
 8009730:	3301      	adds	r3, #1
 8009732:	9304      	str	r3, [sp, #16]
 8009734:	e775      	b.n	8009622 <_dtoa_r+0xa0a>
 8009736:	f000 f9c3 	bl	8009ac0 <__multadd>
 800973a:	4639      	mov	r1, r7
 800973c:	4680      	mov	r8, r0
 800973e:	2300      	movs	r3, #0
 8009740:	220a      	movs	r2, #10
 8009742:	4620      	mov	r0, r4
 8009744:	f000 f9bc 	bl	8009ac0 <__multadd>
 8009748:	4607      	mov	r7, r0
 800974a:	e7f0      	b.n	800972e <_dtoa_r+0xb16>
 800974c:	9b04      	ldr	r3, [sp, #16]
 800974e:	9301      	str	r3, [sp, #4]
 8009750:	9d00      	ldr	r5, [sp, #0]
 8009752:	4631      	mov	r1, r6
 8009754:	4650      	mov	r0, sl
 8009756:	f7ff f9d4 	bl	8008b02 <quorem>
 800975a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800975e:	9b00      	ldr	r3, [sp, #0]
 8009760:	f805 9b01 	strb.w	r9, [r5], #1
 8009764:	1aea      	subs	r2, r5, r3
 8009766:	9b01      	ldr	r3, [sp, #4]
 8009768:	4293      	cmp	r3, r2
 800976a:	dd07      	ble.n	800977c <_dtoa_r+0xb64>
 800976c:	4651      	mov	r1, sl
 800976e:	2300      	movs	r3, #0
 8009770:	220a      	movs	r2, #10
 8009772:	4620      	mov	r0, r4
 8009774:	f000 f9a4 	bl	8009ac0 <__multadd>
 8009778:	4682      	mov	sl, r0
 800977a:	e7ea      	b.n	8009752 <_dtoa_r+0xb3a>
 800977c:	9b01      	ldr	r3, [sp, #4]
 800977e:	2b00      	cmp	r3, #0
 8009780:	bfc8      	it	gt
 8009782:	461d      	movgt	r5, r3
 8009784:	9b00      	ldr	r3, [sp, #0]
 8009786:	bfd8      	it	le
 8009788:	2501      	movle	r5, #1
 800978a:	441d      	add	r5, r3
 800978c:	f04f 0800 	mov.w	r8, #0
 8009790:	4651      	mov	r1, sl
 8009792:	2201      	movs	r2, #1
 8009794:	4620      	mov	r0, r4
 8009796:	f000 fb41 	bl	8009e1c <__lshift>
 800979a:	4631      	mov	r1, r6
 800979c:	4682      	mov	sl, r0
 800979e:	f000 fba9 	bl	8009ef4 <__mcmp>
 80097a2:	2800      	cmp	r0, #0
 80097a4:	dc96      	bgt.n	80096d4 <_dtoa_r+0xabc>
 80097a6:	d102      	bne.n	80097ae <_dtoa_r+0xb96>
 80097a8:	f019 0f01 	tst.w	r9, #1
 80097ac:	d192      	bne.n	80096d4 <_dtoa_r+0xabc>
 80097ae:	462b      	mov	r3, r5
 80097b0:	461d      	mov	r5, r3
 80097b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80097b6:	2a30      	cmp	r2, #48	; 0x30
 80097b8:	d0fa      	beq.n	80097b0 <_dtoa_r+0xb98>
 80097ba:	e6dd      	b.n	8009578 <_dtoa_r+0x960>
 80097bc:	9a00      	ldr	r2, [sp, #0]
 80097be:	429a      	cmp	r2, r3
 80097c0:	d189      	bne.n	80096d6 <_dtoa_r+0xabe>
 80097c2:	f10b 0b01 	add.w	fp, fp, #1
 80097c6:	2331      	movs	r3, #49	; 0x31
 80097c8:	e796      	b.n	80096f8 <_dtoa_r+0xae0>
 80097ca:	4b0a      	ldr	r3, [pc, #40]	; (80097f4 <_dtoa_r+0xbdc>)
 80097cc:	f7ff ba99 	b.w	8008d02 <_dtoa_r+0xea>
 80097d0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	f47f aa6d 	bne.w	8008cb2 <_dtoa_r+0x9a>
 80097d8:	4b07      	ldr	r3, [pc, #28]	; (80097f8 <_dtoa_r+0xbe0>)
 80097da:	f7ff ba92 	b.w	8008d02 <_dtoa_r+0xea>
 80097de:	9b01      	ldr	r3, [sp, #4]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	dcb5      	bgt.n	8009750 <_dtoa_r+0xb38>
 80097e4:	9b07      	ldr	r3, [sp, #28]
 80097e6:	2b02      	cmp	r3, #2
 80097e8:	f73f aeb1 	bgt.w	800954e <_dtoa_r+0x936>
 80097ec:	e7b0      	b.n	8009750 <_dtoa_r+0xb38>
 80097ee:	bf00      	nop
 80097f0:	0800ad64 	.word	0x0800ad64
 80097f4:	0800acc4 	.word	0x0800acc4
 80097f8:	0800ace8 	.word	0x0800ace8

080097fc <_free_r>:
 80097fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80097fe:	2900      	cmp	r1, #0
 8009800:	d044      	beq.n	800988c <_free_r+0x90>
 8009802:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009806:	9001      	str	r0, [sp, #4]
 8009808:	2b00      	cmp	r3, #0
 800980a:	f1a1 0404 	sub.w	r4, r1, #4
 800980e:	bfb8      	it	lt
 8009810:	18e4      	addlt	r4, r4, r3
 8009812:	f000 f8e7 	bl	80099e4 <__malloc_lock>
 8009816:	4a1e      	ldr	r2, [pc, #120]	; (8009890 <_free_r+0x94>)
 8009818:	9801      	ldr	r0, [sp, #4]
 800981a:	6813      	ldr	r3, [r2, #0]
 800981c:	b933      	cbnz	r3, 800982c <_free_r+0x30>
 800981e:	6063      	str	r3, [r4, #4]
 8009820:	6014      	str	r4, [r2, #0]
 8009822:	b003      	add	sp, #12
 8009824:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009828:	f000 b8e2 	b.w	80099f0 <__malloc_unlock>
 800982c:	42a3      	cmp	r3, r4
 800982e:	d908      	bls.n	8009842 <_free_r+0x46>
 8009830:	6825      	ldr	r5, [r4, #0]
 8009832:	1961      	adds	r1, r4, r5
 8009834:	428b      	cmp	r3, r1
 8009836:	bf01      	itttt	eq
 8009838:	6819      	ldreq	r1, [r3, #0]
 800983a:	685b      	ldreq	r3, [r3, #4]
 800983c:	1949      	addeq	r1, r1, r5
 800983e:	6021      	streq	r1, [r4, #0]
 8009840:	e7ed      	b.n	800981e <_free_r+0x22>
 8009842:	461a      	mov	r2, r3
 8009844:	685b      	ldr	r3, [r3, #4]
 8009846:	b10b      	cbz	r3, 800984c <_free_r+0x50>
 8009848:	42a3      	cmp	r3, r4
 800984a:	d9fa      	bls.n	8009842 <_free_r+0x46>
 800984c:	6811      	ldr	r1, [r2, #0]
 800984e:	1855      	adds	r5, r2, r1
 8009850:	42a5      	cmp	r5, r4
 8009852:	d10b      	bne.n	800986c <_free_r+0x70>
 8009854:	6824      	ldr	r4, [r4, #0]
 8009856:	4421      	add	r1, r4
 8009858:	1854      	adds	r4, r2, r1
 800985a:	42a3      	cmp	r3, r4
 800985c:	6011      	str	r1, [r2, #0]
 800985e:	d1e0      	bne.n	8009822 <_free_r+0x26>
 8009860:	681c      	ldr	r4, [r3, #0]
 8009862:	685b      	ldr	r3, [r3, #4]
 8009864:	6053      	str	r3, [r2, #4]
 8009866:	440c      	add	r4, r1
 8009868:	6014      	str	r4, [r2, #0]
 800986a:	e7da      	b.n	8009822 <_free_r+0x26>
 800986c:	d902      	bls.n	8009874 <_free_r+0x78>
 800986e:	230c      	movs	r3, #12
 8009870:	6003      	str	r3, [r0, #0]
 8009872:	e7d6      	b.n	8009822 <_free_r+0x26>
 8009874:	6825      	ldr	r5, [r4, #0]
 8009876:	1961      	adds	r1, r4, r5
 8009878:	428b      	cmp	r3, r1
 800987a:	bf04      	itt	eq
 800987c:	6819      	ldreq	r1, [r3, #0]
 800987e:	685b      	ldreq	r3, [r3, #4]
 8009880:	6063      	str	r3, [r4, #4]
 8009882:	bf04      	itt	eq
 8009884:	1949      	addeq	r1, r1, r5
 8009886:	6021      	streq	r1, [r4, #0]
 8009888:	6054      	str	r4, [r2, #4]
 800988a:	e7ca      	b.n	8009822 <_free_r+0x26>
 800988c:	b003      	add	sp, #12
 800988e:	bd30      	pop	{r4, r5, pc}
 8009890:	2000056c 	.word	0x2000056c

08009894 <malloc>:
 8009894:	4b02      	ldr	r3, [pc, #8]	; (80098a0 <malloc+0xc>)
 8009896:	4601      	mov	r1, r0
 8009898:	6818      	ldr	r0, [r3, #0]
 800989a:	f000 b823 	b.w	80098e4 <_malloc_r>
 800989e:	bf00      	nop
 80098a0:	20000064 	.word	0x20000064

080098a4 <sbrk_aligned>:
 80098a4:	b570      	push	{r4, r5, r6, lr}
 80098a6:	4e0e      	ldr	r6, [pc, #56]	; (80098e0 <sbrk_aligned+0x3c>)
 80098a8:	460c      	mov	r4, r1
 80098aa:	6831      	ldr	r1, [r6, #0]
 80098ac:	4605      	mov	r5, r0
 80098ae:	b911      	cbnz	r1, 80098b6 <sbrk_aligned+0x12>
 80098b0:	f000 fe40 	bl	800a534 <_sbrk_r>
 80098b4:	6030      	str	r0, [r6, #0]
 80098b6:	4621      	mov	r1, r4
 80098b8:	4628      	mov	r0, r5
 80098ba:	f000 fe3b 	bl	800a534 <_sbrk_r>
 80098be:	1c43      	adds	r3, r0, #1
 80098c0:	d00a      	beq.n	80098d8 <sbrk_aligned+0x34>
 80098c2:	1cc4      	adds	r4, r0, #3
 80098c4:	f024 0403 	bic.w	r4, r4, #3
 80098c8:	42a0      	cmp	r0, r4
 80098ca:	d007      	beq.n	80098dc <sbrk_aligned+0x38>
 80098cc:	1a21      	subs	r1, r4, r0
 80098ce:	4628      	mov	r0, r5
 80098d0:	f000 fe30 	bl	800a534 <_sbrk_r>
 80098d4:	3001      	adds	r0, #1
 80098d6:	d101      	bne.n	80098dc <sbrk_aligned+0x38>
 80098d8:	f04f 34ff 	mov.w	r4, #4294967295
 80098dc:	4620      	mov	r0, r4
 80098de:	bd70      	pop	{r4, r5, r6, pc}
 80098e0:	20000570 	.word	0x20000570

080098e4 <_malloc_r>:
 80098e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80098e8:	1ccd      	adds	r5, r1, #3
 80098ea:	f025 0503 	bic.w	r5, r5, #3
 80098ee:	3508      	adds	r5, #8
 80098f0:	2d0c      	cmp	r5, #12
 80098f2:	bf38      	it	cc
 80098f4:	250c      	movcc	r5, #12
 80098f6:	2d00      	cmp	r5, #0
 80098f8:	4607      	mov	r7, r0
 80098fa:	db01      	blt.n	8009900 <_malloc_r+0x1c>
 80098fc:	42a9      	cmp	r1, r5
 80098fe:	d905      	bls.n	800990c <_malloc_r+0x28>
 8009900:	230c      	movs	r3, #12
 8009902:	603b      	str	r3, [r7, #0]
 8009904:	2600      	movs	r6, #0
 8009906:	4630      	mov	r0, r6
 8009908:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800990c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80099e0 <_malloc_r+0xfc>
 8009910:	f000 f868 	bl	80099e4 <__malloc_lock>
 8009914:	f8d8 3000 	ldr.w	r3, [r8]
 8009918:	461c      	mov	r4, r3
 800991a:	bb5c      	cbnz	r4, 8009974 <_malloc_r+0x90>
 800991c:	4629      	mov	r1, r5
 800991e:	4638      	mov	r0, r7
 8009920:	f7ff ffc0 	bl	80098a4 <sbrk_aligned>
 8009924:	1c43      	adds	r3, r0, #1
 8009926:	4604      	mov	r4, r0
 8009928:	d155      	bne.n	80099d6 <_malloc_r+0xf2>
 800992a:	f8d8 4000 	ldr.w	r4, [r8]
 800992e:	4626      	mov	r6, r4
 8009930:	2e00      	cmp	r6, #0
 8009932:	d145      	bne.n	80099c0 <_malloc_r+0xdc>
 8009934:	2c00      	cmp	r4, #0
 8009936:	d048      	beq.n	80099ca <_malloc_r+0xe6>
 8009938:	6823      	ldr	r3, [r4, #0]
 800993a:	4631      	mov	r1, r6
 800993c:	4638      	mov	r0, r7
 800993e:	eb04 0903 	add.w	r9, r4, r3
 8009942:	f000 fdf7 	bl	800a534 <_sbrk_r>
 8009946:	4581      	cmp	r9, r0
 8009948:	d13f      	bne.n	80099ca <_malloc_r+0xe6>
 800994a:	6821      	ldr	r1, [r4, #0]
 800994c:	1a6d      	subs	r5, r5, r1
 800994e:	4629      	mov	r1, r5
 8009950:	4638      	mov	r0, r7
 8009952:	f7ff ffa7 	bl	80098a4 <sbrk_aligned>
 8009956:	3001      	adds	r0, #1
 8009958:	d037      	beq.n	80099ca <_malloc_r+0xe6>
 800995a:	6823      	ldr	r3, [r4, #0]
 800995c:	442b      	add	r3, r5
 800995e:	6023      	str	r3, [r4, #0]
 8009960:	f8d8 3000 	ldr.w	r3, [r8]
 8009964:	2b00      	cmp	r3, #0
 8009966:	d038      	beq.n	80099da <_malloc_r+0xf6>
 8009968:	685a      	ldr	r2, [r3, #4]
 800996a:	42a2      	cmp	r2, r4
 800996c:	d12b      	bne.n	80099c6 <_malloc_r+0xe2>
 800996e:	2200      	movs	r2, #0
 8009970:	605a      	str	r2, [r3, #4]
 8009972:	e00f      	b.n	8009994 <_malloc_r+0xb0>
 8009974:	6822      	ldr	r2, [r4, #0]
 8009976:	1b52      	subs	r2, r2, r5
 8009978:	d41f      	bmi.n	80099ba <_malloc_r+0xd6>
 800997a:	2a0b      	cmp	r2, #11
 800997c:	d917      	bls.n	80099ae <_malloc_r+0xca>
 800997e:	1961      	adds	r1, r4, r5
 8009980:	42a3      	cmp	r3, r4
 8009982:	6025      	str	r5, [r4, #0]
 8009984:	bf18      	it	ne
 8009986:	6059      	strne	r1, [r3, #4]
 8009988:	6863      	ldr	r3, [r4, #4]
 800998a:	bf08      	it	eq
 800998c:	f8c8 1000 	streq.w	r1, [r8]
 8009990:	5162      	str	r2, [r4, r5]
 8009992:	604b      	str	r3, [r1, #4]
 8009994:	4638      	mov	r0, r7
 8009996:	f104 060b 	add.w	r6, r4, #11
 800999a:	f000 f829 	bl	80099f0 <__malloc_unlock>
 800999e:	f026 0607 	bic.w	r6, r6, #7
 80099a2:	1d23      	adds	r3, r4, #4
 80099a4:	1af2      	subs	r2, r6, r3
 80099a6:	d0ae      	beq.n	8009906 <_malloc_r+0x22>
 80099a8:	1b9b      	subs	r3, r3, r6
 80099aa:	50a3      	str	r3, [r4, r2]
 80099ac:	e7ab      	b.n	8009906 <_malloc_r+0x22>
 80099ae:	42a3      	cmp	r3, r4
 80099b0:	6862      	ldr	r2, [r4, #4]
 80099b2:	d1dd      	bne.n	8009970 <_malloc_r+0x8c>
 80099b4:	f8c8 2000 	str.w	r2, [r8]
 80099b8:	e7ec      	b.n	8009994 <_malloc_r+0xb0>
 80099ba:	4623      	mov	r3, r4
 80099bc:	6864      	ldr	r4, [r4, #4]
 80099be:	e7ac      	b.n	800991a <_malloc_r+0x36>
 80099c0:	4634      	mov	r4, r6
 80099c2:	6876      	ldr	r6, [r6, #4]
 80099c4:	e7b4      	b.n	8009930 <_malloc_r+0x4c>
 80099c6:	4613      	mov	r3, r2
 80099c8:	e7cc      	b.n	8009964 <_malloc_r+0x80>
 80099ca:	230c      	movs	r3, #12
 80099cc:	603b      	str	r3, [r7, #0]
 80099ce:	4638      	mov	r0, r7
 80099d0:	f000 f80e 	bl	80099f0 <__malloc_unlock>
 80099d4:	e797      	b.n	8009906 <_malloc_r+0x22>
 80099d6:	6025      	str	r5, [r4, #0]
 80099d8:	e7dc      	b.n	8009994 <_malloc_r+0xb0>
 80099da:	605b      	str	r3, [r3, #4]
 80099dc:	deff      	udf	#255	; 0xff
 80099de:	bf00      	nop
 80099e0:	2000056c 	.word	0x2000056c

080099e4 <__malloc_lock>:
 80099e4:	4801      	ldr	r0, [pc, #4]	; (80099ec <__malloc_lock+0x8>)
 80099e6:	f7ff b88a 	b.w	8008afe <__retarget_lock_acquire_recursive>
 80099ea:	bf00      	nop
 80099ec:	20000568 	.word	0x20000568

080099f0 <__malloc_unlock>:
 80099f0:	4801      	ldr	r0, [pc, #4]	; (80099f8 <__malloc_unlock+0x8>)
 80099f2:	f7ff b885 	b.w	8008b00 <__retarget_lock_release_recursive>
 80099f6:	bf00      	nop
 80099f8:	20000568 	.word	0x20000568

080099fc <_Balloc>:
 80099fc:	b570      	push	{r4, r5, r6, lr}
 80099fe:	69c6      	ldr	r6, [r0, #28]
 8009a00:	4604      	mov	r4, r0
 8009a02:	460d      	mov	r5, r1
 8009a04:	b976      	cbnz	r6, 8009a24 <_Balloc+0x28>
 8009a06:	2010      	movs	r0, #16
 8009a08:	f7ff ff44 	bl	8009894 <malloc>
 8009a0c:	4602      	mov	r2, r0
 8009a0e:	61e0      	str	r0, [r4, #28]
 8009a10:	b920      	cbnz	r0, 8009a1c <_Balloc+0x20>
 8009a12:	4b18      	ldr	r3, [pc, #96]	; (8009a74 <_Balloc+0x78>)
 8009a14:	4818      	ldr	r0, [pc, #96]	; (8009a78 <_Balloc+0x7c>)
 8009a16:	216b      	movs	r1, #107	; 0x6b
 8009a18:	f000 fdaa 	bl	800a570 <__assert_func>
 8009a1c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009a20:	6006      	str	r6, [r0, #0]
 8009a22:	60c6      	str	r6, [r0, #12]
 8009a24:	69e6      	ldr	r6, [r4, #28]
 8009a26:	68f3      	ldr	r3, [r6, #12]
 8009a28:	b183      	cbz	r3, 8009a4c <_Balloc+0x50>
 8009a2a:	69e3      	ldr	r3, [r4, #28]
 8009a2c:	68db      	ldr	r3, [r3, #12]
 8009a2e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009a32:	b9b8      	cbnz	r0, 8009a64 <_Balloc+0x68>
 8009a34:	2101      	movs	r1, #1
 8009a36:	fa01 f605 	lsl.w	r6, r1, r5
 8009a3a:	1d72      	adds	r2, r6, #5
 8009a3c:	0092      	lsls	r2, r2, #2
 8009a3e:	4620      	mov	r0, r4
 8009a40:	f000 fdb4 	bl	800a5ac <_calloc_r>
 8009a44:	b160      	cbz	r0, 8009a60 <_Balloc+0x64>
 8009a46:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009a4a:	e00e      	b.n	8009a6a <_Balloc+0x6e>
 8009a4c:	2221      	movs	r2, #33	; 0x21
 8009a4e:	2104      	movs	r1, #4
 8009a50:	4620      	mov	r0, r4
 8009a52:	f000 fdab 	bl	800a5ac <_calloc_r>
 8009a56:	69e3      	ldr	r3, [r4, #28]
 8009a58:	60f0      	str	r0, [r6, #12]
 8009a5a:	68db      	ldr	r3, [r3, #12]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d1e4      	bne.n	8009a2a <_Balloc+0x2e>
 8009a60:	2000      	movs	r0, #0
 8009a62:	bd70      	pop	{r4, r5, r6, pc}
 8009a64:	6802      	ldr	r2, [r0, #0]
 8009a66:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009a70:	e7f7      	b.n	8009a62 <_Balloc+0x66>
 8009a72:	bf00      	nop
 8009a74:	0800acf5 	.word	0x0800acf5
 8009a78:	0800ad75 	.word	0x0800ad75

08009a7c <_Bfree>:
 8009a7c:	b570      	push	{r4, r5, r6, lr}
 8009a7e:	69c6      	ldr	r6, [r0, #28]
 8009a80:	4605      	mov	r5, r0
 8009a82:	460c      	mov	r4, r1
 8009a84:	b976      	cbnz	r6, 8009aa4 <_Bfree+0x28>
 8009a86:	2010      	movs	r0, #16
 8009a88:	f7ff ff04 	bl	8009894 <malloc>
 8009a8c:	4602      	mov	r2, r0
 8009a8e:	61e8      	str	r0, [r5, #28]
 8009a90:	b920      	cbnz	r0, 8009a9c <_Bfree+0x20>
 8009a92:	4b09      	ldr	r3, [pc, #36]	; (8009ab8 <_Bfree+0x3c>)
 8009a94:	4809      	ldr	r0, [pc, #36]	; (8009abc <_Bfree+0x40>)
 8009a96:	218f      	movs	r1, #143	; 0x8f
 8009a98:	f000 fd6a 	bl	800a570 <__assert_func>
 8009a9c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009aa0:	6006      	str	r6, [r0, #0]
 8009aa2:	60c6      	str	r6, [r0, #12]
 8009aa4:	b13c      	cbz	r4, 8009ab6 <_Bfree+0x3a>
 8009aa6:	69eb      	ldr	r3, [r5, #28]
 8009aa8:	6862      	ldr	r2, [r4, #4]
 8009aaa:	68db      	ldr	r3, [r3, #12]
 8009aac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009ab0:	6021      	str	r1, [r4, #0]
 8009ab2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009ab6:	bd70      	pop	{r4, r5, r6, pc}
 8009ab8:	0800acf5 	.word	0x0800acf5
 8009abc:	0800ad75 	.word	0x0800ad75

08009ac0 <__multadd>:
 8009ac0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ac4:	690d      	ldr	r5, [r1, #16]
 8009ac6:	4607      	mov	r7, r0
 8009ac8:	460c      	mov	r4, r1
 8009aca:	461e      	mov	r6, r3
 8009acc:	f101 0c14 	add.w	ip, r1, #20
 8009ad0:	2000      	movs	r0, #0
 8009ad2:	f8dc 3000 	ldr.w	r3, [ip]
 8009ad6:	b299      	uxth	r1, r3
 8009ad8:	fb02 6101 	mla	r1, r2, r1, r6
 8009adc:	0c1e      	lsrs	r6, r3, #16
 8009ade:	0c0b      	lsrs	r3, r1, #16
 8009ae0:	fb02 3306 	mla	r3, r2, r6, r3
 8009ae4:	b289      	uxth	r1, r1
 8009ae6:	3001      	adds	r0, #1
 8009ae8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009aec:	4285      	cmp	r5, r0
 8009aee:	f84c 1b04 	str.w	r1, [ip], #4
 8009af2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009af6:	dcec      	bgt.n	8009ad2 <__multadd+0x12>
 8009af8:	b30e      	cbz	r6, 8009b3e <__multadd+0x7e>
 8009afa:	68a3      	ldr	r3, [r4, #8]
 8009afc:	42ab      	cmp	r3, r5
 8009afe:	dc19      	bgt.n	8009b34 <__multadd+0x74>
 8009b00:	6861      	ldr	r1, [r4, #4]
 8009b02:	4638      	mov	r0, r7
 8009b04:	3101      	adds	r1, #1
 8009b06:	f7ff ff79 	bl	80099fc <_Balloc>
 8009b0a:	4680      	mov	r8, r0
 8009b0c:	b928      	cbnz	r0, 8009b1a <__multadd+0x5a>
 8009b0e:	4602      	mov	r2, r0
 8009b10:	4b0c      	ldr	r3, [pc, #48]	; (8009b44 <__multadd+0x84>)
 8009b12:	480d      	ldr	r0, [pc, #52]	; (8009b48 <__multadd+0x88>)
 8009b14:	21ba      	movs	r1, #186	; 0xba
 8009b16:	f000 fd2b 	bl	800a570 <__assert_func>
 8009b1a:	6922      	ldr	r2, [r4, #16]
 8009b1c:	3202      	adds	r2, #2
 8009b1e:	f104 010c 	add.w	r1, r4, #12
 8009b22:	0092      	lsls	r2, r2, #2
 8009b24:	300c      	adds	r0, #12
 8009b26:	f000 fd15 	bl	800a554 <memcpy>
 8009b2a:	4621      	mov	r1, r4
 8009b2c:	4638      	mov	r0, r7
 8009b2e:	f7ff ffa5 	bl	8009a7c <_Bfree>
 8009b32:	4644      	mov	r4, r8
 8009b34:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009b38:	3501      	adds	r5, #1
 8009b3a:	615e      	str	r6, [r3, #20]
 8009b3c:	6125      	str	r5, [r4, #16]
 8009b3e:	4620      	mov	r0, r4
 8009b40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b44:	0800ad64 	.word	0x0800ad64
 8009b48:	0800ad75 	.word	0x0800ad75

08009b4c <__hi0bits>:
 8009b4c:	0c03      	lsrs	r3, r0, #16
 8009b4e:	041b      	lsls	r3, r3, #16
 8009b50:	b9d3      	cbnz	r3, 8009b88 <__hi0bits+0x3c>
 8009b52:	0400      	lsls	r0, r0, #16
 8009b54:	2310      	movs	r3, #16
 8009b56:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009b5a:	bf04      	itt	eq
 8009b5c:	0200      	lsleq	r0, r0, #8
 8009b5e:	3308      	addeq	r3, #8
 8009b60:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009b64:	bf04      	itt	eq
 8009b66:	0100      	lsleq	r0, r0, #4
 8009b68:	3304      	addeq	r3, #4
 8009b6a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009b6e:	bf04      	itt	eq
 8009b70:	0080      	lsleq	r0, r0, #2
 8009b72:	3302      	addeq	r3, #2
 8009b74:	2800      	cmp	r0, #0
 8009b76:	db05      	blt.n	8009b84 <__hi0bits+0x38>
 8009b78:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009b7c:	f103 0301 	add.w	r3, r3, #1
 8009b80:	bf08      	it	eq
 8009b82:	2320      	moveq	r3, #32
 8009b84:	4618      	mov	r0, r3
 8009b86:	4770      	bx	lr
 8009b88:	2300      	movs	r3, #0
 8009b8a:	e7e4      	b.n	8009b56 <__hi0bits+0xa>

08009b8c <__lo0bits>:
 8009b8c:	6803      	ldr	r3, [r0, #0]
 8009b8e:	f013 0207 	ands.w	r2, r3, #7
 8009b92:	d00c      	beq.n	8009bae <__lo0bits+0x22>
 8009b94:	07d9      	lsls	r1, r3, #31
 8009b96:	d422      	bmi.n	8009bde <__lo0bits+0x52>
 8009b98:	079a      	lsls	r2, r3, #30
 8009b9a:	bf49      	itett	mi
 8009b9c:	085b      	lsrmi	r3, r3, #1
 8009b9e:	089b      	lsrpl	r3, r3, #2
 8009ba0:	6003      	strmi	r3, [r0, #0]
 8009ba2:	2201      	movmi	r2, #1
 8009ba4:	bf5c      	itt	pl
 8009ba6:	6003      	strpl	r3, [r0, #0]
 8009ba8:	2202      	movpl	r2, #2
 8009baa:	4610      	mov	r0, r2
 8009bac:	4770      	bx	lr
 8009bae:	b299      	uxth	r1, r3
 8009bb0:	b909      	cbnz	r1, 8009bb6 <__lo0bits+0x2a>
 8009bb2:	0c1b      	lsrs	r3, r3, #16
 8009bb4:	2210      	movs	r2, #16
 8009bb6:	b2d9      	uxtb	r1, r3
 8009bb8:	b909      	cbnz	r1, 8009bbe <__lo0bits+0x32>
 8009bba:	3208      	adds	r2, #8
 8009bbc:	0a1b      	lsrs	r3, r3, #8
 8009bbe:	0719      	lsls	r1, r3, #28
 8009bc0:	bf04      	itt	eq
 8009bc2:	091b      	lsreq	r3, r3, #4
 8009bc4:	3204      	addeq	r2, #4
 8009bc6:	0799      	lsls	r1, r3, #30
 8009bc8:	bf04      	itt	eq
 8009bca:	089b      	lsreq	r3, r3, #2
 8009bcc:	3202      	addeq	r2, #2
 8009bce:	07d9      	lsls	r1, r3, #31
 8009bd0:	d403      	bmi.n	8009bda <__lo0bits+0x4e>
 8009bd2:	085b      	lsrs	r3, r3, #1
 8009bd4:	f102 0201 	add.w	r2, r2, #1
 8009bd8:	d003      	beq.n	8009be2 <__lo0bits+0x56>
 8009bda:	6003      	str	r3, [r0, #0]
 8009bdc:	e7e5      	b.n	8009baa <__lo0bits+0x1e>
 8009bde:	2200      	movs	r2, #0
 8009be0:	e7e3      	b.n	8009baa <__lo0bits+0x1e>
 8009be2:	2220      	movs	r2, #32
 8009be4:	e7e1      	b.n	8009baa <__lo0bits+0x1e>
	...

08009be8 <__i2b>:
 8009be8:	b510      	push	{r4, lr}
 8009bea:	460c      	mov	r4, r1
 8009bec:	2101      	movs	r1, #1
 8009bee:	f7ff ff05 	bl	80099fc <_Balloc>
 8009bf2:	4602      	mov	r2, r0
 8009bf4:	b928      	cbnz	r0, 8009c02 <__i2b+0x1a>
 8009bf6:	4b05      	ldr	r3, [pc, #20]	; (8009c0c <__i2b+0x24>)
 8009bf8:	4805      	ldr	r0, [pc, #20]	; (8009c10 <__i2b+0x28>)
 8009bfa:	f240 1145 	movw	r1, #325	; 0x145
 8009bfe:	f000 fcb7 	bl	800a570 <__assert_func>
 8009c02:	2301      	movs	r3, #1
 8009c04:	6144      	str	r4, [r0, #20]
 8009c06:	6103      	str	r3, [r0, #16]
 8009c08:	bd10      	pop	{r4, pc}
 8009c0a:	bf00      	nop
 8009c0c:	0800ad64 	.word	0x0800ad64
 8009c10:	0800ad75 	.word	0x0800ad75

08009c14 <__multiply>:
 8009c14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c18:	4691      	mov	r9, r2
 8009c1a:	690a      	ldr	r2, [r1, #16]
 8009c1c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009c20:	429a      	cmp	r2, r3
 8009c22:	bfb8      	it	lt
 8009c24:	460b      	movlt	r3, r1
 8009c26:	460c      	mov	r4, r1
 8009c28:	bfbc      	itt	lt
 8009c2a:	464c      	movlt	r4, r9
 8009c2c:	4699      	movlt	r9, r3
 8009c2e:	6927      	ldr	r7, [r4, #16]
 8009c30:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009c34:	68a3      	ldr	r3, [r4, #8]
 8009c36:	6861      	ldr	r1, [r4, #4]
 8009c38:	eb07 060a 	add.w	r6, r7, sl
 8009c3c:	42b3      	cmp	r3, r6
 8009c3e:	b085      	sub	sp, #20
 8009c40:	bfb8      	it	lt
 8009c42:	3101      	addlt	r1, #1
 8009c44:	f7ff feda 	bl	80099fc <_Balloc>
 8009c48:	b930      	cbnz	r0, 8009c58 <__multiply+0x44>
 8009c4a:	4602      	mov	r2, r0
 8009c4c:	4b44      	ldr	r3, [pc, #272]	; (8009d60 <__multiply+0x14c>)
 8009c4e:	4845      	ldr	r0, [pc, #276]	; (8009d64 <__multiply+0x150>)
 8009c50:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8009c54:	f000 fc8c 	bl	800a570 <__assert_func>
 8009c58:	f100 0514 	add.w	r5, r0, #20
 8009c5c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009c60:	462b      	mov	r3, r5
 8009c62:	2200      	movs	r2, #0
 8009c64:	4543      	cmp	r3, r8
 8009c66:	d321      	bcc.n	8009cac <__multiply+0x98>
 8009c68:	f104 0314 	add.w	r3, r4, #20
 8009c6c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009c70:	f109 0314 	add.w	r3, r9, #20
 8009c74:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009c78:	9202      	str	r2, [sp, #8]
 8009c7a:	1b3a      	subs	r2, r7, r4
 8009c7c:	3a15      	subs	r2, #21
 8009c7e:	f022 0203 	bic.w	r2, r2, #3
 8009c82:	3204      	adds	r2, #4
 8009c84:	f104 0115 	add.w	r1, r4, #21
 8009c88:	428f      	cmp	r7, r1
 8009c8a:	bf38      	it	cc
 8009c8c:	2204      	movcc	r2, #4
 8009c8e:	9201      	str	r2, [sp, #4]
 8009c90:	9a02      	ldr	r2, [sp, #8]
 8009c92:	9303      	str	r3, [sp, #12]
 8009c94:	429a      	cmp	r2, r3
 8009c96:	d80c      	bhi.n	8009cb2 <__multiply+0x9e>
 8009c98:	2e00      	cmp	r6, #0
 8009c9a:	dd03      	ble.n	8009ca4 <__multiply+0x90>
 8009c9c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d05b      	beq.n	8009d5c <__multiply+0x148>
 8009ca4:	6106      	str	r6, [r0, #16]
 8009ca6:	b005      	add	sp, #20
 8009ca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cac:	f843 2b04 	str.w	r2, [r3], #4
 8009cb0:	e7d8      	b.n	8009c64 <__multiply+0x50>
 8009cb2:	f8b3 a000 	ldrh.w	sl, [r3]
 8009cb6:	f1ba 0f00 	cmp.w	sl, #0
 8009cba:	d024      	beq.n	8009d06 <__multiply+0xf2>
 8009cbc:	f104 0e14 	add.w	lr, r4, #20
 8009cc0:	46a9      	mov	r9, r5
 8009cc2:	f04f 0c00 	mov.w	ip, #0
 8009cc6:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009cca:	f8d9 1000 	ldr.w	r1, [r9]
 8009cce:	fa1f fb82 	uxth.w	fp, r2
 8009cd2:	b289      	uxth	r1, r1
 8009cd4:	fb0a 110b 	mla	r1, sl, fp, r1
 8009cd8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009cdc:	f8d9 2000 	ldr.w	r2, [r9]
 8009ce0:	4461      	add	r1, ip
 8009ce2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009ce6:	fb0a c20b 	mla	r2, sl, fp, ip
 8009cea:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009cee:	b289      	uxth	r1, r1
 8009cf0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009cf4:	4577      	cmp	r7, lr
 8009cf6:	f849 1b04 	str.w	r1, [r9], #4
 8009cfa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009cfe:	d8e2      	bhi.n	8009cc6 <__multiply+0xb2>
 8009d00:	9a01      	ldr	r2, [sp, #4]
 8009d02:	f845 c002 	str.w	ip, [r5, r2]
 8009d06:	9a03      	ldr	r2, [sp, #12]
 8009d08:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009d0c:	3304      	adds	r3, #4
 8009d0e:	f1b9 0f00 	cmp.w	r9, #0
 8009d12:	d021      	beq.n	8009d58 <__multiply+0x144>
 8009d14:	6829      	ldr	r1, [r5, #0]
 8009d16:	f104 0c14 	add.w	ip, r4, #20
 8009d1a:	46ae      	mov	lr, r5
 8009d1c:	f04f 0a00 	mov.w	sl, #0
 8009d20:	f8bc b000 	ldrh.w	fp, [ip]
 8009d24:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009d28:	fb09 220b 	mla	r2, r9, fp, r2
 8009d2c:	4452      	add	r2, sl
 8009d2e:	b289      	uxth	r1, r1
 8009d30:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009d34:	f84e 1b04 	str.w	r1, [lr], #4
 8009d38:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009d3c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009d40:	f8be 1000 	ldrh.w	r1, [lr]
 8009d44:	fb09 110a 	mla	r1, r9, sl, r1
 8009d48:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8009d4c:	4567      	cmp	r7, ip
 8009d4e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009d52:	d8e5      	bhi.n	8009d20 <__multiply+0x10c>
 8009d54:	9a01      	ldr	r2, [sp, #4]
 8009d56:	50a9      	str	r1, [r5, r2]
 8009d58:	3504      	adds	r5, #4
 8009d5a:	e799      	b.n	8009c90 <__multiply+0x7c>
 8009d5c:	3e01      	subs	r6, #1
 8009d5e:	e79b      	b.n	8009c98 <__multiply+0x84>
 8009d60:	0800ad64 	.word	0x0800ad64
 8009d64:	0800ad75 	.word	0x0800ad75

08009d68 <__pow5mult>:
 8009d68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d6c:	4615      	mov	r5, r2
 8009d6e:	f012 0203 	ands.w	r2, r2, #3
 8009d72:	4606      	mov	r6, r0
 8009d74:	460f      	mov	r7, r1
 8009d76:	d007      	beq.n	8009d88 <__pow5mult+0x20>
 8009d78:	4c25      	ldr	r4, [pc, #148]	; (8009e10 <__pow5mult+0xa8>)
 8009d7a:	3a01      	subs	r2, #1
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009d82:	f7ff fe9d 	bl	8009ac0 <__multadd>
 8009d86:	4607      	mov	r7, r0
 8009d88:	10ad      	asrs	r5, r5, #2
 8009d8a:	d03d      	beq.n	8009e08 <__pow5mult+0xa0>
 8009d8c:	69f4      	ldr	r4, [r6, #28]
 8009d8e:	b97c      	cbnz	r4, 8009db0 <__pow5mult+0x48>
 8009d90:	2010      	movs	r0, #16
 8009d92:	f7ff fd7f 	bl	8009894 <malloc>
 8009d96:	4602      	mov	r2, r0
 8009d98:	61f0      	str	r0, [r6, #28]
 8009d9a:	b928      	cbnz	r0, 8009da8 <__pow5mult+0x40>
 8009d9c:	4b1d      	ldr	r3, [pc, #116]	; (8009e14 <__pow5mult+0xac>)
 8009d9e:	481e      	ldr	r0, [pc, #120]	; (8009e18 <__pow5mult+0xb0>)
 8009da0:	f240 11b3 	movw	r1, #435	; 0x1b3
 8009da4:	f000 fbe4 	bl	800a570 <__assert_func>
 8009da8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009dac:	6004      	str	r4, [r0, #0]
 8009dae:	60c4      	str	r4, [r0, #12]
 8009db0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8009db4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009db8:	b94c      	cbnz	r4, 8009dce <__pow5mult+0x66>
 8009dba:	f240 2171 	movw	r1, #625	; 0x271
 8009dbe:	4630      	mov	r0, r6
 8009dc0:	f7ff ff12 	bl	8009be8 <__i2b>
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	f8c8 0008 	str.w	r0, [r8, #8]
 8009dca:	4604      	mov	r4, r0
 8009dcc:	6003      	str	r3, [r0, #0]
 8009dce:	f04f 0900 	mov.w	r9, #0
 8009dd2:	07eb      	lsls	r3, r5, #31
 8009dd4:	d50a      	bpl.n	8009dec <__pow5mult+0x84>
 8009dd6:	4639      	mov	r1, r7
 8009dd8:	4622      	mov	r2, r4
 8009dda:	4630      	mov	r0, r6
 8009ddc:	f7ff ff1a 	bl	8009c14 <__multiply>
 8009de0:	4639      	mov	r1, r7
 8009de2:	4680      	mov	r8, r0
 8009de4:	4630      	mov	r0, r6
 8009de6:	f7ff fe49 	bl	8009a7c <_Bfree>
 8009dea:	4647      	mov	r7, r8
 8009dec:	106d      	asrs	r5, r5, #1
 8009dee:	d00b      	beq.n	8009e08 <__pow5mult+0xa0>
 8009df0:	6820      	ldr	r0, [r4, #0]
 8009df2:	b938      	cbnz	r0, 8009e04 <__pow5mult+0x9c>
 8009df4:	4622      	mov	r2, r4
 8009df6:	4621      	mov	r1, r4
 8009df8:	4630      	mov	r0, r6
 8009dfa:	f7ff ff0b 	bl	8009c14 <__multiply>
 8009dfe:	6020      	str	r0, [r4, #0]
 8009e00:	f8c0 9000 	str.w	r9, [r0]
 8009e04:	4604      	mov	r4, r0
 8009e06:	e7e4      	b.n	8009dd2 <__pow5mult+0x6a>
 8009e08:	4638      	mov	r0, r7
 8009e0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e0e:	bf00      	nop
 8009e10:	0800aec0 	.word	0x0800aec0
 8009e14:	0800acf5 	.word	0x0800acf5
 8009e18:	0800ad75 	.word	0x0800ad75

08009e1c <__lshift>:
 8009e1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e20:	460c      	mov	r4, r1
 8009e22:	6849      	ldr	r1, [r1, #4]
 8009e24:	6923      	ldr	r3, [r4, #16]
 8009e26:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009e2a:	68a3      	ldr	r3, [r4, #8]
 8009e2c:	4607      	mov	r7, r0
 8009e2e:	4691      	mov	r9, r2
 8009e30:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009e34:	f108 0601 	add.w	r6, r8, #1
 8009e38:	42b3      	cmp	r3, r6
 8009e3a:	db0b      	blt.n	8009e54 <__lshift+0x38>
 8009e3c:	4638      	mov	r0, r7
 8009e3e:	f7ff fddd 	bl	80099fc <_Balloc>
 8009e42:	4605      	mov	r5, r0
 8009e44:	b948      	cbnz	r0, 8009e5a <__lshift+0x3e>
 8009e46:	4602      	mov	r2, r0
 8009e48:	4b28      	ldr	r3, [pc, #160]	; (8009eec <__lshift+0xd0>)
 8009e4a:	4829      	ldr	r0, [pc, #164]	; (8009ef0 <__lshift+0xd4>)
 8009e4c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8009e50:	f000 fb8e 	bl	800a570 <__assert_func>
 8009e54:	3101      	adds	r1, #1
 8009e56:	005b      	lsls	r3, r3, #1
 8009e58:	e7ee      	b.n	8009e38 <__lshift+0x1c>
 8009e5a:	2300      	movs	r3, #0
 8009e5c:	f100 0114 	add.w	r1, r0, #20
 8009e60:	f100 0210 	add.w	r2, r0, #16
 8009e64:	4618      	mov	r0, r3
 8009e66:	4553      	cmp	r3, sl
 8009e68:	db33      	blt.n	8009ed2 <__lshift+0xb6>
 8009e6a:	6920      	ldr	r0, [r4, #16]
 8009e6c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009e70:	f104 0314 	add.w	r3, r4, #20
 8009e74:	f019 091f 	ands.w	r9, r9, #31
 8009e78:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009e7c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009e80:	d02b      	beq.n	8009eda <__lshift+0xbe>
 8009e82:	f1c9 0e20 	rsb	lr, r9, #32
 8009e86:	468a      	mov	sl, r1
 8009e88:	2200      	movs	r2, #0
 8009e8a:	6818      	ldr	r0, [r3, #0]
 8009e8c:	fa00 f009 	lsl.w	r0, r0, r9
 8009e90:	4310      	orrs	r0, r2
 8009e92:	f84a 0b04 	str.w	r0, [sl], #4
 8009e96:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e9a:	459c      	cmp	ip, r3
 8009e9c:	fa22 f20e 	lsr.w	r2, r2, lr
 8009ea0:	d8f3      	bhi.n	8009e8a <__lshift+0x6e>
 8009ea2:	ebac 0304 	sub.w	r3, ip, r4
 8009ea6:	3b15      	subs	r3, #21
 8009ea8:	f023 0303 	bic.w	r3, r3, #3
 8009eac:	3304      	adds	r3, #4
 8009eae:	f104 0015 	add.w	r0, r4, #21
 8009eb2:	4584      	cmp	ip, r0
 8009eb4:	bf38      	it	cc
 8009eb6:	2304      	movcc	r3, #4
 8009eb8:	50ca      	str	r2, [r1, r3]
 8009eba:	b10a      	cbz	r2, 8009ec0 <__lshift+0xa4>
 8009ebc:	f108 0602 	add.w	r6, r8, #2
 8009ec0:	3e01      	subs	r6, #1
 8009ec2:	4638      	mov	r0, r7
 8009ec4:	612e      	str	r6, [r5, #16]
 8009ec6:	4621      	mov	r1, r4
 8009ec8:	f7ff fdd8 	bl	8009a7c <_Bfree>
 8009ecc:	4628      	mov	r0, r5
 8009ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ed2:	f842 0f04 	str.w	r0, [r2, #4]!
 8009ed6:	3301      	adds	r3, #1
 8009ed8:	e7c5      	b.n	8009e66 <__lshift+0x4a>
 8009eda:	3904      	subs	r1, #4
 8009edc:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ee0:	f841 2f04 	str.w	r2, [r1, #4]!
 8009ee4:	459c      	cmp	ip, r3
 8009ee6:	d8f9      	bhi.n	8009edc <__lshift+0xc0>
 8009ee8:	e7ea      	b.n	8009ec0 <__lshift+0xa4>
 8009eea:	bf00      	nop
 8009eec:	0800ad64 	.word	0x0800ad64
 8009ef0:	0800ad75 	.word	0x0800ad75

08009ef4 <__mcmp>:
 8009ef4:	b530      	push	{r4, r5, lr}
 8009ef6:	6902      	ldr	r2, [r0, #16]
 8009ef8:	690c      	ldr	r4, [r1, #16]
 8009efa:	1b12      	subs	r2, r2, r4
 8009efc:	d10e      	bne.n	8009f1c <__mcmp+0x28>
 8009efe:	f100 0314 	add.w	r3, r0, #20
 8009f02:	3114      	adds	r1, #20
 8009f04:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009f08:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009f0c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009f10:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009f14:	42a5      	cmp	r5, r4
 8009f16:	d003      	beq.n	8009f20 <__mcmp+0x2c>
 8009f18:	d305      	bcc.n	8009f26 <__mcmp+0x32>
 8009f1a:	2201      	movs	r2, #1
 8009f1c:	4610      	mov	r0, r2
 8009f1e:	bd30      	pop	{r4, r5, pc}
 8009f20:	4283      	cmp	r3, r0
 8009f22:	d3f3      	bcc.n	8009f0c <__mcmp+0x18>
 8009f24:	e7fa      	b.n	8009f1c <__mcmp+0x28>
 8009f26:	f04f 32ff 	mov.w	r2, #4294967295
 8009f2a:	e7f7      	b.n	8009f1c <__mcmp+0x28>

08009f2c <__mdiff>:
 8009f2c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f30:	460c      	mov	r4, r1
 8009f32:	4606      	mov	r6, r0
 8009f34:	4611      	mov	r1, r2
 8009f36:	4620      	mov	r0, r4
 8009f38:	4690      	mov	r8, r2
 8009f3a:	f7ff ffdb 	bl	8009ef4 <__mcmp>
 8009f3e:	1e05      	subs	r5, r0, #0
 8009f40:	d110      	bne.n	8009f64 <__mdiff+0x38>
 8009f42:	4629      	mov	r1, r5
 8009f44:	4630      	mov	r0, r6
 8009f46:	f7ff fd59 	bl	80099fc <_Balloc>
 8009f4a:	b930      	cbnz	r0, 8009f5a <__mdiff+0x2e>
 8009f4c:	4b3a      	ldr	r3, [pc, #232]	; (800a038 <__mdiff+0x10c>)
 8009f4e:	4602      	mov	r2, r0
 8009f50:	f240 2137 	movw	r1, #567	; 0x237
 8009f54:	4839      	ldr	r0, [pc, #228]	; (800a03c <__mdiff+0x110>)
 8009f56:	f000 fb0b 	bl	800a570 <__assert_func>
 8009f5a:	2301      	movs	r3, #1
 8009f5c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009f60:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f64:	bfa4      	itt	ge
 8009f66:	4643      	movge	r3, r8
 8009f68:	46a0      	movge	r8, r4
 8009f6a:	4630      	mov	r0, r6
 8009f6c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009f70:	bfa6      	itte	ge
 8009f72:	461c      	movge	r4, r3
 8009f74:	2500      	movge	r5, #0
 8009f76:	2501      	movlt	r5, #1
 8009f78:	f7ff fd40 	bl	80099fc <_Balloc>
 8009f7c:	b920      	cbnz	r0, 8009f88 <__mdiff+0x5c>
 8009f7e:	4b2e      	ldr	r3, [pc, #184]	; (800a038 <__mdiff+0x10c>)
 8009f80:	4602      	mov	r2, r0
 8009f82:	f240 2145 	movw	r1, #581	; 0x245
 8009f86:	e7e5      	b.n	8009f54 <__mdiff+0x28>
 8009f88:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009f8c:	6926      	ldr	r6, [r4, #16]
 8009f8e:	60c5      	str	r5, [r0, #12]
 8009f90:	f104 0914 	add.w	r9, r4, #20
 8009f94:	f108 0514 	add.w	r5, r8, #20
 8009f98:	f100 0e14 	add.w	lr, r0, #20
 8009f9c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009fa0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009fa4:	f108 0210 	add.w	r2, r8, #16
 8009fa8:	46f2      	mov	sl, lr
 8009faa:	2100      	movs	r1, #0
 8009fac:	f859 3b04 	ldr.w	r3, [r9], #4
 8009fb0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009fb4:	fa11 f88b 	uxtah	r8, r1, fp
 8009fb8:	b299      	uxth	r1, r3
 8009fba:	0c1b      	lsrs	r3, r3, #16
 8009fbc:	eba8 0801 	sub.w	r8, r8, r1
 8009fc0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009fc4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009fc8:	fa1f f888 	uxth.w	r8, r8
 8009fcc:	1419      	asrs	r1, r3, #16
 8009fce:	454e      	cmp	r6, r9
 8009fd0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009fd4:	f84a 3b04 	str.w	r3, [sl], #4
 8009fd8:	d8e8      	bhi.n	8009fac <__mdiff+0x80>
 8009fda:	1b33      	subs	r3, r6, r4
 8009fdc:	3b15      	subs	r3, #21
 8009fde:	f023 0303 	bic.w	r3, r3, #3
 8009fe2:	3304      	adds	r3, #4
 8009fe4:	3415      	adds	r4, #21
 8009fe6:	42a6      	cmp	r6, r4
 8009fe8:	bf38      	it	cc
 8009fea:	2304      	movcc	r3, #4
 8009fec:	441d      	add	r5, r3
 8009fee:	4473      	add	r3, lr
 8009ff0:	469e      	mov	lr, r3
 8009ff2:	462e      	mov	r6, r5
 8009ff4:	4566      	cmp	r6, ip
 8009ff6:	d30e      	bcc.n	800a016 <__mdiff+0xea>
 8009ff8:	f10c 0203 	add.w	r2, ip, #3
 8009ffc:	1b52      	subs	r2, r2, r5
 8009ffe:	f022 0203 	bic.w	r2, r2, #3
 800a002:	3d03      	subs	r5, #3
 800a004:	45ac      	cmp	ip, r5
 800a006:	bf38      	it	cc
 800a008:	2200      	movcc	r2, #0
 800a00a:	4413      	add	r3, r2
 800a00c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800a010:	b17a      	cbz	r2, 800a032 <__mdiff+0x106>
 800a012:	6107      	str	r7, [r0, #16]
 800a014:	e7a4      	b.n	8009f60 <__mdiff+0x34>
 800a016:	f856 8b04 	ldr.w	r8, [r6], #4
 800a01a:	fa11 f288 	uxtah	r2, r1, r8
 800a01e:	1414      	asrs	r4, r2, #16
 800a020:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a024:	b292      	uxth	r2, r2
 800a026:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a02a:	f84e 2b04 	str.w	r2, [lr], #4
 800a02e:	1421      	asrs	r1, r4, #16
 800a030:	e7e0      	b.n	8009ff4 <__mdiff+0xc8>
 800a032:	3f01      	subs	r7, #1
 800a034:	e7ea      	b.n	800a00c <__mdiff+0xe0>
 800a036:	bf00      	nop
 800a038:	0800ad64 	.word	0x0800ad64
 800a03c:	0800ad75 	.word	0x0800ad75

0800a040 <__d2b>:
 800a040:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a044:	460f      	mov	r7, r1
 800a046:	2101      	movs	r1, #1
 800a048:	ec59 8b10 	vmov	r8, r9, d0
 800a04c:	4616      	mov	r6, r2
 800a04e:	f7ff fcd5 	bl	80099fc <_Balloc>
 800a052:	4604      	mov	r4, r0
 800a054:	b930      	cbnz	r0, 800a064 <__d2b+0x24>
 800a056:	4602      	mov	r2, r0
 800a058:	4b24      	ldr	r3, [pc, #144]	; (800a0ec <__d2b+0xac>)
 800a05a:	4825      	ldr	r0, [pc, #148]	; (800a0f0 <__d2b+0xb0>)
 800a05c:	f240 310f 	movw	r1, #783	; 0x30f
 800a060:	f000 fa86 	bl	800a570 <__assert_func>
 800a064:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a068:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a06c:	bb2d      	cbnz	r5, 800a0ba <__d2b+0x7a>
 800a06e:	9301      	str	r3, [sp, #4]
 800a070:	f1b8 0300 	subs.w	r3, r8, #0
 800a074:	d026      	beq.n	800a0c4 <__d2b+0x84>
 800a076:	4668      	mov	r0, sp
 800a078:	9300      	str	r3, [sp, #0]
 800a07a:	f7ff fd87 	bl	8009b8c <__lo0bits>
 800a07e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a082:	b1e8      	cbz	r0, 800a0c0 <__d2b+0x80>
 800a084:	f1c0 0320 	rsb	r3, r0, #32
 800a088:	fa02 f303 	lsl.w	r3, r2, r3
 800a08c:	430b      	orrs	r3, r1
 800a08e:	40c2      	lsrs	r2, r0
 800a090:	6163      	str	r3, [r4, #20]
 800a092:	9201      	str	r2, [sp, #4]
 800a094:	9b01      	ldr	r3, [sp, #4]
 800a096:	61a3      	str	r3, [r4, #24]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	bf14      	ite	ne
 800a09c:	2202      	movne	r2, #2
 800a09e:	2201      	moveq	r2, #1
 800a0a0:	6122      	str	r2, [r4, #16]
 800a0a2:	b1bd      	cbz	r5, 800a0d4 <__d2b+0x94>
 800a0a4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a0a8:	4405      	add	r5, r0
 800a0aa:	603d      	str	r5, [r7, #0]
 800a0ac:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a0b0:	6030      	str	r0, [r6, #0]
 800a0b2:	4620      	mov	r0, r4
 800a0b4:	b003      	add	sp, #12
 800a0b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a0ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a0be:	e7d6      	b.n	800a06e <__d2b+0x2e>
 800a0c0:	6161      	str	r1, [r4, #20]
 800a0c2:	e7e7      	b.n	800a094 <__d2b+0x54>
 800a0c4:	a801      	add	r0, sp, #4
 800a0c6:	f7ff fd61 	bl	8009b8c <__lo0bits>
 800a0ca:	9b01      	ldr	r3, [sp, #4]
 800a0cc:	6163      	str	r3, [r4, #20]
 800a0ce:	3020      	adds	r0, #32
 800a0d0:	2201      	movs	r2, #1
 800a0d2:	e7e5      	b.n	800a0a0 <__d2b+0x60>
 800a0d4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a0d8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a0dc:	6038      	str	r0, [r7, #0]
 800a0de:	6918      	ldr	r0, [r3, #16]
 800a0e0:	f7ff fd34 	bl	8009b4c <__hi0bits>
 800a0e4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a0e8:	e7e2      	b.n	800a0b0 <__d2b+0x70>
 800a0ea:	bf00      	nop
 800a0ec:	0800ad64 	.word	0x0800ad64
 800a0f0:	0800ad75 	.word	0x0800ad75

0800a0f4 <__ssputs_r>:
 800a0f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a0f8:	688e      	ldr	r6, [r1, #8]
 800a0fa:	461f      	mov	r7, r3
 800a0fc:	42be      	cmp	r6, r7
 800a0fe:	680b      	ldr	r3, [r1, #0]
 800a100:	4682      	mov	sl, r0
 800a102:	460c      	mov	r4, r1
 800a104:	4690      	mov	r8, r2
 800a106:	d82c      	bhi.n	800a162 <__ssputs_r+0x6e>
 800a108:	898a      	ldrh	r2, [r1, #12]
 800a10a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a10e:	d026      	beq.n	800a15e <__ssputs_r+0x6a>
 800a110:	6965      	ldr	r5, [r4, #20]
 800a112:	6909      	ldr	r1, [r1, #16]
 800a114:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a118:	eba3 0901 	sub.w	r9, r3, r1
 800a11c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a120:	1c7b      	adds	r3, r7, #1
 800a122:	444b      	add	r3, r9
 800a124:	106d      	asrs	r5, r5, #1
 800a126:	429d      	cmp	r5, r3
 800a128:	bf38      	it	cc
 800a12a:	461d      	movcc	r5, r3
 800a12c:	0553      	lsls	r3, r2, #21
 800a12e:	d527      	bpl.n	800a180 <__ssputs_r+0x8c>
 800a130:	4629      	mov	r1, r5
 800a132:	f7ff fbd7 	bl	80098e4 <_malloc_r>
 800a136:	4606      	mov	r6, r0
 800a138:	b360      	cbz	r0, 800a194 <__ssputs_r+0xa0>
 800a13a:	6921      	ldr	r1, [r4, #16]
 800a13c:	464a      	mov	r2, r9
 800a13e:	f000 fa09 	bl	800a554 <memcpy>
 800a142:	89a3      	ldrh	r3, [r4, #12]
 800a144:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a148:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a14c:	81a3      	strh	r3, [r4, #12]
 800a14e:	6126      	str	r6, [r4, #16]
 800a150:	6165      	str	r5, [r4, #20]
 800a152:	444e      	add	r6, r9
 800a154:	eba5 0509 	sub.w	r5, r5, r9
 800a158:	6026      	str	r6, [r4, #0]
 800a15a:	60a5      	str	r5, [r4, #8]
 800a15c:	463e      	mov	r6, r7
 800a15e:	42be      	cmp	r6, r7
 800a160:	d900      	bls.n	800a164 <__ssputs_r+0x70>
 800a162:	463e      	mov	r6, r7
 800a164:	6820      	ldr	r0, [r4, #0]
 800a166:	4632      	mov	r2, r6
 800a168:	4641      	mov	r1, r8
 800a16a:	f000 f9c9 	bl	800a500 <memmove>
 800a16e:	68a3      	ldr	r3, [r4, #8]
 800a170:	1b9b      	subs	r3, r3, r6
 800a172:	60a3      	str	r3, [r4, #8]
 800a174:	6823      	ldr	r3, [r4, #0]
 800a176:	4433      	add	r3, r6
 800a178:	6023      	str	r3, [r4, #0]
 800a17a:	2000      	movs	r0, #0
 800a17c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a180:	462a      	mov	r2, r5
 800a182:	f000 fa3b 	bl	800a5fc <_realloc_r>
 800a186:	4606      	mov	r6, r0
 800a188:	2800      	cmp	r0, #0
 800a18a:	d1e0      	bne.n	800a14e <__ssputs_r+0x5a>
 800a18c:	6921      	ldr	r1, [r4, #16]
 800a18e:	4650      	mov	r0, sl
 800a190:	f7ff fb34 	bl	80097fc <_free_r>
 800a194:	230c      	movs	r3, #12
 800a196:	f8ca 3000 	str.w	r3, [sl]
 800a19a:	89a3      	ldrh	r3, [r4, #12]
 800a19c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a1a0:	81a3      	strh	r3, [r4, #12]
 800a1a2:	f04f 30ff 	mov.w	r0, #4294967295
 800a1a6:	e7e9      	b.n	800a17c <__ssputs_r+0x88>

0800a1a8 <_svfiprintf_r>:
 800a1a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1ac:	4698      	mov	r8, r3
 800a1ae:	898b      	ldrh	r3, [r1, #12]
 800a1b0:	061b      	lsls	r3, r3, #24
 800a1b2:	b09d      	sub	sp, #116	; 0x74
 800a1b4:	4607      	mov	r7, r0
 800a1b6:	460d      	mov	r5, r1
 800a1b8:	4614      	mov	r4, r2
 800a1ba:	d50e      	bpl.n	800a1da <_svfiprintf_r+0x32>
 800a1bc:	690b      	ldr	r3, [r1, #16]
 800a1be:	b963      	cbnz	r3, 800a1da <_svfiprintf_r+0x32>
 800a1c0:	2140      	movs	r1, #64	; 0x40
 800a1c2:	f7ff fb8f 	bl	80098e4 <_malloc_r>
 800a1c6:	6028      	str	r0, [r5, #0]
 800a1c8:	6128      	str	r0, [r5, #16]
 800a1ca:	b920      	cbnz	r0, 800a1d6 <_svfiprintf_r+0x2e>
 800a1cc:	230c      	movs	r3, #12
 800a1ce:	603b      	str	r3, [r7, #0]
 800a1d0:	f04f 30ff 	mov.w	r0, #4294967295
 800a1d4:	e0d0      	b.n	800a378 <_svfiprintf_r+0x1d0>
 800a1d6:	2340      	movs	r3, #64	; 0x40
 800a1d8:	616b      	str	r3, [r5, #20]
 800a1da:	2300      	movs	r3, #0
 800a1dc:	9309      	str	r3, [sp, #36]	; 0x24
 800a1de:	2320      	movs	r3, #32
 800a1e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a1e4:	f8cd 800c 	str.w	r8, [sp, #12]
 800a1e8:	2330      	movs	r3, #48	; 0x30
 800a1ea:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a390 <_svfiprintf_r+0x1e8>
 800a1ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a1f2:	f04f 0901 	mov.w	r9, #1
 800a1f6:	4623      	mov	r3, r4
 800a1f8:	469a      	mov	sl, r3
 800a1fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a1fe:	b10a      	cbz	r2, 800a204 <_svfiprintf_r+0x5c>
 800a200:	2a25      	cmp	r2, #37	; 0x25
 800a202:	d1f9      	bne.n	800a1f8 <_svfiprintf_r+0x50>
 800a204:	ebba 0b04 	subs.w	fp, sl, r4
 800a208:	d00b      	beq.n	800a222 <_svfiprintf_r+0x7a>
 800a20a:	465b      	mov	r3, fp
 800a20c:	4622      	mov	r2, r4
 800a20e:	4629      	mov	r1, r5
 800a210:	4638      	mov	r0, r7
 800a212:	f7ff ff6f 	bl	800a0f4 <__ssputs_r>
 800a216:	3001      	adds	r0, #1
 800a218:	f000 80a9 	beq.w	800a36e <_svfiprintf_r+0x1c6>
 800a21c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a21e:	445a      	add	r2, fp
 800a220:	9209      	str	r2, [sp, #36]	; 0x24
 800a222:	f89a 3000 	ldrb.w	r3, [sl]
 800a226:	2b00      	cmp	r3, #0
 800a228:	f000 80a1 	beq.w	800a36e <_svfiprintf_r+0x1c6>
 800a22c:	2300      	movs	r3, #0
 800a22e:	f04f 32ff 	mov.w	r2, #4294967295
 800a232:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a236:	f10a 0a01 	add.w	sl, sl, #1
 800a23a:	9304      	str	r3, [sp, #16]
 800a23c:	9307      	str	r3, [sp, #28]
 800a23e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a242:	931a      	str	r3, [sp, #104]	; 0x68
 800a244:	4654      	mov	r4, sl
 800a246:	2205      	movs	r2, #5
 800a248:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a24c:	4850      	ldr	r0, [pc, #320]	; (800a390 <_svfiprintf_r+0x1e8>)
 800a24e:	f7f5 ffbf 	bl	80001d0 <memchr>
 800a252:	9a04      	ldr	r2, [sp, #16]
 800a254:	b9d8      	cbnz	r0, 800a28e <_svfiprintf_r+0xe6>
 800a256:	06d0      	lsls	r0, r2, #27
 800a258:	bf44      	itt	mi
 800a25a:	2320      	movmi	r3, #32
 800a25c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a260:	0711      	lsls	r1, r2, #28
 800a262:	bf44      	itt	mi
 800a264:	232b      	movmi	r3, #43	; 0x2b
 800a266:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a26a:	f89a 3000 	ldrb.w	r3, [sl]
 800a26e:	2b2a      	cmp	r3, #42	; 0x2a
 800a270:	d015      	beq.n	800a29e <_svfiprintf_r+0xf6>
 800a272:	9a07      	ldr	r2, [sp, #28]
 800a274:	4654      	mov	r4, sl
 800a276:	2000      	movs	r0, #0
 800a278:	f04f 0c0a 	mov.w	ip, #10
 800a27c:	4621      	mov	r1, r4
 800a27e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a282:	3b30      	subs	r3, #48	; 0x30
 800a284:	2b09      	cmp	r3, #9
 800a286:	d94d      	bls.n	800a324 <_svfiprintf_r+0x17c>
 800a288:	b1b0      	cbz	r0, 800a2b8 <_svfiprintf_r+0x110>
 800a28a:	9207      	str	r2, [sp, #28]
 800a28c:	e014      	b.n	800a2b8 <_svfiprintf_r+0x110>
 800a28e:	eba0 0308 	sub.w	r3, r0, r8
 800a292:	fa09 f303 	lsl.w	r3, r9, r3
 800a296:	4313      	orrs	r3, r2
 800a298:	9304      	str	r3, [sp, #16]
 800a29a:	46a2      	mov	sl, r4
 800a29c:	e7d2      	b.n	800a244 <_svfiprintf_r+0x9c>
 800a29e:	9b03      	ldr	r3, [sp, #12]
 800a2a0:	1d19      	adds	r1, r3, #4
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	9103      	str	r1, [sp, #12]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	bfbb      	ittet	lt
 800a2aa:	425b      	neglt	r3, r3
 800a2ac:	f042 0202 	orrlt.w	r2, r2, #2
 800a2b0:	9307      	strge	r3, [sp, #28]
 800a2b2:	9307      	strlt	r3, [sp, #28]
 800a2b4:	bfb8      	it	lt
 800a2b6:	9204      	strlt	r2, [sp, #16]
 800a2b8:	7823      	ldrb	r3, [r4, #0]
 800a2ba:	2b2e      	cmp	r3, #46	; 0x2e
 800a2bc:	d10c      	bne.n	800a2d8 <_svfiprintf_r+0x130>
 800a2be:	7863      	ldrb	r3, [r4, #1]
 800a2c0:	2b2a      	cmp	r3, #42	; 0x2a
 800a2c2:	d134      	bne.n	800a32e <_svfiprintf_r+0x186>
 800a2c4:	9b03      	ldr	r3, [sp, #12]
 800a2c6:	1d1a      	adds	r2, r3, #4
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	9203      	str	r2, [sp, #12]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	bfb8      	it	lt
 800a2d0:	f04f 33ff 	movlt.w	r3, #4294967295
 800a2d4:	3402      	adds	r4, #2
 800a2d6:	9305      	str	r3, [sp, #20]
 800a2d8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800a3a0 <_svfiprintf_r+0x1f8>
 800a2dc:	7821      	ldrb	r1, [r4, #0]
 800a2de:	2203      	movs	r2, #3
 800a2e0:	4650      	mov	r0, sl
 800a2e2:	f7f5 ff75 	bl	80001d0 <memchr>
 800a2e6:	b138      	cbz	r0, 800a2f8 <_svfiprintf_r+0x150>
 800a2e8:	9b04      	ldr	r3, [sp, #16]
 800a2ea:	eba0 000a 	sub.w	r0, r0, sl
 800a2ee:	2240      	movs	r2, #64	; 0x40
 800a2f0:	4082      	lsls	r2, r0
 800a2f2:	4313      	orrs	r3, r2
 800a2f4:	3401      	adds	r4, #1
 800a2f6:	9304      	str	r3, [sp, #16]
 800a2f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2fc:	4825      	ldr	r0, [pc, #148]	; (800a394 <_svfiprintf_r+0x1ec>)
 800a2fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a302:	2206      	movs	r2, #6
 800a304:	f7f5 ff64 	bl	80001d0 <memchr>
 800a308:	2800      	cmp	r0, #0
 800a30a:	d038      	beq.n	800a37e <_svfiprintf_r+0x1d6>
 800a30c:	4b22      	ldr	r3, [pc, #136]	; (800a398 <_svfiprintf_r+0x1f0>)
 800a30e:	bb1b      	cbnz	r3, 800a358 <_svfiprintf_r+0x1b0>
 800a310:	9b03      	ldr	r3, [sp, #12]
 800a312:	3307      	adds	r3, #7
 800a314:	f023 0307 	bic.w	r3, r3, #7
 800a318:	3308      	adds	r3, #8
 800a31a:	9303      	str	r3, [sp, #12]
 800a31c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a31e:	4433      	add	r3, r6
 800a320:	9309      	str	r3, [sp, #36]	; 0x24
 800a322:	e768      	b.n	800a1f6 <_svfiprintf_r+0x4e>
 800a324:	fb0c 3202 	mla	r2, ip, r2, r3
 800a328:	460c      	mov	r4, r1
 800a32a:	2001      	movs	r0, #1
 800a32c:	e7a6      	b.n	800a27c <_svfiprintf_r+0xd4>
 800a32e:	2300      	movs	r3, #0
 800a330:	3401      	adds	r4, #1
 800a332:	9305      	str	r3, [sp, #20]
 800a334:	4619      	mov	r1, r3
 800a336:	f04f 0c0a 	mov.w	ip, #10
 800a33a:	4620      	mov	r0, r4
 800a33c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a340:	3a30      	subs	r2, #48	; 0x30
 800a342:	2a09      	cmp	r2, #9
 800a344:	d903      	bls.n	800a34e <_svfiprintf_r+0x1a6>
 800a346:	2b00      	cmp	r3, #0
 800a348:	d0c6      	beq.n	800a2d8 <_svfiprintf_r+0x130>
 800a34a:	9105      	str	r1, [sp, #20]
 800a34c:	e7c4      	b.n	800a2d8 <_svfiprintf_r+0x130>
 800a34e:	fb0c 2101 	mla	r1, ip, r1, r2
 800a352:	4604      	mov	r4, r0
 800a354:	2301      	movs	r3, #1
 800a356:	e7f0      	b.n	800a33a <_svfiprintf_r+0x192>
 800a358:	ab03      	add	r3, sp, #12
 800a35a:	9300      	str	r3, [sp, #0]
 800a35c:	462a      	mov	r2, r5
 800a35e:	4b0f      	ldr	r3, [pc, #60]	; (800a39c <_svfiprintf_r+0x1f4>)
 800a360:	a904      	add	r1, sp, #16
 800a362:	4638      	mov	r0, r7
 800a364:	f7fd fe4e 	bl	8008004 <_printf_float>
 800a368:	1c42      	adds	r2, r0, #1
 800a36a:	4606      	mov	r6, r0
 800a36c:	d1d6      	bne.n	800a31c <_svfiprintf_r+0x174>
 800a36e:	89ab      	ldrh	r3, [r5, #12]
 800a370:	065b      	lsls	r3, r3, #25
 800a372:	f53f af2d 	bmi.w	800a1d0 <_svfiprintf_r+0x28>
 800a376:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a378:	b01d      	add	sp, #116	; 0x74
 800a37a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a37e:	ab03      	add	r3, sp, #12
 800a380:	9300      	str	r3, [sp, #0]
 800a382:	462a      	mov	r2, r5
 800a384:	4b05      	ldr	r3, [pc, #20]	; (800a39c <_svfiprintf_r+0x1f4>)
 800a386:	a904      	add	r1, sp, #16
 800a388:	4638      	mov	r0, r7
 800a38a:	f7fe f8df 	bl	800854c <_printf_i>
 800a38e:	e7eb      	b.n	800a368 <_svfiprintf_r+0x1c0>
 800a390:	0800aecc 	.word	0x0800aecc
 800a394:	0800aed6 	.word	0x0800aed6
 800a398:	08008005 	.word	0x08008005
 800a39c:	0800a0f5 	.word	0x0800a0f5
 800a3a0:	0800aed2 	.word	0x0800aed2

0800a3a4 <__sflush_r>:
 800a3a4:	898a      	ldrh	r2, [r1, #12]
 800a3a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3aa:	4605      	mov	r5, r0
 800a3ac:	0710      	lsls	r0, r2, #28
 800a3ae:	460c      	mov	r4, r1
 800a3b0:	d458      	bmi.n	800a464 <__sflush_r+0xc0>
 800a3b2:	684b      	ldr	r3, [r1, #4]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	dc05      	bgt.n	800a3c4 <__sflush_r+0x20>
 800a3b8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	dc02      	bgt.n	800a3c4 <__sflush_r+0x20>
 800a3be:	2000      	movs	r0, #0
 800a3c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a3c6:	2e00      	cmp	r6, #0
 800a3c8:	d0f9      	beq.n	800a3be <__sflush_r+0x1a>
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a3d0:	682f      	ldr	r7, [r5, #0]
 800a3d2:	6a21      	ldr	r1, [r4, #32]
 800a3d4:	602b      	str	r3, [r5, #0]
 800a3d6:	d032      	beq.n	800a43e <__sflush_r+0x9a>
 800a3d8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a3da:	89a3      	ldrh	r3, [r4, #12]
 800a3dc:	075a      	lsls	r2, r3, #29
 800a3de:	d505      	bpl.n	800a3ec <__sflush_r+0x48>
 800a3e0:	6863      	ldr	r3, [r4, #4]
 800a3e2:	1ac0      	subs	r0, r0, r3
 800a3e4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a3e6:	b10b      	cbz	r3, 800a3ec <__sflush_r+0x48>
 800a3e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a3ea:	1ac0      	subs	r0, r0, r3
 800a3ec:	2300      	movs	r3, #0
 800a3ee:	4602      	mov	r2, r0
 800a3f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a3f2:	6a21      	ldr	r1, [r4, #32]
 800a3f4:	4628      	mov	r0, r5
 800a3f6:	47b0      	blx	r6
 800a3f8:	1c43      	adds	r3, r0, #1
 800a3fa:	89a3      	ldrh	r3, [r4, #12]
 800a3fc:	d106      	bne.n	800a40c <__sflush_r+0x68>
 800a3fe:	6829      	ldr	r1, [r5, #0]
 800a400:	291d      	cmp	r1, #29
 800a402:	d82b      	bhi.n	800a45c <__sflush_r+0xb8>
 800a404:	4a29      	ldr	r2, [pc, #164]	; (800a4ac <__sflush_r+0x108>)
 800a406:	410a      	asrs	r2, r1
 800a408:	07d6      	lsls	r6, r2, #31
 800a40a:	d427      	bmi.n	800a45c <__sflush_r+0xb8>
 800a40c:	2200      	movs	r2, #0
 800a40e:	6062      	str	r2, [r4, #4]
 800a410:	04d9      	lsls	r1, r3, #19
 800a412:	6922      	ldr	r2, [r4, #16]
 800a414:	6022      	str	r2, [r4, #0]
 800a416:	d504      	bpl.n	800a422 <__sflush_r+0x7e>
 800a418:	1c42      	adds	r2, r0, #1
 800a41a:	d101      	bne.n	800a420 <__sflush_r+0x7c>
 800a41c:	682b      	ldr	r3, [r5, #0]
 800a41e:	b903      	cbnz	r3, 800a422 <__sflush_r+0x7e>
 800a420:	6560      	str	r0, [r4, #84]	; 0x54
 800a422:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a424:	602f      	str	r7, [r5, #0]
 800a426:	2900      	cmp	r1, #0
 800a428:	d0c9      	beq.n	800a3be <__sflush_r+0x1a>
 800a42a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a42e:	4299      	cmp	r1, r3
 800a430:	d002      	beq.n	800a438 <__sflush_r+0x94>
 800a432:	4628      	mov	r0, r5
 800a434:	f7ff f9e2 	bl	80097fc <_free_r>
 800a438:	2000      	movs	r0, #0
 800a43a:	6360      	str	r0, [r4, #52]	; 0x34
 800a43c:	e7c0      	b.n	800a3c0 <__sflush_r+0x1c>
 800a43e:	2301      	movs	r3, #1
 800a440:	4628      	mov	r0, r5
 800a442:	47b0      	blx	r6
 800a444:	1c41      	adds	r1, r0, #1
 800a446:	d1c8      	bne.n	800a3da <__sflush_r+0x36>
 800a448:	682b      	ldr	r3, [r5, #0]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d0c5      	beq.n	800a3da <__sflush_r+0x36>
 800a44e:	2b1d      	cmp	r3, #29
 800a450:	d001      	beq.n	800a456 <__sflush_r+0xb2>
 800a452:	2b16      	cmp	r3, #22
 800a454:	d101      	bne.n	800a45a <__sflush_r+0xb6>
 800a456:	602f      	str	r7, [r5, #0]
 800a458:	e7b1      	b.n	800a3be <__sflush_r+0x1a>
 800a45a:	89a3      	ldrh	r3, [r4, #12]
 800a45c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a460:	81a3      	strh	r3, [r4, #12]
 800a462:	e7ad      	b.n	800a3c0 <__sflush_r+0x1c>
 800a464:	690f      	ldr	r7, [r1, #16]
 800a466:	2f00      	cmp	r7, #0
 800a468:	d0a9      	beq.n	800a3be <__sflush_r+0x1a>
 800a46a:	0793      	lsls	r3, r2, #30
 800a46c:	680e      	ldr	r6, [r1, #0]
 800a46e:	bf08      	it	eq
 800a470:	694b      	ldreq	r3, [r1, #20]
 800a472:	600f      	str	r7, [r1, #0]
 800a474:	bf18      	it	ne
 800a476:	2300      	movne	r3, #0
 800a478:	eba6 0807 	sub.w	r8, r6, r7
 800a47c:	608b      	str	r3, [r1, #8]
 800a47e:	f1b8 0f00 	cmp.w	r8, #0
 800a482:	dd9c      	ble.n	800a3be <__sflush_r+0x1a>
 800a484:	6a21      	ldr	r1, [r4, #32]
 800a486:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a488:	4643      	mov	r3, r8
 800a48a:	463a      	mov	r2, r7
 800a48c:	4628      	mov	r0, r5
 800a48e:	47b0      	blx	r6
 800a490:	2800      	cmp	r0, #0
 800a492:	dc06      	bgt.n	800a4a2 <__sflush_r+0xfe>
 800a494:	89a3      	ldrh	r3, [r4, #12]
 800a496:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a49a:	81a3      	strh	r3, [r4, #12]
 800a49c:	f04f 30ff 	mov.w	r0, #4294967295
 800a4a0:	e78e      	b.n	800a3c0 <__sflush_r+0x1c>
 800a4a2:	4407      	add	r7, r0
 800a4a4:	eba8 0800 	sub.w	r8, r8, r0
 800a4a8:	e7e9      	b.n	800a47e <__sflush_r+0xda>
 800a4aa:	bf00      	nop
 800a4ac:	dfbffffe 	.word	0xdfbffffe

0800a4b0 <_fflush_r>:
 800a4b0:	b538      	push	{r3, r4, r5, lr}
 800a4b2:	690b      	ldr	r3, [r1, #16]
 800a4b4:	4605      	mov	r5, r0
 800a4b6:	460c      	mov	r4, r1
 800a4b8:	b913      	cbnz	r3, 800a4c0 <_fflush_r+0x10>
 800a4ba:	2500      	movs	r5, #0
 800a4bc:	4628      	mov	r0, r5
 800a4be:	bd38      	pop	{r3, r4, r5, pc}
 800a4c0:	b118      	cbz	r0, 800a4ca <_fflush_r+0x1a>
 800a4c2:	6a03      	ldr	r3, [r0, #32]
 800a4c4:	b90b      	cbnz	r3, 800a4ca <_fflush_r+0x1a>
 800a4c6:	f7fe f9ef 	bl	80088a8 <__sinit>
 800a4ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d0f3      	beq.n	800a4ba <_fflush_r+0xa>
 800a4d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a4d4:	07d0      	lsls	r0, r2, #31
 800a4d6:	d404      	bmi.n	800a4e2 <_fflush_r+0x32>
 800a4d8:	0599      	lsls	r1, r3, #22
 800a4da:	d402      	bmi.n	800a4e2 <_fflush_r+0x32>
 800a4dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a4de:	f7fe fb0e 	bl	8008afe <__retarget_lock_acquire_recursive>
 800a4e2:	4628      	mov	r0, r5
 800a4e4:	4621      	mov	r1, r4
 800a4e6:	f7ff ff5d 	bl	800a3a4 <__sflush_r>
 800a4ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a4ec:	07da      	lsls	r2, r3, #31
 800a4ee:	4605      	mov	r5, r0
 800a4f0:	d4e4      	bmi.n	800a4bc <_fflush_r+0xc>
 800a4f2:	89a3      	ldrh	r3, [r4, #12]
 800a4f4:	059b      	lsls	r3, r3, #22
 800a4f6:	d4e1      	bmi.n	800a4bc <_fflush_r+0xc>
 800a4f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a4fa:	f7fe fb01 	bl	8008b00 <__retarget_lock_release_recursive>
 800a4fe:	e7dd      	b.n	800a4bc <_fflush_r+0xc>

0800a500 <memmove>:
 800a500:	4288      	cmp	r0, r1
 800a502:	b510      	push	{r4, lr}
 800a504:	eb01 0402 	add.w	r4, r1, r2
 800a508:	d902      	bls.n	800a510 <memmove+0x10>
 800a50a:	4284      	cmp	r4, r0
 800a50c:	4623      	mov	r3, r4
 800a50e:	d807      	bhi.n	800a520 <memmove+0x20>
 800a510:	1e43      	subs	r3, r0, #1
 800a512:	42a1      	cmp	r1, r4
 800a514:	d008      	beq.n	800a528 <memmove+0x28>
 800a516:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a51a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a51e:	e7f8      	b.n	800a512 <memmove+0x12>
 800a520:	4402      	add	r2, r0
 800a522:	4601      	mov	r1, r0
 800a524:	428a      	cmp	r2, r1
 800a526:	d100      	bne.n	800a52a <memmove+0x2a>
 800a528:	bd10      	pop	{r4, pc}
 800a52a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a52e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a532:	e7f7      	b.n	800a524 <memmove+0x24>

0800a534 <_sbrk_r>:
 800a534:	b538      	push	{r3, r4, r5, lr}
 800a536:	4d06      	ldr	r5, [pc, #24]	; (800a550 <_sbrk_r+0x1c>)
 800a538:	2300      	movs	r3, #0
 800a53a:	4604      	mov	r4, r0
 800a53c:	4608      	mov	r0, r1
 800a53e:	602b      	str	r3, [r5, #0]
 800a540:	f7f7 fb62 	bl	8001c08 <_sbrk>
 800a544:	1c43      	adds	r3, r0, #1
 800a546:	d102      	bne.n	800a54e <_sbrk_r+0x1a>
 800a548:	682b      	ldr	r3, [r5, #0]
 800a54a:	b103      	cbz	r3, 800a54e <_sbrk_r+0x1a>
 800a54c:	6023      	str	r3, [r4, #0]
 800a54e:	bd38      	pop	{r3, r4, r5, pc}
 800a550:	20000564 	.word	0x20000564

0800a554 <memcpy>:
 800a554:	440a      	add	r2, r1
 800a556:	4291      	cmp	r1, r2
 800a558:	f100 33ff 	add.w	r3, r0, #4294967295
 800a55c:	d100      	bne.n	800a560 <memcpy+0xc>
 800a55e:	4770      	bx	lr
 800a560:	b510      	push	{r4, lr}
 800a562:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a566:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a56a:	4291      	cmp	r1, r2
 800a56c:	d1f9      	bne.n	800a562 <memcpy+0xe>
 800a56e:	bd10      	pop	{r4, pc}

0800a570 <__assert_func>:
 800a570:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a572:	4614      	mov	r4, r2
 800a574:	461a      	mov	r2, r3
 800a576:	4b09      	ldr	r3, [pc, #36]	; (800a59c <__assert_func+0x2c>)
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	4605      	mov	r5, r0
 800a57c:	68d8      	ldr	r0, [r3, #12]
 800a57e:	b14c      	cbz	r4, 800a594 <__assert_func+0x24>
 800a580:	4b07      	ldr	r3, [pc, #28]	; (800a5a0 <__assert_func+0x30>)
 800a582:	9100      	str	r1, [sp, #0]
 800a584:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a588:	4906      	ldr	r1, [pc, #24]	; (800a5a4 <__assert_func+0x34>)
 800a58a:	462b      	mov	r3, r5
 800a58c:	f000 f872 	bl	800a674 <fiprintf>
 800a590:	f000 f882 	bl	800a698 <abort>
 800a594:	4b04      	ldr	r3, [pc, #16]	; (800a5a8 <__assert_func+0x38>)
 800a596:	461c      	mov	r4, r3
 800a598:	e7f3      	b.n	800a582 <__assert_func+0x12>
 800a59a:	bf00      	nop
 800a59c:	20000064 	.word	0x20000064
 800a5a0:	0800aee7 	.word	0x0800aee7
 800a5a4:	0800aef4 	.word	0x0800aef4
 800a5a8:	0800af22 	.word	0x0800af22

0800a5ac <_calloc_r>:
 800a5ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a5ae:	fba1 2402 	umull	r2, r4, r1, r2
 800a5b2:	b94c      	cbnz	r4, 800a5c8 <_calloc_r+0x1c>
 800a5b4:	4611      	mov	r1, r2
 800a5b6:	9201      	str	r2, [sp, #4]
 800a5b8:	f7ff f994 	bl	80098e4 <_malloc_r>
 800a5bc:	9a01      	ldr	r2, [sp, #4]
 800a5be:	4605      	mov	r5, r0
 800a5c0:	b930      	cbnz	r0, 800a5d0 <_calloc_r+0x24>
 800a5c2:	4628      	mov	r0, r5
 800a5c4:	b003      	add	sp, #12
 800a5c6:	bd30      	pop	{r4, r5, pc}
 800a5c8:	220c      	movs	r2, #12
 800a5ca:	6002      	str	r2, [r0, #0]
 800a5cc:	2500      	movs	r5, #0
 800a5ce:	e7f8      	b.n	800a5c2 <_calloc_r+0x16>
 800a5d0:	4621      	mov	r1, r4
 800a5d2:	f7fe fa16 	bl	8008a02 <memset>
 800a5d6:	e7f4      	b.n	800a5c2 <_calloc_r+0x16>

0800a5d8 <__ascii_mbtowc>:
 800a5d8:	b082      	sub	sp, #8
 800a5da:	b901      	cbnz	r1, 800a5de <__ascii_mbtowc+0x6>
 800a5dc:	a901      	add	r1, sp, #4
 800a5de:	b142      	cbz	r2, 800a5f2 <__ascii_mbtowc+0x1a>
 800a5e0:	b14b      	cbz	r3, 800a5f6 <__ascii_mbtowc+0x1e>
 800a5e2:	7813      	ldrb	r3, [r2, #0]
 800a5e4:	600b      	str	r3, [r1, #0]
 800a5e6:	7812      	ldrb	r2, [r2, #0]
 800a5e8:	1e10      	subs	r0, r2, #0
 800a5ea:	bf18      	it	ne
 800a5ec:	2001      	movne	r0, #1
 800a5ee:	b002      	add	sp, #8
 800a5f0:	4770      	bx	lr
 800a5f2:	4610      	mov	r0, r2
 800a5f4:	e7fb      	b.n	800a5ee <__ascii_mbtowc+0x16>
 800a5f6:	f06f 0001 	mvn.w	r0, #1
 800a5fa:	e7f8      	b.n	800a5ee <__ascii_mbtowc+0x16>

0800a5fc <_realloc_r>:
 800a5fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a600:	4680      	mov	r8, r0
 800a602:	4614      	mov	r4, r2
 800a604:	460e      	mov	r6, r1
 800a606:	b921      	cbnz	r1, 800a612 <_realloc_r+0x16>
 800a608:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a60c:	4611      	mov	r1, r2
 800a60e:	f7ff b969 	b.w	80098e4 <_malloc_r>
 800a612:	b92a      	cbnz	r2, 800a620 <_realloc_r+0x24>
 800a614:	f7ff f8f2 	bl	80097fc <_free_r>
 800a618:	4625      	mov	r5, r4
 800a61a:	4628      	mov	r0, r5
 800a61c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a620:	f000 f841 	bl	800a6a6 <_malloc_usable_size_r>
 800a624:	4284      	cmp	r4, r0
 800a626:	4607      	mov	r7, r0
 800a628:	d802      	bhi.n	800a630 <_realloc_r+0x34>
 800a62a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a62e:	d812      	bhi.n	800a656 <_realloc_r+0x5a>
 800a630:	4621      	mov	r1, r4
 800a632:	4640      	mov	r0, r8
 800a634:	f7ff f956 	bl	80098e4 <_malloc_r>
 800a638:	4605      	mov	r5, r0
 800a63a:	2800      	cmp	r0, #0
 800a63c:	d0ed      	beq.n	800a61a <_realloc_r+0x1e>
 800a63e:	42bc      	cmp	r4, r7
 800a640:	4622      	mov	r2, r4
 800a642:	4631      	mov	r1, r6
 800a644:	bf28      	it	cs
 800a646:	463a      	movcs	r2, r7
 800a648:	f7ff ff84 	bl	800a554 <memcpy>
 800a64c:	4631      	mov	r1, r6
 800a64e:	4640      	mov	r0, r8
 800a650:	f7ff f8d4 	bl	80097fc <_free_r>
 800a654:	e7e1      	b.n	800a61a <_realloc_r+0x1e>
 800a656:	4635      	mov	r5, r6
 800a658:	e7df      	b.n	800a61a <_realloc_r+0x1e>

0800a65a <__ascii_wctomb>:
 800a65a:	b149      	cbz	r1, 800a670 <__ascii_wctomb+0x16>
 800a65c:	2aff      	cmp	r2, #255	; 0xff
 800a65e:	bf85      	ittet	hi
 800a660:	238a      	movhi	r3, #138	; 0x8a
 800a662:	6003      	strhi	r3, [r0, #0]
 800a664:	700a      	strbls	r2, [r1, #0]
 800a666:	f04f 30ff 	movhi.w	r0, #4294967295
 800a66a:	bf98      	it	ls
 800a66c:	2001      	movls	r0, #1
 800a66e:	4770      	bx	lr
 800a670:	4608      	mov	r0, r1
 800a672:	4770      	bx	lr

0800a674 <fiprintf>:
 800a674:	b40e      	push	{r1, r2, r3}
 800a676:	b503      	push	{r0, r1, lr}
 800a678:	4601      	mov	r1, r0
 800a67a:	ab03      	add	r3, sp, #12
 800a67c:	4805      	ldr	r0, [pc, #20]	; (800a694 <fiprintf+0x20>)
 800a67e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a682:	6800      	ldr	r0, [r0, #0]
 800a684:	9301      	str	r3, [sp, #4]
 800a686:	f000 f83f 	bl	800a708 <_vfiprintf_r>
 800a68a:	b002      	add	sp, #8
 800a68c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a690:	b003      	add	sp, #12
 800a692:	4770      	bx	lr
 800a694:	20000064 	.word	0x20000064

0800a698 <abort>:
 800a698:	b508      	push	{r3, lr}
 800a69a:	2006      	movs	r0, #6
 800a69c:	f000 fa0c 	bl	800aab8 <raise>
 800a6a0:	2001      	movs	r0, #1
 800a6a2:	f7f7 fa39 	bl	8001b18 <_exit>

0800a6a6 <_malloc_usable_size_r>:
 800a6a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a6aa:	1f18      	subs	r0, r3, #4
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	bfbc      	itt	lt
 800a6b0:	580b      	ldrlt	r3, [r1, r0]
 800a6b2:	18c0      	addlt	r0, r0, r3
 800a6b4:	4770      	bx	lr

0800a6b6 <__sfputc_r>:
 800a6b6:	6893      	ldr	r3, [r2, #8]
 800a6b8:	3b01      	subs	r3, #1
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	b410      	push	{r4}
 800a6be:	6093      	str	r3, [r2, #8]
 800a6c0:	da08      	bge.n	800a6d4 <__sfputc_r+0x1e>
 800a6c2:	6994      	ldr	r4, [r2, #24]
 800a6c4:	42a3      	cmp	r3, r4
 800a6c6:	db01      	blt.n	800a6cc <__sfputc_r+0x16>
 800a6c8:	290a      	cmp	r1, #10
 800a6ca:	d103      	bne.n	800a6d4 <__sfputc_r+0x1e>
 800a6cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a6d0:	f000 b934 	b.w	800a93c <__swbuf_r>
 800a6d4:	6813      	ldr	r3, [r2, #0]
 800a6d6:	1c58      	adds	r0, r3, #1
 800a6d8:	6010      	str	r0, [r2, #0]
 800a6da:	7019      	strb	r1, [r3, #0]
 800a6dc:	4608      	mov	r0, r1
 800a6de:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a6e2:	4770      	bx	lr

0800a6e4 <__sfputs_r>:
 800a6e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6e6:	4606      	mov	r6, r0
 800a6e8:	460f      	mov	r7, r1
 800a6ea:	4614      	mov	r4, r2
 800a6ec:	18d5      	adds	r5, r2, r3
 800a6ee:	42ac      	cmp	r4, r5
 800a6f0:	d101      	bne.n	800a6f6 <__sfputs_r+0x12>
 800a6f2:	2000      	movs	r0, #0
 800a6f4:	e007      	b.n	800a706 <__sfputs_r+0x22>
 800a6f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6fa:	463a      	mov	r2, r7
 800a6fc:	4630      	mov	r0, r6
 800a6fe:	f7ff ffda 	bl	800a6b6 <__sfputc_r>
 800a702:	1c43      	adds	r3, r0, #1
 800a704:	d1f3      	bne.n	800a6ee <__sfputs_r+0xa>
 800a706:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a708 <_vfiprintf_r>:
 800a708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a70c:	460d      	mov	r5, r1
 800a70e:	b09d      	sub	sp, #116	; 0x74
 800a710:	4614      	mov	r4, r2
 800a712:	4698      	mov	r8, r3
 800a714:	4606      	mov	r6, r0
 800a716:	b118      	cbz	r0, 800a720 <_vfiprintf_r+0x18>
 800a718:	6a03      	ldr	r3, [r0, #32]
 800a71a:	b90b      	cbnz	r3, 800a720 <_vfiprintf_r+0x18>
 800a71c:	f7fe f8c4 	bl	80088a8 <__sinit>
 800a720:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a722:	07d9      	lsls	r1, r3, #31
 800a724:	d405      	bmi.n	800a732 <_vfiprintf_r+0x2a>
 800a726:	89ab      	ldrh	r3, [r5, #12]
 800a728:	059a      	lsls	r2, r3, #22
 800a72a:	d402      	bmi.n	800a732 <_vfiprintf_r+0x2a>
 800a72c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a72e:	f7fe f9e6 	bl	8008afe <__retarget_lock_acquire_recursive>
 800a732:	89ab      	ldrh	r3, [r5, #12]
 800a734:	071b      	lsls	r3, r3, #28
 800a736:	d501      	bpl.n	800a73c <_vfiprintf_r+0x34>
 800a738:	692b      	ldr	r3, [r5, #16]
 800a73a:	b99b      	cbnz	r3, 800a764 <_vfiprintf_r+0x5c>
 800a73c:	4629      	mov	r1, r5
 800a73e:	4630      	mov	r0, r6
 800a740:	f000 f93a 	bl	800a9b8 <__swsetup_r>
 800a744:	b170      	cbz	r0, 800a764 <_vfiprintf_r+0x5c>
 800a746:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a748:	07dc      	lsls	r4, r3, #31
 800a74a:	d504      	bpl.n	800a756 <_vfiprintf_r+0x4e>
 800a74c:	f04f 30ff 	mov.w	r0, #4294967295
 800a750:	b01d      	add	sp, #116	; 0x74
 800a752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a756:	89ab      	ldrh	r3, [r5, #12]
 800a758:	0598      	lsls	r0, r3, #22
 800a75a:	d4f7      	bmi.n	800a74c <_vfiprintf_r+0x44>
 800a75c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a75e:	f7fe f9cf 	bl	8008b00 <__retarget_lock_release_recursive>
 800a762:	e7f3      	b.n	800a74c <_vfiprintf_r+0x44>
 800a764:	2300      	movs	r3, #0
 800a766:	9309      	str	r3, [sp, #36]	; 0x24
 800a768:	2320      	movs	r3, #32
 800a76a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a76e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a772:	2330      	movs	r3, #48	; 0x30
 800a774:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800a928 <_vfiprintf_r+0x220>
 800a778:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a77c:	f04f 0901 	mov.w	r9, #1
 800a780:	4623      	mov	r3, r4
 800a782:	469a      	mov	sl, r3
 800a784:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a788:	b10a      	cbz	r2, 800a78e <_vfiprintf_r+0x86>
 800a78a:	2a25      	cmp	r2, #37	; 0x25
 800a78c:	d1f9      	bne.n	800a782 <_vfiprintf_r+0x7a>
 800a78e:	ebba 0b04 	subs.w	fp, sl, r4
 800a792:	d00b      	beq.n	800a7ac <_vfiprintf_r+0xa4>
 800a794:	465b      	mov	r3, fp
 800a796:	4622      	mov	r2, r4
 800a798:	4629      	mov	r1, r5
 800a79a:	4630      	mov	r0, r6
 800a79c:	f7ff ffa2 	bl	800a6e4 <__sfputs_r>
 800a7a0:	3001      	adds	r0, #1
 800a7a2:	f000 80a9 	beq.w	800a8f8 <_vfiprintf_r+0x1f0>
 800a7a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a7a8:	445a      	add	r2, fp
 800a7aa:	9209      	str	r2, [sp, #36]	; 0x24
 800a7ac:	f89a 3000 	ldrb.w	r3, [sl]
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	f000 80a1 	beq.w	800a8f8 <_vfiprintf_r+0x1f0>
 800a7b6:	2300      	movs	r3, #0
 800a7b8:	f04f 32ff 	mov.w	r2, #4294967295
 800a7bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a7c0:	f10a 0a01 	add.w	sl, sl, #1
 800a7c4:	9304      	str	r3, [sp, #16]
 800a7c6:	9307      	str	r3, [sp, #28]
 800a7c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a7cc:	931a      	str	r3, [sp, #104]	; 0x68
 800a7ce:	4654      	mov	r4, sl
 800a7d0:	2205      	movs	r2, #5
 800a7d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7d6:	4854      	ldr	r0, [pc, #336]	; (800a928 <_vfiprintf_r+0x220>)
 800a7d8:	f7f5 fcfa 	bl	80001d0 <memchr>
 800a7dc:	9a04      	ldr	r2, [sp, #16]
 800a7de:	b9d8      	cbnz	r0, 800a818 <_vfiprintf_r+0x110>
 800a7e0:	06d1      	lsls	r1, r2, #27
 800a7e2:	bf44      	itt	mi
 800a7e4:	2320      	movmi	r3, #32
 800a7e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a7ea:	0713      	lsls	r3, r2, #28
 800a7ec:	bf44      	itt	mi
 800a7ee:	232b      	movmi	r3, #43	; 0x2b
 800a7f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a7f4:	f89a 3000 	ldrb.w	r3, [sl]
 800a7f8:	2b2a      	cmp	r3, #42	; 0x2a
 800a7fa:	d015      	beq.n	800a828 <_vfiprintf_r+0x120>
 800a7fc:	9a07      	ldr	r2, [sp, #28]
 800a7fe:	4654      	mov	r4, sl
 800a800:	2000      	movs	r0, #0
 800a802:	f04f 0c0a 	mov.w	ip, #10
 800a806:	4621      	mov	r1, r4
 800a808:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a80c:	3b30      	subs	r3, #48	; 0x30
 800a80e:	2b09      	cmp	r3, #9
 800a810:	d94d      	bls.n	800a8ae <_vfiprintf_r+0x1a6>
 800a812:	b1b0      	cbz	r0, 800a842 <_vfiprintf_r+0x13a>
 800a814:	9207      	str	r2, [sp, #28]
 800a816:	e014      	b.n	800a842 <_vfiprintf_r+0x13a>
 800a818:	eba0 0308 	sub.w	r3, r0, r8
 800a81c:	fa09 f303 	lsl.w	r3, r9, r3
 800a820:	4313      	orrs	r3, r2
 800a822:	9304      	str	r3, [sp, #16]
 800a824:	46a2      	mov	sl, r4
 800a826:	e7d2      	b.n	800a7ce <_vfiprintf_r+0xc6>
 800a828:	9b03      	ldr	r3, [sp, #12]
 800a82a:	1d19      	adds	r1, r3, #4
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	9103      	str	r1, [sp, #12]
 800a830:	2b00      	cmp	r3, #0
 800a832:	bfbb      	ittet	lt
 800a834:	425b      	neglt	r3, r3
 800a836:	f042 0202 	orrlt.w	r2, r2, #2
 800a83a:	9307      	strge	r3, [sp, #28]
 800a83c:	9307      	strlt	r3, [sp, #28]
 800a83e:	bfb8      	it	lt
 800a840:	9204      	strlt	r2, [sp, #16]
 800a842:	7823      	ldrb	r3, [r4, #0]
 800a844:	2b2e      	cmp	r3, #46	; 0x2e
 800a846:	d10c      	bne.n	800a862 <_vfiprintf_r+0x15a>
 800a848:	7863      	ldrb	r3, [r4, #1]
 800a84a:	2b2a      	cmp	r3, #42	; 0x2a
 800a84c:	d134      	bne.n	800a8b8 <_vfiprintf_r+0x1b0>
 800a84e:	9b03      	ldr	r3, [sp, #12]
 800a850:	1d1a      	adds	r2, r3, #4
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	9203      	str	r2, [sp, #12]
 800a856:	2b00      	cmp	r3, #0
 800a858:	bfb8      	it	lt
 800a85a:	f04f 33ff 	movlt.w	r3, #4294967295
 800a85e:	3402      	adds	r4, #2
 800a860:	9305      	str	r3, [sp, #20]
 800a862:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800a938 <_vfiprintf_r+0x230>
 800a866:	7821      	ldrb	r1, [r4, #0]
 800a868:	2203      	movs	r2, #3
 800a86a:	4650      	mov	r0, sl
 800a86c:	f7f5 fcb0 	bl	80001d0 <memchr>
 800a870:	b138      	cbz	r0, 800a882 <_vfiprintf_r+0x17a>
 800a872:	9b04      	ldr	r3, [sp, #16]
 800a874:	eba0 000a 	sub.w	r0, r0, sl
 800a878:	2240      	movs	r2, #64	; 0x40
 800a87a:	4082      	lsls	r2, r0
 800a87c:	4313      	orrs	r3, r2
 800a87e:	3401      	adds	r4, #1
 800a880:	9304      	str	r3, [sp, #16]
 800a882:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a886:	4829      	ldr	r0, [pc, #164]	; (800a92c <_vfiprintf_r+0x224>)
 800a888:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a88c:	2206      	movs	r2, #6
 800a88e:	f7f5 fc9f 	bl	80001d0 <memchr>
 800a892:	2800      	cmp	r0, #0
 800a894:	d03f      	beq.n	800a916 <_vfiprintf_r+0x20e>
 800a896:	4b26      	ldr	r3, [pc, #152]	; (800a930 <_vfiprintf_r+0x228>)
 800a898:	bb1b      	cbnz	r3, 800a8e2 <_vfiprintf_r+0x1da>
 800a89a:	9b03      	ldr	r3, [sp, #12]
 800a89c:	3307      	adds	r3, #7
 800a89e:	f023 0307 	bic.w	r3, r3, #7
 800a8a2:	3308      	adds	r3, #8
 800a8a4:	9303      	str	r3, [sp, #12]
 800a8a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8a8:	443b      	add	r3, r7
 800a8aa:	9309      	str	r3, [sp, #36]	; 0x24
 800a8ac:	e768      	b.n	800a780 <_vfiprintf_r+0x78>
 800a8ae:	fb0c 3202 	mla	r2, ip, r2, r3
 800a8b2:	460c      	mov	r4, r1
 800a8b4:	2001      	movs	r0, #1
 800a8b6:	e7a6      	b.n	800a806 <_vfiprintf_r+0xfe>
 800a8b8:	2300      	movs	r3, #0
 800a8ba:	3401      	adds	r4, #1
 800a8bc:	9305      	str	r3, [sp, #20]
 800a8be:	4619      	mov	r1, r3
 800a8c0:	f04f 0c0a 	mov.w	ip, #10
 800a8c4:	4620      	mov	r0, r4
 800a8c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a8ca:	3a30      	subs	r2, #48	; 0x30
 800a8cc:	2a09      	cmp	r2, #9
 800a8ce:	d903      	bls.n	800a8d8 <_vfiprintf_r+0x1d0>
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d0c6      	beq.n	800a862 <_vfiprintf_r+0x15a>
 800a8d4:	9105      	str	r1, [sp, #20]
 800a8d6:	e7c4      	b.n	800a862 <_vfiprintf_r+0x15a>
 800a8d8:	fb0c 2101 	mla	r1, ip, r1, r2
 800a8dc:	4604      	mov	r4, r0
 800a8de:	2301      	movs	r3, #1
 800a8e0:	e7f0      	b.n	800a8c4 <_vfiprintf_r+0x1bc>
 800a8e2:	ab03      	add	r3, sp, #12
 800a8e4:	9300      	str	r3, [sp, #0]
 800a8e6:	462a      	mov	r2, r5
 800a8e8:	4b12      	ldr	r3, [pc, #72]	; (800a934 <_vfiprintf_r+0x22c>)
 800a8ea:	a904      	add	r1, sp, #16
 800a8ec:	4630      	mov	r0, r6
 800a8ee:	f7fd fb89 	bl	8008004 <_printf_float>
 800a8f2:	4607      	mov	r7, r0
 800a8f4:	1c78      	adds	r0, r7, #1
 800a8f6:	d1d6      	bne.n	800a8a6 <_vfiprintf_r+0x19e>
 800a8f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a8fa:	07d9      	lsls	r1, r3, #31
 800a8fc:	d405      	bmi.n	800a90a <_vfiprintf_r+0x202>
 800a8fe:	89ab      	ldrh	r3, [r5, #12]
 800a900:	059a      	lsls	r2, r3, #22
 800a902:	d402      	bmi.n	800a90a <_vfiprintf_r+0x202>
 800a904:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a906:	f7fe f8fb 	bl	8008b00 <__retarget_lock_release_recursive>
 800a90a:	89ab      	ldrh	r3, [r5, #12]
 800a90c:	065b      	lsls	r3, r3, #25
 800a90e:	f53f af1d 	bmi.w	800a74c <_vfiprintf_r+0x44>
 800a912:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a914:	e71c      	b.n	800a750 <_vfiprintf_r+0x48>
 800a916:	ab03      	add	r3, sp, #12
 800a918:	9300      	str	r3, [sp, #0]
 800a91a:	462a      	mov	r2, r5
 800a91c:	4b05      	ldr	r3, [pc, #20]	; (800a934 <_vfiprintf_r+0x22c>)
 800a91e:	a904      	add	r1, sp, #16
 800a920:	4630      	mov	r0, r6
 800a922:	f7fd fe13 	bl	800854c <_printf_i>
 800a926:	e7e4      	b.n	800a8f2 <_vfiprintf_r+0x1ea>
 800a928:	0800aecc 	.word	0x0800aecc
 800a92c:	0800aed6 	.word	0x0800aed6
 800a930:	08008005 	.word	0x08008005
 800a934:	0800a6e5 	.word	0x0800a6e5
 800a938:	0800aed2 	.word	0x0800aed2

0800a93c <__swbuf_r>:
 800a93c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a93e:	460e      	mov	r6, r1
 800a940:	4614      	mov	r4, r2
 800a942:	4605      	mov	r5, r0
 800a944:	b118      	cbz	r0, 800a94e <__swbuf_r+0x12>
 800a946:	6a03      	ldr	r3, [r0, #32]
 800a948:	b90b      	cbnz	r3, 800a94e <__swbuf_r+0x12>
 800a94a:	f7fd ffad 	bl	80088a8 <__sinit>
 800a94e:	69a3      	ldr	r3, [r4, #24]
 800a950:	60a3      	str	r3, [r4, #8]
 800a952:	89a3      	ldrh	r3, [r4, #12]
 800a954:	071a      	lsls	r2, r3, #28
 800a956:	d525      	bpl.n	800a9a4 <__swbuf_r+0x68>
 800a958:	6923      	ldr	r3, [r4, #16]
 800a95a:	b31b      	cbz	r3, 800a9a4 <__swbuf_r+0x68>
 800a95c:	6823      	ldr	r3, [r4, #0]
 800a95e:	6922      	ldr	r2, [r4, #16]
 800a960:	1a98      	subs	r0, r3, r2
 800a962:	6963      	ldr	r3, [r4, #20]
 800a964:	b2f6      	uxtb	r6, r6
 800a966:	4283      	cmp	r3, r0
 800a968:	4637      	mov	r7, r6
 800a96a:	dc04      	bgt.n	800a976 <__swbuf_r+0x3a>
 800a96c:	4621      	mov	r1, r4
 800a96e:	4628      	mov	r0, r5
 800a970:	f7ff fd9e 	bl	800a4b0 <_fflush_r>
 800a974:	b9e0      	cbnz	r0, 800a9b0 <__swbuf_r+0x74>
 800a976:	68a3      	ldr	r3, [r4, #8]
 800a978:	3b01      	subs	r3, #1
 800a97a:	60a3      	str	r3, [r4, #8]
 800a97c:	6823      	ldr	r3, [r4, #0]
 800a97e:	1c5a      	adds	r2, r3, #1
 800a980:	6022      	str	r2, [r4, #0]
 800a982:	701e      	strb	r6, [r3, #0]
 800a984:	6962      	ldr	r2, [r4, #20]
 800a986:	1c43      	adds	r3, r0, #1
 800a988:	429a      	cmp	r2, r3
 800a98a:	d004      	beq.n	800a996 <__swbuf_r+0x5a>
 800a98c:	89a3      	ldrh	r3, [r4, #12]
 800a98e:	07db      	lsls	r3, r3, #31
 800a990:	d506      	bpl.n	800a9a0 <__swbuf_r+0x64>
 800a992:	2e0a      	cmp	r6, #10
 800a994:	d104      	bne.n	800a9a0 <__swbuf_r+0x64>
 800a996:	4621      	mov	r1, r4
 800a998:	4628      	mov	r0, r5
 800a99a:	f7ff fd89 	bl	800a4b0 <_fflush_r>
 800a99e:	b938      	cbnz	r0, 800a9b0 <__swbuf_r+0x74>
 800a9a0:	4638      	mov	r0, r7
 800a9a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a9a4:	4621      	mov	r1, r4
 800a9a6:	4628      	mov	r0, r5
 800a9a8:	f000 f806 	bl	800a9b8 <__swsetup_r>
 800a9ac:	2800      	cmp	r0, #0
 800a9ae:	d0d5      	beq.n	800a95c <__swbuf_r+0x20>
 800a9b0:	f04f 37ff 	mov.w	r7, #4294967295
 800a9b4:	e7f4      	b.n	800a9a0 <__swbuf_r+0x64>
	...

0800a9b8 <__swsetup_r>:
 800a9b8:	b538      	push	{r3, r4, r5, lr}
 800a9ba:	4b2a      	ldr	r3, [pc, #168]	; (800aa64 <__swsetup_r+0xac>)
 800a9bc:	4605      	mov	r5, r0
 800a9be:	6818      	ldr	r0, [r3, #0]
 800a9c0:	460c      	mov	r4, r1
 800a9c2:	b118      	cbz	r0, 800a9cc <__swsetup_r+0x14>
 800a9c4:	6a03      	ldr	r3, [r0, #32]
 800a9c6:	b90b      	cbnz	r3, 800a9cc <__swsetup_r+0x14>
 800a9c8:	f7fd ff6e 	bl	80088a8 <__sinit>
 800a9cc:	89a3      	ldrh	r3, [r4, #12]
 800a9ce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a9d2:	0718      	lsls	r0, r3, #28
 800a9d4:	d422      	bmi.n	800aa1c <__swsetup_r+0x64>
 800a9d6:	06d9      	lsls	r1, r3, #27
 800a9d8:	d407      	bmi.n	800a9ea <__swsetup_r+0x32>
 800a9da:	2309      	movs	r3, #9
 800a9dc:	602b      	str	r3, [r5, #0]
 800a9de:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a9e2:	81a3      	strh	r3, [r4, #12]
 800a9e4:	f04f 30ff 	mov.w	r0, #4294967295
 800a9e8:	e034      	b.n	800aa54 <__swsetup_r+0x9c>
 800a9ea:	0758      	lsls	r0, r3, #29
 800a9ec:	d512      	bpl.n	800aa14 <__swsetup_r+0x5c>
 800a9ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a9f0:	b141      	cbz	r1, 800aa04 <__swsetup_r+0x4c>
 800a9f2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a9f6:	4299      	cmp	r1, r3
 800a9f8:	d002      	beq.n	800aa00 <__swsetup_r+0x48>
 800a9fa:	4628      	mov	r0, r5
 800a9fc:	f7fe fefe 	bl	80097fc <_free_r>
 800aa00:	2300      	movs	r3, #0
 800aa02:	6363      	str	r3, [r4, #52]	; 0x34
 800aa04:	89a3      	ldrh	r3, [r4, #12]
 800aa06:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800aa0a:	81a3      	strh	r3, [r4, #12]
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	6063      	str	r3, [r4, #4]
 800aa10:	6923      	ldr	r3, [r4, #16]
 800aa12:	6023      	str	r3, [r4, #0]
 800aa14:	89a3      	ldrh	r3, [r4, #12]
 800aa16:	f043 0308 	orr.w	r3, r3, #8
 800aa1a:	81a3      	strh	r3, [r4, #12]
 800aa1c:	6923      	ldr	r3, [r4, #16]
 800aa1e:	b94b      	cbnz	r3, 800aa34 <__swsetup_r+0x7c>
 800aa20:	89a3      	ldrh	r3, [r4, #12]
 800aa22:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800aa26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aa2a:	d003      	beq.n	800aa34 <__swsetup_r+0x7c>
 800aa2c:	4621      	mov	r1, r4
 800aa2e:	4628      	mov	r0, r5
 800aa30:	f000 f884 	bl	800ab3c <__smakebuf_r>
 800aa34:	89a0      	ldrh	r0, [r4, #12]
 800aa36:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aa3a:	f010 0301 	ands.w	r3, r0, #1
 800aa3e:	d00a      	beq.n	800aa56 <__swsetup_r+0x9e>
 800aa40:	2300      	movs	r3, #0
 800aa42:	60a3      	str	r3, [r4, #8]
 800aa44:	6963      	ldr	r3, [r4, #20]
 800aa46:	425b      	negs	r3, r3
 800aa48:	61a3      	str	r3, [r4, #24]
 800aa4a:	6923      	ldr	r3, [r4, #16]
 800aa4c:	b943      	cbnz	r3, 800aa60 <__swsetup_r+0xa8>
 800aa4e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800aa52:	d1c4      	bne.n	800a9de <__swsetup_r+0x26>
 800aa54:	bd38      	pop	{r3, r4, r5, pc}
 800aa56:	0781      	lsls	r1, r0, #30
 800aa58:	bf58      	it	pl
 800aa5a:	6963      	ldrpl	r3, [r4, #20]
 800aa5c:	60a3      	str	r3, [r4, #8]
 800aa5e:	e7f4      	b.n	800aa4a <__swsetup_r+0x92>
 800aa60:	2000      	movs	r0, #0
 800aa62:	e7f7      	b.n	800aa54 <__swsetup_r+0x9c>
 800aa64:	20000064 	.word	0x20000064

0800aa68 <_raise_r>:
 800aa68:	291f      	cmp	r1, #31
 800aa6a:	b538      	push	{r3, r4, r5, lr}
 800aa6c:	4604      	mov	r4, r0
 800aa6e:	460d      	mov	r5, r1
 800aa70:	d904      	bls.n	800aa7c <_raise_r+0x14>
 800aa72:	2316      	movs	r3, #22
 800aa74:	6003      	str	r3, [r0, #0]
 800aa76:	f04f 30ff 	mov.w	r0, #4294967295
 800aa7a:	bd38      	pop	{r3, r4, r5, pc}
 800aa7c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800aa7e:	b112      	cbz	r2, 800aa86 <_raise_r+0x1e>
 800aa80:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800aa84:	b94b      	cbnz	r3, 800aa9a <_raise_r+0x32>
 800aa86:	4620      	mov	r0, r4
 800aa88:	f000 f830 	bl	800aaec <_getpid_r>
 800aa8c:	462a      	mov	r2, r5
 800aa8e:	4601      	mov	r1, r0
 800aa90:	4620      	mov	r0, r4
 800aa92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aa96:	f000 b817 	b.w	800aac8 <_kill_r>
 800aa9a:	2b01      	cmp	r3, #1
 800aa9c:	d00a      	beq.n	800aab4 <_raise_r+0x4c>
 800aa9e:	1c59      	adds	r1, r3, #1
 800aaa0:	d103      	bne.n	800aaaa <_raise_r+0x42>
 800aaa2:	2316      	movs	r3, #22
 800aaa4:	6003      	str	r3, [r0, #0]
 800aaa6:	2001      	movs	r0, #1
 800aaa8:	e7e7      	b.n	800aa7a <_raise_r+0x12>
 800aaaa:	2400      	movs	r4, #0
 800aaac:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800aab0:	4628      	mov	r0, r5
 800aab2:	4798      	blx	r3
 800aab4:	2000      	movs	r0, #0
 800aab6:	e7e0      	b.n	800aa7a <_raise_r+0x12>

0800aab8 <raise>:
 800aab8:	4b02      	ldr	r3, [pc, #8]	; (800aac4 <raise+0xc>)
 800aaba:	4601      	mov	r1, r0
 800aabc:	6818      	ldr	r0, [r3, #0]
 800aabe:	f7ff bfd3 	b.w	800aa68 <_raise_r>
 800aac2:	bf00      	nop
 800aac4:	20000064 	.word	0x20000064

0800aac8 <_kill_r>:
 800aac8:	b538      	push	{r3, r4, r5, lr}
 800aaca:	4d07      	ldr	r5, [pc, #28]	; (800aae8 <_kill_r+0x20>)
 800aacc:	2300      	movs	r3, #0
 800aace:	4604      	mov	r4, r0
 800aad0:	4608      	mov	r0, r1
 800aad2:	4611      	mov	r1, r2
 800aad4:	602b      	str	r3, [r5, #0]
 800aad6:	f7f7 f80f 	bl	8001af8 <_kill>
 800aada:	1c43      	adds	r3, r0, #1
 800aadc:	d102      	bne.n	800aae4 <_kill_r+0x1c>
 800aade:	682b      	ldr	r3, [r5, #0]
 800aae0:	b103      	cbz	r3, 800aae4 <_kill_r+0x1c>
 800aae2:	6023      	str	r3, [r4, #0]
 800aae4:	bd38      	pop	{r3, r4, r5, pc}
 800aae6:	bf00      	nop
 800aae8:	20000564 	.word	0x20000564

0800aaec <_getpid_r>:
 800aaec:	f7f6 bffc 	b.w	8001ae8 <_getpid>

0800aaf0 <__swhatbuf_r>:
 800aaf0:	b570      	push	{r4, r5, r6, lr}
 800aaf2:	460c      	mov	r4, r1
 800aaf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aaf8:	2900      	cmp	r1, #0
 800aafa:	b096      	sub	sp, #88	; 0x58
 800aafc:	4615      	mov	r5, r2
 800aafe:	461e      	mov	r6, r3
 800ab00:	da0d      	bge.n	800ab1e <__swhatbuf_r+0x2e>
 800ab02:	89a3      	ldrh	r3, [r4, #12]
 800ab04:	f013 0f80 	tst.w	r3, #128	; 0x80
 800ab08:	f04f 0100 	mov.w	r1, #0
 800ab0c:	bf0c      	ite	eq
 800ab0e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800ab12:	2340      	movne	r3, #64	; 0x40
 800ab14:	2000      	movs	r0, #0
 800ab16:	6031      	str	r1, [r6, #0]
 800ab18:	602b      	str	r3, [r5, #0]
 800ab1a:	b016      	add	sp, #88	; 0x58
 800ab1c:	bd70      	pop	{r4, r5, r6, pc}
 800ab1e:	466a      	mov	r2, sp
 800ab20:	f000 f848 	bl	800abb4 <_fstat_r>
 800ab24:	2800      	cmp	r0, #0
 800ab26:	dbec      	blt.n	800ab02 <__swhatbuf_r+0x12>
 800ab28:	9901      	ldr	r1, [sp, #4]
 800ab2a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800ab2e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800ab32:	4259      	negs	r1, r3
 800ab34:	4159      	adcs	r1, r3
 800ab36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ab3a:	e7eb      	b.n	800ab14 <__swhatbuf_r+0x24>

0800ab3c <__smakebuf_r>:
 800ab3c:	898b      	ldrh	r3, [r1, #12]
 800ab3e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ab40:	079d      	lsls	r5, r3, #30
 800ab42:	4606      	mov	r6, r0
 800ab44:	460c      	mov	r4, r1
 800ab46:	d507      	bpl.n	800ab58 <__smakebuf_r+0x1c>
 800ab48:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ab4c:	6023      	str	r3, [r4, #0]
 800ab4e:	6123      	str	r3, [r4, #16]
 800ab50:	2301      	movs	r3, #1
 800ab52:	6163      	str	r3, [r4, #20]
 800ab54:	b002      	add	sp, #8
 800ab56:	bd70      	pop	{r4, r5, r6, pc}
 800ab58:	ab01      	add	r3, sp, #4
 800ab5a:	466a      	mov	r2, sp
 800ab5c:	f7ff ffc8 	bl	800aaf0 <__swhatbuf_r>
 800ab60:	9900      	ldr	r1, [sp, #0]
 800ab62:	4605      	mov	r5, r0
 800ab64:	4630      	mov	r0, r6
 800ab66:	f7fe febd 	bl	80098e4 <_malloc_r>
 800ab6a:	b948      	cbnz	r0, 800ab80 <__smakebuf_r+0x44>
 800ab6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab70:	059a      	lsls	r2, r3, #22
 800ab72:	d4ef      	bmi.n	800ab54 <__smakebuf_r+0x18>
 800ab74:	f023 0303 	bic.w	r3, r3, #3
 800ab78:	f043 0302 	orr.w	r3, r3, #2
 800ab7c:	81a3      	strh	r3, [r4, #12]
 800ab7e:	e7e3      	b.n	800ab48 <__smakebuf_r+0xc>
 800ab80:	89a3      	ldrh	r3, [r4, #12]
 800ab82:	6020      	str	r0, [r4, #0]
 800ab84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab88:	81a3      	strh	r3, [r4, #12]
 800ab8a:	9b00      	ldr	r3, [sp, #0]
 800ab8c:	6163      	str	r3, [r4, #20]
 800ab8e:	9b01      	ldr	r3, [sp, #4]
 800ab90:	6120      	str	r0, [r4, #16]
 800ab92:	b15b      	cbz	r3, 800abac <__smakebuf_r+0x70>
 800ab94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ab98:	4630      	mov	r0, r6
 800ab9a:	f000 f81d 	bl	800abd8 <_isatty_r>
 800ab9e:	b128      	cbz	r0, 800abac <__smakebuf_r+0x70>
 800aba0:	89a3      	ldrh	r3, [r4, #12]
 800aba2:	f023 0303 	bic.w	r3, r3, #3
 800aba6:	f043 0301 	orr.w	r3, r3, #1
 800abaa:	81a3      	strh	r3, [r4, #12]
 800abac:	89a3      	ldrh	r3, [r4, #12]
 800abae:	431d      	orrs	r5, r3
 800abb0:	81a5      	strh	r5, [r4, #12]
 800abb2:	e7cf      	b.n	800ab54 <__smakebuf_r+0x18>

0800abb4 <_fstat_r>:
 800abb4:	b538      	push	{r3, r4, r5, lr}
 800abb6:	4d07      	ldr	r5, [pc, #28]	; (800abd4 <_fstat_r+0x20>)
 800abb8:	2300      	movs	r3, #0
 800abba:	4604      	mov	r4, r0
 800abbc:	4608      	mov	r0, r1
 800abbe:	4611      	mov	r1, r2
 800abc0:	602b      	str	r3, [r5, #0]
 800abc2:	f7f6 fff8 	bl	8001bb6 <_fstat>
 800abc6:	1c43      	adds	r3, r0, #1
 800abc8:	d102      	bne.n	800abd0 <_fstat_r+0x1c>
 800abca:	682b      	ldr	r3, [r5, #0]
 800abcc:	b103      	cbz	r3, 800abd0 <_fstat_r+0x1c>
 800abce:	6023      	str	r3, [r4, #0]
 800abd0:	bd38      	pop	{r3, r4, r5, pc}
 800abd2:	bf00      	nop
 800abd4:	20000564 	.word	0x20000564

0800abd8 <_isatty_r>:
 800abd8:	b538      	push	{r3, r4, r5, lr}
 800abda:	4d06      	ldr	r5, [pc, #24]	; (800abf4 <_isatty_r+0x1c>)
 800abdc:	2300      	movs	r3, #0
 800abde:	4604      	mov	r4, r0
 800abe0:	4608      	mov	r0, r1
 800abe2:	602b      	str	r3, [r5, #0]
 800abe4:	f7f6 fff7 	bl	8001bd6 <_isatty>
 800abe8:	1c43      	adds	r3, r0, #1
 800abea:	d102      	bne.n	800abf2 <_isatty_r+0x1a>
 800abec:	682b      	ldr	r3, [r5, #0]
 800abee:	b103      	cbz	r3, 800abf2 <_isatty_r+0x1a>
 800abf0:	6023      	str	r3, [r4, #0]
 800abf2:	bd38      	pop	{r3, r4, r5, pc}
 800abf4:	20000564 	.word	0x20000564

0800abf8 <_init>:
 800abf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abfa:	bf00      	nop
 800abfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abfe:	bc08      	pop	{r3}
 800ac00:	469e      	mov	lr, r3
 800ac02:	4770      	bx	lr

0800ac04 <_fini>:
 800ac04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac06:	bf00      	nop
 800ac08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac0a:	bc08      	pop	{r3}
 800ac0c:	469e      	mov	lr, r3
 800ac0e:	4770      	bx	lr
