
Projekt_warsztaty_KoNaR_2023.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000081a0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000040c  08008330  08008330  00018330  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800873c  0800873c  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800873c  0800873c  0001873c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008744  08008744  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008744  08008744  00018744  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008748  08008748  00018748  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800874c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f4  200001d4  08008920  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004c8  08008920  000204c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fa3e  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000023d0  00000000  00000000  0002fc85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d80  00000000  00000000  00032058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a72  00000000  00000000  00032dd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002730e  00000000  00000000  0003384a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001164c  00000000  00000000  0005ab58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ec817  00000000  00000000  0006c1a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004928  00000000  00000000  001589bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  0015d2e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008318 	.word	0x08008318

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	08008318 	.word	0x08008318

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b970 	b.w	8000f40 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	460d      	mov	r5, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	460f      	mov	r7, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4694      	mov	ip, r2
 8000c8c:	d965      	bls.n	8000d5a <__udivmoddi4+0xe2>
 8000c8e:	fab2 f382 	clz	r3, r2
 8000c92:	b143      	cbz	r3, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c98:	f1c3 0220 	rsb	r2, r3, #32
 8000c9c:	409f      	lsls	r7, r3
 8000c9e:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca2:	4317      	orrs	r7, r2
 8000ca4:	409c      	lsls	r4, r3
 8000ca6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000caa:	fa1f f58c 	uxth.w	r5, ip
 8000cae:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cb2:	0c22      	lsrs	r2, r4, #16
 8000cb4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cb8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cbc:	fb01 f005 	mul.w	r0, r1, r5
 8000cc0:	4290      	cmp	r0, r2
 8000cc2:	d90a      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cc8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ccc:	f080 811c 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	f240 8119 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	4462      	add	r2, ip
 8000cda:	1a12      	subs	r2, r2, r0
 8000cdc:	b2a4      	uxth	r4, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cea:	fb00 f505 	mul.w	r5, r0, r5
 8000cee:	42a5      	cmp	r5, r4
 8000cf0:	d90a      	bls.n	8000d08 <__udivmoddi4+0x90>
 8000cf2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cfa:	f080 8107 	bcs.w	8000f0c <__udivmoddi4+0x294>
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	f240 8104 	bls.w	8000f0c <__udivmoddi4+0x294>
 8000d04:	4464      	add	r4, ip
 8000d06:	3802      	subs	r0, #2
 8000d08:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0c:	1b64      	subs	r4, r4, r5
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11e      	cbz	r6, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40dc      	lsrs	r4, r3
 8000d14:	2300      	movs	r3, #0
 8000d16:	e9c6 4300 	strd	r4, r3, [r6]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0xbc>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80ed 	beq.w	8000f02 <__udivmoddi4+0x28a>
 8000d28:	2100      	movs	r1, #0
 8000d2a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d34:	fab3 f183 	clz	r1, r3
 8000d38:	2900      	cmp	r1, #0
 8000d3a:	d149      	bne.n	8000dd0 <__udivmoddi4+0x158>
 8000d3c:	42ab      	cmp	r3, r5
 8000d3e:	d302      	bcc.n	8000d46 <__udivmoddi4+0xce>
 8000d40:	4282      	cmp	r2, r0
 8000d42:	f200 80f8 	bhi.w	8000f36 <__udivmoddi4+0x2be>
 8000d46:	1a84      	subs	r4, r0, r2
 8000d48:	eb65 0203 	sbc.w	r2, r5, r3
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	4617      	mov	r7, r2
 8000d50:	2e00      	cmp	r6, #0
 8000d52:	d0e2      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	e9c6 4700 	strd	r4, r7, [r6]
 8000d58:	e7df      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d5a:	b902      	cbnz	r2, 8000d5e <__udivmoddi4+0xe6>
 8000d5c:	deff      	udf	#255	; 0xff
 8000d5e:	fab2 f382 	clz	r3, r2
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f040 8090 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d68:	1a8a      	subs	r2, r1, r2
 8000d6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d6e:	fa1f fe8c 	uxth.w	lr, ip
 8000d72:	2101      	movs	r1, #1
 8000d74:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d78:	fb07 2015 	mls	r0, r7, r5, r2
 8000d7c:	0c22      	lsrs	r2, r4, #16
 8000d7e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d82:	fb0e f005 	mul.w	r0, lr, r5
 8000d86:	4290      	cmp	r0, r2
 8000d88:	d908      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d8e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4290      	cmp	r0, r2
 8000d96:	f200 80cb 	bhi.w	8000f30 <__udivmoddi4+0x2b8>
 8000d9a:	4645      	mov	r5, r8
 8000d9c:	1a12      	subs	r2, r2, r0
 8000d9e:	b2a4      	uxth	r4, r4
 8000da0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000da4:	fb07 2210 	mls	r2, r7, r0, r2
 8000da8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dac:	fb0e fe00 	mul.w	lr, lr, r0
 8000db0:	45a6      	cmp	lr, r4
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x14e>
 8000db4:	eb1c 0404 	adds.w	r4, ip, r4
 8000db8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dbc:	d202      	bcs.n	8000dc4 <__udivmoddi4+0x14c>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f200 80bb 	bhi.w	8000f3a <__udivmoddi4+0x2c2>
 8000dc4:	4610      	mov	r0, r2
 8000dc6:	eba4 040e 	sub.w	r4, r4, lr
 8000dca:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dce:	e79f      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dd0:	f1c1 0720 	rsb	r7, r1, #32
 8000dd4:	408b      	lsls	r3, r1
 8000dd6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dda:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dde:	fa05 f401 	lsl.w	r4, r5, r1
 8000de2:	fa20 f307 	lsr.w	r3, r0, r7
 8000de6:	40fd      	lsrs	r5, r7
 8000de8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dec:	4323      	orrs	r3, r4
 8000dee:	fbb5 f8f9 	udiv	r8, r5, r9
 8000df2:	fa1f fe8c 	uxth.w	lr, ip
 8000df6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dfa:	0c1c      	lsrs	r4, r3, #16
 8000dfc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e00:	fb08 f50e 	mul.w	r5, r8, lr
 8000e04:	42a5      	cmp	r5, r4
 8000e06:	fa02 f201 	lsl.w	r2, r2, r1
 8000e0a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e18:	f080 8088 	bcs.w	8000f2c <__udivmoddi4+0x2b4>
 8000e1c:	42a5      	cmp	r5, r4
 8000e1e:	f240 8085 	bls.w	8000f2c <__udivmoddi4+0x2b4>
 8000e22:	f1a8 0802 	sub.w	r8, r8, #2
 8000e26:	4464      	add	r4, ip
 8000e28:	1b64      	subs	r4, r4, r5
 8000e2a:	b29d      	uxth	r5, r3
 8000e2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e30:	fb09 4413 	mls	r4, r9, r3, r4
 8000e34:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e38:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e48:	d26c      	bcs.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4a:	45a6      	cmp	lr, r4
 8000e4c:	d96a      	bls.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4e:	3b02      	subs	r3, #2
 8000e50:	4464      	add	r4, ip
 8000e52:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e56:	fba3 9502 	umull	r9, r5, r3, r2
 8000e5a:	eba4 040e 	sub.w	r4, r4, lr
 8000e5e:	42ac      	cmp	r4, r5
 8000e60:	46c8      	mov	r8, r9
 8000e62:	46ae      	mov	lr, r5
 8000e64:	d356      	bcc.n	8000f14 <__udivmoddi4+0x29c>
 8000e66:	d053      	beq.n	8000f10 <__udivmoddi4+0x298>
 8000e68:	b156      	cbz	r6, 8000e80 <__udivmoddi4+0x208>
 8000e6a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e6e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e72:	fa04 f707 	lsl.w	r7, r4, r7
 8000e76:	40ca      	lsrs	r2, r1
 8000e78:	40cc      	lsrs	r4, r1
 8000e7a:	4317      	orrs	r7, r2
 8000e7c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e80:	4618      	mov	r0, r3
 8000e82:	2100      	movs	r1, #0
 8000e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e88:	f1c3 0120 	rsb	r1, r3, #32
 8000e8c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e90:	fa20 f201 	lsr.w	r2, r0, r1
 8000e94:	fa25 f101 	lsr.w	r1, r5, r1
 8000e98:	409d      	lsls	r5, r3
 8000e9a:	432a      	orrs	r2, r5
 8000e9c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea0:	fa1f fe8c 	uxth.w	lr, ip
 8000ea4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ea8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eac:	0c11      	lsrs	r1, r2, #16
 8000eae:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000eb2:	fb00 f50e 	mul.w	r5, r0, lr
 8000eb6:	428d      	cmp	r5, r1
 8000eb8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ebc:	d908      	bls.n	8000ed0 <__udivmoddi4+0x258>
 8000ebe:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ec6:	d22f      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000ec8:	428d      	cmp	r5, r1
 8000eca:	d92d      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000ecc:	3802      	subs	r0, #2
 8000ece:	4461      	add	r1, ip
 8000ed0:	1b49      	subs	r1, r1, r5
 8000ed2:	b292      	uxth	r2, r2
 8000ed4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ed8:	fb07 1115 	mls	r1, r7, r5, r1
 8000edc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ee0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ee4:	4291      	cmp	r1, r2
 8000ee6:	d908      	bls.n	8000efa <__udivmoddi4+0x282>
 8000ee8:	eb1c 0202 	adds.w	r2, ip, r2
 8000eec:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ef0:	d216      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef2:	4291      	cmp	r1, r2
 8000ef4:	d914      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef6:	3d02      	subs	r5, #2
 8000ef8:	4462      	add	r2, ip
 8000efa:	1a52      	subs	r2, r2, r1
 8000efc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f00:	e738      	b.n	8000d74 <__udivmoddi4+0xfc>
 8000f02:	4631      	mov	r1, r6
 8000f04:	4630      	mov	r0, r6
 8000f06:	e708      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000f08:	4639      	mov	r1, r7
 8000f0a:	e6e6      	b.n	8000cda <__udivmoddi4+0x62>
 8000f0c:	4610      	mov	r0, r2
 8000f0e:	e6fb      	b.n	8000d08 <__udivmoddi4+0x90>
 8000f10:	4548      	cmp	r0, r9
 8000f12:	d2a9      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f14:	ebb9 0802 	subs.w	r8, r9, r2
 8000f18:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	e7a3      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f20:	4645      	mov	r5, r8
 8000f22:	e7ea      	b.n	8000efa <__udivmoddi4+0x282>
 8000f24:	462b      	mov	r3, r5
 8000f26:	e794      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f28:	4640      	mov	r0, r8
 8000f2a:	e7d1      	b.n	8000ed0 <__udivmoddi4+0x258>
 8000f2c:	46d0      	mov	r8, sl
 8000f2e:	e77b      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f30:	3d02      	subs	r5, #2
 8000f32:	4462      	add	r2, ip
 8000f34:	e732      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f36:	4608      	mov	r0, r1
 8000f38:	e70a      	b.n	8000d50 <__udivmoddi4+0xd8>
 8000f3a:	4464      	add	r4, ip
 8000f3c:	3802      	subs	r0, #2
 8000f3e:	e742      	b.n	8000dc6 <__udivmoddi4+0x14e>

08000f40 <__aeabi_idiv0>:
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop

08000f44 <MPU6050_Init>:
int16_t Gyro_X_RAW,Gyro_Y_RAW,Gyro_Z_RAW;
float Gx,Gy,Gz;
uint8_t buffer[128];

void MPU6050_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b086      	sub	sp, #24
 8000f48:	af04      	add	r7, sp, #16
    uint8_t check, data;
    HAL_I2C_Mem_Read(&hi2c1,MPU6050_ADDR,WHO_AM_I_REG,1,&check,1,100);
 8000f4a:	2364      	movs	r3, #100	; 0x64
 8000f4c:	9302      	str	r3, [sp, #8]
 8000f4e:	2301      	movs	r3, #1
 8000f50:	9301      	str	r3, [sp, #4]
 8000f52:	1dfb      	adds	r3, r7, #7
 8000f54:	9300      	str	r3, [sp, #0]
 8000f56:	2301      	movs	r3, #1
 8000f58:	2275      	movs	r2, #117	; 0x75
 8000f5a:	21d0      	movs	r1, #208	; 0xd0
 8000f5c:	4826      	ldr	r0, [pc, #152]	; (8000ff8 <MPU6050_Init+0xb4>)
 8000f5e:	f001 fabf 	bl	80024e0 <HAL_I2C_Mem_Read>
    if(check == 104)
 8000f62:	79fb      	ldrb	r3, [r7, #7]
 8000f64:	2b68      	cmp	r3, #104	; 0x68
 8000f66:	d143      	bne.n	8000ff0 <MPU6050_Init+0xac>
    {
        data = 0x07;
 8000f68:	2307      	movs	r3, #7
 8000f6a:	71bb      	strb	r3, [r7, #6]
        HAL_I2C_Mem_Write(&hi2c1,MPU6050_ADDR,SMPLRT_DIV_REG,1,&data,1,50);
 8000f6c:	2332      	movs	r3, #50	; 0x32
 8000f6e:	9302      	str	r3, [sp, #8]
 8000f70:	2301      	movs	r3, #1
 8000f72:	9301      	str	r3, [sp, #4]
 8000f74:	1dbb      	adds	r3, r7, #6
 8000f76:	9300      	str	r3, [sp, #0]
 8000f78:	2301      	movs	r3, #1
 8000f7a:	2219      	movs	r2, #25
 8000f7c:	21d0      	movs	r1, #208	; 0xd0
 8000f7e:	481e      	ldr	r0, [pc, #120]	; (8000ff8 <MPU6050_Init+0xb4>)
 8000f80:	f001 f99a 	bl	80022b8 <HAL_I2C_Mem_Write>
        HAL_Delay(50);
 8000f84:	2032      	movs	r0, #50	; 0x32
 8000f86:	f000 fd85 	bl	8001a94 <HAL_Delay>
        data = 0x00;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	71bb      	strb	r3, [r7, #6]
        HAL_I2C_Mem_Write(&hi2c1,MPU6050_ADDR,ACCEL_CONFIG_REG,1,&data,1,50);
 8000f8e:	2332      	movs	r3, #50	; 0x32
 8000f90:	9302      	str	r3, [sp, #8]
 8000f92:	2301      	movs	r3, #1
 8000f94:	9301      	str	r3, [sp, #4]
 8000f96:	1dbb      	adds	r3, r7, #6
 8000f98:	9300      	str	r3, [sp, #0]
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	221c      	movs	r2, #28
 8000f9e:	21d0      	movs	r1, #208	; 0xd0
 8000fa0:	4815      	ldr	r0, [pc, #84]	; (8000ff8 <MPU6050_Init+0xb4>)
 8000fa2:	f001 f989 	bl	80022b8 <HAL_I2C_Mem_Write>
        HAL_Delay(50);
 8000fa6:	2032      	movs	r0, #50	; 0x32
 8000fa8:	f000 fd74 	bl	8001a94 <HAL_Delay>
        data = 0x00;
 8000fac:	2300      	movs	r3, #0
 8000fae:	71bb      	strb	r3, [r7, #6]
        HAL_I2C_Mem_Write(&hi2c1,MPU6050_ADDR,GYRO_CONFIG_REG,1,&data,1,50);
 8000fb0:	2332      	movs	r3, #50	; 0x32
 8000fb2:	9302      	str	r3, [sp, #8]
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	9301      	str	r3, [sp, #4]
 8000fb8:	1dbb      	adds	r3, r7, #6
 8000fba:	9300      	str	r3, [sp, #0]
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	221b      	movs	r2, #27
 8000fc0:	21d0      	movs	r1, #208	; 0xd0
 8000fc2:	480d      	ldr	r0, [pc, #52]	; (8000ff8 <MPU6050_Init+0xb4>)
 8000fc4:	f001 f978 	bl	80022b8 <HAL_I2C_Mem_Write>
        HAL_Delay(50);
 8000fc8:	2032      	movs	r0, #50	; 0x32
 8000fca:	f000 fd63 	bl	8001a94 <HAL_Delay>
        data = 0;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	71bb      	strb	r3, [r7, #6]
        HAL_I2C_Mem_Write(&hi2c1,MPU6050_ADDR,PWR_MGMT_1_REG,1,&data,1,50);
 8000fd2:	2332      	movs	r3, #50	; 0x32
 8000fd4:	9302      	str	r3, [sp, #8]
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	9301      	str	r3, [sp, #4]
 8000fda:	1dbb      	adds	r3, r7, #6
 8000fdc:	9300      	str	r3, [sp, #0]
 8000fde:	2301      	movs	r3, #1
 8000fe0:	226b      	movs	r2, #107	; 0x6b
 8000fe2:	21d0      	movs	r1, #208	; 0xd0
 8000fe4:	4804      	ldr	r0, [pc, #16]	; (8000ff8 <MPU6050_Init+0xb4>)
 8000fe6:	f001 f967 	bl	80022b8 <HAL_I2C_Mem_Write>
        HAL_Delay(50);
 8000fea:	2032      	movs	r0, #50	; 0x32
 8000fec:	f000 fd52 	bl	8001a94 <HAL_Delay>
    }
}
 8000ff0:	bf00      	nop
 8000ff2:	3708      	adds	r7, #8
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	200001f0 	.word	0x200001f0

08000ffc <MPU6050_Read_Accel>:

void MPU6050_Read_Accel(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b086      	sub	sp, #24
 8001000:	af04      	add	r7, sp, #16
    uint8_t recData[6];
    memset(recData, 0, sizeof(recData));
 8001002:	463b      	mov	r3, r7
 8001004:	2206      	movs	r2, #6
 8001006:	2100      	movs	r1, #0
 8001008:	4618      	mov	r0, r3
 800100a:	f005 f88c 	bl	8006126 <memset>

    HAL_I2C_Mem_Read(&hi2c1,MPU6050_ADDR,ACCEL_XOUT_H_REG,I2C_MEMADD_SIZE_8BIT,recData,6,100);
 800100e:	2364      	movs	r3, #100	; 0x64
 8001010:	9302      	str	r3, [sp, #8]
 8001012:	2306      	movs	r3, #6
 8001014:	9301      	str	r3, [sp, #4]
 8001016:	463b      	mov	r3, r7
 8001018:	9300      	str	r3, [sp, #0]
 800101a:	2301      	movs	r3, #1
 800101c:	223b      	movs	r2, #59	; 0x3b
 800101e:	21d0      	movs	r1, #208	; 0xd0
 8001020:	482e      	ldr	r0, [pc, #184]	; (80010dc <MPU6050_Read_Accel+0xe0>)
 8001022:	f001 fa5d 	bl	80024e0 <HAL_I2C_Mem_Read>

    Accel_X_RAW = (int16_t)(recData[0] << 8 | recData[1]);
 8001026:	783b      	ldrb	r3, [r7, #0]
 8001028:	021b      	lsls	r3, r3, #8
 800102a:	b21a      	sxth	r2, r3
 800102c:	787b      	ldrb	r3, [r7, #1]
 800102e:	b21b      	sxth	r3, r3
 8001030:	4313      	orrs	r3, r2
 8001032:	b21a      	sxth	r2, r3
 8001034:	4b2a      	ldr	r3, [pc, #168]	; (80010e0 <MPU6050_Read_Accel+0xe4>)
 8001036:	801a      	strh	r2, [r3, #0]
    Accel_Y_RAW = (int16_t)(recData[2] << 8 | recData[3]);
 8001038:	78bb      	ldrb	r3, [r7, #2]
 800103a:	021b      	lsls	r3, r3, #8
 800103c:	b21a      	sxth	r2, r3
 800103e:	78fb      	ldrb	r3, [r7, #3]
 8001040:	b21b      	sxth	r3, r3
 8001042:	4313      	orrs	r3, r2
 8001044:	b21a      	sxth	r2, r3
 8001046:	4b27      	ldr	r3, [pc, #156]	; (80010e4 <MPU6050_Read_Accel+0xe8>)
 8001048:	801a      	strh	r2, [r3, #0]
    Accel_Z_RAW = (int16_t)(recData[4] << 8 | recData[5]);
 800104a:	793b      	ldrb	r3, [r7, #4]
 800104c:	021b      	lsls	r3, r3, #8
 800104e:	b21a      	sxth	r2, r3
 8001050:	797b      	ldrb	r3, [r7, #5]
 8001052:	b21b      	sxth	r3, r3
 8001054:	4313      	orrs	r3, r2
 8001056:	b21a      	sxth	r2, r3
 8001058:	4b23      	ldr	r3, [pc, #140]	; (80010e8 <MPU6050_Read_Accel+0xec>)
 800105a:	801a      	strh	r2, [r3, #0]

    Ax = Accel_X_RAW / 16384.0;		// Zamiana raw value na g
 800105c:	4b20      	ldr	r3, [pc, #128]	; (80010e0 <MPU6050_Read_Accel+0xe4>)
 800105e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001062:	4618      	mov	r0, r3
 8001064:	f7ff fa5e 	bl	8000524 <__aeabi_i2d>
 8001068:	f04f 0200 	mov.w	r2, #0
 800106c:	4b1f      	ldr	r3, [pc, #124]	; (80010ec <MPU6050_Read_Accel+0xf0>)
 800106e:	f7ff fbed 	bl	800084c <__aeabi_ddiv>
 8001072:	4602      	mov	r2, r0
 8001074:	460b      	mov	r3, r1
 8001076:	4610      	mov	r0, r2
 8001078:	4619      	mov	r1, r3
 800107a:	f7ff fd95 	bl	8000ba8 <__aeabi_d2f>
 800107e:	4603      	mov	r3, r0
 8001080:	4a1b      	ldr	r2, [pc, #108]	; (80010f0 <MPU6050_Read_Accel+0xf4>)
 8001082:	6013      	str	r3, [r2, #0]
    Ay = Accel_Y_RAW / 16384.0;
 8001084:	4b17      	ldr	r3, [pc, #92]	; (80010e4 <MPU6050_Read_Accel+0xe8>)
 8001086:	f9b3 3000 	ldrsh.w	r3, [r3]
 800108a:	4618      	mov	r0, r3
 800108c:	f7ff fa4a 	bl	8000524 <__aeabi_i2d>
 8001090:	f04f 0200 	mov.w	r2, #0
 8001094:	4b15      	ldr	r3, [pc, #84]	; (80010ec <MPU6050_Read_Accel+0xf0>)
 8001096:	f7ff fbd9 	bl	800084c <__aeabi_ddiv>
 800109a:	4602      	mov	r2, r0
 800109c:	460b      	mov	r3, r1
 800109e:	4610      	mov	r0, r2
 80010a0:	4619      	mov	r1, r3
 80010a2:	f7ff fd81 	bl	8000ba8 <__aeabi_d2f>
 80010a6:	4603      	mov	r3, r0
 80010a8:	4a12      	ldr	r2, [pc, #72]	; (80010f4 <MPU6050_Read_Accel+0xf8>)
 80010aa:	6013      	str	r3, [r2, #0]
    Az = Accel_Z_RAW / 16384.0;
 80010ac:	4b0e      	ldr	r3, [pc, #56]	; (80010e8 <MPU6050_Read_Accel+0xec>)
 80010ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010b2:	4618      	mov	r0, r3
 80010b4:	f7ff fa36 	bl	8000524 <__aeabi_i2d>
 80010b8:	f04f 0200 	mov.w	r2, #0
 80010bc:	4b0b      	ldr	r3, [pc, #44]	; (80010ec <MPU6050_Read_Accel+0xf0>)
 80010be:	f7ff fbc5 	bl	800084c <__aeabi_ddiv>
 80010c2:	4602      	mov	r2, r0
 80010c4:	460b      	mov	r3, r1
 80010c6:	4610      	mov	r0, r2
 80010c8:	4619      	mov	r1, r3
 80010ca:	f7ff fd6d 	bl	8000ba8 <__aeabi_d2f>
 80010ce:	4603      	mov	r3, r0
 80010d0:	4a09      	ldr	r2, [pc, #36]	; (80010f8 <MPU6050_Read_Accel+0xfc>)
 80010d2:	6013      	str	r3, [r2, #0]
}
 80010d4:	bf00      	nop
 80010d6:	3708      	adds	r7, #8
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	200001f0 	.word	0x200001f0
 80010e0:	200002cc 	.word	0x200002cc
 80010e4:	200002ce 	.word	0x200002ce
 80010e8:	200002d0 	.word	0x200002d0
 80010ec:	40d00000 	.word	0x40d00000
 80010f0:	200002d4 	.word	0x200002d4
 80010f4:	200002d8 	.word	0x200002d8
 80010f8:	200002dc 	.word	0x200002dc
 80010fc:	00000000 	.word	0x00000000

08001100 <MPU6050_Read_Gyro>:

void MPU6050_Read_Gyro(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b086      	sub	sp, #24
 8001104:	af04      	add	r7, sp, #16
	uint8_t recData[6];
	memset(recData, 0, sizeof(recData));
 8001106:	463b      	mov	r3, r7
 8001108:	2206      	movs	r2, #6
 800110a:	2100      	movs	r1, #0
 800110c:	4618      	mov	r0, r3
 800110e:	f005 f80a 	bl	8006126 <memset>
	HAL_I2C_Mem_Read(&hi2c1,MPU6050_ADDR,GYRO_XOUT_H_REG,I2C_MEMADD_SIZE_8BIT,recData,6,100);
 8001112:	2364      	movs	r3, #100	; 0x64
 8001114:	9302      	str	r3, [sp, #8]
 8001116:	2306      	movs	r3, #6
 8001118:	9301      	str	r3, [sp, #4]
 800111a:	463b      	mov	r3, r7
 800111c:	9300      	str	r3, [sp, #0]
 800111e:	2301      	movs	r3, #1
 8001120:	2243      	movs	r2, #67	; 0x43
 8001122:	21d0      	movs	r1, #208	; 0xd0
 8001124:	4830      	ldr	r0, [pc, #192]	; (80011e8 <MPU6050_Read_Gyro+0xe8>)
 8001126:	f001 f9db 	bl	80024e0 <HAL_I2C_Mem_Read>

    Gyro_X_RAW = (int16_t)(recData[0] << 8 | recData[1]);
 800112a:	783b      	ldrb	r3, [r7, #0]
 800112c:	021b      	lsls	r3, r3, #8
 800112e:	b21a      	sxth	r2, r3
 8001130:	787b      	ldrb	r3, [r7, #1]
 8001132:	b21b      	sxth	r3, r3
 8001134:	4313      	orrs	r3, r2
 8001136:	b21a      	sxth	r2, r3
 8001138:	4b2c      	ldr	r3, [pc, #176]	; (80011ec <MPU6050_Read_Gyro+0xec>)
 800113a:	801a      	strh	r2, [r3, #0]
    Gyro_Y_RAW = (int16_t)(recData[2] << 8 | recData[3]);
 800113c:	78bb      	ldrb	r3, [r7, #2]
 800113e:	021b      	lsls	r3, r3, #8
 8001140:	b21a      	sxth	r2, r3
 8001142:	78fb      	ldrb	r3, [r7, #3]
 8001144:	b21b      	sxth	r3, r3
 8001146:	4313      	orrs	r3, r2
 8001148:	b21a      	sxth	r2, r3
 800114a:	4b29      	ldr	r3, [pc, #164]	; (80011f0 <MPU6050_Read_Gyro+0xf0>)
 800114c:	801a      	strh	r2, [r3, #0]
    Gyro_Z_RAW = (int16_t)(recData[4] << 8 | recData[5]);
 800114e:	793b      	ldrb	r3, [r7, #4]
 8001150:	021b      	lsls	r3, r3, #8
 8001152:	b21a      	sxth	r2, r3
 8001154:	797b      	ldrb	r3, [r7, #5]
 8001156:	b21b      	sxth	r3, r3
 8001158:	4313      	orrs	r3, r2
 800115a:	b21a      	sxth	r2, r3
 800115c:	4b25      	ldr	r3, [pc, #148]	; (80011f4 <MPU6050_Read_Gyro+0xf4>)
 800115e:	801a      	strh	r2, [r3, #0]

	Gx = Gyro_X_RAW/131.0;		// Zamiana raw value na °/s
 8001160:	4b22      	ldr	r3, [pc, #136]	; (80011ec <MPU6050_Read_Gyro+0xec>)
 8001162:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff f9dc 	bl	8000524 <__aeabi_i2d>
 800116c:	a31c      	add	r3, pc, #112	; (adr r3, 80011e0 <MPU6050_Read_Gyro+0xe0>)
 800116e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001172:	f7ff fb6b 	bl	800084c <__aeabi_ddiv>
 8001176:	4602      	mov	r2, r0
 8001178:	460b      	mov	r3, r1
 800117a:	4610      	mov	r0, r2
 800117c:	4619      	mov	r1, r3
 800117e:	f7ff fd13 	bl	8000ba8 <__aeabi_d2f>
 8001182:	4603      	mov	r3, r0
 8001184:	4a1c      	ldr	r2, [pc, #112]	; (80011f8 <MPU6050_Read_Gyro+0xf8>)
 8001186:	6013      	str	r3, [r2, #0]
	Gy = Gyro_Y_RAW/131.0;
 8001188:	4b19      	ldr	r3, [pc, #100]	; (80011f0 <MPU6050_Read_Gyro+0xf0>)
 800118a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800118e:	4618      	mov	r0, r3
 8001190:	f7ff f9c8 	bl	8000524 <__aeabi_i2d>
 8001194:	a312      	add	r3, pc, #72	; (adr r3, 80011e0 <MPU6050_Read_Gyro+0xe0>)
 8001196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800119a:	f7ff fb57 	bl	800084c <__aeabi_ddiv>
 800119e:	4602      	mov	r2, r0
 80011a0:	460b      	mov	r3, r1
 80011a2:	4610      	mov	r0, r2
 80011a4:	4619      	mov	r1, r3
 80011a6:	f7ff fcff 	bl	8000ba8 <__aeabi_d2f>
 80011aa:	4603      	mov	r3, r0
 80011ac:	4a13      	ldr	r2, [pc, #76]	; (80011fc <MPU6050_Read_Gyro+0xfc>)
 80011ae:	6013      	str	r3, [r2, #0]
	Gz = Gyro_Z_RAW/131.0;
 80011b0:	4b10      	ldr	r3, [pc, #64]	; (80011f4 <MPU6050_Read_Gyro+0xf4>)
 80011b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff f9b4 	bl	8000524 <__aeabi_i2d>
 80011bc:	a308      	add	r3, pc, #32	; (adr r3, 80011e0 <MPU6050_Read_Gyro+0xe0>)
 80011be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011c2:	f7ff fb43 	bl	800084c <__aeabi_ddiv>
 80011c6:	4602      	mov	r2, r0
 80011c8:	460b      	mov	r3, r1
 80011ca:	4610      	mov	r0, r2
 80011cc:	4619      	mov	r1, r3
 80011ce:	f7ff fceb 	bl	8000ba8 <__aeabi_d2f>
 80011d2:	4603      	mov	r3, r0
 80011d4:	4a0a      	ldr	r2, [pc, #40]	; (8001200 <MPU6050_Read_Gyro+0x100>)
 80011d6:	6013      	str	r3, [r2, #0]
}
 80011d8:	bf00      	nop
 80011da:	3708      	adds	r7, #8
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	00000000 	.word	0x00000000
 80011e4:	40606000 	.word	0x40606000
 80011e8:	200001f0 	.word	0x200001f0
 80011ec:	200002e0 	.word	0x200002e0
 80011f0:	200002e2 	.word	0x200002e2
 80011f4:	200002e4 	.word	0x200002e4
 80011f8:	200002e8 	.word	0x200002e8
 80011fc:	200002ec 	.word	0x200002ec
 8001200:	200002f0 	.word	0x200002f0

08001204 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001204:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001208:	b090      	sub	sp, #64	; 0x40
 800120a:	af0c      	add	r7, sp, #48	; 0x30
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800120c:	f000 fbc6 	bl	800199c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001210:	f000 f86a 	bl	80012e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001214:	f000 f92a 	bl	800146c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001218:	f000 f8f8 	bl	800140c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800121c:	f000 f8b6 	bl	800138c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  MPU6050_Init();
 8001220:	f7ff fe90 	bl	8000f44 <MPU6050_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  MPU6050_Read_Accel();
 8001224:	f7ff feea 	bl	8000ffc <MPU6050_Read_Accel>
	  MPU6050_Read_Gyro();
 8001228:	f7ff ff6a 	bl	8001100 <MPU6050_Read_Gyro>
	  snprintf((char *)buffer, sizeof(buffer), "Accel x: %.3fg y: %.3fg z: %.3fg   Gyro x: %.3f°/s y: %.3f°/s z: %.3f°/s\n\r", Ax, Ay, Az, Gx, Gy, Gz);
 800122c:	4b25      	ldr	r3, [pc, #148]	; (80012c4 <main+0xc0>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff f989 	bl	8000548 <__aeabi_f2d>
 8001236:	4604      	mov	r4, r0
 8001238:	460d      	mov	r5, r1
 800123a:	4b23      	ldr	r3, [pc, #140]	; (80012c8 <main+0xc4>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4618      	mov	r0, r3
 8001240:	f7ff f982 	bl	8000548 <__aeabi_f2d>
 8001244:	4680      	mov	r8, r0
 8001246:	4689      	mov	r9, r1
 8001248:	4b20      	ldr	r3, [pc, #128]	; (80012cc <main+0xc8>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff f97b 	bl	8000548 <__aeabi_f2d>
 8001252:	4682      	mov	sl, r0
 8001254:	468b      	mov	fp, r1
 8001256:	4b1e      	ldr	r3, [pc, #120]	; (80012d0 <main+0xcc>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4618      	mov	r0, r3
 800125c:	f7ff f974 	bl	8000548 <__aeabi_f2d>
 8001260:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001264:	4b1b      	ldr	r3, [pc, #108]	; (80012d4 <main+0xd0>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff f96d 	bl	8000548 <__aeabi_f2d>
 800126e:	e9c7 0100 	strd	r0, r1, [r7]
 8001272:	4b19      	ldr	r3, [pc, #100]	; (80012d8 <main+0xd4>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff f966 	bl	8000548 <__aeabi_f2d>
 800127c:	4602      	mov	r2, r0
 800127e:	460b      	mov	r3, r1
 8001280:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8001284:	ed97 7b00 	vldr	d7, [r7]
 8001288:	ed8d 7b08 	vstr	d7, [sp, #32]
 800128c:	ed97 7b02 	vldr	d7, [r7, #8]
 8001290:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001294:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8001298:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800129c:	e9cd 4500 	strd	r4, r5, [sp]
 80012a0:	4a0e      	ldr	r2, [pc, #56]	; (80012dc <main+0xd8>)
 80012a2:	2180      	movs	r1, #128	; 0x80
 80012a4:	480e      	ldr	r0, [pc, #56]	; (80012e0 <main+0xdc>)
 80012a6:	f004 fec7 	bl	8006038 <sniprintf>
	  HAL_UART_Transmit(&huart2,buffer, strlen((char *) buffer), HAL_MAX_DELAY);
 80012aa:	480d      	ldr	r0, [pc, #52]	; (80012e0 <main+0xdc>)
 80012ac:	f7fe ffe0 	bl	8000270 <strlen>
 80012b0:	4603      	mov	r3, r0
 80012b2:	b29a      	uxth	r2, r3
 80012b4:	f04f 33ff 	mov.w	r3, #4294967295
 80012b8:	4909      	ldr	r1, [pc, #36]	; (80012e0 <main+0xdc>)
 80012ba:	480a      	ldr	r0, [pc, #40]	; (80012e4 <main+0xe0>)
 80012bc:	f003 f8e8 	bl	8004490 <HAL_UART_Transmit>
	  MPU6050_Read_Accel();
 80012c0:	e7b0      	b.n	8001224 <main+0x20>
 80012c2:	bf00      	nop
 80012c4:	200002d4 	.word	0x200002d4
 80012c8:	200002d8 	.word	0x200002d8
 80012cc:	200002dc 	.word	0x200002dc
 80012d0:	200002e8 	.word	0x200002e8
 80012d4:	200002ec 	.word	0x200002ec
 80012d8:	200002f0 	.word	0x200002f0
 80012dc:	08008330 	.word	0x08008330
 80012e0:	200002f4 	.word	0x200002f4
 80012e4:	20000244 	.word	0x20000244

080012e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b096      	sub	sp, #88	; 0x58
 80012ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012ee:	f107 0314 	add.w	r3, r7, #20
 80012f2:	2244      	movs	r2, #68	; 0x44
 80012f4:	2100      	movs	r1, #0
 80012f6:	4618      	mov	r0, r3
 80012f8:	f004 ff15 	bl	8006126 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012fc:	463b      	mov	r3, r7
 80012fe:	2200      	movs	r2, #0
 8001300:	601a      	str	r2, [r3, #0]
 8001302:	605a      	str	r2, [r3, #4]
 8001304:	609a      	str	r2, [r3, #8]
 8001306:	60da      	str	r2, [r3, #12]
 8001308:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800130a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800130e:	f001 fd5f 	bl	8002dd0 <HAL_PWREx_ControlVoltageScaling>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001318:	f000 f91e 	bl	8001558 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800131c:	2302      	movs	r3, #2
 800131e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001320:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001324:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001326:	2310      	movs	r3, #16
 8001328:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800132a:	2302      	movs	r3, #2
 800132c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800132e:	2302      	movs	r3, #2
 8001330:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001332:	2301      	movs	r3, #1
 8001334:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001336:	230a      	movs	r3, #10
 8001338:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800133a:	2307      	movs	r3, #7
 800133c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800133e:	2302      	movs	r3, #2
 8001340:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001342:	2302      	movs	r3, #2
 8001344:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001346:	f107 0314 	add.w	r3, r7, #20
 800134a:	4618      	mov	r0, r3
 800134c:	f001 fd96 	bl	8002e7c <HAL_RCC_OscConfig>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001356:	f000 f8ff 	bl	8001558 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800135a:	230f      	movs	r3, #15
 800135c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800135e:	2303      	movs	r3, #3
 8001360:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001362:	2300      	movs	r3, #0
 8001364:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001366:	2300      	movs	r3, #0
 8001368:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800136a:	2300      	movs	r3, #0
 800136c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800136e:	463b      	mov	r3, r7
 8001370:	2104      	movs	r1, #4
 8001372:	4618      	mov	r0, r3
 8001374:	f002 f95e 	bl	8003634 <HAL_RCC_ClockConfig>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800137e:	f000 f8eb 	bl	8001558 <Error_Handler>
  }
}
 8001382:	bf00      	nop
 8001384:	3758      	adds	r7, #88	; 0x58
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
	...

0800138c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001390:	4b1b      	ldr	r3, [pc, #108]	; (8001400 <MX_I2C1_Init+0x74>)
 8001392:	4a1c      	ldr	r2, [pc, #112]	; (8001404 <MX_I2C1_Init+0x78>)
 8001394:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8001396:	4b1a      	ldr	r3, [pc, #104]	; (8001400 <MX_I2C1_Init+0x74>)
 8001398:	4a1b      	ldr	r2, [pc, #108]	; (8001408 <MX_I2C1_Init+0x7c>)
 800139a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800139c:	4b18      	ldr	r3, [pc, #96]	; (8001400 <MX_I2C1_Init+0x74>)
 800139e:	2200      	movs	r2, #0
 80013a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013a2:	4b17      	ldr	r3, [pc, #92]	; (8001400 <MX_I2C1_Init+0x74>)
 80013a4:	2201      	movs	r2, #1
 80013a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013a8:	4b15      	ldr	r3, [pc, #84]	; (8001400 <MX_I2C1_Init+0x74>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80013ae:	4b14      	ldr	r3, [pc, #80]	; (8001400 <MX_I2C1_Init+0x74>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80013b4:	4b12      	ldr	r3, [pc, #72]	; (8001400 <MX_I2C1_Init+0x74>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013ba:	4b11      	ldr	r3, [pc, #68]	; (8001400 <MX_I2C1_Init+0x74>)
 80013bc:	2200      	movs	r2, #0
 80013be:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013c0:	4b0f      	ldr	r3, [pc, #60]	; (8001400 <MX_I2C1_Init+0x74>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013c6:	480e      	ldr	r0, [pc, #56]	; (8001400 <MX_I2C1_Init+0x74>)
 80013c8:	f000 feda 	bl	8002180 <HAL_I2C_Init>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80013d2:	f000 f8c1 	bl	8001558 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80013d6:	2100      	movs	r1, #0
 80013d8:	4809      	ldr	r0, [pc, #36]	; (8001400 <MX_I2C1_Init+0x74>)
 80013da:	f001 fc53 	bl	8002c84 <HAL_I2CEx_ConfigAnalogFilter>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80013e4:	f000 f8b8 	bl	8001558 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80013e8:	2100      	movs	r1, #0
 80013ea:	4805      	ldr	r0, [pc, #20]	; (8001400 <MX_I2C1_Init+0x74>)
 80013ec:	f001 fc95 	bl	8002d1a <HAL_I2CEx_ConfigDigitalFilter>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80013f6:	f000 f8af 	bl	8001558 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013fa:	bf00      	nop
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	200001f0 	.word	0x200001f0
 8001404:	40005400 	.word	0x40005400
 8001408:	10909cec 	.word	0x10909cec

0800140c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001410:	4b14      	ldr	r3, [pc, #80]	; (8001464 <MX_USART2_UART_Init+0x58>)
 8001412:	4a15      	ldr	r2, [pc, #84]	; (8001468 <MX_USART2_UART_Init+0x5c>)
 8001414:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001416:	4b13      	ldr	r3, [pc, #76]	; (8001464 <MX_USART2_UART_Init+0x58>)
 8001418:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800141c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800141e:	4b11      	ldr	r3, [pc, #68]	; (8001464 <MX_USART2_UART_Init+0x58>)
 8001420:	2200      	movs	r2, #0
 8001422:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001424:	4b0f      	ldr	r3, [pc, #60]	; (8001464 <MX_USART2_UART_Init+0x58>)
 8001426:	2200      	movs	r2, #0
 8001428:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800142a:	4b0e      	ldr	r3, [pc, #56]	; (8001464 <MX_USART2_UART_Init+0x58>)
 800142c:	2200      	movs	r2, #0
 800142e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001430:	4b0c      	ldr	r3, [pc, #48]	; (8001464 <MX_USART2_UART_Init+0x58>)
 8001432:	220c      	movs	r2, #12
 8001434:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001436:	4b0b      	ldr	r3, [pc, #44]	; (8001464 <MX_USART2_UART_Init+0x58>)
 8001438:	2200      	movs	r2, #0
 800143a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800143c:	4b09      	ldr	r3, [pc, #36]	; (8001464 <MX_USART2_UART_Init+0x58>)
 800143e:	2200      	movs	r2, #0
 8001440:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001442:	4b08      	ldr	r3, [pc, #32]	; (8001464 <MX_USART2_UART_Init+0x58>)
 8001444:	2200      	movs	r2, #0
 8001446:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001448:	4b06      	ldr	r3, [pc, #24]	; (8001464 <MX_USART2_UART_Init+0x58>)
 800144a:	2200      	movs	r2, #0
 800144c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800144e:	4805      	ldr	r0, [pc, #20]	; (8001464 <MX_USART2_UART_Init+0x58>)
 8001450:	f002 ffd0 	bl	80043f4 <HAL_UART_Init>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800145a:	f000 f87d 	bl	8001558 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800145e:	bf00      	nop
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	20000244 	.word	0x20000244
 8001468:	40004400 	.word	0x40004400

0800146c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b08a      	sub	sp, #40	; 0x28
 8001470:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001472:	f107 0314 	add.w	r3, r7, #20
 8001476:	2200      	movs	r2, #0
 8001478:	601a      	str	r2, [r3, #0]
 800147a:	605a      	str	r2, [r3, #4]
 800147c:	609a      	str	r2, [r3, #8]
 800147e:	60da      	str	r2, [r3, #12]
 8001480:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001482:	4b32      	ldr	r3, [pc, #200]	; (800154c <MX_GPIO_Init+0xe0>)
 8001484:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001486:	4a31      	ldr	r2, [pc, #196]	; (800154c <MX_GPIO_Init+0xe0>)
 8001488:	f043 0304 	orr.w	r3, r3, #4
 800148c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800148e:	4b2f      	ldr	r3, [pc, #188]	; (800154c <MX_GPIO_Init+0xe0>)
 8001490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001492:	f003 0304 	and.w	r3, r3, #4
 8001496:	613b      	str	r3, [r7, #16]
 8001498:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800149a:	4b2c      	ldr	r3, [pc, #176]	; (800154c <MX_GPIO_Init+0xe0>)
 800149c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800149e:	4a2b      	ldr	r2, [pc, #172]	; (800154c <MX_GPIO_Init+0xe0>)
 80014a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014a6:	4b29      	ldr	r3, [pc, #164]	; (800154c <MX_GPIO_Init+0xe0>)
 80014a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014ae:	60fb      	str	r3, [r7, #12]
 80014b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014b2:	4b26      	ldr	r3, [pc, #152]	; (800154c <MX_GPIO_Init+0xe0>)
 80014b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014b6:	4a25      	ldr	r2, [pc, #148]	; (800154c <MX_GPIO_Init+0xe0>)
 80014b8:	f043 0301 	orr.w	r3, r3, #1
 80014bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014be:	4b23      	ldr	r3, [pc, #140]	; (800154c <MX_GPIO_Init+0xe0>)
 80014c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014c2:	f003 0301 	and.w	r3, r3, #1
 80014c6:	60bb      	str	r3, [r7, #8]
 80014c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ca:	4b20      	ldr	r3, [pc, #128]	; (800154c <MX_GPIO_Init+0xe0>)
 80014cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ce:	4a1f      	ldr	r2, [pc, #124]	; (800154c <MX_GPIO_Init+0xe0>)
 80014d0:	f043 0302 	orr.w	r3, r3, #2
 80014d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014d6:	4b1d      	ldr	r3, [pc, #116]	; (800154c <MX_GPIO_Init+0xe0>)
 80014d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014da:	f003 0302 	and.w	r3, r3, #2
 80014de:	607b      	str	r3, [r7, #4]
 80014e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80014e2:	2200      	movs	r2, #0
 80014e4:	2120      	movs	r1, #32
 80014e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014ea:	f000 fe31 	bl	8002150 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80014ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014f4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80014f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fa:	2300      	movs	r3, #0
 80014fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80014fe:	f107 0314 	add.w	r3, r7, #20
 8001502:	4619      	mov	r1, r3
 8001504:	4812      	ldr	r0, [pc, #72]	; (8001550 <MX_GPIO_Init+0xe4>)
 8001506:	f000 fc79 	bl	8001dfc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800150a:	2320      	movs	r3, #32
 800150c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800150e:	2301      	movs	r3, #1
 8001510:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001512:	2300      	movs	r3, #0
 8001514:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001516:	2300      	movs	r3, #0
 8001518:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800151a:	f107 0314 	add.w	r3, r7, #20
 800151e:	4619      	mov	r1, r3
 8001520:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001524:	f000 fc6a 	bl	8001dfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001528:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800152c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800152e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001532:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001534:	2300      	movs	r3, #0
 8001536:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001538:	f107 0314 	add.w	r3, r7, #20
 800153c:	4619      	mov	r1, r3
 800153e:	4805      	ldr	r0, [pc, #20]	; (8001554 <MX_GPIO_Init+0xe8>)
 8001540:	f000 fc5c 	bl	8001dfc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001544:	bf00      	nop
 8001546:	3728      	adds	r7, #40	; 0x28
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	40021000 	.word	0x40021000
 8001550:	48000800 	.word	0x48000800
 8001554:	48000400 	.word	0x48000400

08001558 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800155c:	b672      	cpsid	i
}
 800155e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001560:	e7fe      	b.n	8001560 <Error_Handler+0x8>
	...

08001564 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800156a:	4b0f      	ldr	r3, [pc, #60]	; (80015a8 <HAL_MspInit+0x44>)
 800156c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800156e:	4a0e      	ldr	r2, [pc, #56]	; (80015a8 <HAL_MspInit+0x44>)
 8001570:	f043 0301 	orr.w	r3, r3, #1
 8001574:	6613      	str	r3, [r2, #96]	; 0x60
 8001576:	4b0c      	ldr	r3, [pc, #48]	; (80015a8 <HAL_MspInit+0x44>)
 8001578:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800157a:	f003 0301 	and.w	r3, r3, #1
 800157e:	607b      	str	r3, [r7, #4]
 8001580:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001582:	4b09      	ldr	r3, [pc, #36]	; (80015a8 <HAL_MspInit+0x44>)
 8001584:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001586:	4a08      	ldr	r2, [pc, #32]	; (80015a8 <HAL_MspInit+0x44>)
 8001588:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800158c:	6593      	str	r3, [r2, #88]	; 0x58
 800158e:	4b06      	ldr	r3, [pc, #24]	; (80015a8 <HAL_MspInit+0x44>)
 8001590:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001592:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001596:	603b      	str	r3, [r7, #0]
 8001598:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800159a:	bf00      	nop
 800159c:	370c      	adds	r7, #12
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	40021000 	.word	0x40021000

080015ac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b0ac      	sub	sp, #176	; 0xb0
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80015b8:	2200      	movs	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]
 80015bc:	605a      	str	r2, [r3, #4]
 80015be:	609a      	str	r2, [r3, #8]
 80015c0:	60da      	str	r2, [r3, #12]
 80015c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015c4:	f107 0314 	add.w	r3, r7, #20
 80015c8:	2288      	movs	r2, #136	; 0x88
 80015ca:	2100      	movs	r1, #0
 80015cc:	4618      	mov	r0, r3
 80015ce:	f004 fdaa 	bl	8006126 <memset>
  if(hi2c->Instance==I2C1)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a21      	ldr	r2, [pc, #132]	; (800165c <HAL_I2C_MspInit+0xb0>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d13b      	bne.n	8001654 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80015dc:	2340      	movs	r3, #64	; 0x40
 80015de:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80015e0:	2300      	movs	r3, #0
 80015e2:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015e4:	f107 0314 	add.w	r3, r7, #20
 80015e8:	4618      	mov	r0, r3
 80015ea:	f002 fa47 	bl	8003a7c <HAL_RCCEx_PeriphCLKConfig>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80015f4:	f7ff ffb0 	bl	8001558 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015f8:	4b19      	ldr	r3, [pc, #100]	; (8001660 <HAL_I2C_MspInit+0xb4>)
 80015fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015fc:	4a18      	ldr	r2, [pc, #96]	; (8001660 <HAL_I2C_MspInit+0xb4>)
 80015fe:	f043 0302 	orr.w	r3, r3, #2
 8001602:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001604:	4b16      	ldr	r3, [pc, #88]	; (8001660 <HAL_I2C_MspInit+0xb4>)
 8001606:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001608:	f003 0302 	and.w	r3, r3, #2
 800160c:	613b      	str	r3, [r7, #16]
 800160e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001610:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001614:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001618:	2312      	movs	r3, #18
 800161a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161e:	2300      	movs	r3, #0
 8001620:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001624:	2303      	movs	r3, #3
 8001626:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800162a:	2304      	movs	r3, #4
 800162c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001630:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001634:	4619      	mov	r1, r3
 8001636:	480b      	ldr	r0, [pc, #44]	; (8001664 <HAL_I2C_MspInit+0xb8>)
 8001638:	f000 fbe0 	bl	8001dfc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800163c:	4b08      	ldr	r3, [pc, #32]	; (8001660 <HAL_I2C_MspInit+0xb4>)
 800163e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001640:	4a07      	ldr	r2, [pc, #28]	; (8001660 <HAL_I2C_MspInit+0xb4>)
 8001642:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001646:	6593      	str	r3, [r2, #88]	; 0x58
 8001648:	4b05      	ldr	r3, [pc, #20]	; (8001660 <HAL_I2C_MspInit+0xb4>)
 800164a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800164c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001650:	60fb      	str	r3, [r7, #12]
 8001652:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001654:	bf00      	nop
 8001656:	37b0      	adds	r7, #176	; 0xb0
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	40005400 	.word	0x40005400
 8001660:	40021000 	.word	0x40021000
 8001664:	48000400 	.word	0x48000400

08001668 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b0ac      	sub	sp, #176	; 0xb0
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001670:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]
 8001678:	605a      	str	r2, [r3, #4]
 800167a:	609a      	str	r2, [r3, #8]
 800167c:	60da      	str	r2, [r3, #12]
 800167e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001680:	f107 0314 	add.w	r3, r7, #20
 8001684:	2288      	movs	r2, #136	; 0x88
 8001686:	2100      	movs	r1, #0
 8001688:	4618      	mov	r0, r3
 800168a:	f004 fd4c 	bl	8006126 <memset>
  if(huart->Instance==USART2)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a25      	ldr	r2, [pc, #148]	; (8001728 <HAL_UART_MspInit+0xc0>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d143      	bne.n	8001720 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001698:	2302      	movs	r3, #2
 800169a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800169c:	2300      	movs	r3, #0
 800169e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016a0:	f107 0314 	add.w	r3, r7, #20
 80016a4:	4618      	mov	r0, r3
 80016a6:	f002 f9e9 	bl	8003a7c <HAL_RCCEx_PeriphCLKConfig>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d001      	beq.n	80016b4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80016b0:	f7ff ff52 	bl	8001558 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016b4:	4b1d      	ldr	r3, [pc, #116]	; (800172c <HAL_UART_MspInit+0xc4>)
 80016b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016b8:	4a1c      	ldr	r2, [pc, #112]	; (800172c <HAL_UART_MspInit+0xc4>)
 80016ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016be:	6593      	str	r3, [r2, #88]	; 0x58
 80016c0:	4b1a      	ldr	r3, [pc, #104]	; (800172c <HAL_UART_MspInit+0xc4>)
 80016c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016c8:	613b      	str	r3, [r7, #16]
 80016ca:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016cc:	4b17      	ldr	r3, [pc, #92]	; (800172c <HAL_UART_MspInit+0xc4>)
 80016ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016d0:	4a16      	ldr	r2, [pc, #88]	; (800172c <HAL_UART_MspInit+0xc4>)
 80016d2:	f043 0301 	orr.w	r3, r3, #1
 80016d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016d8:	4b14      	ldr	r3, [pc, #80]	; (800172c <HAL_UART_MspInit+0xc4>)
 80016da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016dc:	f003 0301 	and.w	r3, r3, #1
 80016e0:	60fb      	str	r3, [r7, #12]
 80016e2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80016e4:	230c      	movs	r3, #12
 80016e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ea:	2302      	movs	r3, #2
 80016ec:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f0:	2300      	movs	r3, #0
 80016f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016f6:	2303      	movs	r3, #3
 80016f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016fc:	2307      	movs	r3, #7
 80016fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001702:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001706:	4619      	mov	r1, r3
 8001708:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800170c:	f000 fb76 	bl	8001dfc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001710:	2200      	movs	r2, #0
 8001712:	2100      	movs	r1, #0
 8001714:	2026      	movs	r0, #38	; 0x26
 8001716:	f000 fabc 	bl	8001c92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800171a:	2026      	movs	r0, #38	; 0x26
 800171c:	f000 fad5 	bl	8001cca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001720:	bf00      	nop
 8001722:	37b0      	adds	r7, #176	; 0xb0
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	40004400 	.word	0x40004400
 800172c:	40021000 	.word	0x40021000

08001730 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001734:	e7fe      	b.n	8001734 <NMI_Handler+0x4>

08001736 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001736:	b480      	push	{r7}
 8001738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800173a:	e7fe      	b.n	800173a <HardFault_Handler+0x4>

0800173c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001740:	e7fe      	b.n	8001740 <MemManage_Handler+0x4>

08001742 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001742:	b480      	push	{r7}
 8001744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001746:	e7fe      	b.n	8001746 <BusFault_Handler+0x4>

08001748 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800174c:	e7fe      	b.n	800174c <UsageFault_Handler+0x4>

0800174e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800174e:	b480      	push	{r7}
 8001750:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001752:	bf00      	nop
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr

0800175c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001760:	bf00      	nop
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr

0800176a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800176a:	b480      	push	{r7}
 800176c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800176e:	bf00      	nop
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr

08001778 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800177c:	f000 f96a 	bl	8001a54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001780:	bf00      	nop
 8001782:	bd80      	pop	{r7, pc}

08001784 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001788:	4802      	ldr	r0, [pc, #8]	; (8001794 <USART2_IRQHandler+0x10>)
 800178a:	f002 ff0b 	bl	80045a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800178e:	bf00      	nop
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	20000244 	.word	0x20000244

08001798 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  return 1;
 800179c:	2301      	movs	r3, #1
}
 800179e:	4618      	mov	r0, r3
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr

080017a8 <_kill>:

int _kill(int pid, int sig)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80017b2:	f004 fd0b 	bl	80061cc <__errno>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2216      	movs	r2, #22
 80017ba:	601a      	str	r2, [r3, #0]
  return -1;
 80017bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	3708      	adds	r7, #8
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}

080017c8 <_exit>:

void _exit (int status)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80017d0:	f04f 31ff 	mov.w	r1, #4294967295
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	f7ff ffe7 	bl	80017a8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80017da:	e7fe      	b.n	80017da <_exit+0x12>

080017dc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b086      	sub	sp, #24
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	60f8      	str	r0, [r7, #12]
 80017e4:	60b9      	str	r1, [r7, #8]
 80017e6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017e8:	2300      	movs	r3, #0
 80017ea:	617b      	str	r3, [r7, #20]
 80017ec:	e00a      	b.n	8001804 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80017ee:	f3af 8000 	nop.w
 80017f2:	4601      	mov	r1, r0
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	1c5a      	adds	r2, r3, #1
 80017f8:	60ba      	str	r2, [r7, #8]
 80017fa:	b2ca      	uxtb	r2, r1
 80017fc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	3301      	adds	r3, #1
 8001802:	617b      	str	r3, [r7, #20]
 8001804:	697a      	ldr	r2, [r7, #20]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	429a      	cmp	r2, r3
 800180a:	dbf0      	blt.n	80017ee <_read+0x12>
  }

  return len;
 800180c:	687b      	ldr	r3, [r7, #4]
}
 800180e:	4618      	mov	r0, r3
 8001810:	3718      	adds	r7, #24
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}

08001816 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001816:	b580      	push	{r7, lr}
 8001818:	b086      	sub	sp, #24
 800181a:	af00      	add	r7, sp, #0
 800181c:	60f8      	str	r0, [r7, #12]
 800181e:	60b9      	str	r1, [r7, #8]
 8001820:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001822:	2300      	movs	r3, #0
 8001824:	617b      	str	r3, [r7, #20]
 8001826:	e009      	b.n	800183c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	1c5a      	adds	r2, r3, #1
 800182c:	60ba      	str	r2, [r7, #8]
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	4618      	mov	r0, r3
 8001832:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	3301      	adds	r3, #1
 800183a:	617b      	str	r3, [r7, #20]
 800183c:	697a      	ldr	r2, [r7, #20]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	429a      	cmp	r2, r3
 8001842:	dbf1      	blt.n	8001828 <_write+0x12>
  }
  return len;
 8001844:	687b      	ldr	r3, [r7, #4]
}
 8001846:	4618      	mov	r0, r3
 8001848:	3718      	adds	r7, #24
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}

0800184e <_close>:

int _close(int file)
{
 800184e:	b480      	push	{r7}
 8001850:	b083      	sub	sp, #12
 8001852:	af00      	add	r7, sp, #0
 8001854:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001856:	f04f 33ff 	mov.w	r3, #4294967295
}
 800185a:	4618      	mov	r0, r3
 800185c:	370c      	adds	r7, #12
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr

08001866 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001866:	b480      	push	{r7}
 8001868:	b083      	sub	sp, #12
 800186a:	af00      	add	r7, sp, #0
 800186c:	6078      	str	r0, [r7, #4]
 800186e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001876:	605a      	str	r2, [r3, #4]
  return 0;
 8001878:	2300      	movs	r3, #0
}
 800187a:	4618      	mov	r0, r3
 800187c:	370c      	adds	r7, #12
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr

08001886 <_isatty>:

int _isatty(int file)
{
 8001886:	b480      	push	{r7}
 8001888:	b083      	sub	sp, #12
 800188a:	af00      	add	r7, sp, #0
 800188c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800188e:	2301      	movs	r3, #1
}
 8001890:	4618      	mov	r0, r3
 8001892:	370c      	adds	r7, #12
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr

0800189c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800189c:	b480      	push	{r7}
 800189e:	b085      	sub	sp, #20
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	60f8      	str	r0, [r7, #12]
 80018a4:	60b9      	str	r1, [r7, #8]
 80018a6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80018a8:	2300      	movs	r3, #0
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3714      	adds	r7, #20
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
	...

080018b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b086      	sub	sp, #24
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018c0:	4a14      	ldr	r2, [pc, #80]	; (8001914 <_sbrk+0x5c>)
 80018c2:	4b15      	ldr	r3, [pc, #84]	; (8001918 <_sbrk+0x60>)
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018cc:	4b13      	ldr	r3, [pc, #76]	; (800191c <_sbrk+0x64>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d102      	bne.n	80018da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018d4:	4b11      	ldr	r3, [pc, #68]	; (800191c <_sbrk+0x64>)
 80018d6:	4a12      	ldr	r2, [pc, #72]	; (8001920 <_sbrk+0x68>)
 80018d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018da:	4b10      	ldr	r3, [pc, #64]	; (800191c <_sbrk+0x64>)
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	4413      	add	r3, r2
 80018e2:	693a      	ldr	r2, [r7, #16]
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d207      	bcs.n	80018f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018e8:	f004 fc70 	bl	80061cc <__errno>
 80018ec:	4603      	mov	r3, r0
 80018ee:	220c      	movs	r2, #12
 80018f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018f2:	f04f 33ff 	mov.w	r3, #4294967295
 80018f6:	e009      	b.n	800190c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018f8:	4b08      	ldr	r3, [pc, #32]	; (800191c <_sbrk+0x64>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018fe:	4b07      	ldr	r3, [pc, #28]	; (800191c <_sbrk+0x64>)
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4413      	add	r3, r2
 8001906:	4a05      	ldr	r2, [pc, #20]	; (800191c <_sbrk+0x64>)
 8001908:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800190a:	68fb      	ldr	r3, [r7, #12]
}
 800190c:	4618      	mov	r0, r3
 800190e:	3718      	adds	r7, #24
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	20018000 	.word	0x20018000
 8001918:	00000400 	.word	0x00000400
 800191c:	20000374 	.word	0x20000374
 8001920:	200004c8 	.word	0x200004c8

08001924 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001928:	4b06      	ldr	r3, [pc, #24]	; (8001944 <SystemInit+0x20>)
 800192a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800192e:	4a05      	ldr	r2, [pc, #20]	; (8001944 <SystemInit+0x20>)
 8001930:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001934:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001938:	bf00      	nop
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	e000ed00 	.word	0xe000ed00

08001948 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001948:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001980 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800194c:	f7ff ffea 	bl	8001924 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001950:	480c      	ldr	r0, [pc, #48]	; (8001984 <LoopForever+0x6>)
  ldr r1, =_edata
 8001952:	490d      	ldr	r1, [pc, #52]	; (8001988 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001954:	4a0d      	ldr	r2, [pc, #52]	; (800198c <LoopForever+0xe>)
  movs r3, #0
 8001956:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001958:	e002      	b.n	8001960 <LoopCopyDataInit>

0800195a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800195a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800195c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800195e:	3304      	adds	r3, #4

08001960 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001960:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001962:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001964:	d3f9      	bcc.n	800195a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001966:	4a0a      	ldr	r2, [pc, #40]	; (8001990 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001968:	4c0a      	ldr	r4, [pc, #40]	; (8001994 <LoopForever+0x16>)
  movs r3, #0
 800196a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800196c:	e001      	b.n	8001972 <LoopFillZerobss>

0800196e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800196e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001970:	3204      	adds	r2, #4

08001972 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001972:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001974:	d3fb      	bcc.n	800196e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001976:	f004 fc2f 	bl	80061d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800197a:	f7ff fc43 	bl	8001204 <main>

0800197e <LoopForever>:

LoopForever:
    b LoopForever
 800197e:	e7fe      	b.n	800197e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001980:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001984:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001988:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 800198c:	0800874c 	.word	0x0800874c
  ldr r2, =_sbss
 8001990:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001994:	200004c8 	.word	0x200004c8

08001998 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001998:	e7fe      	b.n	8001998 <ADC1_2_IRQHandler>
	...

0800199c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80019a2:	2300      	movs	r3, #0
 80019a4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019a6:	4b0c      	ldr	r3, [pc, #48]	; (80019d8 <HAL_Init+0x3c>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a0b      	ldr	r2, [pc, #44]	; (80019d8 <HAL_Init+0x3c>)
 80019ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019b0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019b2:	2003      	movs	r0, #3
 80019b4:	f000 f962 	bl	8001c7c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019b8:	2000      	movs	r0, #0
 80019ba:	f000 f80f 	bl	80019dc <HAL_InitTick>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d002      	beq.n	80019ca <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80019c4:	2301      	movs	r3, #1
 80019c6:	71fb      	strb	r3, [r7, #7]
 80019c8:	e001      	b.n	80019ce <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80019ca:	f7ff fdcb 	bl	8001564 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80019ce:	79fb      	ldrb	r3, [r7, #7]
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	3708      	adds	r7, #8
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	40022000 	.word	0x40022000

080019dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80019e4:	2300      	movs	r3, #0
 80019e6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80019e8:	4b17      	ldr	r3, [pc, #92]	; (8001a48 <HAL_InitTick+0x6c>)
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d023      	beq.n	8001a38 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80019f0:	4b16      	ldr	r3, [pc, #88]	; (8001a4c <HAL_InitTick+0x70>)
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	4b14      	ldr	r3, [pc, #80]	; (8001a48 <HAL_InitTick+0x6c>)
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	4619      	mov	r1, r3
 80019fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a02:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a06:	4618      	mov	r0, r3
 8001a08:	f000 f96d 	bl	8001ce6 <HAL_SYSTICK_Config>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d10f      	bne.n	8001a32 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2b0f      	cmp	r3, #15
 8001a16:	d809      	bhi.n	8001a2c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a18:	2200      	movs	r2, #0
 8001a1a:	6879      	ldr	r1, [r7, #4]
 8001a1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a20:	f000 f937 	bl	8001c92 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a24:	4a0a      	ldr	r2, [pc, #40]	; (8001a50 <HAL_InitTick+0x74>)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6013      	str	r3, [r2, #0]
 8001a2a:	e007      	b.n	8001a3c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	73fb      	strb	r3, [r7, #15]
 8001a30:	e004      	b.n	8001a3c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	73fb      	strb	r3, [r7, #15]
 8001a36:	e001      	b.n	8001a3c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001a3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3710      	adds	r7, #16
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	20000008 	.word	0x20000008
 8001a4c:	20000000 	.word	0x20000000
 8001a50:	20000004 	.word	0x20000004

08001a54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a58:	4b06      	ldr	r3, [pc, #24]	; (8001a74 <HAL_IncTick+0x20>)
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	4b06      	ldr	r3, [pc, #24]	; (8001a78 <HAL_IncTick+0x24>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4413      	add	r3, r2
 8001a64:	4a04      	ldr	r2, [pc, #16]	; (8001a78 <HAL_IncTick+0x24>)
 8001a66:	6013      	str	r3, [r2, #0]
}
 8001a68:	bf00      	nop
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	20000008 	.word	0x20000008
 8001a78:	20000378 	.word	0x20000378

08001a7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a80:	4b03      	ldr	r3, [pc, #12]	; (8001a90 <HAL_GetTick+0x14>)
 8001a82:	681b      	ldr	r3, [r3, #0]
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	20000378 	.word	0x20000378

08001a94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a9c:	f7ff ffee 	bl	8001a7c <HAL_GetTick>
 8001aa0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001aac:	d005      	beq.n	8001aba <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001aae:	4b0a      	ldr	r3, [pc, #40]	; (8001ad8 <HAL_Delay+0x44>)
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	4413      	add	r3, r2
 8001ab8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001aba:	bf00      	nop
 8001abc:	f7ff ffde 	bl	8001a7c <HAL_GetTick>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	68bb      	ldr	r3, [r7, #8]
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	68fa      	ldr	r2, [r7, #12]
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d8f7      	bhi.n	8001abc <HAL_Delay+0x28>
  {
  }
}
 8001acc:	bf00      	nop
 8001ace:	bf00      	nop
 8001ad0:	3710      	adds	r7, #16
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	20000008 	.word	0x20000008

08001adc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b085      	sub	sp, #20
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	f003 0307 	and.w	r3, r3, #7
 8001aea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001aec:	4b0c      	ldr	r3, [pc, #48]	; (8001b20 <__NVIC_SetPriorityGrouping+0x44>)
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001af2:	68ba      	ldr	r2, [r7, #8]
 8001af4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001af8:	4013      	ands	r3, r2
 8001afa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b0e:	4a04      	ldr	r2, [pc, #16]	; (8001b20 <__NVIC_SetPriorityGrouping+0x44>)
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	60d3      	str	r3, [r2, #12]
}
 8001b14:	bf00      	nop
 8001b16:	3714      	adds	r7, #20
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr
 8001b20:	e000ed00 	.word	0xe000ed00

08001b24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b28:	4b04      	ldr	r3, [pc, #16]	; (8001b3c <__NVIC_GetPriorityGrouping+0x18>)
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	0a1b      	lsrs	r3, r3, #8
 8001b2e:	f003 0307 	and.w	r3, r3, #7
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr
 8001b3c:	e000ed00 	.word	0xe000ed00

08001b40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	4603      	mov	r3, r0
 8001b48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	db0b      	blt.n	8001b6a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b52:	79fb      	ldrb	r3, [r7, #7]
 8001b54:	f003 021f 	and.w	r2, r3, #31
 8001b58:	4907      	ldr	r1, [pc, #28]	; (8001b78 <__NVIC_EnableIRQ+0x38>)
 8001b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b5e:	095b      	lsrs	r3, r3, #5
 8001b60:	2001      	movs	r0, #1
 8001b62:	fa00 f202 	lsl.w	r2, r0, r2
 8001b66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b6a:	bf00      	nop
 8001b6c:	370c      	adds	r7, #12
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	e000e100 	.word	0xe000e100

08001b7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	4603      	mov	r3, r0
 8001b84:	6039      	str	r1, [r7, #0]
 8001b86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	db0a      	blt.n	8001ba6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	b2da      	uxtb	r2, r3
 8001b94:	490c      	ldr	r1, [pc, #48]	; (8001bc8 <__NVIC_SetPriority+0x4c>)
 8001b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9a:	0112      	lsls	r2, r2, #4
 8001b9c:	b2d2      	uxtb	r2, r2
 8001b9e:	440b      	add	r3, r1
 8001ba0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ba4:	e00a      	b.n	8001bbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	b2da      	uxtb	r2, r3
 8001baa:	4908      	ldr	r1, [pc, #32]	; (8001bcc <__NVIC_SetPriority+0x50>)
 8001bac:	79fb      	ldrb	r3, [r7, #7]
 8001bae:	f003 030f 	and.w	r3, r3, #15
 8001bb2:	3b04      	subs	r3, #4
 8001bb4:	0112      	lsls	r2, r2, #4
 8001bb6:	b2d2      	uxtb	r2, r2
 8001bb8:	440b      	add	r3, r1
 8001bba:	761a      	strb	r2, [r3, #24]
}
 8001bbc:	bf00      	nop
 8001bbe:	370c      	adds	r7, #12
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr
 8001bc8:	e000e100 	.word	0xe000e100
 8001bcc:	e000ed00 	.word	0xe000ed00

08001bd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b089      	sub	sp, #36	; 0x24
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	60f8      	str	r0, [r7, #12]
 8001bd8:	60b9      	str	r1, [r7, #8]
 8001bda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	f003 0307 	and.w	r3, r3, #7
 8001be2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	f1c3 0307 	rsb	r3, r3, #7
 8001bea:	2b04      	cmp	r3, #4
 8001bec:	bf28      	it	cs
 8001bee:	2304      	movcs	r3, #4
 8001bf0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	3304      	adds	r3, #4
 8001bf6:	2b06      	cmp	r3, #6
 8001bf8:	d902      	bls.n	8001c00 <NVIC_EncodePriority+0x30>
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	3b03      	subs	r3, #3
 8001bfe:	e000      	b.n	8001c02 <NVIC_EncodePriority+0x32>
 8001c00:	2300      	movs	r3, #0
 8001c02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c04:	f04f 32ff 	mov.w	r2, #4294967295
 8001c08:	69bb      	ldr	r3, [r7, #24]
 8001c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0e:	43da      	mvns	r2, r3
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	401a      	ands	r2, r3
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c18:	f04f 31ff 	mov.w	r1, #4294967295
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c22:	43d9      	mvns	r1, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c28:	4313      	orrs	r3, r2
         );
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3724      	adds	r7, #36	; 0x24
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
	...

08001c38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	3b01      	subs	r3, #1
 8001c44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c48:	d301      	bcc.n	8001c4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e00f      	b.n	8001c6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c4e:	4a0a      	ldr	r2, [pc, #40]	; (8001c78 <SysTick_Config+0x40>)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	3b01      	subs	r3, #1
 8001c54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c56:	210f      	movs	r1, #15
 8001c58:	f04f 30ff 	mov.w	r0, #4294967295
 8001c5c:	f7ff ff8e 	bl	8001b7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c60:	4b05      	ldr	r3, [pc, #20]	; (8001c78 <SysTick_Config+0x40>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c66:	4b04      	ldr	r3, [pc, #16]	; (8001c78 <SysTick_Config+0x40>)
 8001c68:	2207      	movs	r2, #7
 8001c6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c6c:	2300      	movs	r3, #0
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3708      	adds	r7, #8
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	e000e010 	.word	0xe000e010

08001c7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f7ff ff29 	bl	8001adc <__NVIC_SetPriorityGrouping>
}
 8001c8a:	bf00      	nop
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}

08001c92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c92:	b580      	push	{r7, lr}
 8001c94:	b086      	sub	sp, #24
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	4603      	mov	r3, r0
 8001c9a:	60b9      	str	r1, [r7, #8]
 8001c9c:	607a      	str	r2, [r7, #4]
 8001c9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ca4:	f7ff ff3e 	bl	8001b24 <__NVIC_GetPriorityGrouping>
 8001ca8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001caa:	687a      	ldr	r2, [r7, #4]
 8001cac:	68b9      	ldr	r1, [r7, #8]
 8001cae:	6978      	ldr	r0, [r7, #20]
 8001cb0:	f7ff ff8e 	bl	8001bd0 <NVIC_EncodePriority>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cba:	4611      	mov	r1, r2
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7ff ff5d 	bl	8001b7c <__NVIC_SetPriority>
}
 8001cc2:	bf00      	nop
 8001cc4:	3718      	adds	r7, #24
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}

08001cca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cca:	b580      	push	{r7, lr}
 8001ccc:	b082      	sub	sp, #8
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7ff ff31 	bl	8001b40 <__NVIC_EnableIRQ>
}
 8001cde:	bf00      	nop
 8001ce0:	3708      	adds	r7, #8
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}

08001ce6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ce6:	b580      	push	{r7, lr}
 8001ce8:	b082      	sub	sp, #8
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f7ff ffa2 	bl	8001c38 <SysTick_Config>
 8001cf4:	4603      	mov	r3, r0
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3708      	adds	r7, #8
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}

08001cfe <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001cfe:	b480      	push	{r7}
 8001d00:	b085      	sub	sp, #20
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d06:	2300      	movs	r3, #0
 8001d08:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d008      	beq.n	8001d28 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2204      	movs	r2, #4
 8001d1a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	e022      	b.n	8001d6e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f022 020e 	bic.w	r2, r2, #14
 8001d36:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f022 0201 	bic.w	r2, r2, #1
 8001d46:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d4c:	f003 021c 	and.w	r2, r3, #28
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d54:	2101      	movs	r1, #1
 8001d56:	fa01 f202 	lsl.w	r2, r1, r2
 8001d5a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2201      	movs	r2, #1
 8001d60:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2200      	movs	r2, #0
 8001d68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001d6c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3714      	adds	r7, #20
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr

08001d7a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d7a:	b580      	push	{r7, lr}
 8001d7c:	b084      	sub	sp, #16
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d82:	2300      	movs	r3, #0
 8001d84:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	2b02      	cmp	r3, #2
 8001d90:	d005      	beq.n	8001d9e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2204      	movs	r2, #4
 8001d96:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	73fb      	strb	r3, [r7, #15]
 8001d9c:	e029      	b.n	8001df2 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f022 020e 	bic.w	r2, r2, #14
 8001dac:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f022 0201 	bic.w	r2, r2, #1
 8001dbc:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc2:	f003 021c 	and.w	r2, r3, #28
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dca:	2101      	movs	r1, #1
 8001dcc:	fa01 f202 	lsl.w	r2, r1, r2
 8001dd0:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d003      	beq.n	8001df2 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	4798      	blx	r3
    }
  }
  return status;
 8001df2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3710      	adds	r7, #16
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}

08001dfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b087      	sub	sp, #28
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e06:	2300      	movs	r3, #0
 8001e08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e0a:	e17f      	b.n	800210c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	2101      	movs	r1, #1
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	fa01 f303 	lsl.w	r3, r1, r3
 8001e18:	4013      	ands	r3, r2
 8001e1a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	f000 8171 	beq.w	8002106 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f003 0303 	and.w	r3, r3, #3
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d005      	beq.n	8001e3c <HAL_GPIO_Init+0x40>
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f003 0303 	and.w	r3, r3, #3
 8001e38:	2b02      	cmp	r3, #2
 8001e3a:	d130      	bne.n	8001e9e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	005b      	lsls	r3, r3, #1
 8001e46:	2203      	movs	r2, #3
 8001e48:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4c:	43db      	mvns	r3, r3
 8001e4e:	693a      	ldr	r2, [r7, #16]
 8001e50:	4013      	ands	r3, r2
 8001e52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	68da      	ldr	r2, [r3, #12]
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	005b      	lsls	r3, r3, #1
 8001e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e60:	693a      	ldr	r2, [r7, #16]
 8001e62:	4313      	orrs	r3, r2
 8001e64:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	693a      	ldr	r2, [r7, #16]
 8001e6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e72:	2201      	movs	r2, #1
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7a:	43db      	mvns	r3, r3
 8001e7c:	693a      	ldr	r2, [r7, #16]
 8001e7e:	4013      	ands	r3, r2
 8001e80:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	091b      	lsrs	r3, r3, #4
 8001e88:	f003 0201 	and.w	r2, r3, #1
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e92:	693a      	ldr	r2, [r7, #16]
 8001e94:	4313      	orrs	r3, r2
 8001e96:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	693a      	ldr	r2, [r7, #16]
 8001e9c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	f003 0303 	and.w	r3, r3, #3
 8001ea6:	2b03      	cmp	r3, #3
 8001ea8:	d118      	bne.n	8001edc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb8:	43db      	mvns	r3, r3
 8001eba:	693a      	ldr	r2, [r7, #16]
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	08db      	lsrs	r3, r3, #3
 8001ec6:	f003 0201 	and.w	r2, r3, #1
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed0:	693a      	ldr	r2, [r7, #16]
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	693a      	ldr	r2, [r7, #16]
 8001eda:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f003 0303 	and.w	r3, r3, #3
 8001ee4:	2b03      	cmp	r3, #3
 8001ee6:	d017      	beq.n	8001f18 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	005b      	lsls	r3, r3, #1
 8001ef2:	2203      	movs	r2, #3
 8001ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef8:	43db      	mvns	r3, r3
 8001efa:	693a      	ldr	r2, [r7, #16]
 8001efc:	4013      	ands	r3, r2
 8001efe:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	689a      	ldr	r2, [r3, #8]
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	005b      	lsls	r3, r3, #1
 8001f08:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0c:	693a      	ldr	r2, [r7, #16]
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	693a      	ldr	r2, [r7, #16]
 8001f16:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f003 0303 	and.w	r3, r3, #3
 8001f20:	2b02      	cmp	r3, #2
 8001f22:	d123      	bne.n	8001f6c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	08da      	lsrs	r2, r3, #3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	3208      	adds	r2, #8
 8001f2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f30:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	f003 0307 	and.w	r3, r3, #7
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	220f      	movs	r2, #15
 8001f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f40:	43db      	mvns	r3, r3
 8001f42:	693a      	ldr	r2, [r7, #16]
 8001f44:	4013      	ands	r3, r2
 8001f46:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	691a      	ldr	r2, [r3, #16]
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	f003 0307 	and.w	r3, r3, #7
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	fa02 f303 	lsl.w	r3, r2, r3
 8001f58:	693a      	ldr	r2, [r7, #16]
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	08da      	lsrs	r2, r3, #3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	3208      	adds	r2, #8
 8001f66:	6939      	ldr	r1, [r7, #16]
 8001f68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	005b      	lsls	r3, r3, #1
 8001f76:	2203      	movs	r2, #3
 8001f78:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7c:	43db      	mvns	r3, r3
 8001f7e:	693a      	ldr	r2, [r7, #16]
 8001f80:	4013      	ands	r3, r2
 8001f82:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f003 0203 	and.w	r2, r3, #3
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	005b      	lsls	r3, r3, #1
 8001f90:	fa02 f303 	lsl.w	r3, r2, r3
 8001f94:	693a      	ldr	r2, [r7, #16]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	693a      	ldr	r2, [r7, #16]
 8001f9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	f000 80ac 	beq.w	8002106 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fae:	4b5f      	ldr	r3, [pc, #380]	; (800212c <HAL_GPIO_Init+0x330>)
 8001fb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fb2:	4a5e      	ldr	r2, [pc, #376]	; (800212c <HAL_GPIO_Init+0x330>)
 8001fb4:	f043 0301 	orr.w	r3, r3, #1
 8001fb8:	6613      	str	r3, [r2, #96]	; 0x60
 8001fba:	4b5c      	ldr	r3, [pc, #368]	; (800212c <HAL_GPIO_Init+0x330>)
 8001fbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fbe:	f003 0301 	and.w	r3, r3, #1
 8001fc2:	60bb      	str	r3, [r7, #8]
 8001fc4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001fc6:	4a5a      	ldr	r2, [pc, #360]	; (8002130 <HAL_GPIO_Init+0x334>)
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	089b      	lsrs	r3, r3, #2
 8001fcc:	3302      	adds	r3, #2
 8001fce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fd2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	f003 0303 	and.w	r3, r3, #3
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	220f      	movs	r2, #15
 8001fde:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe2:	43db      	mvns	r3, r3
 8001fe4:	693a      	ldr	r2, [r7, #16]
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001ff0:	d025      	beq.n	800203e <HAL_GPIO_Init+0x242>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4a4f      	ldr	r2, [pc, #316]	; (8002134 <HAL_GPIO_Init+0x338>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d01f      	beq.n	800203a <HAL_GPIO_Init+0x23e>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4a4e      	ldr	r2, [pc, #312]	; (8002138 <HAL_GPIO_Init+0x33c>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d019      	beq.n	8002036 <HAL_GPIO_Init+0x23a>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a4d      	ldr	r2, [pc, #308]	; (800213c <HAL_GPIO_Init+0x340>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d013      	beq.n	8002032 <HAL_GPIO_Init+0x236>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a4c      	ldr	r2, [pc, #304]	; (8002140 <HAL_GPIO_Init+0x344>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d00d      	beq.n	800202e <HAL_GPIO_Init+0x232>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a4b      	ldr	r2, [pc, #300]	; (8002144 <HAL_GPIO_Init+0x348>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d007      	beq.n	800202a <HAL_GPIO_Init+0x22e>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a4a      	ldr	r2, [pc, #296]	; (8002148 <HAL_GPIO_Init+0x34c>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d101      	bne.n	8002026 <HAL_GPIO_Init+0x22a>
 8002022:	2306      	movs	r3, #6
 8002024:	e00c      	b.n	8002040 <HAL_GPIO_Init+0x244>
 8002026:	2307      	movs	r3, #7
 8002028:	e00a      	b.n	8002040 <HAL_GPIO_Init+0x244>
 800202a:	2305      	movs	r3, #5
 800202c:	e008      	b.n	8002040 <HAL_GPIO_Init+0x244>
 800202e:	2304      	movs	r3, #4
 8002030:	e006      	b.n	8002040 <HAL_GPIO_Init+0x244>
 8002032:	2303      	movs	r3, #3
 8002034:	e004      	b.n	8002040 <HAL_GPIO_Init+0x244>
 8002036:	2302      	movs	r3, #2
 8002038:	e002      	b.n	8002040 <HAL_GPIO_Init+0x244>
 800203a:	2301      	movs	r3, #1
 800203c:	e000      	b.n	8002040 <HAL_GPIO_Init+0x244>
 800203e:	2300      	movs	r3, #0
 8002040:	697a      	ldr	r2, [r7, #20]
 8002042:	f002 0203 	and.w	r2, r2, #3
 8002046:	0092      	lsls	r2, r2, #2
 8002048:	4093      	lsls	r3, r2
 800204a:	693a      	ldr	r2, [r7, #16]
 800204c:	4313      	orrs	r3, r2
 800204e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002050:	4937      	ldr	r1, [pc, #220]	; (8002130 <HAL_GPIO_Init+0x334>)
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	089b      	lsrs	r3, r3, #2
 8002056:	3302      	adds	r3, #2
 8002058:	693a      	ldr	r2, [r7, #16]
 800205a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800205e:	4b3b      	ldr	r3, [pc, #236]	; (800214c <HAL_GPIO_Init+0x350>)
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	43db      	mvns	r3, r3
 8002068:	693a      	ldr	r2, [r7, #16]
 800206a:	4013      	ands	r3, r2
 800206c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d003      	beq.n	8002082 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800207a:	693a      	ldr	r2, [r7, #16]
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	4313      	orrs	r3, r2
 8002080:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002082:	4a32      	ldr	r2, [pc, #200]	; (800214c <HAL_GPIO_Init+0x350>)
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002088:	4b30      	ldr	r3, [pc, #192]	; (800214c <HAL_GPIO_Init+0x350>)
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	43db      	mvns	r3, r3
 8002092:	693a      	ldr	r2, [r7, #16]
 8002094:	4013      	ands	r3, r2
 8002096:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d003      	beq.n	80020ac <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80020a4:	693a      	ldr	r2, [r7, #16]
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	4313      	orrs	r3, r2
 80020aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80020ac:	4a27      	ldr	r2, [pc, #156]	; (800214c <HAL_GPIO_Init+0x350>)
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80020b2:	4b26      	ldr	r3, [pc, #152]	; (800214c <HAL_GPIO_Init+0x350>)
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	43db      	mvns	r3, r3
 80020bc:	693a      	ldr	r2, [r7, #16]
 80020be:	4013      	ands	r3, r2
 80020c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d003      	beq.n	80020d6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80020ce:	693a      	ldr	r2, [r7, #16]
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	4313      	orrs	r3, r2
 80020d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80020d6:	4a1d      	ldr	r2, [pc, #116]	; (800214c <HAL_GPIO_Init+0x350>)
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80020dc:	4b1b      	ldr	r3, [pc, #108]	; (800214c <HAL_GPIO_Init+0x350>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	43db      	mvns	r3, r3
 80020e6:	693a      	ldr	r2, [r7, #16]
 80020e8:	4013      	ands	r3, r2
 80020ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d003      	beq.n	8002100 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80020f8:	693a      	ldr	r2, [r7, #16]
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002100:	4a12      	ldr	r2, [pc, #72]	; (800214c <HAL_GPIO_Init+0x350>)
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	3301      	adds	r3, #1
 800210a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	fa22 f303 	lsr.w	r3, r2, r3
 8002116:	2b00      	cmp	r3, #0
 8002118:	f47f ae78 	bne.w	8001e0c <HAL_GPIO_Init+0x10>
  }
}
 800211c:	bf00      	nop
 800211e:	bf00      	nop
 8002120:	371c      	adds	r7, #28
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop
 800212c:	40021000 	.word	0x40021000
 8002130:	40010000 	.word	0x40010000
 8002134:	48000400 	.word	0x48000400
 8002138:	48000800 	.word	0x48000800
 800213c:	48000c00 	.word	0x48000c00
 8002140:	48001000 	.word	0x48001000
 8002144:	48001400 	.word	0x48001400
 8002148:	48001800 	.word	0x48001800
 800214c:	40010400 	.word	0x40010400

08002150 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	460b      	mov	r3, r1
 800215a:	807b      	strh	r3, [r7, #2]
 800215c:	4613      	mov	r3, r2
 800215e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002160:	787b      	ldrb	r3, [r7, #1]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d003      	beq.n	800216e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002166:	887a      	ldrh	r2, [r7, #2]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800216c:	e002      	b.n	8002174 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800216e:	887a      	ldrh	r2, [r7, #2]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002174:	bf00      	nop
 8002176:	370c      	adds	r7, #12
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr

08002180 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d101      	bne.n	8002192 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e08d      	b.n	80022ae <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002198:	b2db      	uxtb	r3, r3
 800219a:	2b00      	cmp	r3, #0
 800219c:	d106      	bne.n	80021ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2200      	movs	r2, #0
 80021a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f7ff fa00 	bl	80015ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2224      	movs	r2, #36	; 0x24
 80021b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f022 0201 	bic.w	r2, r2, #1
 80021c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	685a      	ldr	r2, [r3, #4]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80021d0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	689a      	ldr	r2, [r3, #8]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80021e0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	68db      	ldr	r3, [r3, #12]
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d107      	bne.n	80021fa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	689a      	ldr	r2, [r3, #8]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021f6:	609a      	str	r2, [r3, #8]
 80021f8:	e006      	b.n	8002208 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	689a      	ldr	r2, [r3, #8]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002206:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	2b02      	cmp	r3, #2
 800220e:	d108      	bne.n	8002222 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	685a      	ldr	r2, [r3, #4]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800221e:	605a      	str	r2, [r3, #4]
 8002220:	e007      	b.n	8002232 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	685a      	ldr	r2, [r3, #4]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002230:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	687a      	ldr	r2, [r7, #4]
 800223a:	6812      	ldr	r2, [r2, #0]
 800223c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002240:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002244:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	68da      	ldr	r2, [r3, #12]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002254:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	691a      	ldr	r2, [r3, #16]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	695b      	ldr	r3, [r3, #20]
 800225e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	699b      	ldr	r3, [r3, #24]
 8002266:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	430a      	orrs	r2, r1
 800226e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	69d9      	ldr	r1, [r3, #28]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6a1a      	ldr	r2, [r3, #32]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	430a      	orrs	r2, r1
 800227e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f042 0201 	orr.w	r2, r2, #1
 800228e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2200      	movs	r2, #0
 8002294:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2220      	movs	r2, #32
 800229a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2200      	movs	r2, #0
 80022a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2200      	movs	r2, #0
 80022a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80022ac:	2300      	movs	r3, #0
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3708      	adds	r7, #8
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
	...

080022b8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b088      	sub	sp, #32
 80022bc:	af02      	add	r7, sp, #8
 80022be:	60f8      	str	r0, [r7, #12]
 80022c0:	4608      	mov	r0, r1
 80022c2:	4611      	mov	r1, r2
 80022c4:	461a      	mov	r2, r3
 80022c6:	4603      	mov	r3, r0
 80022c8:	817b      	strh	r3, [r7, #10]
 80022ca:	460b      	mov	r3, r1
 80022cc:	813b      	strh	r3, [r7, #8]
 80022ce:	4613      	mov	r3, r2
 80022d0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	2b20      	cmp	r3, #32
 80022dc:	f040 80f9 	bne.w	80024d2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80022e0:	6a3b      	ldr	r3, [r7, #32]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d002      	beq.n	80022ec <HAL_I2C_Mem_Write+0x34>
 80022e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d105      	bne.n	80022f8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022f2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e0ed      	b.n	80024d4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d101      	bne.n	8002306 <HAL_I2C_Mem_Write+0x4e>
 8002302:	2302      	movs	r3, #2
 8002304:	e0e6      	b.n	80024d4 <HAL_I2C_Mem_Write+0x21c>
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2201      	movs	r2, #1
 800230a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800230e:	f7ff fbb5 	bl	8001a7c <HAL_GetTick>
 8002312:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	9300      	str	r3, [sp, #0]
 8002318:	2319      	movs	r3, #25
 800231a:	2201      	movs	r2, #1
 800231c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002320:	68f8      	ldr	r0, [r7, #12]
 8002322:	f000 fac3 	bl	80028ac <I2C_WaitOnFlagUntilTimeout>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d001      	beq.n	8002330 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e0d1      	b.n	80024d4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2221      	movs	r2, #33	; 0x21
 8002334:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2240      	movs	r2, #64	; 0x40
 800233c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2200      	movs	r2, #0
 8002344:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	6a3a      	ldr	r2, [r7, #32]
 800234a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002350:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2200      	movs	r2, #0
 8002356:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002358:	88f8      	ldrh	r0, [r7, #6]
 800235a:	893a      	ldrh	r2, [r7, #8]
 800235c:	8979      	ldrh	r1, [r7, #10]
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	9301      	str	r3, [sp, #4]
 8002362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002364:	9300      	str	r3, [sp, #0]
 8002366:	4603      	mov	r3, r0
 8002368:	68f8      	ldr	r0, [r7, #12]
 800236a:	f000 f9d3 	bl	8002714 <I2C_RequestMemoryWrite>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d005      	beq.n	8002380 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2200      	movs	r2, #0
 8002378:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e0a9      	b.n	80024d4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002384:	b29b      	uxth	r3, r3
 8002386:	2bff      	cmp	r3, #255	; 0xff
 8002388:	d90e      	bls.n	80023a8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	22ff      	movs	r2, #255	; 0xff
 800238e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002394:	b2da      	uxtb	r2, r3
 8002396:	8979      	ldrh	r1, [r7, #10]
 8002398:	2300      	movs	r3, #0
 800239a:	9300      	str	r3, [sp, #0]
 800239c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80023a0:	68f8      	ldr	r0, [r7, #12]
 80023a2:	f000 fc3d 	bl	8002c20 <I2C_TransferConfig>
 80023a6:	e00f      	b.n	80023c8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023ac:	b29a      	uxth	r2, r3
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023b6:	b2da      	uxtb	r2, r3
 80023b8:	8979      	ldrh	r1, [r7, #10]
 80023ba:	2300      	movs	r3, #0
 80023bc:	9300      	str	r3, [sp, #0]
 80023be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023c2:	68f8      	ldr	r0, [r7, #12]
 80023c4:	f000 fc2c 	bl	8002c20 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023c8:	697a      	ldr	r2, [r7, #20]
 80023ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80023cc:	68f8      	ldr	r0, [r7, #12]
 80023ce:	f000 fabc 	bl	800294a <I2C_WaitOnTXISFlagUntilTimeout>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d001      	beq.n	80023dc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e07b      	b.n	80024d4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e0:	781a      	ldrb	r2, [r3, #0]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ec:	1c5a      	adds	r2, r3, #1
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023f6:	b29b      	uxth	r3, r3
 80023f8:	3b01      	subs	r3, #1
 80023fa:	b29a      	uxth	r2, r3
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002404:	3b01      	subs	r3, #1
 8002406:	b29a      	uxth	r2, r3
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002410:	b29b      	uxth	r3, r3
 8002412:	2b00      	cmp	r3, #0
 8002414:	d034      	beq.n	8002480 <HAL_I2C_Mem_Write+0x1c8>
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800241a:	2b00      	cmp	r3, #0
 800241c:	d130      	bne.n	8002480 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	9300      	str	r3, [sp, #0]
 8002422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002424:	2200      	movs	r2, #0
 8002426:	2180      	movs	r1, #128	; 0x80
 8002428:	68f8      	ldr	r0, [r7, #12]
 800242a:	f000 fa3f 	bl	80028ac <I2C_WaitOnFlagUntilTimeout>
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	d001      	beq.n	8002438 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e04d      	b.n	80024d4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800243c:	b29b      	uxth	r3, r3
 800243e:	2bff      	cmp	r3, #255	; 0xff
 8002440:	d90e      	bls.n	8002460 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	22ff      	movs	r2, #255	; 0xff
 8002446:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800244c:	b2da      	uxtb	r2, r3
 800244e:	8979      	ldrh	r1, [r7, #10]
 8002450:	2300      	movs	r3, #0
 8002452:	9300      	str	r3, [sp, #0]
 8002454:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002458:	68f8      	ldr	r0, [r7, #12]
 800245a:	f000 fbe1 	bl	8002c20 <I2C_TransferConfig>
 800245e:	e00f      	b.n	8002480 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002464:	b29a      	uxth	r2, r3
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800246e:	b2da      	uxtb	r2, r3
 8002470:	8979      	ldrh	r1, [r7, #10]
 8002472:	2300      	movs	r3, #0
 8002474:	9300      	str	r3, [sp, #0]
 8002476:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800247a:	68f8      	ldr	r0, [r7, #12]
 800247c:	f000 fbd0 	bl	8002c20 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002484:	b29b      	uxth	r3, r3
 8002486:	2b00      	cmp	r3, #0
 8002488:	d19e      	bne.n	80023c8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800248a:	697a      	ldr	r2, [r7, #20]
 800248c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800248e:	68f8      	ldr	r0, [r7, #12]
 8002490:	f000 faa2 	bl	80029d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d001      	beq.n	800249e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e01a      	b.n	80024d4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	2220      	movs	r2, #32
 80024a4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	6859      	ldr	r1, [r3, #4]
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	4b0a      	ldr	r3, [pc, #40]	; (80024dc <HAL_I2C_Mem_Write+0x224>)
 80024b2:	400b      	ands	r3, r1
 80024b4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2220      	movs	r2, #32
 80024ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2200      	movs	r2, #0
 80024c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2200      	movs	r2, #0
 80024ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80024ce:	2300      	movs	r3, #0
 80024d0:	e000      	b.n	80024d4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80024d2:	2302      	movs	r3, #2
  }
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3718      	adds	r7, #24
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	fe00e800 	.word	0xfe00e800

080024e0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b088      	sub	sp, #32
 80024e4:	af02      	add	r7, sp, #8
 80024e6:	60f8      	str	r0, [r7, #12]
 80024e8:	4608      	mov	r0, r1
 80024ea:	4611      	mov	r1, r2
 80024ec:	461a      	mov	r2, r3
 80024ee:	4603      	mov	r3, r0
 80024f0:	817b      	strh	r3, [r7, #10]
 80024f2:	460b      	mov	r3, r1
 80024f4:	813b      	strh	r3, [r7, #8]
 80024f6:	4613      	mov	r3, r2
 80024f8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002500:	b2db      	uxtb	r3, r3
 8002502:	2b20      	cmp	r3, #32
 8002504:	f040 80fd 	bne.w	8002702 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002508:	6a3b      	ldr	r3, [r7, #32]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d002      	beq.n	8002514 <HAL_I2C_Mem_Read+0x34>
 800250e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002510:	2b00      	cmp	r3, #0
 8002512:	d105      	bne.n	8002520 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	f44f 7200 	mov.w	r2, #512	; 0x200
 800251a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e0f1      	b.n	8002704 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002526:	2b01      	cmp	r3, #1
 8002528:	d101      	bne.n	800252e <HAL_I2C_Mem_Read+0x4e>
 800252a:	2302      	movs	r3, #2
 800252c:	e0ea      	b.n	8002704 <HAL_I2C_Mem_Read+0x224>
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2201      	movs	r2, #1
 8002532:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002536:	f7ff faa1 	bl	8001a7c <HAL_GetTick>
 800253a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	9300      	str	r3, [sp, #0]
 8002540:	2319      	movs	r3, #25
 8002542:	2201      	movs	r2, #1
 8002544:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002548:	68f8      	ldr	r0, [r7, #12]
 800254a:	f000 f9af 	bl	80028ac <I2C_WaitOnFlagUntilTimeout>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d001      	beq.n	8002558 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e0d5      	b.n	8002704 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2222      	movs	r2, #34	; 0x22
 800255c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2240      	movs	r2, #64	; 0x40
 8002564:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2200      	movs	r2, #0
 800256c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	6a3a      	ldr	r2, [r7, #32]
 8002572:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002578:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	2200      	movs	r2, #0
 800257e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002580:	88f8      	ldrh	r0, [r7, #6]
 8002582:	893a      	ldrh	r2, [r7, #8]
 8002584:	8979      	ldrh	r1, [r7, #10]
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	9301      	str	r3, [sp, #4]
 800258a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800258c:	9300      	str	r3, [sp, #0]
 800258e:	4603      	mov	r3, r0
 8002590:	68f8      	ldr	r0, [r7, #12]
 8002592:	f000 f913 	bl	80027bc <I2C_RequestMemoryRead>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d005      	beq.n	80025a8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2200      	movs	r2, #0
 80025a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	e0ad      	b.n	8002704 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	2bff      	cmp	r3, #255	; 0xff
 80025b0:	d90e      	bls.n	80025d0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	22ff      	movs	r2, #255	; 0xff
 80025b6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025bc:	b2da      	uxtb	r2, r3
 80025be:	8979      	ldrh	r1, [r7, #10]
 80025c0:	4b52      	ldr	r3, [pc, #328]	; (800270c <HAL_I2C_Mem_Read+0x22c>)
 80025c2:	9300      	str	r3, [sp, #0]
 80025c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80025c8:	68f8      	ldr	r0, [r7, #12]
 80025ca:	f000 fb29 	bl	8002c20 <I2C_TransferConfig>
 80025ce:	e00f      	b.n	80025f0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025d4:	b29a      	uxth	r2, r3
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025de:	b2da      	uxtb	r2, r3
 80025e0:	8979      	ldrh	r1, [r7, #10]
 80025e2:	4b4a      	ldr	r3, [pc, #296]	; (800270c <HAL_I2C_Mem_Read+0x22c>)
 80025e4:	9300      	str	r3, [sp, #0]
 80025e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025ea:	68f8      	ldr	r0, [r7, #12]
 80025ec:	f000 fb18 	bl	8002c20 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	9300      	str	r3, [sp, #0]
 80025f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025f6:	2200      	movs	r2, #0
 80025f8:	2104      	movs	r1, #4
 80025fa:	68f8      	ldr	r0, [r7, #12]
 80025fc:	f000 f956 	bl	80028ac <I2C_WaitOnFlagUntilTimeout>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d001      	beq.n	800260a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e07c      	b.n	8002704 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002614:	b2d2      	uxtb	r2, r2
 8002616:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261c:	1c5a      	adds	r2, r3, #1
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002626:	3b01      	subs	r3, #1
 8002628:	b29a      	uxth	r2, r3
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002632:	b29b      	uxth	r3, r3
 8002634:	3b01      	subs	r3, #1
 8002636:	b29a      	uxth	r2, r3
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002640:	b29b      	uxth	r3, r3
 8002642:	2b00      	cmp	r3, #0
 8002644:	d034      	beq.n	80026b0 <HAL_I2C_Mem_Read+0x1d0>
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800264a:	2b00      	cmp	r3, #0
 800264c:	d130      	bne.n	80026b0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	9300      	str	r3, [sp, #0]
 8002652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002654:	2200      	movs	r2, #0
 8002656:	2180      	movs	r1, #128	; 0x80
 8002658:	68f8      	ldr	r0, [r7, #12]
 800265a:	f000 f927 	bl	80028ac <I2C_WaitOnFlagUntilTimeout>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d001      	beq.n	8002668 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e04d      	b.n	8002704 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800266c:	b29b      	uxth	r3, r3
 800266e:	2bff      	cmp	r3, #255	; 0xff
 8002670:	d90e      	bls.n	8002690 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	22ff      	movs	r2, #255	; 0xff
 8002676:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800267c:	b2da      	uxtb	r2, r3
 800267e:	8979      	ldrh	r1, [r7, #10]
 8002680:	2300      	movs	r3, #0
 8002682:	9300      	str	r3, [sp, #0]
 8002684:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002688:	68f8      	ldr	r0, [r7, #12]
 800268a:	f000 fac9 	bl	8002c20 <I2C_TransferConfig>
 800268e:	e00f      	b.n	80026b0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002694:	b29a      	uxth	r2, r3
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800269e:	b2da      	uxtb	r2, r3
 80026a0:	8979      	ldrh	r1, [r7, #10]
 80026a2:	2300      	movs	r3, #0
 80026a4:	9300      	str	r3, [sp, #0]
 80026a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026aa:	68f8      	ldr	r0, [r7, #12]
 80026ac:	f000 fab8 	bl	8002c20 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d19a      	bne.n	80025f0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026ba:	697a      	ldr	r2, [r7, #20]
 80026bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80026be:	68f8      	ldr	r0, [r7, #12]
 80026c0:	f000 f98a 	bl	80029d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d001      	beq.n	80026ce <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e01a      	b.n	8002704 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	2220      	movs	r2, #32
 80026d4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	6859      	ldr	r1, [r3, #4]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	4b0b      	ldr	r3, [pc, #44]	; (8002710 <HAL_I2C_Mem_Read+0x230>)
 80026e2:	400b      	ands	r3, r1
 80026e4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2220      	movs	r2, #32
 80026ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	2200      	movs	r2, #0
 80026f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	2200      	movs	r2, #0
 80026fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80026fe:	2300      	movs	r3, #0
 8002700:	e000      	b.n	8002704 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002702:	2302      	movs	r3, #2
  }
}
 8002704:	4618      	mov	r0, r3
 8002706:	3718      	adds	r7, #24
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}
 800270c:	80002400 	.word	0x80002400
 8002710:	fe00e800 	.word	0xfe00e800

08002714 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b086      	sub	sp, #24
 8002718:	af02      	add	r7, sp, #8
 800271a:	60f8      	str	r0, [r7, #12]
 800271c:	4608      	mov	r0, r1
 800271e:	4611      	mov	r1, r2
 8002720:	461a      	mov	r2, r3
 8002722:	4603      	mov	r3, r0
 8002724:	817b      	strh	r3, [r7, #10]
 8002726:	460b      	mov	r3, r1
 8002728:	813b      	strh	r3, [r7, #8]
 800272a:	4613      	mov	r3, r2
 800272c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800272e:	88fb      	ldrh	r3, [r7, #6]
 8002730:	b2da      	uxtb	r2, r3
 8002732:	8979      	ldrh	r1, [r7, #10]
 8002734:	4b20      	ldr	r3, [pc, #128]	; (80027b8 <I2C_RequestMemoryWrite+0xa4>)
 8002736:	9300      	str	r3, [sp, #0]
 8002738:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800273c:	68f8      	ldr	r0, [r7, #12]
 800273e:	f000 fa6f 	bl	8002c20 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002742:	69fa      	ldr	r2, [r7, #28]
 8002744:	69b9      	ldr	r1, [r7, #24]
 8002746:	68f8      	ldr	r0, [r7, #12]
 8002748:	f000 f8ff 	bl	800294a <I2C_WaitOnTXISFlagUntilTimeout>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d001      	beq.n	8002756 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e02c      	b.n	80027b0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002756:	88fb      	ldrh	r3, [r7, #6]
 8002758:	2b01      	cmp	r3, #1
 800275a:	d105      	bne.n	8002768 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800275c:	893b      	ldrh	r3, [r7, #8]
 800275e:	b2da      	uxtb	r2, r3
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	629a      	str	r2, [r3, #40]	; 0x28
 8002766:	e015      	b.n	8002794 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002768:	893b      	ldrh	r3, [r7, #8]
 800276a:	0a1b      	lsrs	r3, r3, #8
 800276c:	b29b      	uxth	r3, r3
 800276e:	b2da      	uxtb	r2, r3
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002776:	69fa      	ldr	r2, [r7, #28]
 8002778:	69b9      	ldr	r1, [r7, #24]
 800277a:	68f8      	ldr	r0, [r7, #12]
 800277c:	f000 f8e5 	bl	800294a <I2C_WaitOnTXISFlagUntilTimeout>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d001      	beq.n	800278a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e012      	b.n	80027b0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800278a:	893b      	ldrh	r3, [r7, #8]
 800278c:	b2da      	uxtb	r2, r3
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002794:	69fb      	ldr	r3, [r7, #28]
 8002796:	9300      	str	r3, [sp, #0]
 8002798:	69bb      	ldr	r3, [r7, #24]
 800279a:	2200      	movs	r2, #0
 800279c:	2180      	movs	r1, #128	; 0x80
 800279e:	68f8      	ldr	r0, [r7, #12]
 80027a0:	f000 f884 	bl	80028ac <I2C_WaitOnFlagUntilTimeout>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d001      	beq.n	80027ae <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e000      	b.n	80027b0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80027ae:	2300      	movs	r3, #0
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3710      	adds	r7, #16
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	80002000 	.word	0x80002000

080027bc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b086      	sub	sp, #24
 80027c0:	af02      	add	r7, sp, #8
 80027c2:	60f8      	str	r0, [r7, #12]
 80027c4:	4608      	mov	r0, r1
 80027c6:	4611      	mov	r1, r2
 80027c8:	461a      	mov	r2, r3
 80027ca:	4603      	mov	r3, r0
 80027cc:	817b      	strh	r3, [r7, #10]
 80027ce:	460b      	mov	r3, r1
 80027d0:	813b      	strh	r3, [r7, #8]
 80027d2:	4613      	mov	r3, r2
 80027d4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80027d6:	88fb      	ldrh	r3, [r7, #6]
 80027d8:	b2da      	uxtb	r2, r3
 80027da:	8979      	ldrh	r1, [r7, #10]
 80027dc:	4b20      	ldr	r3, [pc, #128]	; (8002860 <I2C_RequestMemoryRead+0xa4>)
 80027de:	9300      	str	r3, [sp, #0]
 80027e0:	2300      	movs	r3, #0
 80027e2:	68f8      	ldr	r0, [r7, #12]
 80027e4:	f000 fa1c 	bl	8002c20 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027e8:	69fa      	ldr	r2, [r7, #28]
 80027ea:	69b9      	ldr	r1, [r7, #24]
 80027ec:	68f8      	ldr	r0, [r7, #12]
 80027ee:	f000 f8ac 	bl	800294a <I2C_WaitOnTXISFlagUntilTimeout>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d001      	beq.n	80027fc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	e02c      	b.n	8002856 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80027fc:	88fb      	ldrh	r3, [r7, #6]
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d105      	bne.n	800280e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002802:	893b      	ldrh	r3, [r7, #8]
 8002804:	b2da      	uxtb	r2, r3
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	629a      	str	r2, [r3, #40]	; 0x28
 800280c:	e015      	b.n	800283a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800280e:	893b      	ldrh	r3, [r7, #8]
 8002810:	0a1b      	lsrs	r3, r3, #8
 8002812:	b29b      	uxth	r3, r3
 8002814:	b2da      	uxtb	r2, r3
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800281c:	69fa      	ldr	r2, [r7, #28]
 800281e:	69b9      	ldr	r1, [r7, #24]
 8002820:	68f8      	ldr	r0, [r7, #12]
 8002822:	f000 f892 	bl	800294a <I2C_WaitOnTXISFlagUntilTimeout>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d001      	beq.n	8002830 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	e012      	b.n	8002856 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002830:	893b      	ldrh	r3, [r7, #8]
 8002832:	b2da      	uxtb	r2, r3
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	9300      	str	r3, [sp, #0]
 800283e:	69bb      	ldr	r3, [r7, #24]
 8002840:	2200      	movs	r2, #0
 8002842:	2140      	movs	r1, #64	; 0x40
 8002844:	68f8      	ldr	r0, [r7, #12]
 8002846:	f000 f831 	bl	80028ac <I2C_WaitOnFlagUntilTimeout>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d001      	beq.n	8002854 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e000      	b.n	8002856 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002854:	2300      	movs	r3, #0
}
 8002856:	4618      	mov	r0, r3
 8002858:	3710      	adds	r7, #16
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	80002000 	.word	0x80002000

08002864 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	699b      	ldr	r3, [r3, #24]
 8002872:	f003 0302 	and.w	r3, r3, #2
 8002876:	2b02      	cmp	r3, #2
 8002878:	d103      	bne.n	8002882 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	2200      	movs	r2, #0
 8002880:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	699b      	ldr	r3, [r3, #24]
 8002888:	f003 0301 	and.w	r3, r3, #1
 800288c:	2b01      	cmp	r3, #1
 800288e:	d007      	beq.n	80028a0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	699a      	ldr	r2, [r3, #24]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f042 0201 	orr.w	r2, r2, #1
 800289e:	619a      	str	r2, [r3, #24]
  }
}
 80028a0:	bf00      	nop
 80028a2:	370c      	adds	r7, #12
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr

080028ac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b084      	sub	sp, #16
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	60f8      	str	r0, [r7, #12]
 80028b4:	60b9      	str	r1, [r7, #8]
 80028b6:	603b      	str	r3, [r7, #0]
 80028b8:	4613      	mov	r3, r2
 80028ba:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028bc:	e031      	b.n	8002922 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028c4:	d02d      	beq.n	8002922 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028c6:	f7ff f8d9 	bl	8001a7c <HAL_GetTick>
 80028ca:	4602      	mov	r2, r0
 80028cc:	69bb      	ldr	r3, [r7, #24]
 80028ce:	1ad3      	subs	r3, r2, r3
 80028d0:	683a      	ldr	r2, [r7, #0]
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d302      	bcc.n	80028dc <I2C_WaitOnFlagUntilTimeout+0x30>
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d122      	bne.n	8002922 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	699a      	ldr	r2, [r3, #24]
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	4013      	ands	r3, r2
 80028e6:	68ba      	ldr	r2, [r7, #8]
 80028e8:	429a      	cmp	r2, r3
 80028ea:	bf0c      	ite	eq
 80028ec:	2301      	moveq	r3, #1
 80028ee:	2300      	movne	r3, #0
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	461a      	mov	r2, r3
 80028f4:	79fb      	ldrb	r3, [r7, #7]
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d113      	bne.n	8002922 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028fe:	f043 0220 	orr.w	r2, r3, #32
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2220      	movs	r2, #32
 800290a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2200      	movs	r2, #0
 8002912:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2200      	movs	r2, #0
 800291a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e00f      	b.n	8002942 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	699a      	ldr	r2, [r3, #24]
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	4013      	ands	r3, r2
 800292c:	68ba      	ldr	r2, [r7, #8]
 800292e:	429a      	cmp	r2, r3
 8002930:	bf0c      	ite	eq
 8002932:	2301      	moveq	r3, #1
 8002934:	2300      	movne	r3, #0
 8002936:	b2db      	uxtb	r3, r3
 8002938:	461a      	mov	r2, r3
 800293a:	79fb      	ldrb	r3, [r7, #7]
 800293c:	429a      	cmp	r2, r3
 800293e:	d0be      	beq.n	80028be <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002940:	2300      	movs	r3, #0
}
 8002942:	4618      	mov	r0, r3
 8002944:	3710      	adds	r7, #16
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}

0800294a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800294a:	b580      	push	{r7, lr}
 800294c:	b084      	sub	sp, #16
 800294e:	af00      	add	r7, sp, #0
 8002950:	60f8      	str	r0, [r7, #12]
 8002952:	60b9      	str	r1, [r7, #8]
 8002954:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002956:	e033      	b.n	80029c0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002958:	687a      	ldr	r2, [r7, #4]
 800295a:	68b9      	ldr	r1, [r7, #8]
 800295c:	68f8      	ldr	r0, [r7, #12]
 800295e:	f000 f87f 	bl	8002a60 <I2C_IsErrorOccurred>
 8002962:	4603      	mov	r3, r0
 8002964:	2b00      	cmp	r3, #0
 8002966:	d001      	beq.n	800296c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e031      	b.n	80029d0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002972:	d025      	beq.n	80029c0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002974:	f7ff f882 	bl	8001a7c <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	68ba      	ldr	r2, [r7, #8]
 8002980:	429a      	cmp	r2, r3
 8002982:	d302      	bcc.n	800298a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d11a      	bne.n	80029c0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	699b      	ldr	r3, [r3, #24]
 8002990:	f003 0302 	and.w	r3, r3, #2
 8002994:	2b02      	cmp	r3, #2
 8002996:	d013      	beq.n	80029c0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800299c:	f043 0220 	orr.w	r2, r3, #32
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2220      	movs	r2, #32
 80029a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2200      	movs	r2, #0
 80029b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2200      	movs	r2, #0
 80029b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	e007      	b.n	80029d0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	699b      	ldr	r3, [r3, #24]
 80029c6:	f003 0302 	and.w	r3, r3, #2
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	d1c4      	bne.n	8002958 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80029ce:	2300      	movs	r3, #0
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3710      	adds	r7, #16
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}

080029d8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b084      	sub	sp, #16
 80029dc:	af00      	add	r7, sp, #0
 80029de:	60f8      	str	r0, [r7, #12]
 80029e0:	60b9      	str	r1, [r7, #8]
 80029e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80029e4:	e02f      	b.n	8002a46 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	68b9      	ldr	r1, [r7, #8]
 80029ea:	68f8      	ldr	r0, [r7, #12]
 80029ec:	f000 f838 	bl	8002a60 <I2C_IsErrorOccurred>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d001      	beq.n	80029fa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e02d      	b.n	8002a56 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029fa:	f7ff f83f 	bl	8001a7c <HAL_GetTick>
 80029fe:	4602      	mov	r2, r0
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	1ad3      	subs	r3, r2, r3
 8002a04:	68ba      	ldr	r2, [r7, #8]
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d302      	bcc.n	8002a10 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d11a      	bne.n	8002a46 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	699b      	ldr	r3, [r3, #24]
 8002a16:	f003 0320 	and.w	r3, r3, #32
 8002a1a:	2b20      	cmp	r3, #32
 8002a1c:	d013      	beq.n	8002a46 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a22:	f043 0220 	orr.w	r2, r3, #32
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2220      	movs	r2, #32
 8002a2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2200      	movs	r2, #0
 8002a36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e007      	b.n	8002a56 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	699b      	ldr	r3, [r3, #24]
 8002a4c:	f003 0320 	and.w	r3, r3, #32
 8002a50:	2b20      	cmp	r3, #32
 8002a52:	d1c8      	bne.n	80029e6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002a54:	2300      	movs	r3, #0
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3710      	adds	r7, #16
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
	...

08002a60 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b08a      	sub	sp, #40	; 0x28
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	60f8      	str	r0, [r7, #12]
 8002a68:	60b9      	str	r1, [r7, #8]
 8002a6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	699b      	ldr	r3, [r3, #24]
 8002a78:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002a82:	69bb      	ldr	r3, [r7, #24]
 8002a84:	f003 0310 	and.w	r3, r3, #16
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d068      	beq.n	8002b5e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	2210      	movs	r2, #16
 8002a92:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002a94:	e049      	b.n	8002b2a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a9c:	d045      	beq.n	8002b2a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002a9e:	f7fe ffed 	bl	8001a7c <HAL_GetTick>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	1ad3      	subs	r3, r2, r3
 8002aa8:	68ba      	ldr	r2, [r7, #8]
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d302      	bcc.n	8002ab4 <I2C_IsErrorOccurred+0x54>
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d13a      	bne.n	8002b2a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002abe:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002ac6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	699b      	ldr	r3, [r3, #24]
 8002ace:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ad2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ad6:	d121      	bne.n	8002b1c <I2C_IsErrorOccurred+0xbc>
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ade:	d01d      	beq.n	8002b1c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002ae0:	7cfb      	ldrb	r3, [r7, #19]
 8002ae2:	2b20      	cmp	r3, #32
 8002ae4:	d01a      	beq.n	8002b1c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	685a      	ldr	r2, [r3, #4]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002af4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002af6:	f7fe ffc1 	bl	8001a7c <HAL_GetTick>
 8002afa:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002afc:	e00e      	b.n	8002b1c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002afe:	f7fe ffbd 	bl	8001a7c <HAL_GetTick>
 8002b02:	4602      	mov	r2, r0
 8002b04:	69fb      	ldr	r3, [r7, #28]
 8002b06:	1ad3      	subs	r3, r2, r3
 8002b08:	2b19      	cmp	r3, #25
 8002b0a:	d907      	bls.n	8002b1c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002b0c:	6a3b      	ldr	r3, [r7, #32]
 8002b0e:	f043 0320 	orr.w	r3, r3, #32
 8002b12:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002b1a:	e006      	b.n	8002b2a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	699b      	ldr	r3, [r3, #24]
 8002b22:	f003 0320 	and.w	r3, r3, #32
 8002b26:	2b20      	cmp	r3, #32
 8002b28:	d1e9      	bne.n	8002afe <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	699b      	ldr	r3, [r3, #24]
 8002b30:	f003 0320 	and.w	r3, r3, #32
 8002b34:	2b20      	cmp	r3, #32
 8002b36:	d003      	beq.n	8002b40 <I2C_IsErrorOccurred+0xe0>
 8002b38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d0aa      	beq.n	8002a96 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002b40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d103      	bne.n	8002b50 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	2220      	movs	r2, #32
 8002b4e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002b50:	6a3b      	ldr	r3, [r7, #32]
 8002b52:	f043 0304 	orr.w	r3, r3, #4
 8002b56:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	699b      	ldr	r3, [r3, #24]
 8002b64:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002b66:	69bb      	ldr	r3, [r7, #24]
 8002b68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d00b      	beq.n	8002b88 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002b70:	6a3b      	ldr	r3, [r7, #32]
 8002b72:	f043 0301 	orr.w	r3, r3, #1
 8002b76:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b80:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002b88:	69bb      	ldr	r3, [r7, #24]
 8002b8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d00b      	beq.n	8002baa <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002b92:	6a3b      	ldr	r3, [r7, #32]
 8002b94:	f043 0308 	orr.w	r3, r3, #8
 8002b98:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ba2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002baa:	69bb      	ldr	r3, [r7, #24]
 8002bac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d00b      	beq.n	8002bcc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002bb4:	6a3b      	ldr	r3, [r7, #32]
 8002bb6:	f043 0302 	orr.w	r3, r3, #2
 8002bba:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bc4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002bcc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d01c      	beq.n	8002c0e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002bd4:	68f8      	ldr	r0, [r7, #12]
 8002bd6:	f7ff fe45 	bl	8002864 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	6859      	ldr	r1, [r3, #4]
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	4b0d      	ldr	r3, [pc, #52]	; (8002c1c <I2C_IsErrorOccurred+0x1bc>)
 8002be6:	400b      	ands	r3, r1
 8002be8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002bee:	6a3b      	ldr	r3, [r7, #32]
 8002bf0:	431a      	orrs	r2, r3
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2220      	movs	r2, #32
 8002bfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2200      	movs	r2, #0
 8002c02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002c0e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3728      	adds	r7, #40	; 0x28
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	fe00e800 	.word	0xfe00e800

08002c20 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b087      	sub	sp, #28
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	60f8      	str	r0, [r7, #12]
 8002c28:	607b      	str	r3, [r7, #4]
 8002c2a:	460b      	mov	r3, r1
 8002c2c:	817b      	strh	r3, [r7, #10]
 8002c2e:	4613      	mov	r3, r2
 8002c30:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002c32:	897b      	ldrh	r3, [r7, #10]
 8002c34:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002c38:	7a7b      	ldrb	r3, [r7, #9]
 8002c3a:	041b      	lsls	r3, r3, #16
 8002c3c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002c40:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002c46:	6a3b      	ldr	r3, [r7, #32]
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002c4e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	685a      	ldr	r2, [r3, #4]
 8002c56:	6a3b      	ldr	r3, [r7, #32]
 8002c58:	0d5b      	lsrs	r3, r3, #21
 8002c5a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002c5e:	4b08      	ldr	r3, [pc, #32]	; (8002c80 <I2C_TransferConfig+0x60>)
 8002c60:	430b      	orrs	r3, r1
 8002c62:	43db      	mvns	r3, r3
 8002c64:	ea02 0103 	and.w	r1, r2, r3
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	697a      	ldr	r2, [r7, #20]
 8002c6e:	430a      	orrs	r2, r1
 8002c70:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002c72:	bf00      	nop
 8002c74:	371c      	adds	r7, #28
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr
 8002c7e:	bf00      	nop
 8002c80:	03ff63ff 	.word	0x03ff63ff

08002c84 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b083      	sub	sp, #12
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	2b20      	cmp	r3, #32
 8002c98:	d138      	bne.n	8002d0c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d101      	bne.n	8002ca8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002ca4:	2302      	movs	r3, #2
 8002ca6:	e032      	b.n	8002d0e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2201      	movs	r2, #1
 8002cac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2224      	movs	r2, #36	; 0x24
 8002cb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f022 0201 	bic.w	r2, r2, #1
 8002cc6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002cd6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	6819      	ldr	r1, [r3, #0]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	683a      	ldr	r2, [r7, #0]
 8002ce4:	430a      	orrs	r2, r1
 8002ce6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f042 0201 	orr.w	r2, r2, #1
 8002cf6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2220      	movs	r2, #32
 8002cfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2200      	movs	r2, #0
 8002d04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	e000      	b.n	8002d0e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002d0c:	2302      	movs	r3, #2
  }
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	370c      	adds	r7, #12
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr

08002d1a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002d1a:	b480      	push	{r7}
 8002d1c:	b085      	sub	sp, #20
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	6078      	str	r0, [r7, #4]
 8002d22:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	2b20      	cmp	r3, #32
 8002d2e:	d139      	bne.n	8002da4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d101      	bne.n	8002d3e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002d3a:	2302      	movs	r3, #2
 8002d3c:	e033      	b.n	8002da6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2201      	movs	r2, #1
 8002d42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2224      	movs	r2, #36	; 0x24
 8002d4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f022 0201 	bic.w	r2, r2, #1
 8002d5c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002d6c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	021b      	lsls	r3, r3, #8
 8002d72:	68fa      	ldr	r2, [r7, #12]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	68fa      	ldr	r2, [r7, #12]
 8002d7e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f042 0201 	orr.w	r2, r2, #1
 8002d8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2220      	movs	r2, #32
 8002d94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002da0:	2300      	movs	r3, #0
 8002da2:	e000      	b.n	8002da6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002da4:	2302      	movs	r3, #2
  }
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3714      	adds	r7, #20
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr
	...

08002db4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002db4:	b480      	push	{r7}
 8002db6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002db8:	4b04      	ldr	r3, [pc, #16]	; (8002dcc <HAL_PWREx_GetVoltageRange+0x18>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr
 8002dca:	bf00      	nop
 8002dcc:	40007000 	.word	0x40007000

08002dd0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b085      	sub	sp, #20
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002dde:	d130      	bne.n	8002e42 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002de0:	4b23      	ldr	r3, [pc, #140]	; (8002e70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002de8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002dec:	d038      	beq.n	8002e60 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002dee:	4b20      	ldr	r3, [pc, #128]	; (8002e70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002df6:	4a1e      	ldr	r2, [pc, #120]	; (8002e70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002df8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002dfc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002dfe:	4b1d      	ldr	r3, [pc, #116]	; (8002e74 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	2232      	movs	r2, #50	; 0x32
 8002e04:	fb02 f303 	mul.w	r3, r2, r3
 8002e08:	4a1b      	ldr	r2, [pc, #108]	; (8002e78 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e0e:	0c9b      	lsrs	r3, r3, #18
 8002e10:	3301      	adds	r3, #1
 8002e12:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e14:	e002      	b.n	8002e1c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	3b01      	subs	r3, #1
 8002e1a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e1c:	4b14      	ldr	r3, [pc, #80]	; (8002e70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e1e:	695b      	ldr	r3, [r3, #20]
 8002e20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e28:	d102      	bne.n	8002e30 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d1f2      	bne.n	8002e16 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002e30:	4b0f      	ldr	r3, [pc, #60]	; (8002e70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e32:	695b      	ldr	r3, [r3, #20]
 8002e34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e3c:	d110      	bne.n	8002e60 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e00f      	b.n	8002e62 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002e42:	4b0b      	ldr	r3, [pc, #44]	; (8002e70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002e4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e4e:	d007      	beq.n	8002e60 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002e50:	4b07      	ldr	r3, [pc, #28]	; (8002e70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002e58:	4a05      	ldr	r2, [pc, #20]	; (8002e70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e5e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002e60:	2300      	movs	r3, #0
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3714      	adds	r7, #20
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr
 8002e6e:	bf00      	nop
 8002e70:	40007000 	.word	0x40007000
 8002e74:	20000000 	.word	0x20000000
 8002e78:	431bde83 	.word	0x431bde83

08002e7c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b088      	sub	sp, #32
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d101      	bne.n	8002e8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e3ca      	b.n	8003624 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e8e:	4b97      	ldr	r3, [pc, #604]	; (80030ec <HAL_RCC_OscConfig+0x270>)
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	f003 030c 	and.w	r3, r3, #12
 8002e96:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e98:	4b94      	ldr	r3, [pc, #592]	; (80030ec <HAL_RCC_OscConfig+0x270>)
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	f003 0303 	and.w	r3, r3, #3
 8002ea0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0310 	and.w	r3, r3, #16
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	f000 80e4 	beq.w	8003078 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002eb0:	69bb      	ldr	r3, [r7, #24]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d007      	beq.n	8002ec6 <HAL_RCC_OscConfig+0x4a>
 8002eb6:	69bb      	ldr	r3, [r7, #24]
 8002eb8:	2b0c      	cmp	r3, #12
 8002eba:	f040 808b 	bne.w	8002fd4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	f040 8087 	bne.w	8002fd4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002ec6:	4b89      	ldr	r3, [pc, #548]	; (80030ec <HAL_RCC_OscConfig+0x270>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 0302 	and.w	r3, r3, #2
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d005      	beq.n	8002ede <HAL_RCC_OscConfig+0x62>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	699b      	ldr	r3, [r3, #24]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d101      	bne.n	8002ede <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e3a2      	b.n	8003624 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6a1a      	ldr	r2, [r3, #32]
 8002ee2:	4b82      	ldr	r3, [pc, #520]	; (80030ec <HAL_RCC_OscConfig+0x270>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0308 	and.w	r3, r3, #8
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d004      	beq.n	8002ef8 <HAL_RCC_OscConfig+0x7c>
 8002eee:	4b7f      	ldr	r3, [pc, #508]	; (80030ec <HAL_RCC_OscConfig+0x270>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ef6:	e005      	b.n	8002f04 <HAL_RCC_OscConfig+0x88>
 8002ef8:	4b7c      	ldr	r3, [pc, #496]	; (80030ec <HAL_RCC_OscConfig+0x270>)
 8002efa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002efe:	091b      	lsrs	r3, r3, #4
 8002f00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d223      	bcs.n	8002f50 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6a1b      	ldr	r3, [r3, #32]
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f000 fd55 	bl	80039bc <RCC_SetFlashLatencyFromMSIRange>
 8002f12:	4603      	mov	r3, r0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d001      	beq.n	8002f1c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e383      	b.n	8003624 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f1c:	4b73      	ldr	r3, [pc, #460]	; (80030ec <HAL_RCC_OscConfig+0x270>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a72      	ldr	r2, [pc, #456]	; (80030ec <HAL_RCC_OscConfig+0x270>)
 8002f22:	f043 0308 	orr.w	r3, r3, #8
 8002f26:	6013      	str	r3, [r2, #0]
 8002f28:	4b70      	ldr	r3, [pc, #448]	; (80030ec <HAL_RCC_OscConfig+0x270>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6a1b      	ldr	r3, [r3, #32]
 8002f34:	496d      	ldr	r1, [pc, #436]	; (80030ec <HAL_RCC_OscConfig+0x270>)
 8002f36:	4313      	orrs	r3, r2
 8002f38:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f3a:	4b6c      	ldr	r3, [pc, #432]	; (80030ec <HAL_RCC_OscConfig+0x270>)
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	69db      	ldr	r3, [r3, #28]
 8002f46:	021b      	lsls	r3, r3, #8
 8002f48:	4968      	ldr	r1, [pc, #416]	; (80030ec <HAL_RCC_OscConfig+0x270>)
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	604b      	str	r3, [r1, #4]
 8002f4e:	e025      	b.n	8002f9c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f50:	4b66      	ldr	r3, [pc, #408]	; (80030ec <HAL_RCC_OscConfig+0x270>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a65      	ldr	r2, [pc, #404]	; (80030ec <HAL_RCC_OscConfig+0x270>)
 8002f56:	f043 0308 	orr.w	r3, r3, #8
 8002f5a:	6013      	str	r3, [r2, #0]
 8002f5c:	4b63      	ldr	r3, [pc, #396]	; (80030ec <HAL_RCC_OscConfig+0x270>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6a1b      	ldr	r3, [r3, #32]
 8002f68:	4960      	ldr	r1, [pc, #384]	; (80030ec <HAL_RCC_OscConfig+0x270>)
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f6e:	4b5f      	ldr	r3, [pc, #380]	; (80030ec <HAL_RCC_OscConfig+0x270>)
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	69db      	ldr	r3, [r3, #28]
 8002f7a:	021b      	lsls	r3, r3, #8
 8002f7c:	495b      	ldr	r1, [pc, #364]	; (80030ec <HAL_RCC_OscConfig+0x270>)
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f82:	69bb      	ldr	r3, [r7, #24]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d109      	bne.n	8002f9c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6a1b      	ldr	r3, [r3, #32]
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f000 fd15 	bl	80039bc <RCC_SetFlashLatencyFromMSIRange>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d001      	beq.n	8002f9c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e343      	b.n	8003624 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002f9c:	f000 fc4a 	bl	8003834 <HAL_RCC_GetSysClockFreq>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	4b52      	ldr	r3, [pc, #328]	; (80030ec <HAL_RCC_OscConfig+0x270>)
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	091b      	lsrs	r3, r3, #4
 8002fa8:	f003 030f 	and.w	r3, r3, #15
 8002fac:	4950      	ldr	r1, [pc, #320]	; (80030f0 <HAL_RCC_OscConfig+0x274>)
 8002fae:	5ccb      	ldrb	r3, [r1, r3]
 8002fb0:	f003 031f 	and.w	r3, r3, #31
 8002fb4:	fa22 f303 	lsr.w	r3, r2, r3
 8002fb8:	4a4e      	ldr	r2, [pc, #312]	; (80030f4 <HAL_RCC_OscConfig+0x278>)
 8002fba:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002fbc:	4b4e      	ldr	r3, [pc, #312]	; (80030f8 <HAL_RCC_OscConfig+0x27c>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f7fe fd0b 	bl	80019dc <HAL_InitTick>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002fca:	7bfb      	ldrb	r3, [r7, #15]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d052      	beq.n	8003076 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002fd0:	7bfb      	ldrb	r3, [r7, #15]
 8002fd2:	e327      	b.n	8003624 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	699b      	ldr	r3, [r3, #24]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d032      	beq.n	8003042 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002fdc:	4b43      	ldr	r3, [pc, #268]	; (80030ec <HAL_RCC_OscConfig+0x270>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a42      	ldr	r2, [pc, #264]	; (80030ec <HAL_RCC_OscConfig+0x270>)
 8002fe2:	f043 0301 	orr.w	r3, r3, #1
 8002fe6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002fe8:	f7fe fd48 	bl	8001a7c <HAL_GetTick>
 8002fec:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002fee:	e008      	b.n	8003002 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ff0:	f7fe fd44 	bl	8001a7c <HAL_GetTick>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	d901      	bls.n	8003002 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	e310      	b.n	8003624 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003002:	4b3a      	ldr	r3, [pc, #232]	; (80030ec <HAL_RCC_OscConfig+0x270>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0302 	and.w	r3, r3, #2
 800300a:	2b00      	cmp	r3, #0
 800300c:	d0f0      	beq.n	8002ff0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800300e:	4b37      	ldr	r3, [pc, #220]	; (80030ec <HAL_RCC_OscConfig+0x270>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a36      	ldr	r2, [pc, #216]	; (80030ec <HAL_RCC_OscConfig+0x270>)
 8003014:	f043 0308 	orr.w	r3, r3, #8
 8003018:	6013      	str	r3, [r2, #0]
 800301a:	4b34      	ldr	r3, [pc, #208]	; (80030ec <HAL_RCC_OscConfig+0x270>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6a1b      	ldr	r3, [r3, #32]
 8003026:	4931      	ldr	r1, [pc, #196]	; (80030ec <HAL_RCC_OscConfig+0x270>)
 8003028:	4313      	orrs	r3, r2
 800302a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800302c:	4b2f      	ldr	r3, [pc, #188]	; (80030ec <HAL_RCC_OscConfig+0x270>)
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	69db      	ldr	r3, [r3, #28]
 8003038:	021b      	lsls	r3, r3, #8
 800303a:	492c      	ldr	r1, [pc, #176]	; (80030ec <HAL_RCC_OscConfig+0x270>)
 800303c:	4313      	orrs	r3, r2
 800303e:	604b      	str	r3, [r1, #4]
 8003040:	e01a      	b.n	8003078 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003042:	4b2a      	ldr	r3, [pc, #168]	; (80030ec <HAL_RCC_OscConfig+0x270>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a29      	ldr	r2, [pc, #164]	; (80030ec <HAL_RCC_OscConfig+0x270>)
 8003048:	f023 0301 	bic.w	r3, r3, #1
 800304c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800304e:	f7fe fd15 	bl	8001a7c <HAL_GetTick>
 8003052:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003054:	e008      	b.n	8003068 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003056:	f7fe fd11 	bl	8001a7c <HAL_GetTick>
 800305a:	4602      	mov	r2, r0
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	1ad3      	subs	r3, r2, r3
 8003060:	2b02      	cmp	r3, #2
 8003062:	d901      	bls.n	8003068 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003064:	2303      	movs	r3, #3
 8003066:	e2dd      	b.n	8003624 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003068:	4b20      	ldr	r3, [pc, #128]	; (80030ec <HAL_RCC_OscConfig+0x270>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0302 	and.w	r3, r3, #2
 8003070:	2b00      	cmp	r3, #0
 8003072:	d1f0      	bne.n	8003056 <HAL_RCC_OscConfig+0x1da>
 8003074:	e000      	b.n	8003078 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003076:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0301 	and.w	r3, r3, #1
 8003080:	2b00      	cmp	r3, #0
 8003082:	d074      	beq.n	800316e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003084:	69bb      	ldr	r3, [r7, #24]
 8003086:	2b08      	cmp	r3, #8
 8003088:	d005      	beq.n	8003096 <HAL_RCC_OscConfig+0x21a>
 800308a:	69bb      	ldr	r3, [r7, #24]
 800308c:	2b0c      	cmp	r3, #12
 800308e:	d10e      	bne.n	80030ae <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	2b03      	cmp	r3, #3
 8003094:	d10b      	bne.n	80030ae <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003096:	4b15      	ldr	r3, [pc, #84]	; (80030ec <HAL_RCC_OscConfig+0x270>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d064      	beq.n	800316c <HAL_RCC_OscConfig+0x2f0>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d160      	bne.n	800316c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e2ba      	b.n	8003624 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030b6:	d106      	bne.n	80030c6 <HAL_RCC_OscConfig+0x24a>
 80030b8:	4b0c      	ldr	r3, [pc, #48]	; (80030ec <HAL_RCC_OscConfig+0x270>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a0b      	ldr	r2, [pc, #44]	; (80030ec <HAL_RCC_OscConfig+0x270>)
 80030be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030c2:	6013      	str	r3, [r2, #0]
 80030c4:	e026      	b.n	8003114 <HAL_RCC_OscConfig+0x298>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030ce:	d115      	bne.n	80030fc <HAL_RCC_OscConfig+0x280>
 80030d0:	4b06      	ldr	r3, [pc, #24]	; (80030ec <HAL_RCC_OscConfig+0x270>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a05      	ldr	r2, [pc, #20]	; (80030ec <HAL_RCC_OscConfig+0x270>)
 80030d6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030da:	6013      	str	r3, [r2, #0]
 80030dc:	4b03      	ldr	r3, [pc, #12]	; (80030ec <HAL_RCC_OscConfig+0x270>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a02      	ldr	r2, [pc, #8]	; (80030ec <HAL_RCC_OscConfig+0x270>)
 80030e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030e6:	6013      	str	r3, [r2, #0]
 80030e8:	e014      	b.n	8003114 <HAL_RCC_OscConfig+0x298>
 80030ea:	bf00      	nop
 80030ec:	40021000 	.word	0x40021000
 80030f0:	08008380 	.word	0x08008380
 80030f4:	20000000 	.word	0x20000000
 80030f8:	20000004 	.word	0x20000004
 80030fc:	4ba0      	ldr	r3, [pc, #640]	; (8003380 <HAL_RCC_OscConfig+0x504>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a9f      	ldr	r2, [pc, #636]	; (8003380 <HAL_RCC_OscConfig+0x504>)
 8003102:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003106:	6013      	str	r3, [r2, #0]
 8003108:	4b9d      	ldr	r3, [pc, #628]	; (8003380 <HAL_RCC_OscConfig+0x504>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a9c      	ldr	r2, [pc, #624]	; (8003380 <HAL_RCC_OscConfig+0x504>)
 800310e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003112:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d013      	beq.n	8003144 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800311c:	f7fe fcae 	bl	8001a7c <HAL_GetTick>
 8003120:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003122:	e008      	b.n	8003136 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003124:	f7fe fcaa 	bl	8001a7c <HAL_GetTick>
 8003128:	4602      	mov	r2, r0
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	2b64      	cmp	r3, #100	; 0x64
 8003130:	d901      	bls.n	8003136 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003132:	2303      	movs	r3, #3
 8003134:	e276      	b.n	8003624 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003136:	4b92      	ldr	r3, [pc, #584]	; (8003380 <HAL_RCC_OscConfig+0x504>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800313e:	2b00      	cmp	r3, #0
 8003140:	d0f0      	beq.n	8003124 <HAL_RCC_OscConfig+0x2a8>
 8003142:	e014      	b.n	800316e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003144:	f7fe fc9a 	bl	8001a7c <HAL_GetTick>
 8003148:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800314a:	e008      	b.n	800315e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800314c:	f7fe fc96 	bl	8001a7c <HAL_GetTick>
 8003150:	4602      	mov	r2, r0
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	2b64      	cmp	r3, #100	; 0x64
 8003158:	d901      	bls.n	800315e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800315a:	2303      	movs	r3, #3
 800315c:	e262      	b.n	8003624 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800315e:	4b88      	ldr	r3, [pc, #544]	; (8003380 <HAL_RCC_OscConfig+0x504>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d1f0      	bne.n	800314c <HAL_RCC_OscConfig+0x2d0>
 800316a:	e000      	b.n	800316e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800316c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 0302 	and.w	r3, r3, #2
 8003176:	2b00      	cmp	r3, #0
 8003178:	d060      	beq.n	800323c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800317a:	69bb      	ldr	r3, [r7, #24]
 800317c:	2b04      	cmp	r3, #4
 800317e:	d005      	beq.n	800318c <HAL_RCC_OscConfig+0x310>
 8003180:	69bb      	ldr	r3, [r7, #24]
 8003182:	2b0c      	cmp	r3, #12
 8003184:	d119      	bne.n	80031ba <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	2b02      	cmp	r3, #2
 800318a:	d116      	bne.n	80031ba <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800318c:	4b7c      	ldr	r3, [pc, #496]	; (8003380 <HAL_RCC_OscConfig+0x504>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003194:	2b00      	cmp	r3, #0
 8003196:	d005      	beq.n	80031a4 <HAL_RCC_OscConfig+0x328>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d101      	bne.n	80031a4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e23f      	b.n	8003624 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031a4:	4b76      	ldr	r3, [pc, #472]	; (8003380 <HAL_RCC_OscConfig+0x504>)
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	691b      	ldr	r3, [r3, #16]
 80031b0:	061b      	lsls	r3, r3, #24
 80031b2:	4973      	ldr	r1, [pc, #460]	; (8003380 <HAL_RCC_OscConfig+0x504>)
 80031b4:	4313      	orrs	r3, r2
 80031b6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80031b8:	e040      	b.n	800323c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d023      	beq.n	800320a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031c2:	4b6f      	ldr	r3, [pc, #444]	; (8003380 <HAL_RCC_OscConfig+0x504>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a6e      	ldr	r2, [pc, #440]	; (8003380 <HAL_RCC_OscConfig+0x504>)
 80031c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ce:	f7fe fc55 	bl	8001a7c <HAL_GetTick>
 80031d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031d4:	e008      	b.n	80031e8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031d6:	f7fe fc51 	bl	8001a7c <HAL_GetTick>
 80031da:	4602      	mov	r2, r0
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	1ad3      	subs	r3, r2, r3
 80031e0:	2b02      	cmp	r3, #2
 80031e2:	d901      	bls.n	80031e8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80031e4:	2303      	movs	r3, #3
 80031e6:	e21d      	b.n	8003624 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031e8:	4b65      	ldr	r3, [pc, #404]	; (8003380 <HAL_RCC_OscConfig+0x504>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d0f0      	beq.n	80031d6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031f4:	4b62      	ldr	r3, [pc, #392]	; (8003380 <HAL_RCC_OscConfig+0x504>)
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	691b      	ldr	r3, [r3, #16]
 8003200:	061b      	lsls	r3, r3, #24
 8003202:	495f      	ldr	r1, [pc, #380]	; (8003380 <HAL_RCC_OscConfig+0x504>)
 8003204:	4313      	orrs	r3, r2
 8003206:	604b      	str	r3, [r1, #4]
 8003208:	e018      	b.n	800323c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800320a:	4b5d      	ldr	r3, [pc, #372]	; (8003380 <HAL_RCC_OscConfig+0x504>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a5c      	ldr	r2, [pc, #368]	; (8003380 <HAL_RCC_OscConfig+0x504>)
 8003210:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003214:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003216:	f7fe fc31 	bl	8001a7c <HAL_GetTick>
 800321a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800321c:	e008      	b.n	8003230 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800321e:	f7fe fc2d 	bl	8001a7c <HAL_GetTick>
 8003222:	4602      	mov	r2, r0
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	1ad3      	subs	r3, r2, r3
 8003228:	2b02      	cmp	r3, #2
 800322a:	d901      	bls.n	8003230 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800322c:	2303      	movs	r3, #3
 800322e:	e1f9      	b.n	8003624 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003230:	4b53      	ldr	r3, [pc, #332]	; (8003380 <HAL_RCC_OscConfig+0x504>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003238:	2b00      	cmp	r3, #0
 800323a:	d1f0      	bne.n	800321e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 0308 	and.w	r3, r3, #8
 8003244:	2b00      	cmp	r3, #0
 8003246:	d03c      	beq.n	80032c2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	695b      	ldr	r3, [r3, #20]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d01c      	beq.n	800328a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003250:	4b4b      	ldr	r3, [pc, #300]	; (8003380 <HAL_RCC_OscConfig+0x504>)
 8003252:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003256:	4a4a      	ldr	r2, [pc, #296]	; (8003380 <HAL_RCC_OscConfig+0x504>)
 8003258:	f043 0301 	orr.w	r3, r3, #1
 800325c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003260:	f7fe fc0c 	bl	8001a7c <HAL_GetTick>
 8003264:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003266:	e008      	b.n	800327a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003268:	f7fe fc08 	bl	8001a7c <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	2b02      	cmp	r3, #2
 8003274:	d901      	bls.n	800327a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	e1d4      	b.n	8003624 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800327a:	4b41      	ldr	r3, [pc, #260]	; (8003380 <HAL_RCC_OscConfig+0x504>)
 800327c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003280:	f003 0302 	and.w	r3, r3, #2
 8003284:	2b00      	cmp	r3, #0
 8003286:	d0ef      	beq.n	8003268 <HAL_RCC_OscConfig+0x3ec>
 8003288:	e01b      	b.n	80032c2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800328a:	4b3d      	ldr	r3, [pc, #244]	; (8003380 <HAL_RCC_OscConfig+0x504>)
 800328c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003290:	4a3b      	ldr	r2, [pc, #236]	; (8003380 <HAL_RCC_OscConfig+0x504>)
 8003292:	f023 0301 	bic.w	r3, r3, #1
 8003296:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800329a:	f7fe fbef 	bl	8001a7c <HAL_GetTick>
 800329e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80032a0:	e008      	b.n	80032b4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032a2:	f7fe fbeb 	bl	8001a7c <HAL_GetTick>
 80032a6:	4602      	mov	r2, r0
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	1ad3      	subs	r3, r2, r3
 80032ac:	2b02      	cmp	r3, #2
 80032ae:	d901      	bls.n	80032b4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80032b0:	2303      	movs	r3, #3
 80032b2:	e1b7      	b.n	8003624 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80032b4:	4b32      	ldr	r3, [pc, #200]	; (8003380 <HAL_RCC_OscConfig+0x504>)
 80032b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032ba:	f003 0302 	and.w	r3, r3, #2
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d1ef      	bne.n	80032a2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 0304 	and.w	r3, r3, #4
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	f000 80a6 	beq.w	800341c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032d0:	2300      	movs	r3, #0
 80032d2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80032d4:	4b2a      	ldr	r3, [pc, #168]	; (8003380 <HAL_RCC_OscConfig+0x504>)
 80032d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d10d      	bne.n	80032fc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032e0:	4b27      	ldr	r3, [pc, #156]	; (8003380 <HAL_RCC_OscConfig+0x504>)
 80032e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032e4:	4a26      	ldr	r2, [pc, #152]	; (8003380 <HAL_RCC_OscConfig+0x504>)
 80032e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032ea:	6593      	str	r3, [r2, #88]	; 0x58
 80032ec:	4b24      	ldr	r3, [pc, #144]	; (8003380 <HAL_RCC_OscConfig+0x504>)
 80032ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032f4:	60bb      	str	r3, [r7, #8]
 80032f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032f8:	2301      	movs	r3, #1
 80032fa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032fc:	4b21      	ldr	r3, [pc, #132]	; (8003384 <HAL_RCC_OscConfig+0x508>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003304:	2b00      	cmp	r3, #0
 8003306:	d118      	bne.n	800333a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003308:	4b1e      	ldr	r3, [pc, #120]	; (8003384 <HAL_RCC_OscConfig+0x508>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a1d      	ldr	r2, [pc, #116]	; (8003384 <HAL_RCC_OscConfig+0x508>)
 800330e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003312:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003314:	f7fe fbb2 	bl	8001a7c <HAL_GetTick>
 8003318:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800331a:	e008      	b.n	800332e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800331c:	f7fe fbae 	bl	8001a7c <HAL_GetTick>
 8003320:	4602      	mov	r2, r0
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	2b02      	cmp	r3, #2
 8003328:	d901      	bls.n	800332e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	e17a      	b.n	8003624 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800332e:	4b15      	ldr	r3, [pc, #84]	; (8003384 <HAL_RCC_OscConfig+0x508>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003336:	2b00      	cmp	r3, #0
 8003338:	d0f0      	beq.n	800331c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	2b01      	cmp	r3, #1
 8003340:	d108      	bne.n	8003354 <HAL_RCC_OscConfig+0x4d8>
 8003342:	4b0f      	ldr	r3, [pc, #60]	; (8003380 <HAL_RCC_OscConfig+0x504>)
 8003344:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003348:	4a0d      	ldr	r2, [pc, #52]	; (8003380 <HAL_RCC_OscConfig+0x504>)
 800334a:	f043 0301 	orr.w	r3, r3, #1
 800334e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003352:	e029      	b.n	80033a8 <HAL_RCC_OscConfig+0x52c>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	2b05      	cmp	r3, #5
 800335a:	d115      	bne.n	8003388 <HAL_RCC_OscConfig+0x50c>
 800335c:	4b08      	ldr	r3, [pc, #32]	; (8003380 <HAL_RCC_OscConfig+0x504>)
 800335e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003362:	4a07      	ldr	r2, [pc, #28]	; (8003380 <HAL_RCC_OscConfig+0x504>)
 8003364:	f043 0304 	orr.w	r3, r3, #4
 8003368:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800336c:	4b04      	ldr	r3, [pc, #16]	; (8003380 <HAL_RCC_OscConfig+0x504>)
 800336e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003372:	4a03      	ldr	r2, [pc, #12]	; (8003380 <HAL_RCC_OscConfig+0x504>)
 8003374:	f043 0301 	orr.w	r3, r3, #1
 8003378:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800337c:	e014      	b.n	80033a8 <HAL_RCC_OscConfig+0x52c>
 800337e:	bf00      	nop
 8003380:	40021000 	.word	0x40021000
 8003384:	40007000 	.word	0x40007000
 8003388:	4b9c      	ldr	r3, [pc, #624]	; (80035fc <HAL_RCC_OscConfig+0x780>)
 800338a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800338e:	4a9b      	ldr	r2, [pc, #620]	; (80035fc <HAL_RCC_OscConfig+0x780>)
 8003390:	f023 0301 	bic.w	r3, r3, #1
 8003394:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003398:	4b98      	ldr	r3, [pc, #608]	; (80035fc <HAL_RCC_OscConfig+0x780>)
 800339a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800339e:	4a97      	ldr	r2, [pc, #604]	; (80035fc <HAL_RCC_OscConfig+0x780>)
 80033a0:	f023 0304 	bic.w	r3, r3, #4
 80033a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d016      	beq.n	80033de <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033b0:	f7fe fb64 	bl	8001a7c <HAL_GetTick>
 80033b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033b6:	e00a      	b.n	80033ce <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033b8:	f7fe fb60 	bl	8001a7c <HAL_GetTick>
 80033bc:	4602      	mov	r2, r0
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	1ad3      	subs	r3, r2, r3
 80033c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d901      	bls.n	80033ce <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80033ca:	2303      	movs	r3, #3
 80033cc:	e12a      	b.n	8003624 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033ce:	4b8b      	ldr	r3, [pc, #556]	; (80035fc <HAL_RCC_OscConfig+0x780>)
 80033d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033d4:	f003 0302 	and.w	r3, r3, #2
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d0ed      	beq.n	80033b8 <HAL_RCC_OscConfig+0x53c>
 80033dc:	e015      	b.n	800340a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033de:	f7fe fb4d 	bl	8001a7c <HAL_GetTick>
 80033e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80033e4:	e00a      	b.n	80033fc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033e6:	f7fe fb49 	bl	8001a7c <HAL_GetTick>
 80033ea:	4602      	mov	r2, r0
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	1ad3      	subs	r3, r2, r3
 80033f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d901      	bls.n	80033fc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80033f8:	2303      	movs	r3, #3
 80033fa:	e113      	b.n	8003624 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80033fc:	4b7f      	ldr	r3, [pc, #508]	; (80035fc <HAL_RCC_OscConfig+0x780>)
 80033fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003402:	f003 0302 	and.w	r3, r3, #2
 8003406:	2b00      	cmp	r3, #0
 8003408:	d1ed      	bne.n	80033e6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800340a:	7ffb      	ldrb	r3, [r7, #31]
 800340c:	2b01      	cmp	r3, #1
 800340e:	d105      	bne.n	800341c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003410:	4b7a      	ldr	r3, [pc, #488]	; (80035fc <HAL_RCC_OscConfig+0x780>)
 8003412:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003414:	4a79      	ldr	r2, [pc, #484]	; (80035fc <HAL_RCC_OscConfig+0x780>)
 8003416:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800341a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003420:	2b00      	cmp	r3, #0
 8003422:	f000 80fe 	beq.w	8003622 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800342a:	2b02      	cmp	r3, #2
 800342c:	f040 80d0 	bne.w	80035d0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003430:	4b72      	ldr	r3, [pc, #456]	; (80035fc <HAL_RCC_OscConfig+0x780>)
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	f003 0203 	and.w	r2, r3, #3
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003440:	429a      	cmp	r2, r3
 8003442:	d130      	bne.n	80034a6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800344e:	3b01      	subs	r3, #1
 8003450:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003452:	429a      	cmp	r2, r3
 8003454:	d127      	bne.n	80034a6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003460:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003462:	429a      	cmp	r2, r3
 8003464:	d11f      	bne.n	80034a6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800346c:	687a      	ldr	r2, [r7, #4]
 800346e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003470:	2a07      	cmp	r2, #7
 8003472:	bf14      	ite	ne
 8003474:	2201      	movne	r2, #1
 8003476:	2200      	moveq	r2, #0
 8003478:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800347a:	4293      	cmp	r3, r2
 800347c:	d113      	bne.n	80034a6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003488:	085b      	lsrs	r3, r3, #1
 800348a:	3b01      	subs	r3, #1
 800348c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800348e:	429a      	cmp	r2, r3
 8003490:	d109      	bne.n	80034a6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349c:	085b      	lsrs	r3, r3, #1
 800349e:	3b01      	subs	r3, #1
 80034a0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d06e      	beq.n	8003584 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80034a6:	69bb      	ldr	r3, [r7, #24]
 80034a8:	2b0c      	cmp	r3, #12
 80034aa:	d069      	beq.n	8003580 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80034ac:	4b53      	ldr	r3, [pc, #332]	; (80035fc <HAL_RCC_OscConfig+0x780>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d105      	bne.n	80034c4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80034b8:	4b50      	ldr	r3, [pc, #320]	; (80035fc <HAL_RCC_OscConfig+0x780>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d001      	beq.n	80034c8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	e0ad      	b.n	8003624 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80034c8:	4b4c      	ldr	r3, [pc, #304]	; (80035fc <HAL_RCC_OscConfig+0x780>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a4b      	ldr	r2, [pc, #300]	; (80035fc <HAL_RCC_OscConfig+0x780>)
 80034ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034d2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80034d4:	f7fe fad2 	bl	8001a7c <HAL_GetTick>
 80034d8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034da:	e008      	b.n	80034ee <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034dc:	f7fe face 	bl	8001a7c <HAL_GetTick>
 80034e0:	4602      	mov	r2, r0
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	2b02      	cmp	r3, #2
 80034e8:	d901      	bls.n	80034ee <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	e09a      	b.n	8003624 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034ee:	4b43      	ldr	r3, [pc, #268]	; (80035fc <HAL_RCC_OscConfig+0x780>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d1f0      	bne.n	80034dc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034fa:	4b40      	ldr	r3, [pc, #256]	; (80035fc <HAL_RCC_OscConfig+0x780>)
 80034fc:	68da      	ldr	r2, [r3, #12]
 80034fe:	4b40      	ldr	r3, [pc, #256]	; (8003600 <HAL_RCC_OscConfig+0x784>)
 8003500:	4013      	ands	r3, r2
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800350a:	3a01      	subs	r2, #1
 800350c:	0112      	lsls	r2, r2, #4
 800350e:	4311      	orrs	r1, r2
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003514:	0212      	lsls	r2, r2, #8
 8003516:	4311      	orrs	r1, r2
 8003518:	687a      	ldr	r2, [r7, #4]
 800351a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800351c:	0852      	lsrs	r2, r2, #1
 800351e:	3a01      	subs	r2, #1
 8003520:	0552      	lsls	r2, r2, #21
 8003522:	4311      	orrs	r1, r2
 8003524:	687a      	ldr	r2, [r7, #4]
 8003526:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003528:	0852      	lsrs	r2, r2, #1
 800352a:	3a01      	subs	r2, #1
 800352c:	0652      	lsls	r2, r2, #25
 800352e:	4311      	orrs	r1, r2
 8003530:	687a      	ldr	r2, [r7, #4]
 8003532:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003534:	0912      	lsrs	r2, r2, #4
 8003536:	0452      	lsls	r2, r2, #17
 8003538:	430a      	orrs	r2, r1
 800353a:	4930      	ldr	r1, [pc, #192]	; (80035fc <HAL_RCC_OscConfig+0x780>)
 800353c:	4313      	orrs	r3, r2
 800353e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003540:	4b2e      	ldr	r3, [pc, #184]	; (80035fc <HAL_RCC_OscConfig+0x780>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a2d      	ldr	r2, [pc, #180]	; (80035fc <HAL_RCC_OscConfig+0x780>)
 8003546:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800354a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800354c:	4b2b      	ldr	r3, [pc, #172]	; (80035fc <HAL_RCC_OscConfig+0x780>)
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	4a2a      	ldr	r2, [pc, #168]	; (80035fc <HAL_RCC_OscConfig+0x780>)
 8003552:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003556:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003558:	f7fe fa90 	bl	8001a7c <HAL_GetTick>
 800355c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800355e:	e008      	b.n	8003572 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003560:	f7fe fa8c 	bl	8001a7c <HAL_GetTick>
 8003564:	4602      	mov	r2, r0
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	1ad3      	subs	r3, r2, r3
 800356a:	2b02      	cmp	r3, #2
 800356c:	d901      	bls.n	8003572 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800356e:	2303      	movs	r3, #3
 8003570:	e058      	b.n	8003624 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003572:	4b22      	ldr	r3, [pc, #136]	; (80035fc <HAL_RCC_OscConfig+0x780>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d0f0      	beq.n	8003560 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800357e:	e050      	b.n	8003622 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	e04f      	b.n	8003624 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003584:	4b1d      	ldr	r3, [pc, #116]	; (80035fc <HAL_RCC_OscConfig+0x780>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800358c:	2b00      	cmp	r3, #0
 800358e:	d148      	bne.n	8003622 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003590:	4b1a      	ldr	r3, [pc, #104]	; (80035fc <HAL_RCC_OscConfig+0x780>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a19      	ldr	r2, [pc, #100]	; (80035fc <HAL_RCC_OscConfig+0x780>)
 8003596:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800359a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800359c:	4b17      	ldr	r3, [pc, #92]	; (80035fc <HAL_RCC_OscConfig+0x780>)
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	4a16      	ldr	r2, [pc, #88]	; (80035fc <HAL_RCC_OscConfig+0x780>)
 80035a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035a6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80035a8:	f7fe fa68 	bl	8001a7c <HAL_GetTick>
 80035ac:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035ae:	e008      	b.n	80035c2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035b0:	f7fe fa64 	bl	8001a7c <HAL_GetTick>
 80035b4:	4602      	mov	r2, r0
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	2b02      	cmp	r3, #2
 80035bc:	d901      	bls.n	80035c2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e030      	b.n	8003624 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035c2:	4b0e      	ldr	r3, [pc, #56]	; (80035fc <HAL_RCC_OscConfig+0x780>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d0f0      	beq.n	80035b0 <HAL_RCC_OscConfig+0x734>
 80035ce:	e028      	b.n	8003622 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80035d0:	69bb      	ldr	r3, [r7, #24]
 80035d2:	2b0c      	cmp	r3, #12
 80035d4:	d023      	beq.n	800361e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035d6:	4b09      	ldr	r3, [pc, #36]	; (80035fc <HAL_RCC_OscConfig+0x780>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a08      	ldr	r2, [pc, #32]	; (80035fc <HAL_RCC_OscConfig+0x780>)
 80035dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035e2:	f7fe fa4b 	bl	8001a7c <HAL_GetTick>
 80035e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035e8:	e00c      	b.n	8003604 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035ea:	f7fe fa47 	bl	8001a7c <HAL_GetTick>
 80035ee:	4602      	mov	r2, r0
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	1ad3      	subs	r3, r2, r3
 80035f4:	2b02      	cmp	r3, #2
 80035f6:	d905      	bls.n	8003604 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80035f8:	2303      	movs	r3, #3
 80035fa:	e013      	b.n	8003624 <HAL_RCC_OscConfig+0x7a8>
 80035fc:	40021000 	.word	0x40021000
 8003600:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003604:	4b09      	ldr	r3, [pc, #36]	; (800362c <HAL_RCC_OscConfig+0x7b0>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800360c:	2b00      	cmp	r3, #0
 800360e:	d1ec      	bne.n	80035ea <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003610:	4b06      	ldr	r3, [pc, #24]	; (800362c <HAL_RCC_OscConfig+0x7b0>)
 8003612:	68da      	ldr	r2, [r3, #12]
 8003614:	4905      	ldr	r1, [pc, #20]	; (800362c <HAL_RCC_OscConfig+0x7b0>)
 8003616:	4b06      	ldr	r3, [pc, #24]	; (8003630 <HAL_RCC_OscConfig+0x7b4>)
 8003618:	4013      	ands	r3, r2
 800361a:	60cb      	str	r3, [r1, #12]
 800361c:	e001      	b.n	8003622 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e000      	b.n	8003624 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003622:	2300      	movs	r3, #0
}
 8003624:	4618      	mov	r0, r3
 8003626:	3720      	adds	r7, #32
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}
 800362c:	40021000 	.word	0x40021000
 8003630:	feeefffc 	.word	0xfeeefffc

08003634 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b084      	sub	sp, #16
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
 800363c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d101      	bne.n	8003648 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e0e7      	b.n	8003818 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003648:	4b75      	ldr	r3, [pc, #468]	; (8003820 <HAL_RCC_ClockConfig+0x1ec>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 0307 	and.w	r3, r3, #7
 8003650:	683a      	ldr	r2, [r7, #0]
 8003652:	429a      	cmp	r2, r3
 8003654:	d910      	bls.n	8003678 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003656:	4b72      	ldr	r3, [pc, #456]	; (8003820 <HAL_RCC_ClockConfig+0x1ec>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f023 0207 	bic.w	r2, r3, #7
 800365e:	4970      	ldr	r1, [pc, #448]	; (8003820 <HAL_RCC_ClockConfig+0x1ec>)
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	4313      	orrs	r3, r2
 8003664:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003666:	4b6e      	ldr	r3, [pc, #440]	; (8003820 <HAL_RCC_ClockConfig+0x1ec>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 0307 	and.w	r3, r3, #7
 800366e:	683a      	ldr	r2, [r7, #0]
 8003670:	429a      	cmp	r2, r3
 8003672:	d001      	beq.n	8003678 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	e0cf      	b.n	8003818 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 0302 	and.w	r3, r3, #2
 8003680:	2b00      	cmp	r3, #0
 8003682:	d010      	beq.n	80036a6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	689a      	ldr	r2, [r3, #8]
 8003688:	4b66      	ldr	r3, [pc, #408]	; (8003824 <HAL_RCC_ClockConfig+0x1f0>)
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003690:	429a      	cmp	r2, r3
 8003692:	d908      	bls.n	80036a6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003694:	4b63      	ldr	r3, [pc, #396]	; (8003824 <HAL_RCC_ClockConfig+0x1f0>)
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	4960      	ldr	r1, [pc, #384]	; (8003824 <HAL_RCC_ClockConfig+0x1f0>)
 80036a2:	4313      	orrs	r3, r2
 80036a4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 0301 	and.w	r3, r3, #1
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d04c      	beq.n	800374c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	2b03      	cmp	r3, #3
 80036b8:	d107      	bne.n	80036ca <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036ba:	4b5a      	ldr	r3, [pc, #360]	; (8003824 <HAL_RCC_ClockConfig+0x1f0>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d121      	bne.n	800370a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e0a6      	b.n	8003818 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	2b02      	cmp	r3, #2
 80036d0:	d107      	bne.n	80036e2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036d2:	4b54      	ldr	r3, [pc, #336]	; (8003824 <HAL_RCC_ClockConfig+0x1f0>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d115      	bne.n	800370a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e09a      	b.n	8003818 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d107      	bne.n	80036fa <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80036ea:	4b4e      	ldr	r3, [pc, #312]	; (8003824 <HAL_RCC_ClockConfig+0x1f0>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 0302 	and.w	r3, r3, #2
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d109      	bne.n	800370a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e08e      	b.n	8003818 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036fa:	4b4a      	ldr	r3, [pc, #296]	; (8003824 <HAL_RCC_ClockConfig+0x1f0>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003702:	2b00      	cmp	r3, #0
 8003704:	d101      	bne.n	800370a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e086      	b.n	8003818 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800370a:	4b46      	ldr	r3, [pc, #280]	; (8003824 <HAL_RCC_ClockConfig+0x1f0>)
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	f023 0203 	bic.w	r2, r3, #3
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	4943      	ldr	r1, [pc, #268]	; (8003824 <HAL_RCC_ClockConfig+0x1f0>)
 8003718:	4313      	orrs	r3, r2
 800371a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800371c:	f7fe f9ae 	bl	8001a7c <HAL_GetTick>
 8003720:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003722:	e00a      	b.n	800373a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003724:	f7fe f9aa 	bl	8001a7c <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003732:	4293      	cmp	r3, r2
 8003734:	d901      	bls.n	800373a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003736:	2303      	movs	r3, #3
 8003738:	e06e      	b.n	8003818 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800373a:	4b3a      	ldr	r3, [pc, #232]	; (8003824 <HAL_RCC_ClockConfig+0x1f0>)
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	f003 020c 	and.w	r2, r3, #12
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	429a      	cmp	r2, r3
 800374a:	d1eb      	bne.n	8003724 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0302 	and.w	r3, r3, #2
 8003754:	2b00      	cmp	r3, #0
 8003756:	d010      	beq.n	800377a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	689a      	ldr	r2, [r3, #8]
 800375c:	4b31      	ldr	r3, [pc, #196]	; (8003824 <HAL_RCC_ClockConfig+0x1f0>)
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003764:	429a      	cmp	r2, r3
 8003766:	d208      	bcs.n	800377a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003768:	4b2e      	ldr	r3, [pc, #184]	; (8003824 <HAL_RCC_ClockConfig+0x1f0>)
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	492b      	ldr	r1, [pc, #172]	; (8003824 <HAL_RCC_ClockConfig+0x1f0>)
 8003776:	4313      	orrs	r3, r2
 8003778:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800377a:	4b29      	ldr	r3, [pc, #164]	; (8003820 <HAL_RCC_ClockConfig+0x1ec>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0307 	and.w	r3, r3, #7
 8003782:	683a      	ldr	r2, [r7, #0]
 8003784:	429a      	cmp	r2, r3
 8003786:	d210      	bcs.n	80037aa <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003788:	4b25      	ldr	r3, [pc, #148]	; (8003820 <HAL_RCC_ClockConfig+0x1ec>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f023 0207 	bic.w	r2, r3, #7
 8003790:	4923      	ldr	r1, [pc, #140]	; (8003820 <HAL_RCC_ClockConfig+0x1ec>)
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	4313      	orrs	r3, r2
 8003796:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003798:	4b21      	ldr	r3, [pc, #132]	; (8003820 <HAL_RCC_ClockConfig+0x1ec>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 0307 	and.w	r3, r3, #7
 80037a0:	683a      	ldr	r2, [r7, #0]
 80037a2:	429a      	cmp	r2, r3
 80037a4:	d001      	beq.n	80037aa <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e036      	b.n	8003818 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 0304 	and.w	r3, r3, #4
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d008      	beq.n	80037c8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037b6:	4b1b      	ldr	r3, [pc, #108]	; (8003824 <HAL_RCC_ClockConfig+0x1f0>)
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	68db      	ldr	r3, [r3, #12]
 80037c2:	4918      	ldr	r1, [pc, #96]	; (8003824 <HAL_RCC_ClockConfig+0x1f0>)
 80037c4:	4313      	orrs	r3, r2
 80037c6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 0308 	and.w	r3, r3, #8
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d009      	beq.n	80037e8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037d4:	4b13      	ldr	r3, [pc, #76]	; (8003824 <HAL_RCC_ClockConfig+0x1f0>)
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	691b      	ldr	r3, [r3, #16]
 80037e0:	00db      	lsls	r3, r3, #3
 80037e2:	4910      	ldr	r1, [pc, #64]	; (8003824 <HAL_RCC_ClockConfig+0x1f0>)
 80037e4:	4313      	orrs	r3, r2
 80037e6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80037e8:	f000 f824 	bl	8003834 <HAL_RCC_GetSysClockFreq>
 80037ec:	4602      	mov	r2, r0
 80037ee:	4b0d      	ldr	r3, [pc, #52]	; (8003824 <HAL_RCC_ClockConfig+0x1f0>)
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	091b      	lsrs	r3, r3, #4
 80037f4:	f003 030f 	and.w	r3, r3, #15
 80037f8:	490b      	ldr	r1, [pc, #44]	; (8003828 <HAL_RCC_ClockConfig+0x1f4>)
 80037fa:	5ccb      	ldrb	r3, [r1, r3]
 80037fc:	f003 031f 	and.w	r3, r3, #31
 8003800:	fa22 f303 	lsr.w	r3, r2, r3
 8003804:	4a09      	ldr	r2, [pc, #36]	; (800382c <HAL_RCC_ClockConfig+0x1f8>)
 8003806:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003808:	4b09      	ldr	r3, [pc, #36]	; (8003830 <HAL_RCC_ClockConfig+0x1fc>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4618      	mov	r0, r3
 800380e:	f7fe f8e5 	bl	80019dc <HAL_InitTick>
 8003812:	4603      	mov	r3, r0
 8003814:	72fb      	strb	r3, [r7, #11]

  return status;
 8003816:	7afb      	ldrb	r3, [r7, #11]
}
 8003818:	4618      	mov	r0, r3
 800381a:	3710      	adds	r7, #16
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}
 8003820:	40022000 	.word	0x40022000
 8003824:	40021000 	.word	0x40021000
 8003828:	08008380 	.word	0x08008380
 800382c:	20000000 	.word	0x20000000
 8003830:	20000004 	.word	0x20000004

08003834 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003834:	b480      	push	{r7}
 8003836:	b089      	sub	sp, #36	; 0x24
 8003838:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800383a:	2300      	movs	r3, #0
 800383c:	61fb      	str	r3, [r7, #28]
 800383e:	2300      	movs	r3, #0
 8003840:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003842:	4b3e      	ldr	r3, [pc, #248]	; (800393c <HAL_RCC_GetSysClockFreq+0x108>)
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	f003 030c 	and.w	r3, r3, #12
 800384a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800384c:	4b3b      	ldr	r3, [pc, #236]	; (800393c <HAL_RCC_GetSysClockFreq+0x108>)
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	f003 0303 	and.w	r3, r3, #3
 8003854:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d005      	beq.n	8003868 <HAL_RCC_GetSysClockFreq+0x34>
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	2b0c      	cmp	r3, #12
 8003860:	d121      	bne.n	80038a6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2b01      	cmp	r3, #1
 8003866:	d11e      	bne.n	80038a6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003868:	4b34      	ldr	r3, [pc, #208]	; (800393c <HAL_RCC_GetSysClockFreq+0x108>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 0308 	and.w	r3, r3, #8
 8003870:	2b00      	cmp	r3, #0
 8003872:	d107      	bne.n	8003884 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003874:	4b31      	ldr	r3, [pc, #196]	; (800393c <HAL_RCC_GetSysClockFreq+0x108>)
 8003876:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800387a:	0a1b      	lsrs	r3, r3, #8
 800387c:	f003 030f 	and.w	r3, r3, #15
 8003880:	61fb      	str	r3, [r7, #28]
 8003882:	e005      	b.n	8003890 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003884:	4b2d      	ldr	r3, [pc, #180]	; (800393c <HAL_RCC_GetSysClockFreq+0x108>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	091b      	lsrs	r3, r3, #4
 800388a:	f003 030f 	and.w	r3, r3, #15
 800388e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003890:	4a2b      	ldr	r2, [pc, #172]	; (8003940 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003898:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d10d      	bne.n	80038bc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80038a0:	69fb      	ldr	r3, [r7, #28]
 80038a2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80038a4:	e00a      	b.n	80038bc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	2b04      	cmp	r3, #4
 80038aa:	d102      	bne.n	80038b2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80038ac:	4b25      	ldr	r3, [pc, #148]	; (8003944 <HAL_RCC_GetSysClockFreq+0x110>)
 80038ae:	61bb      	str	r3, [r7, #24]
 80038b0:	e004      	b.n	80038bc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	2b08      	cmp	r3, #8
 80038b6:	d101      	bne.n	80038bc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80038b8:	4b23      	ldr	r3, [pc, #140]	; (8003948 <HAL_RCC_GetSysClockFreq+0x114>)
 80038ba:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	2b0c      	cmp	r3, #12
 80038c0:	d134      	bne.n	800392c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80038c2:	4b1e      	ldr	r3, [pc, #120]	; (800393c <HAL_RCC_GetSysClockFreq+0x108>)
 80038c4:	68db      	ldr	r3, [r3, #12]
 80038c6:	f003 0303 	and.w	r3, r3, #3
 80038ca:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	2b02      	cmp	r3, #2
 80038d0:	d003      	beq.n	80038da <HAL_RCC_GetSysClockFreq+0xa6>
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	2b03      	cmp	r3, #3
 80038d6:	d003      	beq.n	80038e0 <HAL_RCC_GetSysClockFreq+0xac>
 80038d8:	e005      	b.n	80038e6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80038da:	4b1a      	ldr	r3, [pc, #104]	; (8003944 <HAL_RCC_GetSysClockFreq+0x110>)
 80038dc:	617b      	str	r3, [r7, #20]
      break;
 80038de:	e005      	b.n	80038ec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80038e0:	4b19      	ldr	r3, [pc, #100]	; (8003948 <HAL_RCC_GetSysClockFreq+0x114>)
 80038e2:	617b      	str	r3, [r7, #20]
      break;
 80038e4:	e002      	b.n	80038ec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	617b      	str	r3, [r7, #20]
      break;
 80038ea:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80038ec:	4b13      	ldr	r3, [pc, #76]	; (800393c <HAL_RCC_GetSysClockFreq+0x108>)
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	091b      	lsrs	r3, r3, #4
 80038f2:	f003 0307 	and.w	r3, r3, #7
 80038f6:	3301      	adds	r3, #1
 80038f8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80038fa:	4b10      	ldr	r3, [pc, #64]	; (800393c <HAL_RCC_GetSysClockFreq+0x108>)
 80038fc:	68db      	ldr	r3, [r3, #12]
 80038fe:	0a1b      	lsrs	r3, r3, #8
 8003900:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003904:	697a      	ldr	r2, [r7, #20]
 8003906:	fb03 f202 	mul.w	r2, r3, r2
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003910:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003912:	4b0a      	ldr	r3, [pc, #40]	; (800393c <HAL_RCC_GetSysClockFreq+0x108>)
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	0e5b      	lsrs	r3, r3, #25
 8003918:	f003 0303 	and.w	r3, r3, #3
 800391c:	3301      	adds	r3, #1
 800391e:	005b      	lsls	r3, r3, #1
 8003920:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003922:	697a      	ldr	r2, [r7, #20]
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	fbb2 f3f3 	udiv	r3, r2, r3
 800392a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800392c:	69bb      	ldr	r3, [r7, #24]
}
 800392e:	4618      	mov	r0, r3
 8003930:	3724      	adds	r7, #36	; 0x24
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr
 800393a:	bf00      	nop
 800393c:	40021000 	.word	0x40021000
 8003940:	08008398 	.word	0x08008398
 8003944:	00f42400 	.word	0x00f42400
 8003948:	007a1200 	.word	0x007a1200

0800394c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800394c:	b480      	push	{r7}
 800394e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003950:	4b03      	ldr	r3, [pc, #12]	; (8003960 <HAL_RCC_GetHCLKFreq+0x14>)
 8003952:	681b      	ldr	r3, [r3, #0]
}
 8003954:	4618      	mov	r0, r3
 8003956:	46bd      	mov	sp, r7
 8003958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395c:	4770      	bx	lr
 800395e:	bf00      	nop
 8003960:	20000000 	.word	0x20000000

08003964 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003968:	f7ff fff0 	bl	800394c <HAL_RCC_GetHCLKFreq>
 800396c:	4602      	mov	r2, r0
 800396e:	4b06      	ldr	r3, [pc, #24]	; (8003988 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	0a1b      	lsrs	r3, r3, #8
 8003974:	f003 0307 	and.w	r3, r3, #7
 8003978:	4904      	ldr	r1, [pc, #16]	; (800398c <HAL_RCC_GetPCLK1Freq+0x28>)
 800397a:	5ccb      	ldrb	r3, [r1, r3]
 800397c:	f003 031f 	and.w	r3, r3, #31
 8003980:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003984:	4618      	mov	r0, r3
 8003986:	bd80      	pop	{r7, pc}
 8003988:	40021000 	.word	0x40021000
 800398c:	08008390 	.word	0x08008390

08003990 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003994:	f7ff ffda 	bl	800394c <HAL_RCC_GetHCLKFreq>
 8003998:	4602      	mov	r2, r0
 800399a:	4b06      	ldr	r3, [pc, #24]	; (80039b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	0adb      	lsrs	r3, r3, #11
 80039a0:	f003 0307 	and.w	r3, r3, #7
 80039a4:	4904      	ldr	r1, [pc, #16]	; (80039b8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80039a6:	5ccb      	ldrb	r3, [r1, r3]
 80039a8:	f003 031f 	and.w	r3, r3, #31
 80039ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	bd80      	pop	{r7, pc}
 80039b4:	40021000 	.word	0x40021000
 80039b8:	08008390 	.word	0x08008390

080039bc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b086      	sub	sp, #24
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80039c4:	2300      	movs	r3, #0
 80039c6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80039c8:	4b2a      	ldr	r3, [pc, #168]	; (8003a74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d003      	beq.n	80039dc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80039d4:	f7ff f9ee 	bl	8002db4 <HAL_PWREx_GetVoltageRange>
 80039d8:	6178      	str	r0, [r7, #20]
 80039da:	e014      	b.n	8003a06 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80039dc:	4b25      	ldr	r3, [pc, #148]	; (8003a74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039e0:	4a24      	ldr	r2, [pc, #144]	; (8003a74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039e6:	6593      	str	r3, [r2, #88]	; 0x58
 80039e8:	4b22      	ldr	r3, [pc, #136]	; (8003a74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039f0:	60fb      	str	r3, [r7, #12]
 80039f2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80039f4:	f7ff f9de 	bl	8002db4 <HAL_PWREx_GetVoltageRange>
 80039f8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80039fa:	4b1e      	ldr	r3, [pc, #120]	; (8003a74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039fe:	4a1d      	ldr	r2, [pc, #116]	; (8003a74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a04:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a0c:	d10b      	bne.n	8003a26 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2b80      	cmp	r3, #128	; 0x80
 8003a12:	d919      	bls.n	8003a48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2ba0      	cmp	r3, #160	; 0xa0
 8003a18:	d902      	bls.n	8003a20 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003a1a:	2302      	movs	r3, #2
 8003a1c:	613b      	str	r3, [r7, #16]
 8003a1e:	e013      	b.n	8003a48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003a20:	2301      	movs	r3, #1
 8003a22:	613b      	str	r3, [r7, #16]
 8003a24:	e010      	b.n	8003a48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2b80      	cmp	r3, #128	; 0x80
 8003a2a:	d902      	bls.n	8003a32 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003a2c:	2303      	movs	r3, #3
 8003a2e:	613b      	str	r3, [r7, #16]
 8003a30:	e00a      	b.n	8003a48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2b80      	cmp	r3, #128	; 0x80
 8003a36:	d102      	bne.n	8003a3e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003a38:	2302      	movs	r3, #2
 8003a3a:	613b      	str	r3, [r7, #16]
 8003a3c:	e004      	b.n	8003a48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2b70      	cmp	r3, #112	; 0x70
 8003a42:	d101      	bne.n	8003a48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003a44:	2301      	movs	r3, #1
 8003a46:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003a48:	4b0b      	ldr	r3, [pc, #44]	; (8003a78 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f023 0207 	bic.w	r2, r3, #7
 8003a50:	4909      	ldr	r1, [pc, #36]	; (8003a78 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	4313      	orrs	r3, r2
 8003a56:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003a58:	4b07      	ldr	r3, [pc, #28]	; (8003a78 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 0307 	and.w	r3, r3, #7
 8003a60:	693a      	ldr	r2, [r7, #16]
 8003a62:	429a      	cmp	r2, r3
 8003a64:	d001      	beq.n	8003a6a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	e000      	b.n	8003a6c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003a6a:	2300      	movs	r3, #0
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	3718      	adds	r7, #24
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}
 8003a74:	40021000 	.word	0x40021000
 8003a78:	40022000 	.word	0x40022000

08003a7c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b086      	sub	sp, #24
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003a84:	2300      	movs	r3, #0
 8003a86:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003a88:	2300      	movs	r3, #0
 8003a8a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d041      	beq.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a9c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003aa0:	d02a      	beq.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003aa2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003aa6:	d824      	bhi.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003aa8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003aac:	d008      	beq.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003aae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003ab2:	d81e      	bhi.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d00a      	beq.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003ab8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003abc:	d010      	beq.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003abe:	e018      	b.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003ac0:	4b86      	ldr	r3, [pc, #536]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	4a85      	ldr	r2, [pc, #532]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ac6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003aca:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003acc:	e015      	b.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	3304      	adds	r3, #4
 8003ad2:	2100      	movs	r1, #0
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f000 fabb 	bl	8004050 <RCCEx_PLLSAI1_Config>
 8003ada:	4603      	mov	r3, r0
 8003adc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003ade:	e00c      	b.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	3320      	adds	r3, #32
 8003ae4:	2100      	movs	r1, #0
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f000 fba6 	bl	8004238 <RCCEx_PLLSAI2_Config>
 8003aec:	4603      	mov	r3, r0
 8003aee:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003af0:	e003      	b.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	74fb      	strb	r3, [r7, #19]
      break;
 8003af6:	e000      	b.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003af8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003afa:	7cfb      	ldrb	r3, [r7, #19]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d10b      	bne.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003b00:	4b76      	ldr	r3, [pc, #472]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b06:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b0e:	4973      	ldr	r1, [pc, #460]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b10:	4313      	orrs	r3, r2
 8003b12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003b16:	e001      	b.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b18:	7cfb      	ldrb	r3, [r7, #19]
 8003b1a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d041      	beq.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b2c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003b30:	d02a      	beq.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003b32:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003b36:	d824      	bhi.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003b38:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b3c:	d008      	beq.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003b3e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b42:	d81e      	bhi.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d00a      	beq.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003b48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b4c:	d010      	beq.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003b4e:	e018      	b.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003b50:	4b62      	ldr	r3, [pc, #392]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b52:	68db      	ldr	r3, [r3, #12]
 8003b54:	4a61      	ldr	r2, [pc, #388]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b5a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003b5c:	e015      	b.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	3304      	adds	r3, #4
 8003b62:	2100      	movs	r1, #0
 8003b64:	4618      	mov	r0, r3
 8003b66:	f000 fa73 	bl	8004050 <RCCEx_PLLSAI1_Config>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003b6e:	e00c      	b.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	3320      	adds	r3, #32
 8003b74:	2100      	movs	r1, #0
 8003b76:	4618      	mov	r0, r3
 8003b78:	f000 fb5e 	bl	8004238 <RCCEx_PLLSAI2_Config>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003b80:	e003      	b.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	74fb      	strb	r3, [r7, #19]
      break;
 8003b86:	e000      	b.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003b88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b8a:	7cfb      	ldrb	r3, [r7, #19]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d10b      	bne.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003b90:	4b52      	ldr	r3, [pc, #328]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b96:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b9e:	494f      	ldr	r1, [pc, #316]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003ba6:	e001      	b.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ba8:	7cfb      	ldrb	r3, [r7, #19]
 8003baa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	f000 80a0 	beq.w	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003bbe:	4b47      	ldr	r3, [pc, #284]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d101      	bne.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e000      	b.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003bce:	2300      	movs	r3, #0
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d00d      	beq.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bd4:	4b41      	ldr	r3, [pc, #260]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bd8:	4a40      	ldr	r2, [pc, #256]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bde:	6593      	str	r3, [r2, #88]	; 0x58
 8003be0:	4b3e      	ldr	r3, [pc, #248]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003be2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003be4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003be8:	60bb      	str	r3, [r7, #8]
 8003bea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bec:	2301      	movs	r3, #1
 8003bee:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003bf0:	4b3b      	ldr	r3, [pc, #236]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a3a      	ldr	r2, [pc, #232]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003bf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bfa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003bfc:	f7fd ff3e 	bl	8001a7c <HAL_GetTick>
 8003c00:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003c02:	e009      	b.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c04:	f7fd ff3a 	bl	8001a7c <HAL_GetTick>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	2b02      	cmp	r3, #2
 8003c10:	d902      	bls.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003c12:	2303      	movs	r3, #3
 8003c14:	74fb      	strb	r3, [r7, #19]
        break;
 8003c16:	e005      	b.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003c18:	4b31      	ldr	r3, [pc, #196]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d0ef      	beq.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003c24:	7cfb      	ldrb	r3, [r7, #19]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d15c      	bne.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003c2a:	4b2c      	ldr	r3, [pc, #176]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c34:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d01f      	beq.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c42:	697a      	ldr	r2, [r7, #20]
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d019      	beq.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003c48:	4b24      	ldr	r3, [pc, #144]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c52:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003c54:	4b21      	ldr	r3, [pc, #132]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c5a:	4a20      	ldr	r2, [pc, #128]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003c64:	4b1d      	ldr	r3, [pc, #116]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c6a:	4a1c      	ldr	r2, [pc, #112]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003c74:	4a19      	ldr	r2, [pc, #100]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	f003 0301 	and.w	r3, r3, #1
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d016      	beq.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c86:	f7fd fef9 	bl	8001a7c <HAL_GetTick>
 8003c8a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c8c:	e00b      	b.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c8e:	f7fd fef5 	bl	8001a7c <HAL_GetTick>
 8003c92:	4602      	mov	r2, r0
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	1ad3      	subs	r3, r2, r3
 8003c98:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d902      	bls.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003ca0:	2303      	movs	r3, #3
 8003ca2:	74fb      	strb	r3, [r7, #19]
            break;
 8003ca4:	e006      	b.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ca6:	4b0d      	ldr	r3, [pc, #52]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ca8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cac:	f003 0302 	and.w	r3, r3, #2
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d0ec      	beq.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003cb4:	7cfb      	ldrb	r3, [r7, #19]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d10c      	bne.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003cba:	4b08      	ldr	r3, [pc, #32]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cc0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cca:	4904      	ldr	r1, [pc, #16]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003cd2:	e009      	b.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003cd4:	7cfb      	ldrb	r3, [r7, #19]
 8003cd6:	74bb      	strb	r3, [r7, #18]
 8003cd8:	e006      	b.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003cda:	bf00      	nop
 8003cdc:	40021000 	.word	0x40021000
 8003ce0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ce4:	7cfb      	ldrb	r3, [r7, #19]
 8003ce6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ce8:	7c7b      	ldrb	r3, [r7, #17]
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d105      	bne.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cee:	4b9e      	ldr	r3, [pc, #632]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cf2:	4a9d      	ldr	r2, [pc, #628]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cf4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cf8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 0301 	and.w	r3, r3, #1
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d00a      	beq.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d06:	4b98      	ldr	r3, [pc, #608]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d0c:	f023 0203 	bic.w	r2, r3, #3
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d14:	4994      	ldr	r1, [pc, #592]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d16:	4313      	orrs	r3, r2
 8003d18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 0302 	and.w	r3, r3, #2
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d00a      	beq.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003d28:	4b8f      	ldr	r3, [pc, #572]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d2e:	f023 020c 	bic.w	r2, r3, #12
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d36:	498c      	ldr	r1, [pc, #560]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 0304 	and.w	r3, r3, #4
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d00a      	beq.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003d4a:	4b87      	ldr	r3, [pc, #540]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d50:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d58:	4983      	ldr	r1, [pc, #524]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 0308 	and.w	r3, r3, #8
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d00a      	beq.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003d6c:	4b7e      	ldr	r3, [pc, #504]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d72:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d7a:	497b      	ldr	r1, [pc, #492]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 0310 	and.w	r3, r3, #16
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d00a      	beq.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003d8e:	4b76      	ldr	r3, [pc, #472]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d94:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d9c:	4972      	ldr	r1, [pc, #456]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f003 0320 	and.w	r3, r3, #32
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d00a      	beq.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003db0:	4b6d      	ldr	r3, [pc, #436]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003db6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dbe:	496a      	ldr	r1, [pc, #424]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d00a      	beq.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003dd2:	4b65      	ldr	r3, [pc, #404]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dd8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003de0:	4961      	ldr	r1, [pc, #388]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003de2:	4313      	orrs	r3, r2
 8003de4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d00a      	beq.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003df4:	4b5c      	ldr	r3, [pc, #368]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dfa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e02:	4959      	ldr	r1, [pc, #356]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e04:	4313      	orrs	r3, r2
 8003e06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d00a      	beq.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e16:	4b54      	ldr	r3, [pc, #336]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e1c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e24:	4950      	ldr	r1, [pc, #320]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e26:	4313      	orrs	r3, r2
 8003e28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d00a      	beq.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003e38:	4b4b      	ldr	r3, [pc, #300]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e3e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e46:	4948      	ldr	r1, [pc, #288]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d00a      	beq.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003e5a:	4b43      	ldr	r3, [pc, #268]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e60:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e68:	493f      	ldr	r1, [pc, #252]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d028      	beq.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e7c:	4b3a      	ldr	r3, [pc, #232]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e82:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e8a:	4937      	ldr	r1, [pc, #220]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e96:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e9a:	d106      	bne.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e9c:	4b32      	ldr	r3, [pc, #200]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e9e:	68db      	ldr	r3, [r3, #12]
 8003ea0:	4a31      	ldr	r2, [pc, #196]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ea2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ea6:	60d3      	str	r3, [r2, #12]
 8003ea8:	e011      	b.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003eae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003eb2:	d10c      	bne.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	3304      	adds	r3, #4
 8003eb8:	2101      	movs	r1, #1
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f000 f8c8 	bl	8004050 <RCCEx_PLLSAI1_Config>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003ec4:	7cfb      	ldrb	r3, [r7, #19]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d001      	beq.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003eca:	7cfb      	ldrb	r3, [r7, #19]
 8003ecc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d028      	beq.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003eda:	4b23      	ldr	r3, [pc, #140]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003edc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ee0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ee8:	491f      	ldr	r1, [pc, #124]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eea:	4313      	orrs	r3, r2
 8003eec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ef4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ef8:	d106      	bne.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003efa:	4b1b      	ldr	r3, [pc, #108]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003efc:	68db      	ldr	r3, [r3, #12]
 8003efe:	4a1a      	ldr	r2, [pc, #104]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f00:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f04:	60d3      	str	r3, [r2, #12]
 8003f06:	e011      	b.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f0c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003f10:	d10c      	bne.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	3304      	adds	r3, #4
 8003f16:	2101      	movs	r1, #1
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f000 f899 	bl	8004050 <RCCEx_PLLSAI1_Config>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003f22:	7cfb      	ldrb	r3, [r7, #19]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d001      	beq.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003f28:	7cfb      	ldrb	r3, [r7, #19]
 8003f2a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d02b      	beq.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003f38:	4b0b      	ldr	r3, [pc, #44]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f3e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f46:	4908      	ldr	r1, [pc, #32]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f52:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f56:	d109      	bne.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f58:	4b03      	ldr	r3, [pc, #12]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f5a:	68db      	ldr	r3, [r3, #12]
 8003f5c:	4a02      	ldr	r2, [pc, #8]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f62:	60d3      	str	r3, [r2, #12]
 8003f64:	e014      	b.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003f66:	bf00      	nop
 8003f68:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f70:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003f74:	d10c      	bne.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	3304      	adds	r3, #4
 8003f7a:	2101      	movs	r1, #1
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f000 f867 	bl	8004050 <RCCEx_PLLSAI1_Config>
 8003f82:	4603      	mov	r3, r0
 8003f84:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003f86:	7cfb      	ldrb	r3, [r7, #19]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d001      	beq.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003f8c:	7cfb      	ldrb	r3, [r7, #19]
 8003f8e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d02f      	beq.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003f9c:	4b2b      	ldr	r3, [pc, #172]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fa2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003faa:	4928      	ldr	r1, [pc, #160]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003fac:	4313      	orrs	r3, r2
 8003fae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fb6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003fba:	d10d      	bne.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	3304      	adds	r3, #4
 8003fc0:	2102      	movs	r1, #2
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f000 f844 	bl	8004050 <RCCEx_PLLSAI1_Config>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003fcc:	7cfb      	ldrb	r3, [r7, #19]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d014      	beq.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003fd2:	7cfb      	ldrb	r3, [r7, #19]
 8003fd4:	74bb      	strb	r3, [r7, #18]
 8003fd6:	e011      	b.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fdc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003fe0:	d10c      	bne.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	3320      	adds	r3, #32
 8003fe6:	2102      	movs	r1, #2
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f000 f925 	bl	8004238 <RCCEx_PLLSAI2_Config>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ff2:	7cfb      	ldrb	r3, [r7, #19]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d001      	beq.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003ff8:	7cfb      	ldrb	r3, [r7, #19]
 8003ffa:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004004:	2b00      	cmp	r3, #0
 8004006:	d00a      	beq.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004008:	4b10      	ldr	r3, [pc, #64]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800400a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800400e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004016:	490d      	ldr	r1, [pc, #52]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004018:	4313      	orrs	r3, r2
 800401a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004026:	2b00      	cmp	r3, #0
 8004028:	d00b      	beq.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800402a:	4b08      	ldr	r3, [pc, #32]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800402c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004030:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800403a:	4904      	ldr	r1, [pc, #16]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800403c:	4313      	orrs	r3, r2
 800403e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004042:	7cbb      	ldrb	r3, [r7, #18]
}
 8004044:	4618      	mov	r0, r3
 8004046:	3718      	adds	r7, #24
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}
 800404c:	40021000 	.word	0x40021000

08004050 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b084      	sub	sp, #16
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
 8004058:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800405a:	2300      	movs	r3, #0
 800405c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800405e:	4b75      	ldr	r3, [pc, #468]	; (8004234 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004060:	68db      	ldr	r3, [r3, #12]
 8004062:	f003 0303 	and.w	r3, r3, #3
 8004066:	2b00      	cmp	r3, #0
 8004068:	d018      	beq.n	800409c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800406a:	4b72      	ldr	r3, [pc, #456]	; (8004234 <RCCEx_PLLSAI1_Config+0x1e4>)
 800406c:	68db      	ldr	r3, [r3, #12]
 800406e:	f003 0203 	and.w	r2, r3, #3
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	429a      	cmp	r2, r3
 8004078:	d10d      	bne.n	8004096 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
       ||
 800407e:	2b00      	cmp	r3, #0
 8004080:	d009      	beq.n	8004096 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004082:	4b6c      	ldr	r3, [pc, #432]	; (8004234 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004084:	68db      	ldr	r3, [r3, #12]
 8004086:	091b      	lsrs	r3, r3, #4
 8004088:	f003 0307 	and.w	r3, r3, #7
 800408c:	1c5a      	adds	r2, r3, #1
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	685b      	ldr	r3, [r3, #4]
       ||
 8004092:	429a      	cmp	r2, r3
 8004094:	d047      	beq.n	8004126 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	73fb      	strb	r3, [r7, #15]
 800409a:	e044      	b.n	8004126 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	2b03      	cmp	r3, #3
 80040a2:	d018      	beq.n	80040d6 <RCCEx_PLLSAI1_Config+0x86>
 80040a4:	2b03      	cmp	r3, #3
 80040a6:	d825      	bhi.n	80040f4 <RCCEx_PLLSAI1_Config+0xa4>
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d002      	beq.n	80040b2 <RCCEx_PLLSAI1_Config+0x62>
 80040ac:	2b02      	cmp	r3, #2
 80040ae:	d009      	beq.n	80040c4 <RCCEx_PLLSAI1_Config+0x74>
 80040b0:	e020      	b.n	80040f4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80040b2:	4b60      	ldr	r3, [pc, #384]	; (8004234 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 0302 	and.w	r3, r3, #2
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d11d      	bne.n	80040fa <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040c2:	e01a      	b.n	80040fa <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80040c4:	4b5b      	ldr	r3, [pc, #364]	; (8004234 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d116      	bne.n	80040fe <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040d4:	e013      	b.n	80040fe <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80040d6:	4b57      	ldr	r3, [pc, #348]	; (8004234 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d10f      	bne.n	8004102 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80040e2:	4b54      	ldr	r3, [pc, #336]	; (8004234 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d109      	bne.n	8004102 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80040f2:	e006      	b.n	8004102 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	73fb      	strb	r3, [r7, #15]
      break;
 80040f8:	e004      	b.n	8004104 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80040fa:	bf00      	nop
 80040fc:	e002      	b.n	8004104 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80040fe:	bf00      	nop
 8004100:	e000      	b.n	8004104 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004102:	bf00      	nop
    }

    if(status == HAL_OK)
 8004104:	7bfb      	ldrb	r3, [r7, #15]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d10d      	bne.n	8004126 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800410a:	4b4a      	ldr	r3, [pc, #296]	; (8004234 <RCCEx_PLLSAI1_Config+0x1e4>)
 800410c:	68db      	ldr	r3, [r3, #12]
 800410e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6819      	ldr	r1, [r3, #0]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	3b01      	subs	r3, #1
 800411c:	011b      	lsls	r3, r3, #4
 800411e:	430b      	orrs	r3, r1
 8004120:	4944      	ldr	r1, [pc, #272]	; (8004234 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004122:	4313      	orrs	r3, r2
 8004124:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004126:	7bfb      	ldrb	r3, [r7, #15]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d17d      	bne.n	8004228 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800412c:	4b41      	ldr	r3, [pc, #260]	; (8004234 <RCCEx_PLLSAI1_Config+0x1e4>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a40      	ldr	r2, [pc, #256]	; (8004234 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004132:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004136:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004138:	f7fd fca0 	bl	8001a7c <HAL_GetTick>
 800413c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800413e:	e009      	b.n	8004154 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004140:	f7fd fc9c 	bl	8001a7c <HAL_GetTick>
 8004144:	4602      	mov	r2, r0
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	2b02      	cmp	r3, #2
 800414c:	d902      	bls.n	8004154 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800414e:	2303      	movs	r3, #3
 8004150:	73fb      	strb	r3, [r7, #15]
        break;
 8004152:	e005      	b.n	8004160 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004154:	4b37      	ldr	r3, [pc, #220]	; (8004234 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800415c:	2b00      	cmp	r3, #0
 800415e:	d1ef      	bne.n	8004140 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004160:	7bfb      	ldrb	r3, [r7, #15]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d160      	bne.n	8004228 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d111      	bne.n	8004190 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800416c:	4b31      	ldr	r3, [pc, #196]	; (8004234 <RCCEx_PLLSAI1_Config+0x1e4>)
 800416e:	691b      	ldr	r3, [r3, #16]
 8004170:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004174:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004178:	687a      	ldr	r2, [r7, #4]
 800417a:	6892      	ldr	r2, [r2, #8]
 800417c:	0211      	lsls	r1, r2, #8
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	68d2      	ldr	r2, [r2, #12]
 8004182:	0912      	lsrs	r2, r2, #4
 8004184:	0452      	lsls	r2, r2, #17
 8004186:	430a      	orrs	r2, r1
 8004188:	492a      	ldr	r1, [pc, #168]	; (8004234 <RCCEx_PLLSAI1_Config+0x1e4>)
 800418a:	4313      	orrs	r3, r2
 800418c:	610b      	str	r3, [r1, #16]
 800418e:	e027      	b.n	80041e0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	2b01      	cmp	r3, #1
 8004194:	d112      	bne.n	80041bc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004196:	4b27      	ldr	r3, [pc, #156]	; (8004234 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004198:	691b      	ldr	r3, [r3, #16]
 800419a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800419e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80041a2:	687a      	ldr	r2, [r7, #4]
 80041a4:	6892      	ldr	r2, [r2, #8]
 80041a6:	0211      	lsls	r1, r2, #8
 80041a8:	687a      	ldr	r2, [r7, #4]
 80041aa:	6912      	ldr	r2, [r2, #16]
 80041ac:	0852      	lsrs	r2, r2, #1
 80041ae:	3a01      	subs	r2, #1
 80041b0:	0552      	lsls	r2, r2, #21
 80041b2:	430a      	orrs	r2, r1
 80041b4:	491f      	ldr	r1, [pc, #124]	; (8004234 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041b6:	4313      	orrs	r3, r2
 80041b8:	610b      	str	r3, [r1, #16]
 80041ba:	e011      	b.n	80041e0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80041bc:	4b1d      	ldr	r3, [pc, #116]	; (8004234 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041be:	691b      	ldr	r3, [r3, #16]
 80041c0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80041c4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80041c8:	687a      	ldr	r2, [r7, #4]
 80041ca:	6892      	ldr	r2, [r2, #8]
 80041cc:	0211      	lsls	r1, r2, #8
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	6952      	ldr	r2, [r2, #20]
 80041d2:	0852      	lsrs	r2, r2, #1
 80041d4:	3a01      	subs	r2, #1
 80041d6:	0652      	lsls	r2, r2, #25
 80041d8:	430a      	orrs	r2, r1
 80041da:	4916      	ldr	r1, [pc, #88]	; (8004234 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041dc:	4313      	orrs	r3, r2
 80041de:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80041e0:	4b14      	ldr	r3, [pc, #80]	; (8004234 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a13      	ldr	r2, [pc, #76]	; (8004234 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041e6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80041ea:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041ec:	f7fd fc46 	bl	8001a7c <HAL_GetTick>
 80041f0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80041f2:	e009      	b.n	8004208 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80041f4:	f7fd fc42 	bl	8001a7c <HAL_GetTick>
 80041f8:	4602      	mov	r2, r0
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	1ad3      	subs	r3, r2, r3
 80041fe:	2b02      	cmp	r3, #2
 8004200:	d902      	bls.n	8004208 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004202:	2303      	movs	r3, #3
 8004204:	73fb      	strb	r3, [r7, #15]
          break;
 8004206:	e005      	b.n	8004214 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004208:	4b0a      	ldr	r3, [pc, #40]	; (8004234 <RCCEx_PLLSAI1_Config+0x1e4>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004210:	2b00      	cmp	r3, #0
 8004212:	d0ef      	beq.n	80041f4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004214:	7bfb      	ldrb	r3, [r7, #15]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d106      	bne.n	8004228 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800421a:	4b06      	ldr	r3, [pc, #24]	; (8004234 <RCCEx_PLLSAI1_Config+0x1e4>)
 800421c:	691a      	ldr	r2, [r3, #16]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	699b      	ldr	r3, [r3, #24]
 8004222:	4904      	ldr	r1, [pc, #16]	; (8004234 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004224:	4313      	orrs	r3, r2
 8004226:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004228:	7bfb      	ldrb	r3, [r7, #15]
}
 800422a:	4618      	mov	r0, r3
 800422c:	3710      	adds	r7, #16
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}
 8004232:	bf00      	nop
 8004234:	40021000 	.word	0x40021000

08004238 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b084      	sub	sp, #16
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004242:	2300      	movs	r3, #0
 8004244:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004246:	4b6a      	ldr	r3, [pc, #424]	; (80043f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004248:	68db      	ldr	r3, [r3, #12]
 800424a:	f003 0303 	and.w	r3, r3, #3
 800424e:	2b00      	cmp	r3, #0
 8004250:	d018      	beq.n	8004284 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004252:	4b67      	ldr	r3, [pc, #412]	; (80043f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004254:	68db      	ldr	r3, [r3, #12]
 8004256:	f003 0203 	and.w	r2, r3, #3
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	429a      	cmp	r2, r3
 8004260:	d10d      	bne.n	800427e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
       ||
 8004266:	2b00      	cmp	r3, #0
 8004268:	d009      	beq.n	800427e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800426a:	4b61      	ldr	r3, [pc, #388]	; (80043f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800426c:	68db      	ldr	r3, [r3, #12]
 800426e:	091b      	lsrs	r3, r3, #4
 8004270:	f003 0307 	and.w	r3, r3, #7
 8004274:	1c5a      	adds	r2, r3, #1
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	685b      	ldr	r3, [r3, #4]
       ||
 800427a:	429a      	cmp	r2, r3
 800427c:	d047      	beq.n	800430e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	73fb      	strb	r3, [r7, #15]
 8004282:	e044      	b.n	800430e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	2b03      	cmp	r3, #3
 800428a:	d018      	beq.n	80042be <RCCEx_PLLSAI2_Config+0x86>
 800428c:	2b03      	cmp	r3, #3
 800428e:	d825      	bhi.n	80042dc <RCCEx_PLLSAI2_Config+0xa4>
 8004290:	2b01      	cmp	r3, #1
 8004292:	d002      	beq.n	800429a <RCCEx_PLLSAI2_Config+0x62>
 8004294:	2b02      	cmp	r3, #2
 8004296:	d009      	beq.n	80042ac <RCCEx_PLLSAI2_Config+0x74>
 8004298:	e020      	b.n	80042dc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800429a:	4b55      	ldr	r3, [pc, #340]	; (80043f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 0302 	and.w	r3, r3, #2
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d11d      	bne.n	80042e2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042aa:	e01a      	b.n	80042e2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80042ac:	4b50      	ldr	r3, [pc, #320]	; (80043f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d116      	bne.n	80042e6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80042b8:	2301      	movs	r3, #1
 80042ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042bc:	e013      	b.n	80042e6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80042be:	4b4c      	ldr	r3, [pc, #304]	; (80043f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d10f      	bne.n	80042ea <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80042ca:	4b49      	ldr	r3, [pc, #292]	; (80043f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d109      	bne.n	80042ea <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80042da:	e006      	b.n	80042ea <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	73fb      	strb	r3, [r7, #15]
      break;
 80042e0:	e004      	b.n	80042ec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80042e2:	bf00      	nop
 80042e4:	e002      	b.n	80042ec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80042e6:	bf00      	nop
 80042e8:	e000      	b.n	80042ec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80042ea:	bf00      	nop
    }

    if(status == HAL_OK)
 80042ec:	7bfb      	ldrb	r3, [r7, #15]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d10d      	bne.n	800430e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80042f2:	4b3f      	ldr	r3, [pc, #252]	; (80043f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042f4:	68db      	ldr	r3, [r3, #12]
 80042f6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6819      	ldr	r1, [r3, #0]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	3b01      	subs	r3, #1
 8004304:	011b      	lsls	r3, r3, #4
 8004306:	430b      	orrs	r3, r1
 8004308:	4939      	ldr	r1, [pc, #228]	; (80043f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800430a:	4313      	orrs	r3, r2
 800430c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800430e:	7bfb      	ldrb	r3, [r7, #15]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d167      	bne.n	80043e4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004314:	4b36      	ldr	r3, [pc, #216]	; (80043f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a35      	ldr	r2, [pc, #212]	; (80043f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800431a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800431e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004320:	f7fd fbac 	bl	8001a7c <HAL_GetTick>
 8004324:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004326:	e009      	b.n	800433c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004328:	f7fd fba8 	bl	8001a7c <HAL_GetTick>
 800432c:	4602      	mov	r2, r0
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	1ad3      	subs	r3, r2, r3
 8004332:	2b02      	cmp	r3, #2
 8004334:	d902      	bls.n	800433c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004336:	2303      	movs	r3, #3
 8004338:	73fb      	strb	r3, [r7, #15]
        break;
 800433a:	e005      	b.n	8004348 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800433c:	4b2c      	ldr	r3, [pc, #176]	; (80043f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004344:	2b00      	cmp	r3, #0
 8004346:	d1ef      	bne.n	8004328 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004348:	7bfb      	ldrb	r3, [r7, #15]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d14a      	bne.n	80043e4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d111      	bne.n	8004378 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004354:	4b26      	ldr	r3, [pc, #152]	; (80043f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004356:	695b      	ldr	r3, [r3, #20]
 8004358:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800435c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004360:	687a      	ldr	r2, [r7, #4]
 8004362:	6892      	ldr	r2, [r2, #8]
 8004364:	0211      	lsls	r1, r2, #8
 8004366:	687a      	ldr	r2, [r7, #4]
 8004368:	68d2      	ldr	r2, [r2, #12]
 800436a:	0912      	lsrs	r2, r2, #4
 800436c:	0452      	lsls	r2, r2, #17
 800436e:	430a      	orrs	r2, r1
 8004370:	491f      	ldr	r1, [pc, #124]	; (80043f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004372:	4313      	orrs	r3, r2
 8004374:	614b      	str	r3, [r1, #20]
 8004376:	e011      	b.n	800439c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004378:	4b1d      	ldr	r3, [pc, #116]	; (80043f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800437a:	695b      	ldr	r3, [r3, #20]
 800437c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004380:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004384:	687a      	ldr	r2, [r7, #4]
 8004386:	6892      	ldr	r2, [r2, #8]
 8004388:	0211      	lsls	r1, r2, #8
 800438a:	687a      	ldr	r2, [r7, #4]
 800438c:	6912      	ldr	r2, [r2, #16]
 800438e:	0852      	lsrs	r2, r2, #1
 8004390:	3a01      	subs	r2, #1
 8004392:	0652      	lsls	r2, r2, #25
 8004394:	430a      	orrs	r2, r1
 8004396:	4916      	ldr	r1, [pc, #88]	; (80043f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004398:	4313      	orrs	r3, r2
 800439a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800439c:	4b14      	ldr	r3, [pc, #80]	; (80043f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a13      	ldr	r2, [pc, #76]	; (80043f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043a6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043a8:	f7fd fb68 	bl	8001a7c <HAL_GetTick>
 80043ac:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80043ae:	e009      	b.n	80043c4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80043b0:	f7fd fb64 	bl	8001a7c <HAL_GetTick>
 80043b4:	4602      	mov	r2, r0
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	1ad3      	subs	r3, r2, r3
 80043ba:	2b02      	cmp	r3, #2
 80043bc:	d902      	bls.n	80043c4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80043be:	2303      	movs	r3, #3
 80043c0:	73fb      	strb	r3, [r7, #15]
          break;
 80043c2:	e005      	b.n	80043d0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80043c4:	4b0a      	ldr	r3, [pc, #40]	; (80043f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d0ef      	beq.n	80043b0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80043d0:	7bfb      	ldrb	r3, [r7, #15]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d106      	bne.n	80043e4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80043d6:	4b06      	ldr	r3, [pc, #24]	; (80043f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043d8:	695a      	ldr	r2, [r3, #20]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	695b      	ldr	r3, [r3, #20]
 80043de:	4904      	ldr	r1, [pc, #16]	; (80043f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043e0:	4313      	orrs	r3, r2
 80043e2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80043e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3710      	adds	r7, #16
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}
 80043ee:	bf00      	nop
 80043f0:	40021000 	.word	0x40021000

080043f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b082      	sub	sp, #8
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d101      	bne.n	8004406 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	e040      	b.n	8004488 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800440a:	2b00      	cmp	r3, #0
 800440c:	d106      	bne.n	800441c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f7fd f926 	bl	8001668 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2224      	movs	r2, #36	; 0x24
 8004420:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f022 0201 	bic.w	r2, r2, #1
 8004430:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004436:	2b00      	cmp	r3, #0
 8004438:	d002      	beq.n	8004440 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f000 fe74 	bl	8005128 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004440:	6878      	ldr	r0, [r7, #4]
 8004442:	f000 fbb9 	bl	8004bb8 <UART_SetConfig>
 8004446:	4603      	mov	r3, r0
 8004448:	2b01      	cmp	r3, #1
 800444a:	d101      	bne.n	8004450 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	e01b      	b.n	8004488 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	685a      	ldr	r2, [r3, #4]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800445e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	689a      	ldr	r2, [r3, #8]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800446e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f042 0201 	orr.w	r2, r2, #1
 800447e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	f000 fef3 	bl	800526c <UART_CheckIdleState>
 8004486:	4603      	mov	r3, r0
}
 8004488:	4618      	mov	r0, r3
 800448a:	3708      	adds	r7, #8
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}

08004490 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b08a      	sub	sp, #40	; 0x28
 8004494:	af02      	add	r7, sp, #8
 8004496:	60f8      	str	r0, [r7, #12]
 8004498:	60b9      	str	r1, [r7, #8]
 800449a:	603b      	str	r3, [r7, #0]
 800449c:	4613      	mov	r3, r2
 800449e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044a4:	2b20      	cmp	r3, #32
 80044a6:	d178      	bne.n	800459a <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d002      	beq.n	80044b4 <HAL_UART_Transmit+0x24>
 80044ae:	88fb      	ldrh	r3, [r7, #6]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d101      	bne.n	80044b8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	e071      	b.n	800459c <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2200      	movs	r2, #0
 80044bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2221      	movs	r2, #33	; 0x21
 80044c4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80044c6:	f7fd fad9 	bl	8001a7c <HAL_GetTick>
 80044ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	88fa      	ldrh	r2, [r7, #6]
 80044d0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	88fa      	ldrh	r2, [r7, #6]
 80044d8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044e4:	d108      	bne.n	80044f8 <HAL_UART_Transmit+0x68>
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	691b      	ldr	r3, [r3, #16]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d104      	bne.n	80044f8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80044ee:	2300      	movs	r3, #0
 80044f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	61bb      	str	r3, [r7, #24]
 80044f6:	e003      	b.n	8004500 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80044fc:	2300      	movs	r3, #0
 80044fe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004500:	e030      	b.n	8004564 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	9300      	str	r3, [sp, #0]
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	2200      	movs	r2, #0
 800450a:	2180      	movs	r1, #128	; 0x80
 800450c:	68f8      	ldr	r0, [r7, #12]
 800450e:	f000 ff55 	bl	80053bc <UART_WaitOnFlagUntilTimeout>
 8004512:	4603      	mov	r3, r0
 8004514:	2b00      	cmp	r3, #0
 8004516:	d004      	beq.n	8004522 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2220      	movs	r2, #32
 800451c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800451e:	2303      	movs	r3, #3
 8004520:	e03c      	b.n	800459c <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8004522:	69fb      	ldr	r3, [r7, #28]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d10b      	bne.n	8004540 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004528:	69bb      	ldr	r3, [r7, #24]
 800452a:	881a      	ldrh	r2, [r3, #0]
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004534:	b292      	uxth	r2, r2
 8004536:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004538:	69bb      	ldr	r3, [r7, #24]
 800453a:	3302      	adds	r3, #2
 800453c:	61bb      	str	r3, [r7, #24]
 800453e:	e008      	b.n	8004552 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004540:	69fb      	ldr	r3, [r7, #28]
 8004542:	781a      	ldrb	r2, [r3, #0]
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	b292      	uxth	r2, r2
 800454a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800454c:	69fb      	ldr	r3, [r7, #28]
 800454e:	3301      	adds	r3, #1
 8004550:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004558:	b29b      	uxth	r3, r3
 800455a:	3b01      	subs	r3, #1
 800455c:	b29a      	uxth	r2, r3
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800456a:	b29b      	uxth	r3, r3
 800456c:	2b00      	cmp	r3, #0
 800456e:	d1c8      	bne.n	8004502 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	9300      	str	r3, [sp, #0]
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	2200      	movs	r2, #0
 8004578:	2140      	movs	r1, #64	; 0x40
 800457a:	68f8      	ldr	r0, [r7, #12]
 800457c:	f000 ff1e 	bl	80053bc <UART_WaitOnFlagUntilTimeout>
 8004580:	4603      	mov	r3, r0
 8004582:	2b00      	cmp	r3, #0
 8004584:	d004      	beq.n	8004590 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2220      	movs	r2, #32
 800458a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800458c:	2303      	movs	r3, #3
 800458e:	e005      	b.n	800459c <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2220      	movs	r2, #32
 8004594:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004596:	2300      	movs	r3, #0
 8004598:	e000      	b.n	800459c <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800459a:	2302      	movs	r3, #2
  }
}
 800459c:	4618      	mov	r0, r3
 800459e:	3720      	adds	r7, #32
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}

080045a4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b0ba      	sub	sp, #232	; 0xe8
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	69db      	ldr	r3, [r3, #28]
 80045b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80045ca:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80045ce:	f640 030f 	movw	r3, #2063	; 0x80f
 80045d2:	4013      	ands	r3, r2
 80045d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80045d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d115      	bne.n	800460c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80045e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045e4:	f003 0320 	and.w	r3, r3, #32
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d00f      	beq.n	800460c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80045ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045f0:	f003 0320 	and.w	r3, r3, #32
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d009      	beq.n	800460c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	f000 82ae 	beq.w	8004b5e <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	4798      	blx	r3
      }
      return;
 800460a:	e2a8      	b.n	8004b5e <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800460c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004610:	2b00      	cmp	r3, #0
 8004612:	f000 8117 	beq.w	8004844 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004616:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800461a:	f003 0301 	and.w	r3, r3, #1
 800461e:	2b00      	cmp	r3, #0
 8004620:	d106      	bne.n	8004630 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004622:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004626:	4b85      	ldr	r3, [pc, #532]	; (800483c <HAL_UART_IRQHandler+0x298>)
 8004628:	4013      	ands	r3, r2
 800462a:	2b00      	cmp	r3, #0
 800462c:	f000 810a 	beq.w	8004844 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004630:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004634:	f003 0301 	and.w	r3, r3, #1
 8004638:	2b00      	cmp	r3, #0
 800463a:	d011      	beq.n	8004660 <HAL_UART_IRQHandler+0xbc>
 800463c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004640:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004644:	2b00      	cmp	r3, #0
 8004646:	d00b      	beq.n	8004660 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	2201      	movs	r2, #1
 800464e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004656:	f043 0201 	orr.w	r2, r3, #1
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004660:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004664:	f003 0302 	and.w	r3, r3, #2
 8004668:	2b00      	cmp	r3, #0
 800466a:	d011      	beq.n	8004690 <HAL_UART_IRQHandler+0xec>
 800466c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004670:	f003 0301 	and.w	r3, r3, #1
 8004674:	2b00      	cmp	r3, #0
 8004676:	d00b      	beq.n	8004690 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	2202      	movs	r2, #2
 800467e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004686:	f043 0204 	orr.w	r2, r3, #4
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004690:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004694:	f003 0304 	and.w	r3, r3, #4
 8004698:	2b00      	cmp	r3, #0
 800469a:	d011      	beq.n	80046c0 <HAL_UART_IRQHandler+0x11c>
 800469c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046a0:	f003 0301 	and.w	r3, r3, #1
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d00b      	beq.n	80046c0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	2204      	movs	r2, #4
 80046ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046b6:	f043 0202 	orr.w	r2, r3, #2
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80046c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046c4:	f003 0308 	and.w	r3, r3, #8
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d017      	beq.n	80046fc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80046cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046d0:	f003 0320 	and.w	r3, r3, #32
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d105      	bne.n	80046e4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80046d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046dc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d00b      	beq.n	80046fc <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	2208      	movs	r2, #8
 80046ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046f2:	f043 0208 	orr.w	r2, r3, #8
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80046fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004700:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004704:	2b00      	cmp	r3, #0
 8004706:	d012      	beq.n	800472e <HAL_UART_IRQHandler+0x18a>
 8004708:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800470c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004710:	2b00      	cmp	r3, #0
 8004712:	d00c      	beq.n	800472e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800471c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004724:	f043 0220 	orr.w	r2, r3, #32
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004734:	2b00      	cmp	r3, #0
 8004736:	f000 8214 	beq.w	8004b62 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800473a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800473e:	f003 0320 	and.w	r3, r3, #32
 8004742:	2b00      	cmp	r3, #0
 8004744:	d00d      	beq.n	8004762 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004746:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800474a:	f003 0320 	and.w	r3, r3, #32
 800474e:	2b00      	cmp	r3, #0
 8004750:	d007      	beq.n	8004762 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004756:	2b00      	cmp	r3, #0
 8004758:	d003      	beq.n	8004762 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004768:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004776:	2b40      	cmp	r3, #64	; 0x40
 8004778:	d005      	beq.n	8004786 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800477a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800477e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004782:	2b00      	cmp	r3, #0
 8004784:	d04f      	beq.n	8004826 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f000 fe7f 	bl	800548a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004796:	2b40      	cmp	r3, #64	; 0x40
 8004798:	d141      	bne.n	800481e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	3308      	adds	r3, #8
 80047a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80047a8:	e853 3f00 	ldrex	r3, [r3]
 80047ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80047b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80047b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	3308      	adds	r3, #8
 80047c2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80047c6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80047ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80047d2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80047d6:	e841 2300 	strex	r3, r2, [r1]
 80047da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80047de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d1d9      	bne.n	800479a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d013      	beq.n	8004816 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047f2:	4a13      	ldr	r2, [pc, #76]	; (8004840 <HAL_UART_IRQHandler+0x29c>)
 80047f4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047fa:	4618      	mov	r0, r3
 80047fc:	f7fd fabd 	bl	8001d7a <HAL_DMA_Abort_IT>
 8004800:	4603      	mov	r3, r0
 8004802:	2b00      	cmp	r3, #0
 8004804:	d017      	beq.n	8004836 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800480a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800480c:	687a      	ldr	r2, [r7, #4]
 800480e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004810:	4610      	mov	r0, r2
 8004812:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004814:	e00f      	b.n	8004836 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f000 f9b8 	bl	8004b8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800481c:	e00b      	b.n	8004836 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f000 f9b4 	bl	8004b8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004824:	e007      	b.n	8004836 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f000 f9b0 	bl	8004b8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2200      	movs	r2, #0
 8004830:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8004834:	e195      	b.n	8004b62 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004836:	bf00      	nop
    return;
 8004838:	e193      	b.n	8004b62 <HAL_UART_IRQHandler+0x5be>
 800483a:	bf00      	nop
 800483c:	04000120 	.word	0x04000120
 8004840:	08005553 	.word	0x08005553

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004848:	2b01      	cmp	r3, #1
 800484a:	f040 814e 	bne.w	8004aea <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800484e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004852:	f003 0310 	and.w	r3, r3, #16
 8004856:	2b00      	cmp	r3, #0
 8004858:	f000 8147 	beq.w	8004aea <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800485c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004860:	f003 0310 	and.w	r3, r3, #16
 8004864:	2b00      	cmp	r3, #0
 8004866:	f000 8140 	beq.w	8004aea <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	2210      	movs	r2, #16
 8004870:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800487c:	2b40      	cmp	r3, #64	; 0x40
 800487e:	f040 80b8 	bne.w	80049f2 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800488e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004892:	2b00      	cmp	r3, #0
 8004894:	f000 8167 	beq.w	8004b66 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800489e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80048a2:	429a      	cmp	r2, r3
 80048a4:	f080 815f 	bcs.w	8004b66 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80048ae:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f003 0320 	and.w	r3, r3, #32
 80048be:	2b00      	cmp	r3, #0
 80048c0:	f040 8086 	bne.w	80049d0 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80048d0:	e853 3f00 	ldrex	r3, [r3]
 80048d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80048d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80048dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80048e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	461a      	mov	r2, r3
 80048ea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80048ee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80048f2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048f6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80048fa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80048fe:	e841 2300 	strex	r3, r2, [r1]
 8004902:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004906:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800490a:	2b00      	cmp	r3, #0
 800490c:	d1da      	bne.n	80048c4 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	3308      	adds	r3, #8
 8004914:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004916:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004918:	e853 3f00 	ldrex	r3, [r3]
 800491c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800491e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004920:	f023 0301 	bic.w	r3, r3, #1
 8004924:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	3308      	adds	r3, #8
 800492e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004932:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004936:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004938:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800493a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800493e:	e841 2300 	strex	r3, r2, [r1]
 8004942:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004944:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004946:	2b00      	cmp	r3, #0
 8004948:	d1e1      	bne.n	800490e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	3308      	adds	r3, #8
 8004950:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004952:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004954:	e853 3f00 	ldrex	r3, [r3]
 8004958:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800495a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800495c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004960:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	3308      	adds	r3, #8
 800496a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800496e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004970:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004972:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004974:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004976:	e841 2300 	strex	r3, r2, [r1]
 800497a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800497c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800497e:	2b00      	cmp	r3, #0
 8004980:	d1e3      	bne.n	800494a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2220      	movs	r2, #32
 8004986:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2200      	movs	r2, #0
 800498e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004996:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004998:	e853 3f00 	ldrex	r3, [r3]
 800499c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800499e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049a0:	f023 0310 	bic.w	r3, r3, #16
 80049a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	461a      	mov	r2, r3
 80049ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80049b2:	65bb      	str	r3, [r7, #88]	; 0x58
 80049b4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049b6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80049b8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80049ba:	e841 2300 	strex	r3, r2, [r1]
 80049be:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80049c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d1e4      	bne.n	8004990 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049ca:	4618      	mov	r0, r3
 80049cc:	f7fd f997 	bl	8001cfe <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2202      	movs	r2, #2
 80049d4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	1ad3      	subs	r3, r2, r3
 80049e6:	b29b      	uxth	r3, r3
 80049e8:	4619      	mov	r1, r3
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f000 f8d8 	bl	8004ba0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80049f0:	e0b9      	b.n	8004b66 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	1ad3      	subs	r3, r2, r3
 8004a02:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004a0c:	b29b      	uxth	r3, r3
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	f000 80ab 	beq.w	8004b6a <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8004a14:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	f000 80a6 	beq.w	8004b6a <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a26:	e853 3f00 	ldrex	r3, [r3]
 8004a2a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004a2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a2e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a32:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	461a      	mov	r2, r3
 8004a3c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004a40:	647b      	str	r3, [r7, #68]	; 0x44
 8004a42:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a44:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004a46:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a48:	e841 2300 	strex	r3, r2, [r1]
 8004a4c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004a4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d1e4      	bne.n	8004a1e <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	3308      	adds	r3, #8
 8004a5a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5e:	e853 3f00 	ldrex	r3, [r3]
 8004a62:	623b      	str	r3, [r7, #32]
   return(result);
 8004a64:	6a3b      	ldr	r3, [r7, #32]
 8004a66:	f023 0301 	bic.w	r3, r3, #1
 8004a6a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	3308      	adds	r3, #8
 8004a74:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004a78:	633a      	str	r2, [r7, #48]	; 0x30
 8004a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a7c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004a7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a80:	e841 2300 	strex	r3, r2, [r1]
 8004a84:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d1e3      	bne.n	8004a54 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2220      	movs	r2, #32
 8004a90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2200      	movs	r2, #0
 8004a98:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	e853 3f00 	ldrex	r3, [r3]
 8004aac:	60fb      	str	r3, [r7, #12]
   return(result);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	f023 0310 	bic.w	r3, r3, #16
 8004ab4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	461a      	mov	r2, r3
 8004abe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004ac2:	61fb      	str	r3, [r7, #28]
 8004ac4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ac6:	69b9      	ldr	r1, [r7, #24]
 8004ac8:	69fa      	ldr	r2, [r7, #28]
 8004aca:	e841 2300 	strex	r3, r2, [r1]
 8004ace:	617b      	str	r3, [r7, #20]
   return(result);
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d1e4      	bne.n	8004aa0 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2202      	movs	r2, #2
 8004ada:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004adc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004ae0:	4619      	mov	r1, r3
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f000 f85c 	bl	8004ba0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004ae8:	e03f      	b.n	8004b6a <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004aea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004aee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d00e      	beq.n	8004b14 <HAL_UART_IRQHandler+0x570>
 8004af6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004afa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d008      	beq.n	8004b14 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004b0a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	f000 fd60 	bl	80055d2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004b12:	e02d      	b.n	8004b70 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004b14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d00e      	beq.n	8004b3e <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004b20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d008      	beq.n	8004b3e <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d01c      	beq.n	8004b6e <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b38:	6878      	ldr	r0, [r7, #4]
 8004b3a:	4798      	blx	r3
    }
    return;
 8004b3c:	e017      	b.n	8004b6e <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004b3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d012      	beq.n	8004b70 <HAL_UART_IRQHandler+0x5cc>
 8004b4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d00c      	beq.n	8004b70 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f000 fd11 	bl	800557e <UART_EndTransmit_IT>
    return;
 8004b5c:	e008      	b.n	8004b70 <HAL_UART_IRQHandler+0x5cc>
      return;
 8004b5e:	bf00      	nop
 8004b60:	e006      	b.n	8004b70 <HAL_UART_IRQHandler+0x5cc>
    return;
 8004b62:	bf00      	nop
 8004b64:	e004      	b.n	8004b70 <HAL_UART_IRQHandler+0x5cc>
      return;
 8004b66:	bf00      	nop
 8004b68:	e002      	b.n	8004b70 <HAL_UART_IRQHandler+0x5cc>
      return;
 8004b6a:	bf00      	nop
 8004b6c:	e000      	b.n	8004b70 <HAL_UART_IRQHandler+0x5cc>
    return;
 8004b6e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004b70:	37e8      	adds	r7, #232	; 0xe8
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}
 8004b76:	bf00      	nop

08004b78 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b083      	sub	sp, #12
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004b80:	bf00      	nop
 8004b82:	370c      	adds	r7, #12
 8004b84:	46bd      	mov	sp, r7
 8004b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8a:	4770      	bx	lr

08004b8c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b083      	sub	sp, #12
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004b94:	bf00      	nop
 8004b96:	370c      	adds	r7, #12
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr

08004ba0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b083      	sub	sp, #12
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
 8004ba8:	460b      	mov	r3, r1
 8004baa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004bac:	bf00      	nop
 8004bae:	370c      	adds	r7, #12
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb6:	4770      	bx	lr

08004bb8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004bb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004bbc:	b08a      	sub	sp, #40	; 0x28
 8004bbe:	af00      	add	r7, sp, #0
 8004bc0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	689a      	ldr	r2, [r3, #8]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	691b      	ldr	r3, [r3, #16]
 8004bd0:	431a      	orrs	r2, r3
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	695b      	ldr	r3, [r3, #20]
 8004bd6:	431a      	orrs	r2, r3
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	69db      	ldr	r3, [r3, #28]
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	4ba4      	ldr	r3, [pc, #656]	; (8004e78 <UART_SetConfig+0x2c0>)
 8004be8:	4013      	ands	r3, r2
 8004bea:	68fa      	ldr	r2, [r7, #12]
 8004bec:	6812      	ldr	r2, [r2, #0]
 8004bee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004bf0:	430b      	orrs	r3, r1
 8004bf2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	68da      	ldr	r2, [r3, #12]
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	430a      	orrs	r2, r1
 8004c08:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	699b      	ldr	r3, [r3, #24]
 8004c0e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a99      	ldr	r2, [pc, #612]	; (8004e7c <UART_SetConfig+0x2c4>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d004      	beq.n	8004c24 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	6a1b      	ldr	r3, [r3, #32]
 8004c1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c20:	4313      	orrs	r3, r2
 8004c22:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c34:	430a      	orrs	r2, r1
 8004c36:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a90      	ldr	r2, [pc, #576]	; (8004e80 <UART_SetConfig+0x2c8>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d126      	bne.n	8004c90 <UART_SetConfig+0xd8>
 8004c42:	4b90      	ldr	r3, [pc, #576]	; (8004e84 <UART_SetConfig+0x2cc>)
 8004c44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c48:	f003 0303 	and.w	r3, r3, #3
 8004c4c:	2b03      	cmp	r3, #3
 8004c4e:	d81b      	bhi.n	8004c88 <UART_SetConfig+0xd0>
 8004c50:	a201      	add	r2, pc, #4	; (adr r2, 8004c58 <UART_SetConfig+0xa0>)
 8004c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c56:	bf00      	nop
 8004c58:	08004c69 	.word	0x08004c69
 8004c5c:	08004c79 	.word	0x08004c79
 8004c60:	08004c71 	.word	0x08004c71
 8004c64:	08004c81 	.word	0x08004c81
 8004c68:	2301      	movs	r3, #1
 8004c6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c6e:	e116      	b.n	8004e9e <UART_SetConfig+0x2e6>
 8004c70:	2302      	movs	r3, #2
 8004c72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c76:	e112      	b.n	8004e9e <UART_SetConfig+0x2e6>
 8004c78:	2304      	movs	r3, #4
 8004c7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c7e:	e10e      	b.n	8004e9e <UART_SetConfig+0x2e6>
 8004c80:	2308      	movs	r3, #8
 8004c82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c86:	e10a      	b.n	8004e9e <UART_SetConfig+0x2e6>
 8004c88:	2310      	movs	r3, #16
 8004c8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c8e:	e106      	b.n	8004e9e <UART_SetConfig+0x2e6>
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a7c      	ldr	r2, [pc, #496]	; (8004e88 <UART_SetConfig+0x2d0>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d138      	bne.n	8004d0c <UART_SetConfig+0x154>
 8004c9a:	4b7a      	ldr	r3, [pc, #488]	; (8004e84 <UART_SetConfig+0x2cc>)
 8004c9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ca0:	f003 030c 	and.w	r3, r3, #12
 8004ca4:	2b0c      	cmp	r3, #12
 8004ca6:	d82d      	bhi.n	8004d04 <UART_SetConfig+0x14c>
 8004ca8:	a201      	add	r2, pc, #4	; (adr r2, 8004cb0 <UART_SetConfig+0xf8>)
 8004caa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cae:	bf00      	nop
 8004cb0:	08004ce5 	.word	0x08004ce5
 8004cb4:	08004d05 	.word	0x08004d05
 8004cb8:	08004d05 	.word	0x08004d05
 8004cbc:	08004d05 	.word	0x08004d05
 8004cc0:	08004cf5 	.word	0x08004cf5
 8004cc4:	08004d05 	.word	0x08004d05
 8004cc8:	08004d05 	.word	0x08004d05
 8004ccc:	08004d05 	.word	0x08004d05
 8004cd0:	08004ced 	.word	0x08004ced
 8004cd4:	08004d05 	.word	0x08004d05
 8004cd8:	08004d05 	.word	0x08004d05
 8004cdc:	08004d05 	.word	0x08004d05
 8004ce0:	08004cfd 	.word	0x08004cfd
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cea:	e0d8      	b.n	8004e9e <UART_SetConfig+0x2e6>
 8004cec:	2302      	movs	r3, #2
 8004cee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cf2:	e0d4      	b.n	8004e9e <UART_SetConfig+0x2e6>
 8004cf4:	2304      	movs	r3, #4
 8004cf6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cfa:	e0d0      	b.n	8004e9e <UART_SetConfig+0x2e6>
 8004cfc:	2308      	movs	r3, #8
 8004cfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d02:	e0cc      	b.n	8004e9e <UART_SetConfig+0x2e6>
 8004d04:	2310      	movs	r3, #16
 8004d06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d0a:	e0c8      	b.n	8004e9e <UART_SetConfig+0x2e6>
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a5e      	ldr	r2, [pc, #376]	; (8004e8c <UART_SetConfig+0x2d4>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d125      	bne.n	8004d62 <UART_SetConfig+0x1aa>
 8004d16:	4b5b      	ldr	r3, [pc, #364]	; (8004e84 <UART_SetConfig+0x2cc>)
 8004d18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d1c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004d20:	2b30      	cmp	r3, #48	; 0x30
 8004d22:	d016      	beq.n	8004d52 <UART_SetConfig+0x19a>
 8004d24:	2b30      	cmp	r3, #48	; 0x30
 8004d26:	d818      	bhi.n	8004d5a <UART_SetConfig+0x1a2>
 8004d28:	2b20      	cmp	r3, #32
 8004d2a:	d00a      	beq.n	8004d42 <UART_SetConfig+0x18a>
 8004d2c:	2b20      	cmp	r3, #32
 8004d2e:	d814      	bhi.n	8004d5a <UART_SetConfig+0x1a2>
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d002      	beq.n	8004d3a <UART_SetConfig+0x182>
 8004d34:	2b10      	cmp	r3, #16
 8004d36:	d008      	beq.n	8004d4a <UART_SetConfig+0x192>
 8004d38:	e00f      	b.n	8004d5a <UART_SetConfig+0x1a2>
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d40:	e0ad      	b.n	8004e9e <UART_SetConfig+0x2e6>
 8004d42:	2302      	movs	r3, #2
 8004d44:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d48:	e0a9      	b.n	8004e9e <UART_SetConfig+0x2e6>
 8004d4a:	2304      	movs	r3, #4
 8004d4c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d50:	e0a5      	b.n	8004e9e <UART_SetConfig+0x2e6>
 8004d52:	2308      	movs	r3, #8
 8004d54:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d58:	e0a1      	b.n	8004e9e <UART_SetConfig+0x2e6>
 8004d5a:	2310      	movs	r3, #16
 8004d5c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d60:	e09d      	b.n	8004e9e <UART_SetConfig+0x2e6>
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a4a      	ldr	r2, [pc, #296]	; (8004e90 <UART_SetConfig+0x2d8>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d125      	bne.n	8004db8 <UART_SetConfig+0x200>
 8004d6c:	4b45      	ldr	r3, [pc, #276]	; (8004e84 <UART_SetConfig+0x2cc>)
 8004d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d72:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004d76:	2bc0      	cmp	r3, #192	; 0xc0
 8004d78:	d016      	beq.n	8004da8 <UART_SetConfig+0x1f0>
 8004d7a:	2bc0      	cmp	r3, #192	; 0xc0
 8004d7c:	d818      	bhi.n	8004db0 <UART_SetConfig+0x1f8>
 8004d7e:	2b80      	cmp	r3, #128	; 0x80
 8004d80:	d00a      	beq.n	8004d98 <UART_SetConfig+0x1e0>
 8004d82:	2b80      	cmp	r3, #128	; 0x80
 8004d84:	d814      	bhi.n	8004db0 <UART_SetConfig+0x1f8>
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d002      	beq.n	8004d90 <UART_SetConfig+0x1d8>
 8004d8a:	2b40      	cmp	r3, #64	; 0x40
 8004d8c:	d008      	beq.n	8004da0 <UART_SetConfig+0x1e8>
 8004d8e:	e00f      	b.n	8004db0 <UART_SetConfig+0x1f8>
 8004d90:	2300      	movs	r3, #0
 8004d92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d96:	e082      	b.n	8004e9e <UART_SetConfig+0x2e6>
 8004d98:	2302      	movs	r3, #2
 8004d9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d9e:	e07e      	b.n	8004e9e <UART_SetConfig+0x2e6>
 8004da0:	2304      	movs	r3, #4
 8004da2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004da6:	e07a      	b.n	8004e9e <UART_SetConfig+0x2e6>
 8004da8:	2308      	movs	r3, #8
 8004daa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dae:	e076      	b.n	8004e9e <UART_SetConfig+0x2e6>
 8004db0:	2310      	movs	r3, #16
 8004db2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004db6:	e072      	b.n	8004e9e <UART_SetConfig+0x2e6>
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a35      	ldr	r2, [pc, #212]	; (8004e94 <UART_SetConfig+0x2dc>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d12a      	bne.n	8004e18 <UART_SetConfig+0x260>
 8004dc2:	4b30      	ldr	r3, [pc, #192]	; (8004e84 <UART_SetConfig+0x2cc>)
 8004dc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dc8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dcc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004dd0:	d01a      	beq.n	8004e08 <UART_SetConfig+0x250>
 8004dd2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004dd6:	d81b      	bhi.n	8004e10 <UART_SetConfig+0x258>
 8004dd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ddc:	d00c      	beq.n	8004df8 <UART_SetConfig+0x240>
 8004dde:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004de2:	d815      	bhi.n	8004e10 <UART_SetConfig+0x258>
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d003      	beq.n	8004df0 <UART_SetConfig+0x238>
 8004de8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004dec:	d008      	beq.n	8004e00 <UART_SetConfig+0x248>
 8004dee:	e00f      	b.n	8004e10 <UART_SetConfig+0x258>
 8004df0:	2300      	movs	r3, #0
 8004df2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004df6:	e052      	b.n	8004e9e <UART_SetConfig+0x2e6>
 8004df8:	2302      	movs	r3, #2
 8004dfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dfe:	e04e      	b.n	8004e9e <UART_SetConfig+0x2e6>
 8004e00:	2304      	movs	r3, #4
 8004e02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e06:	e04a      	b.n	8004e9e <UART_SetConfig+0x2e6>
 8004e08:	2308      	movs	r3, #8
 8004e0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e0e:	e046      	b.n	8004e9e <UART_SetConfig+0x2e6>
 8004e10:	2310      	movs	r3, #16
 8004e12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e16:	e042      	b.n	8004e9e <UART_SetConfig+0x2e6>
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a17      	ldr	r2, [pc, #92]	; (8004e7c <UART_SetConfig+0x2c4>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d13a      	bne.n	8004e98 <UART_SetConfig+0x2e0>
 8004e22:	4b18      	ldr	r3, [pc, #96]	; (8004e84 <UART_SetConfig+0x2cc>)
 8004e24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e28:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004e2c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e30:	d01a      	beq.n	8004e68 <UART_SetConfig+0x2b0>
 8004e32:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e36:	d81b      	bhi.n	8004e70 <UART_SetConfig+0x2b8>
 8004e38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e3c:	d00c      	beq.n	8004e58 <UART_SetConfig+0x2a0>
 8004e3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e42:	d815      	bhi.n	8004e70 <UART_SetConfig+0x2b8>
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d003      	beq.n	8004e50 <UART_SetConfig+0x298>
 8004e48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e4c:	d008      	beq.n	8004e60 <UART_SetConfig+0x2a8>
 8004e4e:	e00f      	b.n	8004e70 <UART_SetConfig+0x2b8>
 8004e50:	2300      	movs	r3, #0
 8004e52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e56:	e022      	b.n	8004e9e <UART_SetConfig+0x2e6>
 8004e58:	2302      	movs	r3, #2
 8004e5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e5e:	e01e      	b.n	8004e9e <UART_SetConfig+0x2e6>
 8004e60:	2304      	movs	r3, #4
 8004e62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e66:	e01a      	b.n	8004e9e <UART_SetConfig+0x2e6>
 8004e68:	2308      	movs	r3, #8
 8004e6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e6e:	e016      	b.n	8004e9e <UART_SetConfig+0x2e6>
 8004e70:	2310      	movs	r3, #16
 8004e72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e76:	e012      	b.n	8004e9e <UART_SetConfig+0x2e6>
 8004e78:	efff69f3 	.word	0xefff69f3
 8004e7c:	40008000 	.word	0x40008000
 8004e80:	40013800 	.word	0x40013800
 8004e84:	40021000 	.word	0x40021000
 8004e88:	40004400 	.word	0x40004400
 8004e8c:	40004800 	.word	0x40004800
 8004e90:	40004c00 	.word	0x40004c00
 8004e94:	40005000 	.word	0x40005000
 8004e98:	2310      	movs	r3, #16
 8004e9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a9f      	ldr	r2, [pc, #636]	; (8005120 <UART_SetConfig+0x568>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d17a      	bne.n	8004f9e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004ea8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004eac:	2b08      	cmp	r3, #8
 8004eae:	d824      	bhi.n	8004efa <UART_SetConfig+0x342>
 8004eb0:	a201      	add	r2, pc, #4	; (adr r2, 8004eb8 <UART_SetConfig+0x300>)
 8004eb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eb6:	bf00      	nop
 8004eb8:	08004edd 	.word	0x08004edd
 8004ebc:	08004efb 	.word	0x08004efb
 8004ec0:	08004ee5 	.word	0x08004ee5
 8004ec4:	08004efb 	.word	0x08004efb
 8004ec8:	08004eeb 	.word	0x08004eeb
 8004ecc:	08004efb 	.word	0x08004efb
 8004ed0:	08004efb 	.word	0x08004efb
 8004ed4:	08004efb 	.word	0x08004efb
 8004ed8:	08004ef3 	.word	0x08004ef3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004edc:	f7fe fd42 	bl	8003964 <HAL_RCC_GetPCLK1Freq>
 8004ee0:	61f8      	str	r0, [r7, #28]
        break;
 8004ee2:	e010      	b.n	8004f06 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ee4:	4b8f      	ldr	r3, [pc, #572]	; (8005124 <UART_SetConfig+0x56c>)
 8004ee6:	61fb      	str	r3, [r7, #28]
        break;
 8004ee8:	e00d      	b.n	8004f06 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004eea:	f7fe fca3 	bl	8003834 <HAL_RCC_GetSysClockFreq>
 8004eee:	61f8      	str	r0, [r7, #28]
        break;
 8004ef0:	e009      	b.n	8004f06 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ef2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ef6:	61fb      	str	r3, [r7, #28]
        break;
 8004ef8:	e005      	b.n	8004f06 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004efa:	2300      	movs	r3, #0
 8004efc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004efe:	2301      	movs	r3, #1
 8004f00:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004f04:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004f06:	69fb      	ldr	r3, [r7, #28]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	f000 80fb 	beq.w	8005104 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	685a      	ldr	r2, [r3, #4]
 8004f12:	4613      	mov	r3, r2
 8004f14:	005b      	lsls	r3, r3, #1
 8004f16:	4413      	add	r3, r2
 8004f18:	69fa      	ldr	r2, [r7, #28]
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	d305      	bcc.n	8004f2a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004f24:	69fa      	ldr	r2, [r7, #28]
 8004f26:	429a      	cmp	r2, r3
 8004f28:	d903      	bls.n	8004f32 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004f30:	e0e8      	b.n	8005104 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004f32:	69fb      	ldr	r3, [r7, #28]
 8004f34:	2200      	movs	r2, #0
 8004f36:	461c      	mov	r4, r3
 8004f38:	4615      	mov	r5, r2
 8004f3a:	f04f 0200 	mov.w	r2, #0
 8004f3e:	f04f 0300 	mov.w	r3, #0
 8004f42:	022b      	lsls	r3, r5, #8
 8004f44:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004f48:	0222      	lsls	r2, r4, #8
 8004f4a:	68f9      	ldr	r1, [r7, #12]
 8004f4c:	6849      	ldr	r1, [r1, #4]
 8004f4e:	0849      	lsrs	r1, r1, #1
 8004f50:	2000      	movs	r0, #0
 8004f52:	4688      	mov	r8, r1
 8004f54:	4681      	mov	r9, r0
 8004f56:	eb12 0a08 	adds.w	sl, r2, r8
 8004f5a:	eb43 0b09 	adc.w	fp, r3, r9
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	2200      	movs	r2, #0
 8004f64:	603b      	str	r3, [r7, #0]
 8004f66:	607a      	str	r2, [r7, #4]
 8004f68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f6c:	4650      	mov	r0, sl
 8004f6e:	4659      	mov	r1, fp
 8004f70:	f7fb fe6a 	bl	8000c48 <__aeabi_uldivmod>
 8004f74:	4602      	mov	r2, r0
 8004f76:	460b      	mov	r3, r1
 8004f78:	4613      	mov	r3, r2
 8004f7a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004f7c:	69bb      	ldr	r3, [r7, #24]
 8004f7e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f82:	d308      	bcc.n	8004f96 <UART_SetConfig+0x3de>
 8004f84:	69bb      	ldr	r3, [r7, #24]
 8004f86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f8a:	d204      	bcs.n	8004f96 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	69ba      	ldr	r2, [r7, #24]
 8004f92:	60da      	str	r2, [r3, #12]
 8004f94:	e0b6      	b.n	8005104 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004f9c:	e0b2      	b.n	8005104 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	69db      	ldr	r3, [r3, #28]
 8004fa2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fa6:	d15e      	bne.n	8005066 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004fa8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004fac:	2b08      	cmp	r3, #8
 8004fae:	d828      	bhi.n	8005002 <UART_SetConfig+0x44a>
 8004fb0:	a201      	add	r2, pc, #4	; (adr r2, 8004fb8 <UART_SetConfig+0x400>)
 8004fb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fb6:	bf00      	nop
 8004fb8:	08004fdd 	.word	0x08004fdd
 8004fbc:	08004fe5 	.word	0x08004fe5
 8004fc0:	08004fed 	.word	0x08004fed
 8004fc4:	08005003 	.word	0x08005003
 8004fc8:	08004ff3 	.word	0x08004ff3
 8004fcc:	08005003 	.word	0x08005003
 8004fd0:	08005003 	.word	0x08005003
 8004fd4:	08005003 	.word	0x08005003
 8004fd8:	08004ffb 	.word	0x08004ffb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fdc:	f7fe fcc2 	bl	8003964 <HAL_RCC_GetPCLK1Freq>
 8004fe0:	61f8      	str	r0, [r7, #28]
        break;
 8004fe2:	e014      	b.n	800500e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004fe4:	f7fe fcd4 	bl	8003990 <HAL_RCC_GetPCLK2Freq>
 8004fe8:	61f8      	str	r0, [r7, #28]
        break;
 8004fea:	e010      	b.n	800500e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004fec:	4b4d      	ldr	r3, [pc, #308]	; (8005124 <UART_SetConfig+0x56c>)
 8004fee:	61fb      	str	r3, [r7, #28]
        break;
 8004ff0:	e00d      	b.n	800500e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ff2:	f7fe fc1f 	bl	8003834 <HAL_RCC_GetSysClockFreq>
 8004ff6:	61f8      	str	r0, [r7, #28]
        break;
 8004ff8:	e009      	b.n	800500e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ffa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ffe:	61fb      	str	r3, [r7, #28]
        break;
 8005000:	e005      	b.n	800500e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005002:	2300      	movs	r3, #0
 8005004:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800500c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800500e:	69fb      	ldr	r3, [r7, #28]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d077      	beq.n	8005104 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005014:	69fb      	ldr	r3, [r7, #28]
 8005016:	005a      	lsls	r2, r3, #1
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	085b      	lsrs	r3, r3, #1
 800501e:	441a      	add	r2, r3
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	fbb2 f3f3 	udiv	r3, r2, r3
 8005028:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800502a:	69bb      	ldr	r3, [r7, #24]
 800502c:	2b0f      	cmp	r3, #15
 800502e:	d916      	bls.n	800505e <UART_SetConfig+0x4a6>
 8005030:	69bb      	ldr	r3, [r7, #24]
 8005032:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005036:	d212      	bcs.n	800505e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005038:	69bb      	ldr	r3, [r7, #24]
 800503a:	b29b      	uxth	r3, r3
 800503c:	f023 030f 	bic.w	r3, r3, #15
 8005040:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005042:	69bb      	ldr	r3, [r7, #24]
 8005044:	085b      	lsrs	r3, r3, #1
 8005046:	b29b      	uxth	r3, r3
 8005048:	f003 0307 	and.w	r3, r3, #7
 800504c:	b29a      	uxth	r2, r3
 800504e:	8afb      	ldrh	r3, [r7, #22]
 8005050:	4313      	orrs	r3, r2
 8005052:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	8afa      	ldrh	r2, [r7, #22]
 800505a:	60da      	str	r2, [r3, #12]
 800505c:	e052      	b.n	8005104 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005064:	e04e      	b.n	8005104 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005066:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800506a:	2b08      	cmp	r3, #8
 800506c:	d827      	bhi.n	80050be <UART_SetConfig+0x506>
 800506e:	a201      	add	r2, pc, #4	; (adr r2, 8005074 <UART_SetConfig+0x4bc>)
 8005070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005074:	08005099 	.word	0x08005099
 8005078:	080050a1 	.word	0x080050a1
 800507c:	080050a9 	.word	0x080050a9
 8005080:	080050bf 	.word	0x080050bf
 8005084:	080050af 	.word	0x080050af
 8005088:	080050bf 	.word	0x080050bf
 800508c:	080050bf 	.word	0x080050bf
 8005090:	080050bf 	.word	0x080050bf
 8005094:	080050b7 	.word	0x080050b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005098:	f7fe fc64 	bl	8003964 <HAL_RCC_GetPCLK1Freq>
 800509c:	61f8      	str	r0, [r7, #28]
        break;
 800509e:	e014      	b.n	80050ca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80050a0:	f7fe fc76 	bl	8003990 <HAL_RCC_GetPCLK2Freq>
 80050a4:	61f8      	str	r0, [r7, #28]
        break;
 80050a6:	e010      	b.n	80050ca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050a8:	4b1e      	ldr	r3, [pc, #120]	; (8005124 <UART_SetConfig+0x56c>)
 80050aa:	61fb      	str	r3, [r7, #28]
        break;
 80050ac:	e00d      	b.n	80050ca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050ae:	f7fe fbc1 	bl	8003834 <HAL_RCC_GetSysClockFreq>
 80050b2:	61f8      	str	r0, [r7, #28]
        break;
 80050b4:	e009      	b.n	80050ca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050ba:	61fb      	str	r3, [r7, #28]
        break;
 80050bc:	e005      	b.n	80050ca <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80050be:	2300      	movs	r3, #0
 80050c0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80050c2:	2301      	movs	r3, #1
 80050c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80050c8:	bf00      	nop
    }

    if (pclk != 0U)
 80050ca:	69fb      	ldr	r3, [r7, #28]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d019      	beq.n	8005104 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	085a      	lsrs	r2, r3, #1
 80050d6:	69fb      	ldr	r3, [r7, #28]
 80050d8:	441a      	add	r2, r3
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	fbb2 f3f3 	udiv	r3, r2, r3
 80050e2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050e4:	69bb      	ldr	r3, [r7, #24]
 80050e6:	2b0f      	cmp	r3, #15
 80050e8:	d909      	bls.n	80050fe <UART_SetConfig+0x546>
 80050ea:	69bb      	ldr	r3, [r7, #24]
 80050ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050f0:	d205      	bcs.n	80050fe <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80050f2:	69bb      	ldr	r3, [r7, #24]
 80050f4:	b29a      	uxth	r2, r3
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	60da      	str	r2, [r3, #12]
 80050fc:	e002      	b.n	8005104 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	2200      	movs	r2, #0
 8005108:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	2200      	movs	r2, #0
 800510e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005110:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005114:	4618      	mov	r0, r3
 8005116:	3728      	adds	r7, #40	; 0x28
 8005118:	46bd      	mov	sp, r7
 800511a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800511e:	bf00      	nop
 8005120:	40008000 	.word	0x40008000
 8005124:	00f42400 	.word	0x00f42400

08005128 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005128:	b480      	push	{r7}
 800512a:	b083      	sub	sp, #12
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005134:	f003 0308 	and.w	r3, r3, #8
 8005138:	2b00      	cmp	r3, #0
 800513a:	d00a      	beq.n	8005152 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	430a      	orrs	r2, r1
 8005150:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005156:	f003 0301 	and.w	r3, r3, #1
 800515a:	2b00      	cmp	r3, #0
 800515c:	d00a      	beq.n	8005174 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	430a      	orrs	r2, r1
 8005172:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005178:	f003 0302 	and.w	r3, r3, #2
 800517c:	2b00      	cmp	r3, #0
 800517e:	d00a      	beq.n	8005196 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	430a      	orrs	r2, r1
 8005194:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800519a:	f003 0304 	and.w	r3, r3, #4
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d00a      	beq.n	80051b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	430a      	orrs	r2, r1
 80051b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051bc:	f003 0310 	and.w	r3, r3, #16
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d00a      	beq.n	80051da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	430a      	orrs	r2, r1
 80051d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051de:	f003 0320 	and.w	r3, r3, #32
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d00a      	beq.n	80051fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	430a      	orrs	r2, r1
 80051fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005200:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005204:	2b00      	cmp	r3, #0
 8005206:	d01a      	beq.n	800523e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	430a      	orrs	r2, r1
 800521c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005222:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005226:	d10a      	bne.n	800523e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	430a      	orrs	r2, r1
 800523c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005242:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005246:	2b00      	cmp	r3, #0
 8005248:	d00a      	beq.n	8005260 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	430a      	orrs	r2, r1
 800525e:	605a      	str	r2, [r3, #4]
  }
}
 8005260:	bf00      	nop
 8005262:	370c      	adds	r7, #12
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr

0800526c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b098      	sub	sp, #96	; 0x60
 8005270:	af02      	add	r7, sp, #8
 8005272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2200      	movs	r2, #0
 8005278:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800527c:	f7fc fbfe 	bl	8001a7c <HAL_GetTick>
 8005280:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f003 0308 	and.w	r3, r3, #8
 800528c:	2b08      	cmp	r3, #8
 800528e:	d12e      	bne.n	80052ee <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005290:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005294:	9300      	str	r3, [sp, #0]
 8005296:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005298:	2200      	movs	r2, #0
 800529a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f000 f88c 	bl	80053bc <UART_WaitOnFlagUntilTimeout>
 80052a4:	4603      	mov	r3, r0
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d021      	beq.n	80052ee <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052b2:	e853 3f00 	ldrex	r3, [r3]
 80052b6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80052b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052be:	653b      	str	r3, [r7, #80]	; 0x50
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	461a      	mov	r2, r3
 80052c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052c8:	647b      	str	r3, [r7, #68]	; 0x44
 80052ca:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052cc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80052ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80052d0:	e841 2300 	strex	r3, r2, [r1]
 80052d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80052d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d1e6      	bne.n	80052aa <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2220      	movs	r2, #32
 80052e0:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2200      	movs	r2, #0
 80052e6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052ea:	2303      	movs	r3, #3
 80052ec:	e062      	b.n	80053b4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f003 0304 	and.w	r3, r3, #4
 80052f8:	2b04      	cmp	r3, #4
 80052fa:	d149      	bne.n	8005390 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005300:	9300      	str	r3, [sp, #0]
 8005302:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005304:	2200      	movs	r2, #0
 8005306:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f000 f856 	bl	80053bc <UART_WaitOnFlagUntilTimeout>
 8005310:	4603      	mov	r3, r0
 8005312:	2b00      	cmp	r3, #0
 8005314:	d03c      	beq.n	8005390 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800531c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531e:	e853 3f00 	ldrex	r3, [r3]
 8005322:	623b      	str	r3, [r7, #32]
   return(result);
 8005324:	6a3b      	ldr	r3, [r7, #32]
 8005326:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800532a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	461a      	mov	r2, r3
 8005332:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005334:	633b      	str	r3, [r7, #48]	; 0x30
 8005336:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005338:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800533a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800533c:	e841 2300 	strex	r3, r2, [r1]
 8005340:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005344:	2b00      	cmp	r3, #0
 8005346:	d1e6      	bne.n	8005316 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	3308      	adds	r3, #8
 800534e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	e853 3f00 	ldrex	r3, [r3]
 8005356:	60fb      	str	r3, [r7, #12]
   return(result);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	f023 0301 	bic.w	r3, r3, #1
 800535e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	3308      	adds	r3, #8
 8005366:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005368:	61fa      	str	r2, [r7, #28]
 800536a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800536c:	69b9      	ldr	r1, [r7, #24]
 800536e:	69fa      	ldr	r2, [r7, #28]
 8005370:	e841 2300 	strex	r3, r2, [r1]
 8005374:	617b      	str	r3, [r7, #20]
   return(result);
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d1e5      	bne.n	8005348 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2220      	movs	r2, #32
 8005380:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2200      	movs	r2, #0
 8005388:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800538c:	2303      	movs	r3, #3
 800538e:	e011      	b.n	80053b4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2220      	movs	r2, #32
 8005394:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2220      	movs	r2, #32
 800539a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2200      	movs	r2, #0
 80053a2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2200      	movs	r2, #0
 80053a8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2200      	movs	r2, #0
 80053ae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80053b2:	2300      	movs	r3, #0
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	3758      	adds	r7, #88	; 0x58
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bd80      	pop	{r7, pc}

080053bc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b084      	sub	sp, #16
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	60f8      	str	r0, [r7, #12]
 80053c4:	60b9      	str	r1, [r7, #8]
 80053c6:	603b      	str	r3, [r7, #0]
 80053c8:	4613      	mov	r3, r2
 80053ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053cc:	e049      	b.n	8005462 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053ce:	69bb      	ldr	r3, [r7, #24]
 80053d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053d4:	d045      	beq.n	8005462 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053d6:	f7fc fb51 	bl	8001a7c <HAL_GetTick>
 80053da:	4602      	mov	r2, r0
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	1ad3      	subs	r3, r2, r3
 80053e0:	69ba      	ldr	r2, [r7, #24]
 80053e2:	429a      	cmp	r2, r3
 80053e4:	d302      	bcc.n	80053ec <UART_WaitOnFlagUntilTimeout+0x30>
 80053e6:	69bb      	ldr	r3, [r7, #24]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d101      	bne.n	80053f0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80053ec:	2303      	movs	r3, #3
 80053ee:	e048      	b.n	8005482 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f003 0304 	and.w	r3, r3, #4
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d031      	beq.n	8005462 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	69db      	ldr	r3, [r3, #28]
 8005404:	f003 0308 	and.w	r3, r3, #8
 8005408:	2b08      	cmp	r3, #8
 800540a:	d110      	bne.n	800542e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	2208      	movs	r2, #8
 8005412:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005414:	68f8      	ldr	r0, [r7, #12]
 8005416:	f000 f838 	bl	800548a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2208      	movs	r2, #8
 800541e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2200      	movs	r2, #0
 8005426:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800542a:	2301      	movs	r3, #1
 800542c:	e029      	b.n	8005482 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	69db      	ldr	r3, [r3, #28]
 8005434:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005438:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800543c:	d111      	bne.n	8005462 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005446:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005448:	68f8      	ldr	r0, [r7, #12]
 800544a:	f000 f81e 	bl	800548a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	2220      	movs	r2, #32
 8005452:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	2200      	movs	r2, #0
 800545a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800545e:	2303      	movs	r3, #3
 8005460:	e00f      	b.n	8005482 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	69da      	ldr	r2, [r3, #28]
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	4013      	ands	r3, r2
 800546c:	68ba      	ldr	r2, [r7, #8]
 800546e:	429a      	cmp	r2, r3
 8005470:	bf0c      	ite	eq
 8005472:	2301      	moveq	r3, #1
 8005474:	2300      	movne	r3, #0
 8005476:	b2db      	uxtb	r3, r3
 8005478:	461a      	mov	r2, r3
 800547a:	79fb      	ldrb	r3, [r7, #7]
 800547c:	429a      	cmp	r2, r3
 800547e:	d0a6      	beq.n	80053ce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005480:	2300      	movs	r3, #0
}
 8005482:	4618      	mov	r0, r3
 8005484:	3710      	adds	r7, #16
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}

0800548a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800548a:	b480      	push	{r7}
 800548c:	b095      	sub	sp, #84	; 0x54
 800548e:	af00      	add	r7, sp, #0
 8005490:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005498:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800549a:	e853 3f00 	ldrex	r3, [r3]
 800549e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80054a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054a2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80054a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	461a      	mov	r2, r3
 80054ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054b0:	643b      	str	r3, [r7, #64]	; 0x40
 80054b2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054b4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80054b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80054b8:	e841 2300 	strex	r3, r2, [r1]
 80054bc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80054be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d1e6      	bne.n	8005492 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	3308      	adds	r3, #8
 80054ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054cc:	6a3b      	ldr	r3, [r7, #32]
 80054ce:	e853 3f00 	ldrex	r3, [r3]
 80054d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80054d4:	69fb      	ldr	r3, [r7, #28]
 80054d6:	f023 0301 	bic.w	r3, r3, #1
 80054da:	64bb      	str	r3, [r7, #72]	; 0x48
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	3308      	adds	r3, #8
 80054e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80054e4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80054e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80054ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054ec:	e841 2300 	strex	r3, r2, [r1]
 80054f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80054f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d1e5      	bne.n	80054c4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054fc:	2b01      	cmp	r3, #1
 80054fe:	d118      	bne.n	8005532 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	e853 3f00 	ldrex	r3, [r3]
 800550c:	60bb      	str	r3, [r7, #8]
   return(result);
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	f023 0310 	bic.w	r3, r3, #16
 8005514:	647b      	str	r3, [r7, #68]	; 0x44
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	461a      	mov	r2, r3
 800551c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800551e:	61bb      	str	r3, [r7, #24]
 8005520:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005522:	6979      	ldr	r1, [r7, #20]
 8005524:	69ba      	ldr	r2, [r7, #24]
 8005526:	e841 2300 	strex	r3, r2, [r1]
 800552a:	613b      	str	r3, [r7, #16]
   return(result);
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d1e6      	bne.n	8005500 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2220      	movs	r2, #32
 8005536:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2200      	movs	r2, #0
 800553e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2200      	movs	r2, #0
 8005544:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005546:	bf00      	nop
 8005548:	3754      	adds	r7, #84	; 0x54
 800554a:	46bd      	mov	sp, r7
 800554c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005550:	4770      	bx	lr

08005552 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005552:	b580      	push	{r7, lr}
 8005554:	b084      	sub	sp, #16
 8005556:	af00      	add	r7, sp, #0
 8005558:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800555e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2200      	movs	r2, #0
 8005564:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2200      	movs	r2, #0
 800556c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005570:	68f8      	ldr	r0, [r7, #12]
 8005572:	f7ff fb0b 	bl	8004b8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005576:	bf00      	nop
 8005578:	3710      	adds	r7, #16
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}

0800557e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800557e:	b580      	push	{r7, lr}
 8005580:	b088      	sub	sp, #32
 8005582:	af00      	add	r7, sp, #0
 8005584:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	e853 3f00 	ldrex	r3, [r3]
 8005592:	60bb      	str	r3, [r7, #8]
   return(result);
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800559a:	61fb      	str	r3, [r7, #28]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	461a      	mov	r2, r3
 80055a2:	69fb      	ldr	r3, [r7, #28]
 80055a4:	61bb      	str	r3, [r7, #24]
 80055a6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055a8:	6979      	ldr	r1, [r7, #20]
 80055aa:	69ba      	ldr	r2, [r7, #24]
 80055ac:	e841 2300 	strex	r3, r2, [r1]
 80055b0:	613b      	str	r3, [r7, #16]
   return(result);
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d1e6      	bne.n	8005586 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2220      	movs	r2, #32
 80055bc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2200      	movs	r2, #0
 80055c2:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	f7ff fad7 	bl	8004b78 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80055ca:	bf00      	nop
 80055cc:	3720      	adds	r7, #32
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}

080055d2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80055d2:	b480      	push	{r7}
 80055d4:	b083      	sub	sp, #12
 80055d6:	af00      	add	r7, sp, #0
 80055d8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80055da:	bf00      	nop
 80055dc:	370c      	adds	r7, #12
 80055de:	46bd      	mov	sp, r7
 80055e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e4:	4770      	bx	lr

080055e6 <__cvt>:
 80055e6:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80055ea:	ec55 4b10 	vmov	r4, r5, d0
 80055ee:	2d00      	cmp	r5, #0
 80055f0:	460e      	mov	r6, r1
 80055f2:	4619      	mov	r1, r3
 80055f4:	462b      	mov	r3, r5
 80055f6:	bfbb      	ittet	lt
 80055f8:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80055fc:	461d      	movlt	r5, r3
 80055fe:	2300      	movge	r3, #0
 8005600:	232d      	movlt	r3, #45	; 0x2d
 8005602:	700b      	strb	r3, [r1, #0]
 8005604:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005606:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800560a:	4691      	mov	r9, r2
 800560c:	f023 0820 	bic.w	r8, r3, #32
 8005610:	bfbc      	itt	lt
 8005612:	4622      	movlt	r2, r4
 8005614:	4614      	movlt	r4, r2
 8005616:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800561a:	d005      	beq.n	8005628 <__cvt+0x42>
 800561c:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005620:	d100      	bne.n	8005624 <__cvt+0x3e>
 8005622:	3601      	adds	r6, #1
 8005624:	2102      	movs	r1, #2
 8005626:	e000      	b.n	800562a <__cvt+0x44>
 8005628:	2103      	movs	r1, #3
 800562a:	ab03      	add	r3, sp, #12
 800562c:	9301      	str	r3, [sp, #4]
 800562e:	ab02      	add	r3, sp, #8
 8005630:	9300      	str	r3, [sp, #0]
 8005632:	ec45 4b10 	vmov	d0, r4, r5
 8005636:	4653      	mov	r3, sl
 8005638:	4632      	mov	r2, r6
 800563a:	f000 fe7d 	bl	8006338 <_dtoa_r>
 800563e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005642:	4607      	mov	r7, r0
 8005644:	d102      	bne.n	800564c <__cvt+0x66>
 8005646:	f019 0f01 	tst.w	r9, #1
 800564a:	d022      	beq.n	8005692 <__cvt+0xac>
 800564c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005650:	eb07 0906 	add.w	r9, r7, r6
 8005654:	d110      	bne.n	8005678 <__cvt+0x92>
 8005656:	783b      	ldrb	r3, [r7, #0]
 8005658:	2b30      	cmp	r3, #48	; 0x30
 800565a:	d10a      	bne.n	8005672 <__cvt+0x8c>
 800565c:	2200      	movs	r2, #0
 800565e:	2300      	movs	r3, #0
 8005660:	4620      	mov	r0, r4
 8005662:	4629      	mov	r1, r5
 8005664:	f7fb fa30 	bl	8000ac8 <__aeabi_dcmpeq>
 8005668:	b918      	cbnz	r0, 8005672 <__cvt+0x8c>
 800566a:	f1c6 0601 	rsb	r6, r6, #1
 800566e:	f8ca 6000 	str.w	r6, [sl]
 8005672:	f8da 3000 	ldr.w	r3, [sl]
 8005676:	4499      	add	r9, r3
 8005678:	2200      	movs	r2, #0
 800567a:	2300      	movs	r3, #0
 800567c:	4620      	mov	r0, r4
 800567e:	4629      	mov	r1, r5
 8005680:	f7fb fa22 	bl	8000ac8 <__aeabi_dcmpeq>
 8005684:	b108      	cbz	r0, 800568a <__cvt+0xa4>
 8005686:	f8cd 900c 	str.w	r9, [sp, #12]
 800568a:	2230      	movs	r2, #48	; 0x30
 800568c:	9b03      	ldr	r3, [sp, #12]
 800568e:	454b      	cmp	r3, r9
 8005690:	d307      	bcc.n	80056a2 <__cvt+0xbc>
 8005692:	9b03      	ldr	r3, [sp, #12]
 8005694:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005696:	1bdb      	subs	r3, r3, r7
 8005698:	4638      	mov	r0, r7
 800569a:	6013      	str	r3, [r2, #0]
 800569c:	b004      	add	sp, #16
 800569e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056a2:	1c59      	adds	r1, r3, #1
 80056a4:	9103      	str	r1, [sp, #12]
 80056a6:	701a      	strb	r2, [r3, #0]
 80056a8:	e7f0      	b.n	800568c <__cvt+0xa6>

080056aa <__exponent>:
 80056aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80056ac:	4603      	mov	r3, r0
 80056ae:	2900      	cmp	r1, #0
 80056b0:	bfb8      	it	lt
 80056b2:	4249      	neglt	r1, r1
 80056b4:	f803 2b02 	strb.w	r2, [r3], #2
 80056b8:	bfb4      	ite	lt
 80056ba:	222d      	movlt	r2, #45	; 0x2d
 80056bc:	222b      	movge	r2, #43	; 0x2b
 80056be:	2909      	cmp	r1, #9
 80056c0:	7042      	strb	r2, [r0, #1]
 80056c2:	dd2a      	ble.n	800571a <__exponent+0x70>
 80056c4:	f10d 0207 	add.w	r2, sp, #7
 80056c8:	4617      	mov	r7, r2
 80056ca:	260a      	movs	r6, #10
 80056cc:	4694      	mov	ip, r2
 80056ce:	fb91 f5f6 	sdiv	r5, r1, r6
 80056d2:	fb06 1415 	mls	r4, r6, r5, r1
 80056d6:	3430      	adds	r4, #48	; 0x30
 80056d8:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80056dc:	460c      	mov	r4, r1
 80056de:	2c63      	cmp	r4, #99	; 0x63
 80056e0:	f102 32ff 	add.w	r2, r2, #4294967295
 80056e4:	4629      	mov	r1, r5
 80056e6:	dcf1      	bgt.n	80056cc <__exponent+0x22>
 80056e8:	3130      	adds	r1, #48	; 0x30
 80056ea:	f1ac 0402 	sub.w	r4, ip, #2
 80056ee:	f802 1c01 	strb.w	r1, [r2, #-1]
 80056f2:	1c41      	adds	r1, r0, #1
 80056f4:	4622      	mov	r2, r4
 80056f6:	42ba      	cmp	r2, r7
 80056f8:	d30a      	bcc.n	8005710 <__exponent+0x66>
 80056fa:	f10d 0209 	add.w	r2, sp, #9
 80056fe:	eba2 020c 	sub.w	r2, r2, ip
 8005702:	42bc      	cmp	r4, r7
 8005704:	bf88      	it	hi
 8005706:	2200      	movhi	r2, #0
 8005708:	4413      	add	r3, r2
 800570a:	1a18      	subs	r0, r3, r0
 800570c:	b003      	add	sp, #12
 800570e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005710:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005714:	f801 5f01 	strb.w	r5, [r1, #1]!
 8005718:	e7ed      	b.n	80056f6 <__exponent+0x4c>
 800571a:	2330      	movs	r3, #48	; 0x30
 800571c:	3130      	adds	r1, #48	; 0x30
 800571e:	7083      	strb	r3, [r0, #2]
 8005720:	70c1      	strb	r1, [r0, #3]
 8005722:	1d03      	adds	r3, r0, #4
 8005724:	e7f1      	b.n	800570a <__exponent+0x60>
	...

08005728 <_printf_float>:
 8005728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800572c:	ed2d 8b02 	vpush	{d8}
 8005730:	b08d      	sub	sp, #52	; 0x34
 8005732:	460c      	mov	r4, r1
 8005734:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005738:	4616      	mov	r6, r2
 800573a:	461f      	mov	r7, r3
 800573c:	4605      	mov	r5, r0
 800573e:	f000 fcfb 	bl	8006138 <_localeconv_r>
 8005742:	f8d0 a000 	ldr.w	sl, [r0]
 8005746:	4650      	mov	r0, sl
 8005748:	f7fa fd92 	bl	8000270 <strlen>
 800574c:	2300      	movs	r3, #0
 800574e:	930a      	str	r3, [sp, #40]	; 0x28
 8005750:	6823      	ldr	r3, [r4, #0]
 8005752:	9305      	str	r3, [sp, #20]
 8005754:	f8d8 3000 	ldr.w	r3, [r8]
 8005758:	f894 b018 	ldrb.w	fp, [r4, #24]
 800575c:	3307      	adds	r3, #7
 800575e:	f023 0307 	bic.w	r3, r3, #7
 8005762:	f103 0208 	add.w	r2, r3, #8
 8005766:	f8c8 2000 	str.w	r2, [r8]
 800576a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800576e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005772:	9307      	str	r3, [sp, #28]
 8005774:	f8cd 8018 	str.w	r8, [sp, #24]
 8005778:	ee08 0a10 	vmov	s16, r0
 800577c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8005780:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005784:	4b9e      	ldr	r3, [pc, #632]	; (8005a00 <_printf_float+0x2d8>)
 8005786:	f04f 32ff 	mov.w	r2, #4294967295
 800578a:	f7fb f9cf 	bl	8000b2c <__aeabi_dcmpun>
 800578e:	bb88      	cbnz	r0, 80057f4 <_printf_float+0xcc>
 8005790:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005794:	4b9a      	ldr	r3, [pc, #616]	; (8005a00 <_printf_float+0x2d8>)
 8005796:	f04f 32ff 	mov.w	r2, #4294967295
 800579a:	f7fb f9a9 	bl	8000af0 <__aeabi_dcmple>
 800579e:	bb48      	cbnz	r0, 80057f4 <_printf_float+0xcc>
 80057a0:	2200      	movs	r2, #0
 80057a2:	2300      	movs	r3, #0
 80057a4:	4640      	mov	r0, r8
 80057a6:	4649      	mov	r1, r9
 80057a8:	f7fb f998 	bl	8000adc <__aeabi_dcmplt>
 80057ac:	b110      	cbz	r0, 80057b4 <_printf_float+0x8c>
 80057ae:	232d      	movs	r3, #45	; 0x2d
 80057b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80057b4:	4a93      	ldr	r2, [pc, #588]	; (8005a04 <_printf_float+0x2dc>)
 80057b6:	4b94      	ldr	r3, [pc, #592]	; (8005a08 <_printf_float+0x2e0>)
 80057b8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80057bc:	bf94      	ite	ls
 80057be:	4690      	movls	r8, r2
 80057c0:	4698      	movhi	r8, r3
 80057c2:	2303      	movs	r3, #3
 80057c4:	6123      	str	r3, [r4, #16]
 80057c6:	9b05      	ldr	r3, [sp, #20]
 80057c8:	f023 0304 	bic.w	r3, r3, #4
 80057cc:	6023      	str	r3, [r4, #0]
 80057ce:	f04f 0900 	mov.w	r9, #0
 80057d2:	9700      	str	r7, [sp, #0]
 80057d4:	4633      	mov	r3, r6
 80057d6:	aa0b      	add	r2, sp, #44	; 0x2c
 80057d8:	4621      	mov	r1, r4
 80057da:	4628      	mov	r0, r5
 80057dc:	f000 f9da 	bl	8005b94 <_printf_common>
 80057e0:	3001      	adds	r0, #1
 80057e2:	f040 8090 	bne.w	8005906 <_printf_float+0x1de>
 80057e6:	f04f 30ff 	mov.w	r0, #4294967295
 80057ea:	b00d      	add	sp, #52	; 0x34
 80057ec:	ecbd 8b02 	vpop	{d8}
 80057f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057f4:	4642      	mov	r2, r8
 80057f6:	464b      	mov	r3, r9
 80057f8:	4640      	mov	r0, r8
 80057fa:	4649      	mov	r1, r9
 80057fc:	f7fb f996 	bl	8000b2c <__aeabi_dcmpun>
 8005800:	b140      	cbz	r0, 8005814 <_printf_float+0xec>
 8005802:	464b      	mov	r3, r9
 8005804:	2b00      	cmp	r3, #0
 8005806:	bfbc      	itt	lt
 8005808:	232d      	movlt	r3, #45	; 0x2d
 800580a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800580e:	4a7f      	ldr	r2, [pc, #508]	; (8005a0c <_printf_float+0x2e4>)
 8005810:	4b7f      	ldr	r3, [pc, #508]	; (8005a10 <_printf_float+0x2e8>)
 8005812:	e7d1      	b.n	80057b8 <_printf_float+0x90>
 8005814:	6863      	ldr	r3, [r4, #4]
 8005816:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800581a:	9206      	str	r2, [sp, #24]
 800581c:	1c5a      	adds	r2, r3, #1
 800581e:	d13f      	bne.n	80058a0 <_printf_float+0x178>
 8005820:	2306      	movs	r3, #6
 8005822:	6063      	str	r3, [r4, #4]
 8005824:	9b05      	ldr	r3, [sp, #20]
 8005826:	6861      	ldr	r1, [r4, #4]
 8005828:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800582c:	2300      	movs	r3, #0
 800582e:	9303      	str	r3, [sp, #12]
 8005830:	ab0a      	add	r3, sp, #40	; 0x28
 8005832:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005836:	ab09      	add	r3, sp, #36	; 0x24
 8005838:	ec49 8b10 	vmov	d0, r8, r9
 800583c:	9300      	str	r3, [sp, #0]
 800583e:	6022      	str	r2, [r4, #0]
 8005840:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005844:	4628      	mov	r0, r5
 8005846:	f7ff fece 	bl	80055e6 <__cvt>
 800584a:	9b06      	ldr	r3, [sp, #24]
 800584c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800584e:	2b47      	cmp	r3, #71	; 0x47
 8005850:	4680      	mov	r8, r0
 8005852:	d108      	bne.n	8005866 <_printf_float+0x13e>
 8005854:	1cc8      	adds	r0, r1, #3
 8005856:	db02      	blt.n	800585e <_printf_float+0x136>
 8005858:	6863      	ldr	r3, [r4, #4]
 800585a:	4299      	cmp	r1, r3
 800585c:	dd41      	ble.n	80058e2 <_printf_float+0x1ba>
 800585e:	f1ab 0302 	sub.w	r3, fp, #2
 8005862:	fa5f fb83 	uxtb.w	fp, r3
 8005866:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800586a:	d820      	bhi.n	80058ae <_printf_float+0x186>
 800586c:	3901      	subs	r1, #1
 800586e:	465a      	mov	r2, fp
 8005870:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005874:	9109      	str	r1, [sp, #36]	; 0x24
 8005876:	f7ff ff18 	bl	80056aa <__exponent>
 800587a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800587c:	1813      	adds	r3, r2, r0
 800587e:	2a01      	cmp	r2, #1
 8005880:	4681      	mov	r9, r0
 8005882:	6123      	str	r3, [r4, #16]
 8005884:	dc02      	bgt.n	800588c <_printf_float+0x164>
 8005886:	6822      	ldr	r2, [r4, #0]
 8005888:	07d2      	lsls	r2, r2, #31
 800588a:	d501      	bpl.n	8005890 <_printf_float+0x168>
 800588c:	3301      	adds	r3, #1
 800588e:	6123      	str	r3, [r4, #16]
 8005890:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005894:	2b00      	cmp	r3, #0
 8005896:	d09c      	beq.n	80057d2 <_printf_float+0xaa>
 8005898:	232d      	movs	r3, #45	; 0x2d
 800589a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800589e:	e798      	b.n	80057d2 <_printf_float+0xaa>
 80058a0:	9a06      	ldr	r2, [sp, #24]
 80058a2:	2a47      	cmp	r2, #71	; 0x47
 80058a4:	d1be      	bne.n	8005824 <_printf_float+0xfc>
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d1bc      	bne.n	8005824 <_printf_float+0xfc>
 80058aa:	2301      	movs	r3, #1
 80058ac:	e7b9      	b.n	8005822 <_printf_float+0xfa>
 80058ae:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80058b2:	d118      	bne.n	80058e6 <_printf_float+0x1be>
 80058b4:	2900      	cmp	r1, #0
 80058b6:	6863      	ldr	r3, [r4, #4]
 80058b8:	dd0b      	ble.n	80058d2 <_printf_float+0x1aa>
 80058ba:	6121      	str	r1, [r4, #16]
 80058bc:	b913      	cbnz	r3, 80058c4 <_printf_float+0x19c>
 80058be:	6822      	ldr	r2, [r4, #0]
 80058c0:	07d0      	lsls	r0, r2, #31
 80058c2:	d502      	bpl.n	80058ca <_printf_float+0x1a2>
 80058c4:	3301      	adds	r3, #1
 80058c6:	440b      	add	r3, r1
 80058c8:	6123      	str	r3, [r4, #16]
 80058ca:	65a1      	str	r1, [r4, #88]	; 0x58
 80058cc:	f04f 0900 	mov.w	r9, #0
 80058d0:	e7de      	b.n	8005890 <_printf_float+0x168>
 80058d2:	b913      	cbnz	r3, 80058da <_printf_float+0x1b2>
 80058d4:	6822      	ldr	r2, [r4, #0]
 80058d6:	07d2      	lsls	r2, r2, #31
 80058d8:	d501      	bpl.n	80058de <_printf_float+0x1b6>
 80058da:	3302      	adds	r3, #2
 80058dc:	e7f4      	b.n	80058c8 <_printf_float+0x1a0>
 80058de:	2301      	movs	r3, #1
 80058e0:	e7f2      	b.n	80058c8 <_printf_float+0x1a0>
 80058e2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80058e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058e8:	4299      	cmp	r1, r3
 80058ea:	db05      	blt.n	80058f8 <_printf_float+0x1d0>
 80058ec:	6823      	ldr	r3, [r4, #0]
 80058ee:	6121      	str	r1, [r4, #16]
 80058f0:	07d8      	lsls	r0, r3, #31
 80058f2:	d5ea      	bpl.n	80058ca <_printf_float+0x1a2>
 80058f4:	1c4b      	adds	r3, r1, #1
 80058f6:	e7e7      	b.n	80058c8 <_printf_float+0x1a0>
 80058f8:	2900      	cmp	r1, #0
 80058fa:	bfd4      	ite	le
 80058fc:	f1c1 0202 	rsble	r2, r1, #2
 8005900:	2201      	movgt	r2, #1
 8005902:	4413      	add	r3, r2
 8005904:	e7e0      	b.n	80058c8 <_printf_float+0x1a0>
 8005906:	6823      	ldr	r3, [r4, #0]
 8005908:	055a      	lsls	r2, r3, #21
 800590a:	d407      	bmi.n	800591c <_printf_float+0x1f4>
 800590c:	6923      	ldr	r3, [r4, #16]
 800590e:	4642      	mov	r2, r8
 8005910:	4631      	mov	r1, r6
 8005912:	4628      	mov	r0, r5
 8005914:	47b8      	blx	r7
 8005916:	3001      	adds	r0, #1
 8005918:	d12c      	bne.n	8005974 <_printf_float+0x24c>
 800591a:	e764      	b.n	80057e6 <_printf_float+0xbe>
 800591c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005920:	f240 80e0 	bls.w	8005ae4 <_printf_float+0x3bc>
 8005924:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005928:	2200      	movs	r2, #0
 800592a:	2300      	movs	r3, #0
 800592c:	f7fb f8cc 	bl	8000ac8 <__aeabi_dcmpeq>
 8005930:	2800      	cmp	r0, #0
 8005932:	d034      	beq.n	800599e <_printf_float+0x276>
 8005934:	4a37      	ldr	r2, [pc, #220]	; (8005a14 <_printf_float+0x2ec>)
 8005936:	2301      	movs	r3, #1
 8005938:	4631      	mov	r1, r6
 800593a:	4628      	mov	r0, r5
 800593c:	47b8      	blx	r7
 800593e:	3001      	adds	r0, #1
 8005940:	f43f af51 	beq.w	80057e6 <_printf_float+0xbe>
 8005944:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005948:	429a      	cmp	r2, r3
 800594a:	db02      	blt.n	8005952 <_printf_float+0x22a>
 800594c:	6823      	ldr	r3, [r4, #0]
 800594e:	07d8      	lsls	r0, r3, #31
 8005950:	d510      	bpl.n	8005974 <_printf_float+0x24c>
 8005952:	ee18 3a10 	vmov	r3, s16
 8005956:	4652      	mov	r2, sl
 8005958:	4631      	mov	r1, r6
 800595a:	4628      	mov	r0, r5
 800595c:	47b8      	blx	r7
 800595e:	3001      	adds	r0, #1
 8005960:	f43f af41 	beq.w	80057e6 <_printf_float+0xbe>
 8005964:	f04f 0800 	mov.w	r8, #0
 8005968:	f104 091a 	add.w	r9, r4, #26
 800596c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800596e:	3b01      	subs	r3, #1
 8005970:	4543      	cmp	r3, r8
 8005972:	dc09      	bgt.n	8005988 <_printf_float+0x260>
 8005974:	6823      	ldr	r3, [r4, #0]
 8005976:	079b      	lsls	r3, r3, #30
 8005978:	f100 8107 	bmi.w	8005b8a <_printf_float+0x462>
 800597c:	68e0      	ldr	r0, [r4, #12]
 800597e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005980:	4298      	cmp	r0, r3
 8005982:	bfb8      	it	lt
 8005984:	4618      	movlt	r0, r3
 8005986:	e730      	b.n	80057ea <_printf_float+0xc2>
 8005988:	2301      	movs	r3, #1
 800598a:	464a      	mov	r2, r9
 800598c:	4631      	mov	r1, r6
 800598e:	4628      	mov	r0, r5
 8005990:	47b8      	blx	r7
 8005992:	3001      	adds	r0, #1
 8005994:	f43f af27 	beq.w	80057e6 <_printf_float+0xbe>
 8005998:	f108 0801 	add.w	r8, r8, #1
 800599c:	e7e6      	b.n	800596c <_printf_float+0x244>
 800599e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	dc39      	bgt.n	8005a18 <_printf_float+0x2f0>
 80059a4:	4a1b      	ldr	r2, [pc, #108]	; (8005a14 <_printf_float+0x2ec>)
 80059a6:	2301      	movs	r3, #1
 80059a8:	4631      	mov	r1, r6
 80059aa:	4628      	mov	r0, r5
 80059ac:	47b8      	blx	r7
 80059ae:	3001      	adds	r0, #1
 80059b0:	f43f af19 	beq.w	80057e6 <_printf_float+0xbe>
 80059b4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80059b8:	4313      	orrs	r3, r2
 80059ba:	d102      	bne.n	80059c2 <_printf_float+0x29a>
 80059bc:	6823      	ldr	r3, [r4, #0]
 80059be:	07d9      	lsls	r1, r3, #31
 80059c0:	d5d8      	bpl.n	8005974 <_printf_float+0x24c>
 80059c2:	ee18 3a10 	vmov	r3, s16
 80059c6:	4652      	mov	r2, sl
 80059c8:	4631      	mov	r1, r6
 80059ca:	4628      	mov	r0, r5
 80059cc:	47b8      	blx	r7
 80059ce:	3001      	adds	r0, #1
 80059d0:	f43f af09 	beq.w	80057e6 <_printf_float+0xbe>
 80059d4:	f04f 0900 	mov.w	r9, #0
 80059d8:	f104 0a1a 	add.w	sl, r4, #26
 80059dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059de:	425b      	negs	r3, r3
 80059e0:	454b      	cmp	r3, r9
 80059e2:	dc01      	bgt.n	80059e8 <_printf_float+0x2c0>
 80059e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059e6:	e792      	b.n	800590e <_printf_float+0x1e6>
 80059e8:	2301      	movs	r3, #1
 80059ea:	4652      	mov	r2, sl
 80059ec:	4631      	mov	r1, r6
 80059ee:	4628      	mov	r0, r5
 80059f0:	47b8      	blx	r7
 80059f2:	3001      	adds	r0, #1
 80059f4:	f43f aef7 	beq.w	80057e6 <_printf_float+0xbe>
 80059f8:	f109 0901 	add.w	r9, r9, #1
 80059fc:	e7ee      	b.n	80059dc <_printf_float+0x2b4>
 80059fe:	bf00      	nop
 8005a00:	7fefffff 	.word	0x7fefffff
 8005a04:	080083c8 	.word	0x080083c8
 8005a08:	080083cc 	.word	0x080083cc
 8005a0c:	080083d0 	.word	0x080083d0
 8005a10:	080083d4 	.word	0x080083d4
 8005a14:	080083d8 	.word	0x080083d8
 8005a18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005a1a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	bfa8      	it	ge
 8005a20:	461a      	movge	r2, r3
 8005a22:	2a00      	cmp	r2, #0
 8005a24:	4691      	mov	r9, r2
 8005a26:	dc37      	bgt.n	8005a98 <_printf_float+0x370>
 8005a28:	f04f 0b00 	mov.w	fp, #0
 8005a2c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005a30:	f104 021a 	add.w	r2, r4, #26
 8005a34:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005a36:	9305      	str	r3, [sp, #20]
 8005a38:	eba3 0309 	sub.w	r3, r3, r9
 8005a3c:	455b      	cmp	r3, fp
 8005a3e:	dc33      	bgt.n	8005aa8 <_printf_float+0x380>
 8005a40:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005a44:	429a      	cmp	r2, r3
 8005a46:	db3b      	blt.n	8005ac0 <_printf_float+0x398>
 8005a48:	6823      	ldr	r3, [r4, #0]
 8005a4a:	07da      	lsls	r2, r3, #31
 8005a4c:	d438      	bmi.n	8005ac0 <_printf_float+0x398>
 8005a4e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005a52:	eba2 0903 	sub.w	r9, r2, r3
 8005a56:	9b05      	ldr	r3, [sp, #20]
 8005a58:	1ad2      	subs	r2, r2, r3
 8005a5a:	4591      	cmp	r9, r2
 8005a5c:	bfa8      	it	ge
 8005a5e:	4691      	movge	r9, r2
 8005a60:	f1b9 0f00 	cmp.w	r9, #0
 8005a64:	dc35      	bgt.n	8005ad2 <_printf_float+0x3aa>
 8005a66:	f04f 0800 	mov.w	r8, #0
 8005a6a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005a6e:	f104 0a1a 	add.w	sl, r4, #26
 8005a72:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005a76:	1a9b      	subs	r3, r3, r2
 8005a78:	eba3 0309 	sub.w	r3, r3, r9
 8005a7c:	4543      	cmp	r3, r8
 8005a7e:	f77f af79 	ble.w	8005974 <_printf_float+0x24c>
 8005a82:	2301      	movs	r3, #1
 8005a84:	4652      	mov	r2, sl
 8005a86:	4631      	mov	r1, r6
 8005a88:	4628      	mov	r0, r5
 8005a8a:	47b8      	blx	r7
 8005a8c:	3001      	adds	r0, #1
 8005a8e:	f43f aeaa 	beq.w	80057e6 <_printf_float+0xbe>
 8005a92:	f108 0801 	add.w	r8, r8, #1
 8005a96:	e7ec      	b.n	8005a72 <_printf_float+0x34a>
 8005a98:	4613      	mov	r3, r2
 8005a9a:	4631      	mov	r1, r6
 8005a9c:	4642      	mov	r2, r8
 8005a9e:	4628      	mov	r0, r5
 8005aa0:	47b8      	blx	r7
 8005aa2:	3001      	adds	r0, #1
 8005aa4:	d1c0      	bne.n	8005a28 <_printf_float+0x300>
 8005aa6:	e69e      	b.n	80057e6 <_printf_float+0xbe>
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	4631      	mov	r1, r6
 8005aac:	4628      	mov	r0, r5
 8005aae:	9205      	str	r2, [sp, #20]
 8005ab0:	47b8      	blx	r7
 8005ab2:	3001      	adds	r0, #1
 8005ab4:	f43f ae97 	beq.w	80057e6 <_printf_float+0xbe>
 8005ab8:	9a05      	ldr	r2, [sp, #20]
 8005aba:	f10b 0b01 	add.w	fp, fp, #1
 8005abe:	e7b9      	b.n	8005a34 <_printf_float+0x30c>
 8005ac0:	ee18 3a10 	vmov	r3, s16
 8005ac4:	4652      	mov	r2, sl
 8005ac6:	4631      	mov	r1, r6
 8005ac8:	4628      	mov	r0, r5
 8005aca:	47b8      	blx	r7
 8005acc:	3001      	adds	r0, #1
 8005ace:	d1be      	bne.n	8005a4e <_printf_float+0x326>
 8005ad0:	e689      	b.n	80057e6 <_printf_float+0xbe>
 8005ad2:	9a05      	ldr	r2, [sp, #20]
 8005ad4:	464b      	mov	r3, r9
 8005ad6:	4442      	add	r2, r8
 8005ad8:	4631      	mov	r1, r6
 8005ada:	4628      	mov	r0, r5
 8005adc:	47b8      	blx	r7
 8005ade:	3001      	adds	r0, #1
 8005ae0:	d1c1      	bne.n	8005a66 <_printf_float+0x33e>
 8005ae2:	e680      	b.n	80057e6 <_printf_float+0xbe>
 8005ae4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005ae6:	2a01      	cmp	r2, #1
 8005ae8:	dc01      	bgt.n	8005aee <_printf_float+0x3c6>
 8005aea:	07db      	lsls	r3, r3, #31
 8005aec:	d53a      	bpl.n	8005b64 <_printf_float+0x43c>
 8005aee:	2301      	movs	r3, #1
 8005af0:	4642      	mov	r2, r8
 8005af2:	4631      	mov	r1, r6
 8005af4:	4628      	mov	r0, r5
 8005af6:	47b8      	blx	r7
 8005af8:	3001      	adds	r0, #1
 8005afa:	f43f ae74 	beq.w	80057e6 <_printf_float+0xbe>
 8005afe:	ee18 3a10 	vmov	r3, s16
 8005b02:	4652      	mov	r2, sl
 8005b04:	4631      	mov	r1, r6
 8005b06:	4628      	mov	r0, r5
 8005b08:	47b8      	blx	r7
 8005b0a:	3001      	adds	r0, #1
 8005b0c:	f43f ae6b 	beq.w	80057e6 <_printf_float+0xbe>
 8005b10:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005b14:	2200      	movs	r2, #0
 8005b16:	2300      	movs	r3, #0
 8005b18:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8005b1c:	f7fa ffd4 	bl	8000ac8 <__aeabi_dcmpeq>
 8005b20:	b9d8      	cbnz	r0, 8005b5a <_printf_float+0x432>
 8005b22:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005b26:	f108 0201 	add.w	r2, r8, #1
 8005b2a:	4631      	mov	r1, r6
 8005b2c:	4628      	mov	r0, r5
 8005b2e:	47b8      	blx	r7
 8005b30:	3001      	adds	r0, #1
 8005b32:	d10e      	bne.n	8005b52 <_printf_float+0x42a>
 8005b34:	e657      	b.n	80057e6 <_printf_float+0xbe>
 8005b36:	2301      	movs	r3, #1
 8005b38:	4652      	mov	r2, sl
 8005b3a:	4631      	mov	r1, r6
 8005b3c:	4628      	mov	r0, r5
 8005b3e:	47b8      	blx	r7
 8005b40:	3001      	adds	r0, #1
 8005b42:	f43f ae50 	beq.w	80057e6 <_printf_float+0xbe>
 8005b46:	f108 0801 	add.w	r8, r8, #1
 8005b4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b4c:	3b01      	subs	r3, #1
 8005b4e:	4543      	cmp	r3, r8
 8005b50:	dcf1      	bgt.n	8005b36 <_printf_float+0x40e>
 8005b52:	464b      	mov	r3, r9
 8005b54:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005b58:	e6da      	b.n	8005910 <_printf_float+0x1e8>
 8005b5a:	f04f 0800 	mov.w	r8, #0
 8005b5e:	f104 0a1a 	add.w	sl, r4, #26
 8005b62:	e7f2      	b.n	8005b4a <_printf_float+0x422>
 8005b64:	2301      	movs	r3, #1
 8005b66:	4642      	mov	r2, r8
 8005b68:	e7df      	b.n	8005b2a <_printf_float+0x402>
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	464a      	mov	r2, r9
 8005b6e:	4631      	mov	r1, r6
 8005b70:	4628      	mov	r0, r5
 8005b72:	47b8      	blx	r7
 8005b74:	3001      	adds	r0, #1
 8005b76:	f43f ae36 	beq.w	80057e6 <_printf_float+0xbe>
 8005b7a:	f108 0801 	add.w	r8, r8, #1
 8005b7e:	68e3      	ldr	r3, [r4, #12]
 8005b80:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005b82:	1a5b      	subs	r3, r3, r1
 8005b84:	4543      	cmp	r3, r8
 8005b86:	dcf0      	bgt.n	8005b6a <_printf_float+0x442>
 8005b88:	e6f8      	b.n	800597c <_printf_float+0x254>
 8005b8a:	f04f 0800 	mov.w	r8, #0
 8005b8e:	f104 0919 	add.w	r9, r4, #25
 8005b92:	e7f4      	b.n	8005b7e <_printf_float+0x456>

08005b94 <_printf_common>:
 8005b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b98:	4616      	mov	r6, r2
 8005b9a:	4699      	mov	r9, r3
 8005b9c:	688a      	ldr	r2, [r1, #8]
 8005b9e:	690b      	ldr	r3, [r1, #16]
 8005ba0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	bfb8      	it	lt
 8005ba8:	4613      	movlt	r3, r2
 8005baa:	6033      	str	r3, [r6, #0]
 8005bac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005bb0:	4607      	mov	r7, r0
 8005bb2:	460c      	mov	r4, r1
 8005bb4:	b10a      	cbz	r2, 8005bba <_printf_common+0x26>
 8005bb6:	3301      	adds	r3, #1
 8005bb8:	6033      	str	r3, [r6, #0]
 8005bba:	6823      	ldr	r3, [r4, #0]
 8005bbc:	0699      	lsls	r1, r3, #26
 8005bbe:	bf42      	ittt	mi
 8005bc0:	6833      	ldrmi	r3, [r6, #0]
 8005bc2:	3302      	addmi	r3, #2
 8005bc4:	6033      	strmi	r3, [r6, #0]
 8005bc6:	6825      	ldr	r5, [r4, #0]
 8005bc8:	f015 0506 	ands.w	r5, r5, #6
 8005bcc:	d106      	bne.n	8005bdc <_printf_common+0x48>
 8005bce:	f104 0a19 	add.w	sl, r4, #25
 8005bd2:	68e3      	ldr	r3, [r4, #12]
 8005bd4:	6832      	ldr	r2, [r6, #0]
 8005bd6:	1a9b      	subs	r3, r3, r2
 8005bd8:	42ab      	cmp	r3, r5
 8005bda:	dc26      	bgt.n	8005c2a <_printf_common+0x96>
 8005bdc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005be0:	1e13      	subs	r3, r2, #0
 8005be2:	6822      	ldr	r2, [r4, #0]
 8005be4:	bf18      	it	ne
 8005be6:	2301      	movne	r3, #1
 8005be8:	0692      	lsls	r2, r2, #26
 8005bea:	d42b      	bmi.n	8005c44 <_printf_common+0xb0>
 8005bec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005bf0:	4649      	mov	r1, r9
 8005bf2:	4638      	mov	r0, r7
 8005bf4:	47c0      	blx	r8
 8005bf6:	3001      	adds	r0, #1
 8005bf8:	d01e      	beq.n	8005c38 <_printf_common+0xa4>
 8005bfa:	6823      	ldr	r3, [r4, #0]
 8005bfc:	6922      	ldr	r2, [r4, #16]
 8005bfe:	f003 0306 	and.w	r3, r3, #6
 8005c02:	2b04      	cmp	r3, #4
 8005c04:	bf02      	ittt	eq
 8005c06:	68e5      	ldreq	r5, [r4, #12]
 8005c08:	6833      	ldreq	r3, [r6, #0]
 8005c0a:	1aed      	subeq	r5, r5, r3
 8005c0c:	68a3      	ldr	r3, [r4, #8]
 8005c0e:	bf0c      	ite	eq
 8005c10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c14:	2500      	movne	r5, #0
 8005c16:	4293      	cmp	r3, r2
 8005c18:	bfc4      	itt	gt
 8005c1a:	1a9b      	subgt	r3, r3, r2
 8005c1c:	18ed      	addgt	r5, r5, r3
 8005c1e:	2600      	movs	r6, #0
 8005c20:	341a      	adds	r4, #26
 8005c22:	42b5      	cmp	r5, r6
 8005c24:	d11a      	bne.n	8005c5c <_printf_common+0xc8>
 8005c26:	2000      	movs	r0, #0
 8005c28:	e008      	b.n	8005c3c <_printf_common+0xa8>
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	4652      	mov	r2, sl
 8005c2e:	4649      	mov	r1, r9
 8005c30:	4638      	mov	r0, r7
 8005c32:	47c0      	blx	r8
 8005c34:	3001      	adds	r0, #1
 8005c36:	d103      	bne.n	8005c40 <_printf_common+0xac>
 8005c38:	f04f 30ff 	mov.w	r0, #4294967295
 8005c3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c40:	3501      	adds	r5, #1
 8005c42:	e7c6      	b.n	8005bd2 <_printf_common+0x3e>
 8005c44:	18e1      	adds	r1, r4, r3
 8005c46:	1c5a      	adds	r2, r3, #1
 8005c48:	2030      	movs	r0, #48	; 0x30
 8005c4a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005c4e:	4422      	add	r2, r4
 8005c50:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005c54:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005c58:	3302      	adds	r3, #2
 8005c5a:	e7c7      	b.n	8005bec <_printf_common+0x58>
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	4622      	mov	r2, r4
 8005c60:	4649      	mov	r1, r9
 8005c62:	4638      	mov	r0, r7
 8005c64:	47c0      	blx	r8
 8005c66:	3001      	adds	r0, #1
 8005c68:	d0e6      	beq.n	8005c38 <_printf_common+0xa4>
 8005c6a:	3601      	adds	r6, #1
 8005c6c:	e7d9      	b.n	8005c22 <_printf_common+0x8e>
	...

08005c70 <_printf_i>:
 8005c70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c74:	7e0f      	ldrb	r7, [r1, #24]
 8005c76:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005c78:	2f78      	cmp	r7, #120	; 0x78
 8005c7a:	4691      	mov	r9, r2
 8005c7c:	4680      	mov	r8, r0
 8005c7e:	460c      	mov	r4, r1
 8005c80:	469a      	mov	sl, r3
 8005c82:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005c86:	d807      	bhi.n	8005c98 <_printf_i+0x28>
 8005c88:	2f62      	cmp	r7, #98	; 0x62
 8005c8a:	d80a      	bhi.n	8005ca2 <_printf_i+0x32>
 8005c8c:	2f00      	cmp	r7, #0
 8005c8e:	f000 80d4 	beq.w	8005e3a <_printf_i+0x1ca>
 8005c92:	2f58      	cmp	r7, #88	; 0x58
 8005c94:	f000 80c0 	beq.w	8005e18 <_printf_i+0x1a8>
 8005c98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c9c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005ca0:	e03a      	b.n	8005d18 <_printf_i+0xa8>
 8005ca2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005ca6:	2b15      	cmp	r3, #21
 8005ca8:	d8f6      	bhi.n	8005c98 <_printf_i+0x28>
 8005caa:	a101      	add	r1, pc, #4	; (adr r1, 8005cb0 <_printf_i+0x40>)
 8005cac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005cb0:	08005d09 	.word	0x08005d09
 8005cb4:	08005d1d 	.word	0x08005d1d
 8005cb8:	08005c99 	.word	0x08005c99
 8005cbc:	08005c99 	.word	0x08005c99
 8005cc0:	08005c99 	.word	0x08005c99
 8005cc4:	08005c99 	.word	0x08005c99
 8005cc8:	08005d1d 	.word	0x08005d1d
 8005ccc:	08005c99 	.word	0x08005c99
 8005cd0:	08005c99 	.word	0x08005c99
 8005cd4:	08005c99 	.word	0x08005c99
 8005cd8:	08005c99 	.word	0x08005c99
 8005cdc:	08005e21 	.word	0x08005e21
 8005ce0:	08005d49 	.word	0x08005d49
 8005ce4:	08005ddb 	.word	0x08005ddb
 8005ce8:	08005c99 	.word	0x08005c99
 8005cec:	08005c99 	.word	0x08005c99
 8005cf0:	08005e43 	.word	0x08005e43
 8005cf4:	08005c99 	.word	0x08005c99
 8005cf8:	08005d49 	.word	0x08005d49
 8005cfc:	08005c99 	.word	0x08005c99
 8005d00:	08005c99 	.word	0x08005c99
 8005d04:	08005de3 	.word	0x08005de3
 8005d08:	682b      	ldr	r3, [r5, #0]
 8005d0a:	1d1a      	adds	r2, r3, #4
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	602a      	str	r2, [r5, #0]
 8005d10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d18:	2301      	movs	r3, #1
 8005d1a:	e09f      	b.n	8005e5c <_printf_i+0x1ec>
 8005d1c:	6820      	ldr	r0, [r4, #0]
 8005d1e:	682b      	ldr	r3, [r5, #0]
 8005d20:	0607      	lsls	r7, r0, #24
 8005d22:	f103 0104 	add.w	r1, r3, #4
 8005d26:	6029      	str	r1, [r5, #0]
 8005d28:	d501      	bpl.n	8005d2e <_printf_i+0xbe>
 8005d2a:	681e      	ldr	r6, [r3, #0]
 8005d2c:	e003      	b.n	8005d36 <_printf_i+0xc6>
 8005d2e:	0646      	lsls	r6, r0, #25
 8005d30:	d5fb      	bpl.n	8005d2a <_printf_i+0xba>
 8005d32:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005d36:	2e00      	cmp	r6, #0
 8005d38:	da03      	bge.n	8005d42 <_printf_i+0xd2>
 8005d3a:	232d      	movs	r3, #45	; 0x2d
 8005d3c:	4276      	negs	r6, r6
 8005d3e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d42:	485a      	ldr	r0, [pc, #360]	; (8005eac <_printf_i+0x23c>)
 8005d44:	230a      	movs	r3, #10
 8005d46:	e012      	b.n	8005d6e <_printf_i+0xfe>
 8005d48:	682b      	ldr	r3, [r5, #0]
 8005d4a:	6820      	ldr	r0, [r4, #0]
 8005d4c:	1d19      	adds	r1, r3, #4
 8005d4e:	6029      	str	r1, [r5, #0]
 8005d50:	0605      	lsls	r5, r0, #24
 8005d52:	d501      	bpl.n	8005d58 <_printf_i+0xe8>
 8005d54:	681e      	ldr	r6, [r3, #0]
 8005d56:	e002      	b.n	8005d5e <_printf_i+0xee>
 8005d58:	0641      	lsls	r1, r0, #25
 8005d5a:	d5fb      	bpl.n	8005d54 <_printf_i+0xe4>
 8005d5c:	881e      	ldrh	r6, [r3, #0]
 8005d5e:	4853      	ldr	r0, [pc, #332]	; (8005eac <_printf_i+0x23c>)
 8005d60:	2f6f      	cmp	r7, #111	; 0x6f
 8005d62:	bf0c      	ite	eq
 8005d64:	2308      	moveq	r3, #8
 8005d66:	230a      	movne	r3, #10
 8005d68:	2100      	movs	r1, #0
 8005d6a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005d6e:	6865      	ldr	r5, [r4, #4]
 8005d70:	60a5      	str	r5, [r4, #8]
 8005d72:	2d00      	cmp	r5, #0
 8005d74:	bfa2      	ittt	ge
 8005d76:	6821      	ldrge	r1, [r4, #0]
 8005d78:	f021 0104 	bicge.w	r1, r1, #4
 8005d7c:	6021      	strge	r1, [r4, #0]
 8005d7e:	b90e      	cbnz	r6, 8005d84 <_printf_i+0x114>
 8005d80:	2d00      	cmp	r5, #0
 8005d82:	d04b      	beq.n	8005e1c <_printf_i+0x1ac>
 8005d84:	4615      	mov	r5, r2
 8005d86:	fbb6 f1f3 	udiv	r1, r6, r3
 8005d8a:	fb03 6711 	mls	r7, r3, r1, r6
 8005d8e:	5dc7      	ldrb	r7, [r0, r7]
 8005d90:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005d94:	4637      	mov	r7, r6
 8005d96:	42bb      	cmp	r3, r7
 8005d98:	460e      	mov	r6, r1
 8005d9a:	d9f4      	bls.n	8005d86 <_printf_i+0x116>
 8005d9c:	2b08      	cmp	r3, #8
 8005d9e:	d10b      	bne.n	8005db8 <_printf_i+0x148>
 8005da0:	6823      	ldr	r3, [r4, #0]
 8005da2:	07de      	lsls	r6, r3, #31
 8005da4:	d508      	bpl.n	8005db8 <_printf_i+0x148>
 8005da6:	6923      	ldr	r3, [r4, #16]
 8005da8:	6861      	ldr	r1, [r4, #4]
 8005daa:	4299      	cmp	r1, r3
 8005dac:	bfde      	ittt	le
 8005dae:	2330      	movle	r3, #48	; 0x30
 8005db0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005db4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005db8:	1b52      	subs	r2, r2, r5
 8005dba:	6122      	str	r2, [r4, #16]
 8005dbc:	f8cd a000 	str.w	sl, [sp]
 8005dc0:	464b      	mov	r3, r9
 8005dc2:	aa03      	add	r2, sp, #12
 8005dc4:	4621      	mov	r1, r4
 8005dc6:	4640      	mov	r0, r8
 8005dc8:	f7ff fee4 	bl	8005b94 <_printf_common>
 8005dcc:	3001      	adds	r0, #1
 8005dce:	d14a      	bne.n	8005e66 <_printf_i+0x1f6>
 8005dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8005dd4:	b004      	add	sp, #16
 8005dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dda:	6823      	ldr	r3, [r4, #0]
 8005ddc:	f043 0320 	orr.w	r3, r3, #32
 8005de0:	6023      	str	r3, [r4, #0]
 8005de2:	4833      	ldr	r0, [pc, #204]	; (8005eb0 <_printf_i+0x240>)
 8005de4:	2778      	movs	r7, #120	; 0x78
 8005de6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005dea:	6823      	ldr	r3, [r4, #0]
 8005dec:	6829      	ldr	r1, [r5, #0]
 8005dee:	061f      	lsls	r7, r3, #24
 8005df0:	f851 6b04 	ldr.w	r6, [r1], #4
 8005df4:	d402      	bmi.n	8005dfc <_printf_i+0x18c>
 8005df6:	065f      	lsls	r7, r3, #25
 8005df8:	bf48      	it	mi
 8005dfa:	b2b6      	uxthmi	r6, r6
 8005dfc:	07df      	lsls	r7, r3, #31
 8005dfe:	bf48      	it	mi
 8005e00:	f043 0320 	orrmi.w	r3, r3, #32
 8005e04:	6029      	str	r1, [r5, #0]
 8005e06:	bf48      	it	mi
 8005e08:	6023      	strmi	r3, [r4, #0]
 8005e0a:	b91e      	cbnz	r6, 8005e14 <_printf_i+0x1a4>
 8005e0c:	6823      	ldr	r3, [r4, #0]
 8005e0e:	f023 0320 	bic.w	r3, r3, #32
 8005e12:	6023      	str	r3, [r4, #0]
 8005e14:	2310      	movs	r3, #16
 8005e16:	e7a7      	b.n	8005d68 <_printf_i+0xf8>
 8005e18:	4824      	ldr	r0, [pc, #144]	; (8005eac <_printf_i+0x23c>)
 8005e1a:	e7e4      	b.n	8005de6 <_printf_i+0x176>
 8005e1c:	4615      	mov	r5, r2
 8005e1e:	e7bd      	b.n	8005d9c <_printf_i+0x12c>
 8005e20:	682b      	ldr	r3, [r5, #0]
 8005e22:	6826      	ldr	r6, [r4, #0]
 8005e24:	6961      	ldr	r1, [r4, #20]
 8005e26:	1d18      	adds	r0, r3, #4
 8005e28:	6028      	str	r0, [r5, #0]
 8005e2a:	0635      	lsls	r5, r6, #24
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	d501      	bpl.n	8005e34 <_printf_i+0x1c4>
 8005e30:	6019      	str	r1, [r3, #0]
 8005e32:	e002      	b.n	8005e3a <_printf_i+0x1ca>
 8005e34:	0670      	lsls	r0, r6, #25
 8005e36:	d5fb      	bpl.n	8005e30 <_printf_i+0x1c0>
 8005e38:	8019      	strh	r1, [r3, #0]
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	6123      	str	r3, [r4, #16]
 8005e3e:	4615      	mov	r5, r2
 8005e40:	e7bc      	b.n	8005dbc <_printf_i+0x14c>
 8005e42:	682b      	ldr	r3, [r5, #0]
 8005e44:	1d1a      	adds	r2, r3, #4
 8005e46:	602a      	str	r2, [r5, #0]
 8005e48:	681d      	ldr	r5, [r3, #0]
 8005e4a:	6862      	ldr	r2, [r4, #4]
 8005e4c:	2100      	movs	r1, #0
 8005e4e:	4628      	mov	r0, r5
 8005e50:	f7fa f9be 	bl	80001d0 <memchr>
 8005e54:	b108      	cbz	r0, 8005e5a <_printf_i+0x1ea>
 8005e56:	1b40      	subs	r0, r0, r5
 8005e58:	6060      	str	r0, [r4, #4]
 8005e5a:	6863      	ldr	r3, [r4, #4]
 8005e5c:	6123      	str	r3, [r4, #16]
 8005e5e:	2300      	movs	r3, #0
 8005e60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e64:	e7aa      	b.n	8005dbc <_printf_i+0x14c>
 8005e66:	6923      	ldr	r3, [r4, #16]
 8005e68:	462a      	mov	r2, r5
 8005e6a:	4649      	mov	r1, r9
 8005e6c:	4640      	mov	r0, r8
 8005e6e:	47d0      	blx	sl
 8005e70:	3001      	adds	r0, #1
 8005e72:	d0ad      	beq.n	8005dd0 <_printf_i+0x160>
 8005e74:	6823      	ldr	r3, [r4, #0]
 8005e76:	079b      	lsls	r3, r3, #30
 8005e78:	d413      	bmi.n	8005ea2 <_printf_i+0x232>
 8005e7a:	68e0      	ldr	r0, [r4, #12]
 8005e7c:	9b03      	ldr	r3, [sp, #12]
 8005e7e:	4298      	cmp	r0, r3
 8005e80:	bfb8      	it	lt
 8005e82:	4618      	movlt	r0, r3
 8005e84:	e7a6      	b.n	8005dd4 <_printf_i+0x164>
 8005e86:	2301      	movs	r3, #1
 8005e88:	4632      	mov	r2, r6
 8005e8a:	4649      	mov	r1, r9
 8005e8c:	4640      	mov	r0, r8
 8005e8e:	47d0      	blx	sl
 8005e90:	3001      	adds	r0, #1
 8005e92:	d09d      	beq.n	8005dd0 <_printf_i+0x160>
 8005e94:	3501      	adds	r5, #1
 8005e96:	68e3      	ldr	r3, [r4, #12]
 8005e98:	9903      	ldr	r1, [sp, #12]
 8005e9a:	1a5b      	subs	r3, r3, r1
 8005e9c:	42ab      	cmp	r3, r5
 8005e9e:	dcf2      	bgt.n	8005e86 <_printf_i+0x216>
 8005ea0:	e7eb      	b.n	8005e7a <_printf_i+0x20a>
 8005ea2:	2500      	movs	r5, #0
 8005ea4:	f104 0619 	add.w	r6, r4, #25
 8005ea8:	e7f5      	b.n	8005e96 <_printf_i+0x226>
 8005eaa:	bf00      	nop
 8005eac:	080083da 	.word	0x080083da
 8005eb0:	080083eb 	.word	0x080083eb

08005eb4 <std>:
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	b510      	push	{r4, lr}
 8005eb8:	4604      	mov	r4, r0
 8005eba:	e9c0 3300 	strd	r3, r3, [r0]
 8005ebe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005ec2:	6083      	str	r3, [r0, #8]
 8005ec4:	8181      	strh	r1, [r0, #12]
 8005ec6:	6643      	str	r3, [r0, #100]	; 0x64
 8005ec8:	81c2      	strh	r2, [r0, #14]
 8005eca:	6183      	str	r3, [r0, #24]
 8005ecc:	4619      	mov	r1, r3
 8005ece:	2208      	movs	r2, #8
 8005ed0:	305c      	adds	r0, #92	; 0x5c
 8005ed2:	f000 f928 	bl	8006126 <memset>
 8005ed6:	4b0d      	ldr	r3, [pc, #52]	; (8005f0c <std+0x58>)
 8005ed8:	6263      	str	r3, [r4, #36]	; 0x24
 8005eda:	4b0d      	ldr	r3, [pc, #52]	; (8005f10 <std+0x5c>)
 8005edc:	62a3      	str	r3, [r4, #40]	; 0x28
 8005ede:	4b0d      	ldr	r3, [pc, #52]	; (8005f14 <std+0x60>)
 8005ee0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005ee2:	4b0d      	ldr	r3, [pc, #52]	; (8005f18 <std+0x64>)
 8005ee4:	6323      	str	r3, [r4, #48]	; 0x30
 8005ee6:	4b0d      	ldr	r3, [pc, #52]	; (8005f1c <std+0x68>)
 8005ee8:	6224      	str	r4, [r4, #32]
 8005eea:	429c      	cmp	r4, r3
 8005eec:	d006      	beq.n	8005efc <std+0x48>
 8005eee:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005ef2:	4294      	cmp	r4, r2
 8005ef4:	d002      	beq.n	8005efc <std+0x48>
 8005ef6:	33d0      	adds	r3, #208	; 0xd0
 8005ef8:	429c      	cmp	r4, r3
 8005efa:	d105      	bne.n	8005f08 <std+0x54>
 8005efc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005f00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f04:	f000 b98c 	b.w	8006220 <__retarget_lock_init_recursive>
 8005f08:	bd10      	pop	{r4, pc}
 8005f0a:	bf00      	nop
 8005f0c:	080060a1 	.word	0x080060a1
 8005f10:	080060c3 	.word	0x080060c3
 8005f14:	080060fb 	.word	0x080060fb
 8005f18:	0800611f 	.word	0x0800611f
 8005f1c:	2000037c 	.word	0x2000037c

08005f20 <stdio_exit_handler>:
 8005f20:	4a02      	ldr	r2, [pc, #8]	; (8005f2c <stdio_exit_handler+0xc>)
 8005f22:	4903      	ldr	r1, [pc, #12]	; (8005f30 <stdio_exit_handler+0x10>)
 8005f24:	4803      	ldr	r0, [pc, #12]	; (8005f34 <stdio_exit_handler+0x14>)
 8005f26:	f000 b869 	b.w	8005ffc <_fwalk_sglue>
 8005f2a:	bf00      	nop
 8005f2c:	2000000c 	.word	0x2000000c
 8005f30:	08007bd1 	.word	0x08007bd1
 8005f34:	20000018 	.word	0x20000018

08005f38 <cleanup_stdio>:
 8005f38:	6841      	ldr	r1, [r0, #4]
 8005f3a:	4b0c      	ldr	r3, [pc, #48]	; (8005f6c <cleanup_stdio+0x34>)
 8005f3c:	4299      	cmp	r1, r3
 8005f3e:	b510      	push	{r4, lr}
 8005f40:	4604      	mov	r4, r0
 8005f42:	d001      	beq.n	8005f48 <cleanup_stdio+0x10>
 8005f44:	f001 fe44 	bl	8007bd0 <_fflush_r>
 8005f48:	68a1      	ldr	r1, [r4, #8]
 8005f4a:	4b09      	ldr	r3, [pc, #36]	; (8005f70 <cleanup_stdio+0x38>)
 8005f4c:	4299      	cmp	r1, r3
 8005f4e:	d002      	beq.n	8005f56 <cleanup_stdio+0x1e>
 8005f50:	4620      	mov	r0, r4
 8005f52:	f001 fe3d 	bl	8007bd0 <_fflush_r>
 8005f56:	68e1      	ldr	r1, [r4, #12]
 8005f58:	4b06      	ldr	r3, [pc, #24]	; (8005f74 <cleanup_stdio+0x3c>)
 8005f5a:	4299      	cmp	r1, r3
 8005f5c:	d004      	beq.n	8005f68 <cleanup_stdio+0x30>
 8005f5e:	4620      	mov	r0, r4
 8005f60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f64:	f001 be34 	b.w	8007bd0 <_fflush_r>
 8005f68:	bd10      	pop	{r4, pc}
 8005f6a:	bf00      	nop
 8005f6c:	2000037c 	.word	0x2000037c
 8005f70:	200003e4 	.word	0x200003e4
 8005f74:	2000044c 	.word	0x2000044c

08005f78 <global_stdio_init.part.0>:
 8005f78:	b510      	push	{r4, lr}
 8005f7a:	4b0b      	ldr	r3, [pc, #44]	; (8005fa8 <global_stdio_init.part.0+0x30>)
 8005f7c:	4c0b      	ldr	r4, [pc, #44]	; (8005fac <global_stdio_init.part.0+0x34>)
 8005f7e:	4a0c      	ldr	r2, [pc, #48]	; (8005fb0 <global_stdio_init.part.0+0x38>)
 8005f80:	601a      	str	r2, [r3, #0]
 8005f82:	4620      	mov	r0, r4
 8005f84:	2200      	movs	r2, #0
 8005f86:	2104      	movs	r1, #4
 8005f88:	f7ff ff94 	bl	8005eb4 <std>
 8005f8c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005f90:	2201      	movs	r2, #1
 8005f92:	2109      	movs	r1, #9
 8005f94:	f7ff ff8e 	bl	8005eb4 <std>
 8005f98:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005f9c:	2202      	movs	r2, #2
 8005f9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005fa2:	2112      	movs	r1, #18
 8005fa4:	f7ff bf86 	b.w	8005eb4 <std>
 8005fa8:	200004b4 	.word	0x200004b4
 8005fac:	2000037c 	.word	0x2000037c
 8005fb0:	08005f21 	.word	0x08005f21

08005fb4 <__sfp_lock_acquire>:
 8005fb4:	4801      	ldr	r0, [pc, #4]	; (8005fbc <__sfp_lock_acquire+0x8>)
 8005fb6:	f000 b934 	b.w	8006222 <__retarget_lock_acquire_recursive>
 8005fba:	bf00      	nop
 8005fbc:	200004bd 	.word	0x200004bd

08005fc0 <__sfp_lock_release>:
 8005fc0:	4801      	ldr	r0, [pc, #4]	; (8005fc8 <__sfp_lock_release+0x8>)
 8005fc2:	f000 b92f 	b.w	8006224 <__retarget_lock_release_recursive>
 8005fc6:	bf00      	nop
 8005fc8:	200004bd 	.word	0x200004bd

08005fcc <__sinit>:
 8005fcc:	b510      	push	{r4, lr}
 8005fce:	4604      	mov	r4, r0
 8005fd0:	f7ff fff0 	bl	8005fb4 <__sfp_lock_acquire>
 8005fd4:	6a23      	ldr	r3, [r4, #32]
 8005fd6:	b11b      	cbz	r3, 8005fe0 <__sinit+0x14>
 8005fd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005fdc:	f7ff bff0 	b.w	8005fc0 <__sfp_lock_release>
 8005fe0:	4b04      	ldr	r3, [pc, #16]	; (8005ff4 <__sinit+0x28>)
 8005fe2:	6223      	str	r3, [r4, #32]
 8005fe4:	4b04      	ldr	r3, [pc, #16]	; (8005ff8 <__sinit+0x2c>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d1f5      	bne.n	8005fd8 <__sinit+0xc>
 8005fec:	f7ff ffc4 	bl	8005f78 <global_stdio_init.part.0>
 8005ff0:	e7f2      	b.n	8005fd8 <__sinit+0xc>
 8005ff2:	bf00      	nop
 8005ff4:	08005f39 	.word	0x08005f39
 8005ff8:	200004b4 	.word	0x200004b4

08005ffc <_fwalk_sglue>:
 8005ffc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006000:	4607      	mov	r7, r0
 8006002:	4688      	mov	r8, r1
 8006004:	4614      	mov	r4, r2
 8006006:	2600      	movs	r6, #0
 8006008:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800600c:	f1b9 0901 	subs.w	r9, r9, #1
 8006010:	d505      	bpl.n	800601e <_fwalk_sglue+0x22>
 8006012:	6824      	ldr	r4, [r4, #0]
 8006014:	2c00      	cmp	r4, #0
 8006016:	d1f7      	bne.n	8006008 <_fwalk_sglue+0xc>
 8006018:	4630      	mov	r0, r6
 800601a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800601e:	89ab      	ldrh	r3, [r5, #12]
 8006020:	2b01      	cmp	r3, #1
 8006022:	d907      	bls.n	8006034 <_fwalk_sglue+0x38>
 8006024:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006028:	3301      	adds	r3, #1
 800602a:	d003      	beq.n	8006034 <_fwalk_sglue+0x38>
 800602c:	4629      	mov	r1, r5
 800602e:	4638      	mov	r0, r7
 8006030:	47c0      	blx	r8
 8006032:	4306      	orrs	r6, r0
 8006034:	3568      	adds	r5, #104	; 0x68
 8006036:	e7e9      	b.n	800600c <_fwalk_sglue+0x10>

08006038 <sniprintf>:
 8006038:	b40c      	push	{r2, r3}
 800603a:	b530      	push	{r4, r5, lr}
 800603c:	4b17      	ldr	r3, [pc, #92]	; (800609c <sniprintf+0x64>)
 800603e:	1e0c      	subs	r4, r1, #0
 8006040:	681d      	ldr	r5, [r3, #0]
 8006042:	b09d      	sub	sp, #116	; 0x74
 8006044:	da08      	bge.n	8006058 <sniprintf+0x20>
 8006046:	238b      	movs	r3, #139	; 0x8b
 8006048:	602b      	str	r3, [r5, #0]
 800604a:	f04f 30ff 	mov.w	r0, #4294967295
 800604e:	b01d      	add	sp, #116	; 0x74
 8006050:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006054:	b002      	add	sp, #8
 8006056:	4770      	bx	lr
 8006058:	f44f 7302 	mov.w	r3, #520	; 0x208
 800605c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006060:	bf14      	ite	ne
 8006062:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006066:	4623      	moveq	r3, r4
 8006068:	9304      	str	r3, [sp, #16]
 800606a:	9307      	str	r3, [sp, #28]
 800606c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006070:	9002      	str	r0, [sp, #8]
 8006072:	9006      	str	r0, [sp, #24]
 8006074:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006078:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800607a:	ab21      	add	r3, sp, #132	; 0x84
 800607c:	a902      	add	r1, sp, #8
 800607e:	4628      	mov	r0, r5
 8006080:	9301      	str	r3, [sp, #4]
 8006082:	f001 fc21 	bl	80078c8 <_svfiprintf_r>
 8006086:	1c43      	adds	r3, r0, #1
 8006088:	bfbc      	itt	lt
 800608a:	238b      	movlt	r3, #139	; 0x8b
 800608c:	602b      	strlt	r3, [r5, #0]
 800608e:	2c00      	cmp	r4, #0
 8006090:	d0dd      	beq.n	800604e <sniprintf+0x16>
 8006092:	9b02      	ldr	r3, [sp, #8]
 8006094:	2200      	movs	r2, #0
 8006096:	701a      	strb	r2, [r3, #0]
 8006098:	e7d9      	b.n	800604e <sniprintf+0x16>
 800609a:	bf00      	nop
 800609c:	20000064 	.word	0x20000064

080060a0 <__sread>:
 80060a0:	b510      	push	{r4, lr}
 80060a2:	460c      	mov	r4, r1
 80060a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060a8:	f000 f86c 	bl	8006184 <_read_r>
 80060ac:	2800      	cmp	r0, #0
 80060ae:	bfab      	itete	ge
 80060b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80060b2:	89a3      	ldrhlt	r3, [r4, #12]
 80060b4:	181b      	addge	r3, r3, r0
 80060b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80060ba:	bfac      	ite	ge
 80060bc:	6563      	strge	r3, [r4, #84]	; 0x54
 80060be:	81a3      	strhlt	r3, [r4, #12]
 80060c0:	bd10      	pop	{r4, pc}

080060c2 <__swrite>:
 80060c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060c6:	461f      	mov	r7, r3
 80060c8:	898b      	ldrh	r3, [r1, #12]
 80060ca:	05db      	lsls	r3, r3, #23
 80060cc:	4605      	mov	r5, r0
 80060ce:	460c      	mov	r4, r1
 80060d0:	4616      	mov	r6, r2
 80060d2:	d505      	bpl.n	80060e0 <__swrite+0x1e>
 80060d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060d8:	2302      	movs	r3, #2
 80060da:	2200      	movs	r2, #0
 80060dc:	f000 f840 	bl	8006160 <_lseek_r>
 80060e0:	89a3      	ldrh	r3, [r4, #12]
 80060e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80060e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80060ea:	81a3      	strh	r3, [r4, #12]
 80060ec:	4632      	mov	r2, r6
 80060ee:	463b      	mov	r3, r7
 80060f0:	4628      	mov	r0, r5
 80060f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80060f6:	f000 b857 	b.w	80061a8 <_write_r>

080060fa <__sseek>:
 80060fa:	b510      	push	{r4, lr}
 80060fc:	460c      	mov	r4, r1
 80060fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006102:	f000 f82d 	bl	8006160 <_lseek_r>
 8006106:	1c43      	adds	r3, r0, #1
 8006108:	89a3      	ldrh	r3, [r4, #12]
 800610a:	bf15      	itete	ne
 800610c:	6560      	strne	r0, [r4, #84]	; 0x54
 800610e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006112:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006116:	81a3      	strheq	r3, [r4, #12]
 8006118:	bf18      	it	ne
 800611a:	81a3      	strhne	r3, [r4, #12]
 800611c:	bd10      	pop	{r4, pc}

0800611e <__sclose>:
 800611e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006122:	f000 b80d 	b.w	8006140 <_close_r>

08006126 <memset>:
 8006126:	4402      	add	r2, r0
 8006128:	4603      	mov	r3, r0
 800612a:	4293      	cmp	r3, r2
 800612c:	d100      	bne.n	8006130 <memset+0xa>
 800612e:	4770      	bx	lr
 8006130:	f803 1b01 	strb.w	r1, [r3], #1
 8006134:	e7f9      	b.n	800612a <memset+0x4>
	...

08006138 <_localeconv_r>:
 8006138:	4800      	ldr	r0, [pc, #0]	; (800613c <_localeconv_r+0x4>)
 800613a:	4770      	bx	lr
 800613c:	20000158 	.word	0x20000158

08006140 <_close_r>:
 8006140:	b538      	push	{r3, r4, r5, lr}
 8006142:	4d06      	ldr	r5, [pc, #24]	; (800615c <_close_r+0x1c>)
 8006144:	2300      	movs	r3, #0
 8006146:	4604      	mov	r4, r0
 8006148:	4608      	mov	r0, r1
 800614a:	602b      	str	r3, [r5, #0]
 800614c:	f7fb fb7f 	bl	800184e <_close>
 8006150:	1c43      	adds	r3, r0, #1
 8006152:	d102      	bne.n	800615a <_close_r+0x1a>
 8006154:	682b      	ldr	r3, [r5, #0]
 8006156:	b103      	cbz	r3, 800615a <_close_r+0x1a>
 8006158:	6023      	str	r3, [r4, #0]
 800615a:	bd38      	pop	{r3, r4, r5, pc}
 800615c:	200004b8 	.word	0x200004b8

08006160 <_lseek_r>:
 8006160:	b538      	push	{r3, r4, r5, lr}
 8006162:	4d07      	ldr	r5, [pc, #28]	; (8006180 <_lseek_r+0x20>)
 8006164:	4604      	mov	r4, r0
 8006166:	4608      	mov	r0, r1
 8006168:	4611      	mov	r1, r2
 800616a:	2200      	movs	r2, #0
 800616c:	602a      	str	r2, [r5, #0]
 800616e:	461a      	mov	r2, r3
 8006170:	f7fb fb94 	bl	800189c <_lseek>
 8006174:	1c43      	adds	r3, r0, #1
 8006176:	d102      	bne.n	800617e <_lseek_r+0x1e>
 8006178:	682b      	ldr	r3, [r5, #0]
 800617a:	b103      	cbz	r3, 800617e <_lseek_r+0x1e>
 800617c:	6023      	str	r3, [r4, #0]
 800617e:	bd38      	pop	{r3, r4, r5, pc}
 8006180:	200004b8 	.word	0x200004b8

08006184 <_read_r>:
 8006184:	b538      	push	{r3, r4, r5, lr}
 8006186:	4d07      	ldr	r5, [pc, #28]	; (80061a4 <_read_r+0x20>)
 8006188:	4604      	mov	r4, r0
 800618a:	4608      	mov	r0, r1
 800618c:	4611      	mov	r1, r2
 800618e:	2200      	movs	r2, #0
 8006190:	602a      	str	r2, [r5, #0]
 8006192:	461a      	mov	r2, r3
 8006194:	f7fb fb22 	bl	80017dc <_read>
 8006198:	1c43      	adds	r3, r0, #1
 800619a:	d102      	bne.n	80061a2 <_read_r+0x1e>
 800619c:	682b      	ldr	r3, [r5, #0]
 800619e:	b103      	cbz	r3, 80061a2 <_read_r+0x1e>
 80061a0:	6023      	str	r3, [r4, #0]
 80061a2:	bd38      	pop	{r3, r4, r5, pc}
 80061a4:	200004b8 	.word	0x200004b8

080061a8 <_write_r>:
 80061a8:	b538      	push	{r3, r4, r5, lr}
 80061aa:	4d07      	ldr	r5, [pc, #28]	; (80061c8 <_write_r+0x20>)
 80061ac:	4604      	mov	r4, r0
 80061ae:	4608      	mov	r0, r1
 80061b0:	4611      	mov	r1, r2
 80061b2:	2200      	movs	r2, #0
 80061b4:	602a      	str	r2, [r5, #0]
 80061b6:	461a      	mov	r2, r3
 80061b8:	f7fb fb2d 	bl	8001816 <_write>
 80061bc:	1c43      	adds	r3, r0, #1
 80061be:	d102      	bne.n	80061c6 <_write_r+0x1e>
 80061c0:	682b      	ldr	r3, [r5, #0]
 80061c2:	b103      	cbz	r3, 80061c6 <_write_r+0x1e>
 80061c4:	6023      	str	r3, [r4, #0]
 80061c6:	bd38      	pop	{r3, r4, r5, pc}
 80061c8:	200004b8 	.word	0x200004b8

080061cc <__errno>:
 80061cc:	4b01      	ldr	r3, [pc, #4]	; (80061d4 <__errno+0x8>)
 80061ce:	6818      	ldr	r0, [r3, #0]
 80061d0:	4770      	bx	lr
 80061d2:	bf00      	nop
 80061d4:	20000064 	.word	0x20000064

080061d8 <__libc_init_array>:
 80061d8:	b570      	push	{r4, r5, r6, lr}
 80061da:	4d0d      	ldr	r5, [pc, #52]	; (8006210 <__libc_init_array+0x38>)
 80061dc:	4c0d      	ldr	r4, [pc, #52]	; (8006214 <__libc_init_array+0x3c>)
 80061de:	1b64      	subs	r4, r4, r5
 80061e0:	10a4      	asrs	r4, r4, #2
 80061e2:	2600      	movs	r6, #0
 80061e4:	42a6      	cmp	r6, r4
 80061e6:	d109      	bne.n	80061fc <__libc_init_array+0x24>
 80061e8:	4d0b      	ldr	r5, [pc, #44]	; (8006218 <__libc_init_array+0x40>)
 80061ea:	4c0c      	ldr	r4, [pc, #48]	; (800621c <__libc_init_array+0x44>)
 80061ec:	f002 f894 	bl	8008318 <_init>
 80061f0:	1b64      	subs	r4, r4, r5
 80061f2:	10a4      	asrs	r4, r4, #2
 80061f4:	2600      	movs	r6, #0
 80061f6:	42a6      	cmp	r6, r4
 80061f8:	d105      	bne.n	8006206 <__libc_init_array+0x2e>
 80061fa:	bd70      	pop	{r4, r5, r6, pc}
 80061fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006200:	4798      	blx	r3
 8006202:	3601      	adds	r6, #1
 8006204:	e7ee      	b.n	80061e4 <__libc_init_array+0xc>
 8006206:	f855 3b04 	ldr.w	r3, [r5], #4
 800620a:	4798      	blx	r3
 800620c:	3601      	adds	r6, #1
 800620e:	e7f2      	b.n	80061f6 <__libc_init_array+0x1e>
 8006210:	08008744 	.word	0x08008744
 8006214:	08008744 	.word	0x08008744
 8006218:	08008744 	.word	0x08008744
 800621c:	08008748 	.word	0x08008748

08006220 <__retarget_lock_init_recursive>:
 8006220:	4770      	bx	lr

08006222 <__retarget_lock_acquire_recursive>:
 8006222:	4770      	bx	lr

08006224 <__retarget_lock_release_recursive>:
 8006224:	4770      	bx	lr

08006226 <quorem>:
 8006226:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800622a:	6903      	ldr	r3, [r0, #16]
 800622c:	690c      	ldr	r4, [r1, #16]
 800622e:	42a3      	cmp	r3, r4
 8006230:	4607      	mov	r7, r0
 8006232:	db7e      	blt.n	8006332 <quorem+0x10c>
 8006234:	3c01      	subs	r4, #1
 8006236:	f101 0814 	add.w	r8, r1, #20
 800623a:	f100 0514 	add.w	r5, r0, #20
 800623e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006242:	9301      	str	r3, [sp, #4]
 8006244:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006248:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800624c:	3301      	adds	r3, #1
 800624e:	429a      	cmp	r2, r3
 8006250:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006254:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006258:	fbb2 f6f3 	udiv	r6, r2, r3
 800625c:	d331      	bcc.n	80062c2 <quorem+0x9c>
 800625e:	f04f 0e00 	mov.w	lr, #0
 8006262:	4640      	mov	r0, r8
 8006264:	46ac      	mov	ip, r5
 8006266:	46f2      	mov	sl, lr
 8006268:	f850 2b04 	ldr.w	r2, [r0], #4
 800626c:	b293      	uxth	r3, r2
 800626e:	fb06 e303 	mla	r3, r6, r3, lr
 8006272:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006276:	0c1a      	lsrs	r2, r3, #16
 8006278:	b29b      	uxth	r3, r3
 800627a:	ebaa 0303 	sub.w	r3, sl, r3
 800627e:	f8dc a000 	ldr.w	sl, [ip]
 8006282:	fa13 f38a 	uxtah	r3, r3, sl
 8006286:	fb06 220e 	mla	r2, r6, lr, r2
 800628a:	9300      	str	r3, [sp, #0]
 800628c:	9b00      	ldr	r3, [sp, #0]
 800628e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006292:	b292      	uxth	r2, r2
 8006294:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006298:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800629c:	f8bd 3000 	ldrh.w	r3, [sp]
 80062a0:	4581      	cmp	r9, r0
 80062a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80062a6:	f84c 3b04 	str.w	r3, [ip], #4
 80062aa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80062ae:	d2db      	bcs.n	8006268 <quorem+0x42>
 80062b0:	f855 300b 	ldr.w	r3, [r5, fp]
 80062b4:	b92b      	cbnz	r3, 80062c2 <quorem+0x9c>
 80062b6:	9b01      	ldr	r3, [sp, #4]
 80062b8:	3b04      	subs	r3, #4
 80062ba:	429d      	cmp	r5, r3
 80062bc:	461a      	mov	r2, r3
 80062be:	d32c      	bcc.n	800631a <quorem+0xf4>
 80062c0:	613c      	str	r4, [r7, #16]
 80062c2:	4638      	mov	r0, r7
 80062c4:	f001 f9a6 	bl	8007614 <__mcmp>
 80062c8:	2800      	cmp	r0, #0
 80062ca:	db22      	blt.n	8006312 <quorem+0xec>
 80062cc:	3601      	adds	r6, #1
 80062ce:	4629      	mov	r1, r5
 80062d0:	2000      	movs	r0, #0
 80062d2:	f858 2b04 	ldr.w	r2, [r8], #4
 80062d6:	f8d1 c000 	ldr.w	ip, [r1]
 80062da:	b293      	uxth	r3, r2
 80062dc:	1ac3      	subs	r3, r0, r3
 80062de:	0c12      	lsrs	r2, r2, #16
 80062e0:	fa13 f38c 	uxtah	r3, r3, ip
 80062e4:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80062e8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80062ec:	b29b      	uxth	r3, r3
 80062ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80062f2:	45c1      	cmp	r9, r8
 80062f4:	f841 3b04 	str.w	r3, [r1], #4
 80062f8:	ea4f 4022 	mov.w	r0, r2, asr #16
 80062fc:	d2e9      	bcs.n	80062d2 <quorem+0xac>
 80062fe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006302:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006306:	b922      	cbnz	r2, 8006312 <quorem+0xec>
 8006308:	3b04      	subs	r3, #4
 800630a:	429d      	cmp	r5, r3
 800630c:	461a      	mov	r2, r3
 800630e:	d30a      	bcc.n	8006326 <quorem+0x100>
 8006310:	613c      	str	r4, [r7, #16]
 8006312:	4630      	mov	r0, r6
 8006314:	b003      	add	sp, #12
 8006316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800631a:	6812      	ldr	r2, [r2, #0]
 800631c:	3b04      	subs	r3, #4
 800631e:	2a00      	cmp	r2, #0
 8006320:	d1ce      	bne.n	80062c0 <quorem+0x9a>
 8006322:	3c01      	subs	r4, #1
 8006324:	e7c9      	b.n	80062ba <quorem+0x94>
 8006326:	6812      	ldr	r2, [r2, #0]
 8006328:	3b04      	subs	r3, #4
 800632a:	2a00      	cmp	r2, #0
 800632c:	d1f0      	bne.n	8006310 <quorem+0xea>
 800632e:	3c01      	subs	r4, #1
 8006330:	e7eb      	b.n	800630a <quorem+0xe4>
 8006332:	2000      	movs	r0, #0
 8006334:	e7ee      	b.n	8006314 <quorem+0xee>
	...

08006338 <_dtoa_r>:
 8006338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800633c:	ed2d 8b04 	vpush	{d8-d9}
 8006340:	69c5      	ldr	r5, [r0, #28]
 8006342:	b093      	sub	sp, #76	; 0x4c
 8006344:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006348:	ec57 6b10 	vmov	r6, r7, d0
 800634c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006350:	9107      	str	r1, [sp, #28]
 8006352:	4604      	mov	r4, r0
 8006354:	920a      	str	r2, [sp, #40]	; 0x28
 8006356:	930d      	str	r3, [sp, #52]	; 0x34
 8006358:	b975      	cbnz	r5, 8006378 <_dtoa_r+0x40>
 800635a:	2010      	movs	r0, #16
 800635c:	f000 fe2a 	bl	8006fb4 <malloc>
 8006360:	4602      	mov	r2, r0
 8006362:	61e0      	str	r0, [r4, #28]
 8006364:	b920      	cbnz	r0, 8006370 <_dtoa_r+0x38>
 8006366:	4bae      	ldr	r3, [pc, #696]	; (8006620 <_dtoa_r+0x2e8>)
 8006368:	21ef      	movs	r1, #239	; 0xef
 800636a:	48ae      	ldr	r0, [pc, #696]	; (8006624 <_dtoa_r+0x2ec>)
 800636c:	f001 fc90 	bl	8007c90 <__assert_func>
 8006370:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006374:	6005      	str	r5, [r0, #0]
 8006376:	60c5      	str	r5, [r0, #12]
 8006378:	69e3      	ldr	r3, [r4, #28]
 800637a:	6819      	ldr	r1, [r3, #0]
 800637c:	b151      	cbz	r1, 8006394 <_dtoa_r+0x5c>
 800637e:	685a      	ldr	r2, [r3, #4]
 8006380:	604a      	str	r2, [r1, #4]
 8006382:	2301      	movs	r3, #1
 8006384:	4093      	lsls	r3, r2
 8006386:	608b      	str	r3, [r1, #8]
 8006388:	4620      	mov	r0, r4
 800638a:	f000 ff07 	bl	800719c <_Bfree>
 800638e:	69e3      	ldr	r3, [r4, #28]
 8006390:	2200      	movs	r2, #0
 8006392:	601a      	str	r2, [r3, #0]
 8006394:	1e3b      	subs	r3, r7, #0
 8006396:	bfbb      	ittet	lt
 8006398:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800639c:	9303      	strlt	r3, [sp, #12]
 800639e:	2300      	movge	r3, #0
 80063a0:	2201      	movlt	r2, #1
 80063a2:	bfac      	ite	ge
 80063a4:	f8c8 3000 	strge.w	r3, [r8]
 80063a8:	f8c8 2000 	strlt.w	r2, [r8]
 80063ac:	4b9e      	ldr	r3, [pc, #632]	; (8006628 <_dtoa_r+0x2f0>)
 80063ae:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80063b2:	ea33 0308 	bics.w	r3, r3, r8
 80063b6:	d11b      	bne.n	80063f0 <_dtoa_r+0xb8>
 80063b8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80063ba:	f242 730f 	movw	r3, #9999	; 0x270f
 80063be:	6013      	str	r3, [r2, #0]
 80063c0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80063c4:	4333      	orrs	r3, r6
 80063c6:	f000 8593 	beq.w	8006ef0 <_dtoa_r+0xbb8>
 80063ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80063cc:	b963      	cbnz	r3, 80063e8 <_dtoa_r+0xb0>
 80063ce:	4b97      	ldr	r3, [pc, #604]	; (800662c <_dtoa_r+0x2f4>)
 80063d0:	e027      	b.n	8006422 <_dtoa_r+0xea>
 80063d2:	4b97      	ldr	r3, [pc, #604]	; (8006630 <_dtoa_r+0x2f8>)
 80063d4:	9300      	str	r3, [sp, #0]
 80063d6:	3308      	adds	r3, #8
 80063d8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80063da:	6013      	str	r3, [r2, #0]
 80063dc:	9800      	ldr	r0, [sp, #0]
 80063de:	b013      	add	sp, #76	; 0x4c
 80063e0:	ecbd 8b04 	vpop	{d8-d9}
 80063e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063e8:	4b90      	ldr	r3, [pc, #576]	; (800662c <_dtoa_r+0x2f4>)
 80063ea:	9300      	str	r3, [sp, #0]
 80063ec:	3303      	adds	r3, #3
 80063ee:	e7f3      	b.n	80063d8 <_dtoa_r+0xa0>
 80063f0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80063f4:	2200      	movs	r2, #0
 80063f6:	ec51 0b17 	vmov	r0, r1, d7
 80063fa:	eeb0 8a47 	vmov.f32	s16, s14
 80063fe:	eef0 8a67 	vmov.f32	s17, s15
 8006402:	2300      	movs	r3, #0
 8006404:	f7fa fb60 	bl	8000ac8 <__aeabi_dcmpeq>
 8006408:	4681      	mov	r9, r0
 800640a:	b160      	cbz	r0, 8006426 <_dtoa_r+0xee>
 800640c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800640e:	2301      	movs	r3, #1
 8006410:	6013      	str	r3, [r2, #0]
 8006412:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006414:	2b00      	cmp	r3, #0
 8006416:	f000 8568 	beq.w	8006eea <_dtoa_r+0xbb2>
 800641a:	4b86      	ldr	r3, [pc, #536]	; (8006634 <_dtoa_r+0x2fc>)
 800641c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800641e:	6013      	str	r3, [r2, #0]
 8006420:	3b01      	subs	r3, #1
 8006422:	9300      	str	r3, [sp, #0]
 8006424:	e7da      	b.n	80063dc <_dtoa_r+0xa4>
 8006426:	aa10      	add	r2, sp, #64	; 0x40
 8006428:	a911      	add	r1, sp, #68	; 0x44
 800642a:	4620      	mov	r0, r4
 800642c:	eeb0 0a48 	vmov.f32	s0, s16
 8006430:	eef0 0a68 	vmov.f32	s1, s17
 8006434:	f001 f994 	bl	8007760 <__d2b>
 8006438:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800643c:	4682      	mov	sl, r0
 800643e:	2d00      	cmp	r5, #0
 8006440:	d07f      	beq.n	8006542 <_dtoa_r+0x20a>
 8006442:	ee18 3a90 	vmov	r3, s17
 8006446:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800644a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800644e:	ec51 0b18 	vmov	r0, r1, d8
 8006452:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006456:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800645a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800645e:	4619      	mov	r1, r3
 8006460:	2200      	movs	r2, #0
 8006462:	4b75      	ldr	r3, [pc, #468]	; (8006638 <_dtoa_r+0x300>)
 8006464:	f7f9 ff10 	bl	8000288 <__aeabi_dsub>
 8006468:	a367      	add	r3, pc, #412	; (adr r3, 8006608 <_dtoa_r+0x2d0>)
 800646a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800646e:	f7fa f8c3 	bl	80005f8 <__aeabi_dmul>
 8006472:	a367      	add	r3, pc, #412	; (adr r3, 8006610 <_dtoa_r+0x2d8>)
 8006474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006478:	f7f9 ff08 	bl	800028c <__adddf3>
 800647c:	4606      	mov	r6, r0
 800647e:	4628      	mov	r0, r5
 8006480:	460f      	mov	r7, r1
 8006482:	f7fa f84f 	bl	8000524 <__aeabi_i2d>
 8006486:	a364      	add	r3, pc, #400	; (adr r3, 8006618 <_dtoa_r+0x2e0>)
 8006488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800648c:	f7fa f8b4 	bl	80005f8 <__aeabi_dmul>
 8006490:	4602      	mov	r2, r0
 8006492:	460b      	mov	r3, r1
 8006494:	4630      	mov	r0, r6
 8006496:	4639      	mov	r1, r7
 8006498:	f7f9 fef8 	bl	800028c <__adddf3>
 800649c:	4606      	mov	r6, r0
 800649e:	460f      	mov	r7, r1
 80064a0:	f7fa fb5a 	bl	8000b58 <__aeabi_d2iz>
 80064a4:	2200      	movs	r2, #0
 80064a6:	4683      	mov	fp, r0
 80064a8:	2300      	movs	r3, #0
 80064aa:	4630      	mov	r0, r6
 80064ac:	4639      	mov	r1, r7
 80064ae:	f7fa fb15 	bl	8000adc <__aeabi_dcmplt>
 80064b2:	b148      	cbz	r0, 80064c8 <_dtoa_r+0x190>
 80064b4:	4658      	mov	r0, fp
 80064b6:	f7fa f835 	bl	8000524 <__aeabi_i2d>
 80064ba:	4632      	mov	r2, r6
 80064bc:	463b      	mov	r3, r7
 80064be:	f7fa fb03 	bl	8000ac8 <__aeabi_dcmpeq>
 80064c2:	b908      	cbnz	r0, 80064c8 <_dtoa_r+0x190>
 80064c4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80064c8:	f1bb 0f16 	cmp.w	fp, #22
 80064cc:	d857      	bhi.n	800657e <_dtoa_r+0x246>
 80064ce:	4b5b      	ldr	r3, [pc, #364]	; (800663c <_dtoa_r+0x304>)
 80064d0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80064d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064d8:	ec51 0b18 	vmov	r0, r1, d8
 80064dc:	f7fa fafe 	bl	8000adc <__aeabi_dcmplt>
 80064e0:	2800      	cmp	r0, #0
 80064e2:	d04e      	beq.n	8006582 <_dtoa_r+0x24a>
 80064e4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80064e8:	2300      	movs	r3, #0
 80064ea:	930c      	str	r3, [sp, #48]	; 0x30
 80064ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80064ee:	1b5b      	subs	r3, r3, r5
 80064f0:	1e5a      	subs	r2, r3, #1
 80064f2:	bf45      	ittet	mi
 80064f4:	f1c3 0301 	rsbmi	r3, r3, #1
 80064f8:	9305      	strmi	r3, [sp, #20]
 80064fa:	2300      	movpl	r3, #0
 80064fc:	2300      	movmi	r3, #0
 80064fe:	9206      	str	r2, [sp, #24]
 8006500:	bf54      	ite	pl
 8006502:	9305      	strpl	r3, [sp, #20]
 8006504:	9306      	strmi	r3, [sp, #24]
 8006506:	f1bb 0f00 	cmp.w	fp, #0
 800650a:	db3c      	blt.n	8006586 <_dtoa_r+0x24e>
 800650c:	9b06      	ldr	r3, [sp, #24]
 800650e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8006512:	445b      	add	r3, fp
 8006514:	9306      	str	r3, [sp, #24]
 8006516:	2300      	movs	r3, #0
 8006518:	9308      	str	r3, [sp, #32]
 800651a:	9b07      	ldr	r3, [sp, #28]
 800651c:	2b09      	cmp	r3, #9
 800651e:	d868      	bhi.n	80065f2 <_dtoa_r+0x2ba>
 8006520:	2b05      	cmp	r3, #5
 8006522:	bfc4      	itt	gt
 8006524:	3b04      	subgt	r3, #4
 8006526:	9307      	strgt	r3, [sp, #28]
 8006528:	9b07      	ldr	r3, [sp, #28]
 800652a:	f1a3 0302 	sub.w	r3, r3, #2
 800652e:	bfcc      	ite	gt
 8006530:	2500      	movgt	r5, #0
 8006532:	2501      	movle	r5, #1
 8006534:	2b03      	cmp	r3, #3
 8006536:	f200 8085 	bhi.w	8006644 <_dtoa_r+0x30c>
 800653a:	e8df f003 	tbb	[pc, r3]
 800653e:	3b2e      	.short	0x3b2e
 8006540:	5839      	.short	0x5839
 8006542:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006546:	441d      	add	r5, r3
 8006548:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800654c:	2b20      	cmp	r3, #32
 800654e:	bfc1      	itttt	gt
 8006550:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006554:	fa08 f803 	lslgt.w	r8, r8, r3
 8006558:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800655c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006560:	bfd6      	itet	le
 8006562:	f1c3 0320 	rsble	r3, r3, #32
 8006566:	ea48 0003 	orrgt.w	r0, r8, r3
 800656a:	fa06 f003 	lslle.w	r0, r6, r3
 800656e:	f7f9 ffc9 	bl	8000504 <__aeabi_ui2d>
 8006572:	2201      	movs	r2, #1
 8006574:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006578:	3d01      	subs	r5, #1
 800657a:	920e      	str	r2, [sp, #56]	; 0x38
 800657c:	e76f      	b.n	800645e <_dtoa_r+0x126>
 800657e:	2301      	movs	r3, #1
 8006580:	e7b3      	b.n	80064ea <_dtoa_r+0x1b2>
 8006582:	900c      	str	r0, [sp, #48]	; 0x30
 8006584:	e7b2      	b.n	80064ec <_dtoa_r+0x1b4>
 8006586:	9b05      	ldr	r3, [sp, #20]
 8006588:	eba3 030b 	sub.w	r3, r3, fp
 800658c:	9305      	str	r3, [sp, #20]
 800658e:	f1cb 0300 	rsb	r3, fp, #0
 8006592:	9308      	str	r3, [sp, #32]
 8006594:	2300      	movs	r3, #0
 8006596:	930b      	str	r3, [sp, #44]	; 0x2c
 8006598:	e7bf      	b.n	800651a <_dtoa_r+0x1e2>
 800659a:	2300      	movs	r3, #0
 800659c:	9309      	str	r3, [sp, #36]	; 0x24
 800659e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	dc52      	bgt.n	800664a <_dtoa_r+0x312>
 80065a4:	2301      	movs	r3, #1
 80065a6:	9301      	str	r3, [sp, #4]
 80065a8:	9304      	str	r3, [sp, #16]
 80065aa:	461a      	mov	r2, r3
 80065ac:	920a      	str	r2, [sp, #40]	; 0x28
 80065ae:	e00b      	b.n	80065c8 <_dtoa_r+0x290>
 80065b0:	2301      	movs	r3, #1
 80065b2:	e7f3      	b.n	800659c <_dtoa_r+0x264>
 80065b4:	2300      	movs	r3, #0
 80065b6:	9309      	str	r3, [sp, #36]	; 0x24
 80065b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065ba:	445b      	add	r3, fp
 80065bc:	9301      	str	r3, [sp, #4]
 80065be:	3301      	adds	r3, #1
 80065c0:	2b01      	cmp	r3, #1
 80065c2:	9304      	str	r3, [sp, #16]
 80065c4:	bfb8      	it	lt
 80065c6:	2301      	movlt	r3, #1
 80065c8:	69e0      	ldr	r0, [r4, #28]
 80065ca:	2100      	movs	r1, #0
 80065cc:	2204      	movs	r2, #4
 80065ce:	f102 0614 	add.w	r6, r2, #20
 80065d2:	429e      	cmp	r6, r3
 80065d4:	d93d      	bls.n	8006652 <_dtoa_r+0x31a>
 80065d6:	6041      	str	r1, [r0, #4]
 80065d8:	4620      	mov	r0, r4
 80065da:	f000 fd9f 	bl	800711c <_Balloc>
 80065de:	9000      	str	r0, [sp, #0]
 80065e0:	2800      	cmp	r0, #0
 80065e2:	d139      	bne.n	8006658 <_dtoa_r+0x320>
 80065e4:	4b16      	ldr	r3, [pc, #88]	; (8006640 <_dtoa_r+0x308>)
 80065e6:	4602      	mov	r2, r0
 80065e8:	f240 11af 	movw	r1, #431	; 0x1af
 80065ec:	e6bd      	b.n	800636a <_dtoa_r+0x32>
 80065ee:	2301      	movs	r3, #1
 80065f0:	e7e1      	b.n	80065b6 <_dtoa_r+0x27e>
 80065f2:	2501      	movs	r5, #1
 80065f4:	2300      	movs	r3, #0
 80065f6:	9307      	str	r3, [sp, #28]
 80065f8:	9509      	str	r5, [sp, #36]	; 0x24
 80065fa:	f04f 33ff 	mov.w	r3, #4294967295
 80065fe:	9301      	str	r3, [sp, #4]
 8006600:	9304      	str	r3, [sp, #16]
 8006602:	2200      	movs	r2, #0
 8006604:	2312      	movs	r3, #18
 8006606:	e7d1      	b.n	80065ac <_dtoa_r+0x274>
 8006608:	636f4361 	.word	0x636f4361
 800660c:	3fd287a7 	.word	0x3fd287a7
 8006610:	8b60c8b3 	.word	0x8b60c8b3
 8006614:	3fc68a28 	.word	0x3fc68a28
 8006618:	509f79fb 	.word	0x509f79fb
 800661c:	3fd34413 	.word	0x3fd34413
 8006620:	08008409 	.word	0x08008409
 8006624:	08008420 	.word	0x08008420
 8006628:	7ff00000 	.word	0x7ff00000
 800662c:	08008405 	.word	0x08008405
 8006630:	080083fc 	.word	0x080083fc
 8006634:	080083d9 	.word	0x080083d9
 8006638:	3ff80000 	.word	0x3ff80000
 800663c:	08008510 	.word	0x08008510
 8006640:	08008478 	.word	0x08008478
 8006644:	2301      	movs	r3, #1
 8006646:	9309      	str	r3, [sp, #36]	; 0x24
 8006648:	e7d7      	b.n	80065fa <_dtoa_r+0x2c2>
 800664a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800664c:	9301      	str	r3, [sp, #4]
 800664e:	9304      	str	r3, [sp, #16]
 8006650:	e7ba      	b.n	80065c8 <_dtoa_r+0x290>
 8006652:	3101      	adds	r1, #1
 8006654:	0052      	lsls	r2, r2, #1
 8006656:	e7ba      	b.n	80065ce <_dtoa_r+0x296>
 8006658:	69e3      	ldr	r3, [r4, #28]
 800665a:	9a00      	ldr	r2, [sp, #0]
 800665c:	601a      	str	r2, [r3, #0]
 800665e:	9b04      	ldr	r3, [sp, #16]
 8006660:	2b0e      	cmp	r3, #14
 8006662:	f200 80a8 	bhi.w	80067b6 <_dtoa_r+0x47e>
 8006666:	2d00      	cmp	r5, #0
 8006668:	f000 80a5 	beq.w	80067b6 <_dtoa_r+0x47e>
 800666c:	f1bb 0f00 	cmp.w	fp, #0
 8006670:	dd38      	ble.n	80066e4 <_dtoa_r+0x3ac>
 8006672:	4bc0      	ldr	r3, [pc, #768]	; (8006974 <_dtoa_r+0x63c>)
 8006674:	f00b 020f 	and.w	r2, fp, #15
 8006678:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800667c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006680:	e9d3 6700 	ldrd	r6, r7, [r3]
 8006684:	ea4f 182b 	mov.w	r8, fp, asr #4
 8006688:	d019      	beq.n	80066be <_dtoa_r+0x386>
 800668a:	4bbb      	ldr	r3, [pc, #748]	; (8006978 <_dtoa_r+0x640>)
 800668c:	ec51 0b18 	vmov	r0, r1, d8
 8006690:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006694:	f7fa f8da 	bl	800084c <__aeabi_ddiv>
 8006698:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800669c:	f008 080f 	and.w	r8, r8, #15
 80066a0:	2503      	movs	r5, #3
 80066a2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8006978 <_dtoa_r+0x640>
 80066a6:	f1b8 0f00 	cmp.w	r8, #0
 80066aa:	d10a      	bne.n	80066c2 <_dtoa_r+0x38a>
 80066ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80066b0:	4632      	mov	r2, r6
 80066b2:	463b      	mov	r3, r7
 80066b4:	f7fa f8ca 	bl	800084c <__aeabi_ddiv>
 80066b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80066bc:	e02b      	b.n	8006716 <_dtoa_r+0x3de>
 80066be:	2502      	movs	r5, #2
 80066c0:	e7ef      	b.n	80066a2 <_dtoa_r+0x36a>
 80066c2:	f018 0f01 	tst.w	r8, #1
 80066c6:	d008      	beq.n	80066da <_dtoa_r+0x3a2>
 80066c8:	4630      	mov	r0, r6
 80066ca:	4639      	mov	r1, r7
 80066cc:	e9d9 2300 	ldrd	r2, r3, [r9]
 80066d0:	f7f9 ff92 	bl	80005f8 <__aeabi_dmul>
 80066d4:	3501      	adds	r5, #1
 80066d6:	4606      	mov	r6, r0
 80066d8:	460f      	mov	r7, r1
 80066da:	ea4f 0868 	mov.w	r8, r8, asr #1
 80066de:	f109 0908 	add.w	r9, r9, #8
 80066e2:	e7e0      	b.n	80066a6 <_dtoa_r+0x36e>
 80066e4:	f000 809f 	beq.w	8006826 <_dtoa_r+0x4ee>
 80066e8:	f1cb 0600 	rsb	r6, fp, #0
 80066ec:	4ba1      	ldr	r3, [pc, #644]	; (8006974 <_dtoa_r+0x63c>)
 80066ee:	4fa2      	ldr	r7, [pc, #648]	; (8006978 <_dtoa_r+0x640>)
 80066f0:	f006 020f 	and.w	r2, r6, #15
 80066f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80066f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066fc:	ec51 0b18 	vmov	r0, r1, d8
 8006700:	f7f9 ff7a 	bl	80005f8 <__aeabi_dmul>
 8006704:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006708:	1136      	asrs	r6, r6, #4
 800670a:	2300      	movs	r3, #0
 800670c:	2502      	movs	r5, #2
 800670e:	2e00      	cmp	r6, #0
 8006710:	d17e      	bne.n	8006810 <_dtoa_r+0x4d8>
 8006712:	2b00      	cmp	r3, #0
 8006714:	d1d0      	bne.n	80066b8 <_dtoa_r+0x380>
 8006716:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006718:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800671c:	2b00      	cmp	r3, #0
 800671e:	f000 8084 	beq.w	800682a <_dtoa_r+0x4f2>
 8006722:	4b96      	ldr	r3, [pc, #600]	; (800697c <_dtoa_r+0x644>)
 8006724:	2200      	movs	r2, #0
 8006726:	4640      	mov	r0, r8
 8006728:	4649      	mov	r1, r9
 800672a:	f7fa f9d7 	bl	8000adc <__aeabi_dcmplt>
 800672e:	2800      	cmp	r0, #0
 8006730:	d07b      	beq.n	800682a <_dtoa_r+0x4f2>
 8006732:	9b04      	ldr	r3, [sp, #16]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d078      	beq.n	800682a <_dtoa_r+0x4f2>
 8006738:	9b01      	ldr	r3, [sp, #4]
 800673a:	2b00      	cmp	r3, #0
 800673c:	dd39      	ble.n	80067b2 <_dtoa_r+0x47a>
 800673e:	4b90      	ldr	r3, [pc, #576]	; (8006980 <_dtoa_r+0x648>)
 8006740:	2200      	movs	r2, #0
 8006742:	4640      	mov	r0, r8
 8006744:	4649      	mov	r1, r9
 8006746:	f7f9 ff57 	bl	80005f8 <__aeabi_dmul>
 800674a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800674e:	9e01      	ldr	r6, [sp, #4]
 8006750:	f10b 37ff 	add.w	r7, fp, #4294967295
 8006754:	3501      	adds	r5, #1
 8006756:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800675a:	4628      	mov	r0, r5
 800675c:	f7f9 fee2 	bl	8000524 <__aeabi_i2d>
 8006760:	4642      	mov	r2, r8
 8006762:	464b      	mov	r3, r9
 8006764:	f7f9 ff48 	bl	80005f8 <__aeabi_dmul>
 8006768:	4b86      	ldr	r3, [pc, #536]	; (8006984 <_dtoa_r+0x64c>)
 800676a:	2200      	movs	r2, #0
 800676c:	f7f9 fd8e 	bl	800028c <__adddf3>
 8006770:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006774:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006778:	9303      	str	r3, [sp, #12]
 800677a:	2e00      	cmp	r6, #0
 800677c:	d158      	bne.n	8006830 <_dtoa_r+0x4f8>
 800677e:	4b82      	ldr	r3, [pc, #520]	; (8006988 <_dtoa_r+0x650>)
 8006780:	2200      	movs	r2, #0
 8006782:	4640      	mov	r0, r8
 8006784:	4649      	mov	r1, r9
 8006786:	f7f9 fd7f 	bl	8000288 <__aeabi_dsub>
 800678a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800678e:	4680      	mov	r8, r0
 8006790:	4689      	mov	r9, r1
 8006792:	f7fa f9c1 	bl	8000b18 <__aeabi_dcmpgt>
 8006796:	2800      	cmp	r0, #0
 8006798:	f040 8296 	bne.w	8006cc8 <_dtoa_r+0x990>
 800679c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80067a0:	4640      	mov	r0, r8
 80067a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80067a6:	4649      	mov	r1, r9
 80067a8:	f7fa f998 	bl	8000adc <__aeabi_dcmplt>
 80067ac:	2800      	cmp	r0, #0
 80067ae:	f040 8289 	bne.w	8006cc4 <_dtoa_r+0x98c>
 80067b2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80067b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	f2c0 814e 	blt.w	8006a5a <_dtoa_r+0x722>
 80067be:	f1bb 0f0e 	cmp.w	fp, #14
 80067c2:	f300 814a 	bgt.w	8006a5a <_dtoa_r+0x722>
 80067c6:	4b6b      	ldr	r3, [pc, #428]	; (8006974 <_dtoa_r+0x63c>)
 80067c8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80067cc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80067d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	f280 80dc 	bge.w	8006990 <_dtoa_r+0x658>
 80067d8:	9b04      	ldr	r3, [sp, #16]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	f300 80d8 	bgt.w	8006990 <_dtoa_r+0x658>
 80067e0:	f040 826f 	bne.w	8006cc2 <_dtoa_r+0x98a>
 80067e4:	4b68      	ldr	r3, [pc, #416]	; (8006988 <_dtoa_r+0x650>)
 80067e6:	2200      	movs	r2, #0
 80067e8:	4640      	mov	r0, r8
 80067ea:	4649      	mov	r1, r9
 80067ec:	f7f9 ff04 	bl	80005f8 <__aeabi_dmul>
 80067f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80067f4:	f7fa f986 	bl	8000b04 <__aeabi_dcmpge>
 80067f8:	9e04      	ldr	r6, [sp, #16]
 80067fa:	4637      	mov	r7, r6
 80067fc:	2800      	cmp	r0, #0
 80067fe:	f040 8245 	bne.w	8006c8c <_dtoa_r+0x954>
 8006802:	9d00      	ldr	r5, [sp, #0]
 8006804:	2331      	movs	r3, #49	; 0x31
 8006806:	f805 3b01 	strb.w	r3, [r5], #1
 800680a:	f10b 0b01 	add.w	fp, fp, #1
 800680e:	e241      	b.n	8006c94 <_dtoa_r+0x95c>
 8006810:	07f2      	lsls	r2, r6, #31
 8006812:	d505      	bpl.n	8006820 <_dtoa_r+0x4e8>
 8006814:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006818:	f7f9 feee 	bl	80005f8 <__aeabi_dmul>
 800681c:	3501      	adds	r5, #1
 800681e:	2301      	movs	r3, #1
 8006820:	1076      	asrs	r6, r6, #1
 8006822:	3708      	adds	r7, #8
 8006824:	e773      	b.n	800670e <_dtoa_r+0x3d6>
 8006826:	2502      	movs	r5, #2
 8006828:	e775      	b.n	8006716 <_dtoa_r+0x3de>
 800682a:	9e04      	ldr	r6, [sp, #16]
 800682c:	465f      	mov	r7, fp
 800682e:	e792      	b.n	8006756 <_dtoa_r+0x41e>
 8006830:	9900      	ldr	r1, [sp, #0]
 8006832:	4b50      	ldr	r3, [pc, #320]	; (8006974 <_dtoa_r+0x63c>)
 8006834:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006838:	4431      	add	r1, r6
 800683a:	9102      	str	r1, [sp, #8]
 800683c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800683e:	eeb0 9a47 	vmov.f32	s18, s14
 8006842:	eef0 9a67 	vmov.f32	s19, s15
 8006846:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800684a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800684e:	2900      	cmp	r1, #0
 8006850:	d044      	beq.n	80068dc <_dtoa_r+0x5a4>
 8006852:	494e      	ldr	r1, [pc, #312]	; (800698c <_dtoa_r+0x654>)
 8006854:	2000      	movs	r0, #0
 8006856:	f7f9 fff9 	bl	800084c <__aeabi_ddiv>
 800685a:	ec53 2b19 	vmov	r2, r3, d9
 800685e:	f7f9 fd13 	bl	8000288 <__aeabi_dsub>
 8006862:	9d00      	ldr	r5, [sp, #0]
 8006864:	ec41 0b19 	vmov	d9, r0, r1
 8006868:	4649      	mov	r1, r9
 800686a:	4640      	mov	r0, r8
 800686c:	f7fa f974 	bl	8000b58 <__aeabi_d2iz>
 8006870:	4606      	mov	r6, r0
 8006872:	f7f9 fe57 	bl	8000524 <__aeabi_i2d>
 8006876:	4602      	mov	r2, r0
 8006878:	460b      	mov	r3, r1
 800687a:	4640      	mov	r0, r8
 800687c:	4649      	mov	r1, r9
 800687e:	f7f9 fd03 	bl	8000288 <__aeabi_dsub>
 8006882:	3630      	adds	r6, #48	; 0x30
 8006884:	f805 6b01 	strb.w	r6, [r5], #1
 8006888:	ec53 2b19 	vmov	r2, r3, d9
 800688c:	4680      	mov	r8, r0
 800688e:	4689      	mov	r9, r1
 8006890:	f7fa f924 	bl	8000adc <__aeabi_dcmplt>
 8006894:	2800      	cmp	r0, #0
 8006896:	d164      	bne.n	8006962 <_dtoa_r+0x62a>
 8006898:	4642      	mov	r2, r8
 800689a:	464b      	mov	r3, r9
 800689c:	4937      	ldr	r1, [pc, #220]	; (800697c <_dtoa_r+0x644>)
 800689e:	2000      	movs	r0, #0
 80068a0:	f7f9 fcf2 	bl	8000288 <__aeabi_dsub>
 80068a4:	ec53 2b19 	vmov	r2, r3, d9
 80068a8:	f7fa f918 	bl	8000adc <__aeabi_dcmplt>
 80068ac:	2800      	cmp	r0, #0
 80068ae:	f040 80b6 	bne.w	8006a1e <_dtoa_r+0x6e6>
 80068b2:	9b02      	ldr	r3, [sp, #8]
 80068b4:	429d      	cmp	r5, r3
 80068b6:	f43f af7c 	beq.w	80067b2 <_dtoa_r+0x47a>
 80068ba:	4b31      	ldr	r3, [pc, #196]	; (8006980 <_dtoa_r+0x648>)
 80068bc:	ec51 0b19 	vmov	r0, r1, d9
 80068c0:	2200      	movs	r2, #0
 80068c2:	f7f9 fe99 	bl	80005f8 <__aeabi_dmul>
 80068c6:	4b2e      	ldr	r3, [pc, #184]	; (8006980 <_dtoa_r+0x648>)
 80068c8:	ec41 0b19 	vmov	d9, r0, r1
 80068cc:	2200      	movs	r2, #0
 80068ce:	4640      	mov	r0, r8
 80068d0:	4649      	mov	r1, r9
 80068d2:	f7f9 fe91 	bl	80005f8 <__aeabi_dmul>
 80068d6:	4680      	mov	r8, r0
 80068d8:	4689      	mov	r9, r1
 80068da:	e7c5      	b.n	8006868 <_dtoa_r+0x530>
 80068dc:	ec51 0b17 	vmov	r0, r1, d7
 80068e0:	f7f9 fe8a 	bl	80005f8 <__aeabi_dmul>
 80068e4:	9b02      	ldr	r3, [sp, #8]
 80068e6:	9d00      	ldr	r5, [sp, #0]
 80068e8:	930f      	str	r3, [sp, #60]	; 0x3c
 80068ea:	ec41 0b19 	vmov	d9, r0, r1
 80068ee:	4649      	mov	r1, r9
 80068f0:	4640      	mov	r0, r8
 80068f2:	f7fa f931 	bl	8000b58 <__aeabi_d2iz>
 80068f6:	4606      	mov	r6, r0
 80068f8:	f7f9 fe14 	bl	8000524 <__aeabi_i2d>
 80068fc:	3630      	adds	r6, #48	; 0x30
 80068fe:	4602      	mov	r2, r0
 8006900:	460b      	mov	r3, r1
 8006902:	4640      	mov	r0, r8
 8006904:	4649      	mov	r1, r9
 8006906:	f7f9 fcbf 	bl	8000288 <__aeabi_dsub>
 800690a:	f805 6b01 	strb.w	r6, [r5], #1
 800690e:	9b02      	ldr	r3, [sp, #8]
 8006910:	429d      	cmp	r5, r3
 8006912:	4680      	mov	r8, r0
 8006914:	4689      	mov	r9, r1
 8006916:	f04f 0200 	mov.w	r2, #0
 800691a:	d124      	bne.n	8006966 <_dtoa_r+0x62e>
 800691c:	4b1b      	ldr	r3, [pc, #108]	; (800698c <_dtoa_r+0x654>)
 800691e:	ec51 0b19 	vmov	r0, r1, d9
 8006922:	f7f9 fcb3 	bl	800028c <__adddf3>
 8006926:	4602      	mov	r2, r0
 8006928:	460b      	mov	r3, r1
 800692a:	4640      	mov	r0, r8
 800692c:	4649      	mov	r1, r9
 800692e:	f7fa f8f3 	bl	8000b18 <__aeabi_dcmpgt>
 8006932:	2800      	cmp	r0, #0
 8006934:	d173      	bne.n	8006a1e <_dtoa_r+0x6e6>
 8006936:	ec53 2b19 	vmov	r2, r3, d9
 800693a:	4914      	ldr	r1, [pc, #80]	; (800698c <_dtoa_r+0x654>)
 800693c:	2000      	movs	r0, #0
 800693e:	f7f9 fca3 	bl	8000288 <__aeabi_dsub>
 8006942:	4602      	mov	r2, r0
 8006944:	460b      	mov	r3, r1
 8006946:	4640      	mov	r0, r8
 8006948:	4649      	mov	r1, r9
 800694a:	f7fa f8c7 	bl	8000adc <__aeabi_dcmplt>
 800694e:	2800      	cmp	r0, #0
 8006950:	f43f af2f 	beq.w	80067b2 <_dtoa_r+0x47a>
 8006954:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006956:	1e6b      	subs	r3, r5, #1
 8006958:	930f      	str	r3, [sp, #60]	; 0x3c
 800695a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800695e:	2b30      	cmp	r3, #48	; 0x30
 8006960:	d0f8      	beq.n	8006954 <_dtoa_r+0x61c>
 8006962:	46bb      	mov	fp, r7
 8006964:	e04a      	b.n	80069fc <_dtoa_r+0x6c4>
 8006966:	4b06      	ldr	r3, [pc, #24]	; (8006980 <_dtoa_r+0x648>)
 8006968:	f7f9 fe46 	bl	80005f8 <__aeabi_dmul>
 800696c:	4680      	mov	r8, r0
 800696e:	4689      	mov	r9, r1
 8006970:	e7bd      	b.n	80068ee <_dtoa_r+0x5b6>
 8006972:	bf00      	nop
 8006974:	08008510 	.word	0x08008510
 8006978:	080084e8 	.word	0x080084e8
 800697c:	3ff00000 	.word	0x3ff00000
 8006980:	40240000 	.word	0x40240000
 8006984:	401c0000 	.word	0x401c0000
 8006988:	40140000 	.word	0x40140000
 800698c:	3fe00000 	.word	0x3fe00000
 8006990:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006994:	9d00      	ldr	r5, [sp, #0]
 8006996:	4642      	mov	r2, r8
 8006998:	464b      	mov	r3, r9
 800699a:	4630      	mov	r0, r6
 800699c:	4639      	mov	r1, r7
 800699e:	f7f9 ff55 	bl	800084c <__aeabi_ddiv>
 80069a2:	f7fa f8d9 	bl	8000b58 <__aeabi_d2iz>
 80069a6:	9001      	str	r0, [sp, #4]
 80069a8:	f7f9 fdbc 	bl	8000524 <__aeabi_i2d>
 80069ac:	4642      	mov	r2, r8
 80069ae:	464b      	mov	r3, r9
 80069b0:	f7f9 fe22 	bl	80005f8 <__aeabi_dmul>
 80069b4:	4602      	mov	r2, r0
 80069b6:	460b      	mov	r3, r1
 80069b8:	4630      	mov	r0, r6
 80069ba:	4639      	mov	r1, r7
 80069bc:	f7f9 fc64 	bl	8000288 <__aeabi_dsub>
 80069c0:	9e01      	ldr	r6, [sp, #4]
 80069c2:	9f04      	ldr	r7, [sp, #16]
 80069c4:	3630      	adds	r6, #48	; 0x30
 80069c6:	f805 6b01 	strb.w	r6, [r5], #1
 80069ca:	9e00      	ldr	r6, [sp, #0]
 80069cc:	1bae      	subs	r6, r5, r6
 80069ce:	42b7      	cmp	r7, r6
 80069d0:	4602      	mov	r2, r0
 80069d2:	460b      	mov	r3, r1
 80069d4:	d134      	bne.n	8006a40 <_dtoa_r+0x708>
 80069d6:	f7f9 fc59 	bl	800028c <__adddf3>
 80069da:	4642      	mov	r2, r8
 80069dc:	464b      	mov	r3, r9
 80069de:	4606      	mov	r6, r0
 80069e0:	460f      	mov	r7, r1
 80069e2:	f7fa f899 	bl	8000b18 <__aeabi_dcmpgt>
 80069e6:	b9c8      	cbnz	r0, 8006a1c <_dtoa_r+0x6e4>
 80069e8:	4642      	mov	r2, r8
 80069ea:	464b      	mov	r3, r9
 80069ec:	4630      	mov	r0, r6
 80069ee:	4639      	mov	r1, r7
 80069f0:	f7fa f86a 	bl	8000ac8 <__aeabi_dcmpeq>
 80069f4:	b110      	cbz	r0, 80069fc <_dtoa_r+0x6c4>
 80069f6:	9b01      	ldr	r3, [sp, #4]
 80069f8:	07db      	lsls	r3, r3, #31
 80069fa:	d40f      	bmi.n	8006a1c <_dtoa_r+0x6e4>
 80069fc:	4651      	mov	r1, sl
 80069fe:	4620      	mov	r0, r4
 8006a00:	f000 fbcc 	bl	800719c <_Bfree>
 8006a04:	2300      	movs	r3, #0
 8006a06:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006a08:	702b      	strb	r3, [r5, #0]
 8006a0a:	f10b 0301 	add.w	r3, fp, #1
 8006a0e:	6013      	str	r3, [r2, #0]
 8006a10:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	f43f ace2 	beq.w	80063dc <_dtoa_r+0xa4>
 8006a18:	601d      	str	r5, [r3, #0]
 8006a1a:	e4df      	b.n	80063dc <_dtoa_r+0xa4>
 8006a1c:	465f      	mov	r7, fp
 8006a1e:	462b      	mov	r3, r5
 8006a20:	461d      	mov	r5, r3
 8006a22:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006a26:	2a39      	cmp	r2, #57	; 0x39
 8006a28:	d106      	bne.n	8006a38 <_dtoa_r+0x700>
 8006a2a:	9a00      	ldr	r2, [sp, #0]
 8006a2c:	429a      	cmp	r2, r3
 8006a2e:	d1f7      	bne.n	8006a20 <_dtoa_r+0x6e8>
 8006a30:	9900      	ldr	r1, [sp, #0]
 8006a32:	2230      	movs	r2, #48	; 0x30
 8006a34:	3701      	adds	r7, #1
 8006a36:	700a      	strb	r2, [r1, #0]
 8006a38:	781a      	ldrb	r2, [r3, #0]
 8006a3a:	3201      	adds	r2, #1
 8006a3c:	701a      	strb	r2, [r3, #0]
 8006a3e:	e790      	b.n	8006962 <_dtoa_r+0x62a>
 8006a40:	4ba3      	ldr	r3, [pc, #652]	; (8006cd0 <_dtoa_r+0x998>)
 8006a42:	2200      	movs	r2, #0
 8006a44:	f7f9 fdd8 	bl	80005f8 <__aeabi_dmul>
 8006a48:	2200      	movs	r2, #0
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	4606      	mov	r6, r0
 8006a4e:	460f      	mov	r7, r1
 8006a50:	f7fa f83a 	bl	8000ac8 <__aeabi_dcmpeq>
 8006a54:	2800      	cmp	r0, #0
 8006a56:	d09e      	beq.n	8006996 <_dtoa_r+0x65e>
 8006a58:	e7d0      	b.n	80069fc <_dtoa_r+0x6c4>
 8006a5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a5c:	2a00      	cmp	r2, #0
 8006a5e:	f000 80ca 	beq.w	8006bf6 <_dtoa_r+0x8be>
 8006a62:	9a07      	ldr	r2, [sp, #28]
 8006a64:	2a01      	cmp	r2, #1
 8006a66:	f300 80ad 	bgt.w	8006bc4 <_dtoa_r+0x88c>
 8006a6a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006a6c:	2a00      	cmp	r2, #0
 8006a6e:	f000 80a5 	beq.w	8006bbc <_dtoa_r+0x884>
 8006a72:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006a76:	9e08      	ldr	r6, [sp, #32]
 8006a78:	9d05      	ldr	r5, [sp, #20]
 8006a7a:	9a05      	ldr	r2, [sp, #20]
 8006a7c:	441a      	add	r2, r3
 8006a7e:	9205      	str	r2, [sp, #20]
 8006a80:	9a06      	ldr	r2, [sp, #24]
 8006a82:	2101      	movs	r1, #1
 8006a84:	441a      	add	r2, r3
 8006a86:	4620      	mov	r0, r4
 8006a88:	9206      	str	r2, [sp, #24]
 8006a8a:	f000 fc3d 	bl	8007308 <__i2b>
 8006a8e:	4607      	mov	r7, r0
 8006a90:	b165      	cbz	r5, 8006aac <_dtoa_r+0x774>
 8006a92:	9b06      	ldr	r3, [sp, #24]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	dd09      	ble.n	8006aac <_dtoa_r+0x774>
 8006a98:	42ab      	cmp	r3, r5
 8006a9a:	9a05      	ldr	r2, [sp, #20]
 8006a9c:	bfa8      	it	ge
 8006a9e:	462b      	movge	r3, r5
 8006aa0:	1ad2      	subs	r2, r2, r3
 8006aa2:	9205      	str	r2, [sp, #20]
 8006aa4:	9a06      	ldr	r2, [sp, #24]
 8006aa6:	1aed      	subs	r5, r5, r3
 8006aa8:	1ad3      	subs	r3, r2, r3
 8006aaa:	9306      	str	r3, [sp, #24]
 8006aac:	9b08      	ldr	r3, [sp, #32]
 8006aae:	b1f3      	cbz	r3, 8006aee <_dtoa_r+0x7b6>
 8006ab0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	f000 80a3 	beq.w	8006bfe <_dtoa_r+0x8c6>
 8006ab8:	2e00      	cmp	r6, #0
 8006aba:	dd10      	ble.n	8006ade <_dtoa_r+0x7a6>
 8006abc:	4639      	mov	r1, r7
 8006abe:	4632      	mov	r2, r6
 8006ac0:	4620      	mov	r0, r4
 8006ac2:	f000 fce1 	bl	8007488 <__pow5mult>
 8006ac6:	4652      	mov	r2, sl
 8006ac8:	4601      	mov	r1, r0
 8006aca:	4607      	mov	r7, r0
 8006acc:	4620      	mov	r0, r4
 8006ace:	f000 fc31 	bl	8007334 <__multiply>
 8006ad2:	4651      	mov	r1, sl
 8006ad4:	4680      	mov	r8, r0
 8006ad6:	4620      	mov	r0, r4
 8006ad8:	f000 fb60 	bl	800719c <_Bfree>
 8006adc:	46c2      	mov	sl, r8
 8006ade:	9b08      	ldr	r3, [sp, #32]
 8006ae0:	1b9a      	subs	r2, r3, r6
 8006ae2:	d004      	beq.n	8006aee <_dtoa_r+0x7b6>
 8006ae4:	4651      	mov	r1, sl
 8006ae6:	4620      	mov	r0, r4
 8006ae8:	f000 fcce 	bl	8007488 <__pow5mult>
 8006aec:	4682      	mov	sl, r0
 8006aee:	2101      	movs	r1, #1
 8006af0:	4620      	mov	r0, r4
 8006af2:	f000 fc09 	bl	8007308 <__i2b>
 8006af6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	4606      	mov	r6, r0
 8006afc:	f340 8081 	ble.w	8006c02 <_dtoa_r+0x8ca>
 8006b00:	461a      	mov	r2, r3
 8006b02:	4601      	mov	r1, r0
 8006b04:	4620      	mov	r0, r4
 8006b06:	f000 fcbf 	bl	8007488 <__pow5mult>
 8006b0a:	9b07      	ldr	r3, [sp, #28]
 8006b0c:	2b01      	cmp	r3, #1
 8006b0e:	4606      	mov	r6, r0
 8006b10:	dd7a      	ble.n	8006c08 <_dtoa_r+0x8d0>
 8006b12:	f04f 0800 	mov.w	r8, #0
 8006b16:	6933      	ldr	r3, [r6, #16]
 8006b18:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006b1c:	6918      	ldr	r0, [r3, #16]
 8006b1e:	f000 fba5 	bl	800726c <__hi0bits>
 8006b22:	f1c0 0020 	rsb	r0, r0, #32
 8006b26:	9b06      	ldr	r3, [sp, #24]
 8006b28:	4418      	add	r0, r3
 8006b2a:	f010 001f 	ands.w	r0, r0, #31
 8006b2e:	f000 8094 	beq.w	8006c5a <_dtoa_r+0x922>
 8006b32:	f1c0 0320 	rsb	r3, r0, #32
 8006b36:	2b04      	cmp	r3, #4
 8006b38:	f340 8085 	ble.w	8006c46 <_dtoa_r+0x90e>
 8006b3c:	9b05      	ldr	r3, [sp, #20]
 8006b3e:	f1c0 001c 	rsb	r0, r0, #28
 8006b42:	4403      	add	r3, r0
 8006b44:	9305      	str	r3, [sp, #20]
 8006b46:	9b06      	ldr	r3, [sp, #24]
 8006b48:	4403      	add	r3, r0
 8006b4a:	4405      	add	r5, r0
 8006b4c:	9306      	str	r3, [sp, #24]
 8006b4e:	9b05      	ldr	r3, [sp, #20]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	dd05      	ble.n	8006b60 <_dtoa_r+0x828>
 8006b54:	4651      	mov	r1, sl
 8006b56:	461a      	mov	r2, r3
 8006b58:	4620      	mov	r0, r4
 8006b5a:	f000 fcef 	bl	800753c <__lshift>
 8006b5e:	4682      	mov	sl, r0
 8006b60:	9b06      	ldr	r3, [sp, #24]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	dd05      	ble.n	8006b72 <_dtoa_r+0x83a>
 8006b66:	4631      	mov	r1, r6
 8006b68:	461a      	mov	r2, r3
 8006b6a:	4620      	mov	r0, r4
 8006b6c:	f000 fce6 	bl	800753c <__lshift>
 8006b70:	4606      	mov	r6, r0
 8006b72:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d072      	beq.n	8006c5e <_dtoa_r+0x926>
 8006b78:	4631      	mov	r1, r6
 8006b7a:	4650      	mov	r0, sl
 8006b7c:	f000 fd4a 	bl	8007614 <__mcmp>
 8006b80:	2800      	cmp	r0, #0
 8006b82:	da6c      	bge.n	8006c5e <_dtoa_r+0x926>
 8006b84:	2300      	movs	r3, #0
 8006b86:	4651      	mov	r1, sl
 8006b88:	220a      	movs	r2, #10
 8006b8a:	4620      	mov	r0, r4
 8006b8c:	f000 fb28 	bl	80071e0 <__multadd>
 8006b90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b92:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006b96:	4682      	mov	sl, r0
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	f000 81b0 	beq.w	8006efe <_dtoa_r+0xbc6>
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	4639      	mov	r1, r7
 8006ba2:	220a      	movs	r2, #10
 8006ba4:	4620      	mov	r0, r4
 8006ba6:	f000 fb1b 	bl	80071e0 <__multadd>
 8006baa:	9b01      	ldr	r3, [sp, #4]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	4607      	mov	r7, r0
 8006bb0:	f300 8096 	bgt.w	8006ce0 <_dtoa_r+0x9a8>
 8006bb4:	9b07      	ldr	r3, [sp, #28]
 8006bb6:	2b02      	cmp	r3, #2
 8006bb8:	dc59      	bgt.n	8006c6e <_dtoa_r+0x936>
 8006bba:	e091      	b.n	8006ce0 <_dtoa_r+0x9a8>
 8006bbc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006bbe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006bc2:	e758      	b.n	8006a76 <_dtoa_r+0x73e>
 8006bc4:	9b04      	ldr	r3, [sp, #16]
 8006bc6:	1e5e      	subs	r6, r3, #1
 8006bc8:	9b08      	ldr	r3, [sp, #32]
 8006bca:	42b3      	cmp	r3, r6
 8006bcc:	bfbf      	itttt	lt
 8006bce:	9b08      	ldrlt	r3, [sp, #32]
 8006bd0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8006bd2:	9608      	strlt	r6, [sp, #32]
 8006bd4:	1af3      	sublt	r3, r6, r3
 8006bd6:	bfb4      	ite	lt
 8006bd8:	18d2      	addlt	r2, r2, r3
 8006bda:	1b9e      	subge	r6, r3, r6
 8006bdc:	9b04      	ldr	r3, [sp, #16]
 8006bde:	bfbc      	itt	lt
 8006be0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8006be2:	2600      	movlt	r6, #0
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	bfb7      	itett	lt
 8006be8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8006bec:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8006bf0:	1a9d      	sublt	r5, r3, r2
 8006bf2:	2300      	movlt	r3, #0
 8006bf4:	e741      	b.n	8006a7a <_dtoa_r+0x742>
 8006bf6:	9e08      	ldr	r6, [sp, #32]
 8006bf8:	9d05      	ldr	r5, [sp, #20]
 8006bfa:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006bfc:	e748      	b.n	8006a90 <_dtoa_r+0x758>
 8006bfe:	9a08      	ldr	r2, [sp, #32]
 8006c00:	e770      	b.n	8006ae4 <_dtoa_r+0x7ac>
 8006c02:	9b07      	ldr	r3, [sp, #28]
 8006c04:	2b01      	cmp	r3, #1
 8006c06:	dc19      	bgt.n	8006c3c <_dtoa_r+0x904>
 8006c08:	9b02      	ldr	r3, [sp, #8]
 8006c0a:	b9bb      	cbnz	r3, 8006c3c <_dtoa_r+0x904>
 8006c0c:	9b03      	ldr	r3, [sp, #12]
 8006c0e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006c12:	b99b      	cbnz	r3, 8006c3c <_dtoa_r+0x904>
 8006c14:	9b03      	ldr	r3, [sp, #12]
 8006c16:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006c1a:	0d1b      	lsrs	r3, r3, #20
 8006c1c:	051b      	lsls	r3, r3, #20
 8006c1e:	b183      	cbz	r3, 8006c42 <_dtoa_r+0x90a>
 8006c20:	9b05      	ldr	r3, [sp, #20]
 8006c22:	3301      	adds	r3, #1
 8006c24:	9305      	str	r3, [sp, #20]
 8006c26:	9b06      	ldr	r3, [sp, #24]
 8006c28:	3301      	adds	r3, #1
 8006c2a:	9306      	str	r3, [sp, #24]
 8006c2c:	f04f 0801 	mov.w	r8, #1
 8006c30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	f47f af6f 	bne.w	8006b16 <_dtoa_r+0x7de>
 8006c38:	2001      	movs	r0, #1
 8006c3a:	e774      	b.n	8006b26 <_dtoa_r+0x7ee>
 8006c3c:	f04f 0800 	mov.w	r8, #0
 8006c40:	e7f6      	b.n	8006c30 <_dtoa_r+0x8f8>
 8006c42:	4698      	mov	r8, r3
 8006c44:	e7f4      	b.n	8006c30 <_dtoa_r+0x8f8>
 8006c46:	d082      	beq.n	8006b4e <_dtoa_r+0x816>
 8006c48:	9a05      	ldr	r2, [sp, #20]
 8006c4a:	331c      	adds	r3, #28
 8006c4c:	441a      	add	r2, r3
 8006c4e:	9205      	str	r2, [sp, #20]
 8006c50:	9a06      	ldr	r2, [sp, #24]
 8006c52:	441a      	add	r2, r3
 8006c54:	441d      	add	r5, r3
 8006c56:	9206      	str	r2, [sp, #24]
 8006c58:	e779      	b.n	8006b4e <_dtoa_r+0x816>
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	e7f4      	b.n	8006c48 <_dtoa_r+0x910>
 8006c5e:	9b04      	ldr	r3, [sp, #16]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	dc37      	bgt.n	8006cd4 <_dtoa_r+0x99c>
 8006c64:	9b07      	ldr	r3, [sp, #28]
 8006c66:	2b02      	cmp	r3, #2
 8006c68:	dd34      	ble.n	8006cd4 <_dtoa_r+0x99c>
 8006c6a:	9b04      	ldr	r3, [sp, #16]
 8006c6c:	9301      	str	r3, [sp, #4]
 8006c6e:	9b01      	ldr	r3, [sp, #4]
 8006c70:	b963      	cbnz	r3, 8006c8c <_dtoa_r+0x954>
 8006c72:	4631      	mov	r1, r6
 8006c74:	2205      	movs	r2, #5
 8006c76:	4620      	mov	r0, r4
 8006c78:	f000 fab2 	bl	80071e0 <__multadd>
 8006c7c:	4601      	mov	r1, r0
 8006c7e:	4606      	mov	r6, r0
 8006c80:	4650      	mov	r0, sl
 8006c82:	f000 fcc7 	bl	8007614 <__mcmp>
 8006c86:	2800      	cmp	r0, #0
 8006c88:	f73f adbb 	bgt.w	8006802 <_dtoa_r+0x4ca>
 8006c8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c8e:	9d00      	ldr	r5, [sp, #0]
 8006c90:	ea6f 0b03 	mvn.w	fp, r3
 8006c94:	f04f 0800 	mov.w	r8, #0
 8006c98:	4631      	mov	r1, r6
 8006c9a:	4620      	mov	r0, r4
 8006c9c:	f000 fa7e 	bl	800719c <_Bfree>
 8006ca0:	2f00      	cmp	r7, #0
 8006ca2:	f43f aeab 	beq.w	80069fc <_dtoa_r+0x6c4>
 8006ca6:	f1b8 0f00 	cmp.w	r8, #0
 8006caa:	d005      	beq.n	8006cb8 <_dtoa_r+0x980>
 8006cac:	45b8      	cmp	r8, r7
 8006cae:	d003      	beq.n	8006cb8 <_dtoa_r+0x980>
 8006cb0:	4641      	mov	r1, r8
 8006cb2:	4620      	mov	r0, r4
 8006cb4:	f000 fa72 	bl	800719c <_Bfree>
 8006cb8:	4639      	mov	r1, r7
 8006cba:	4620      	mov	r0, r4
 8006cbc:	f000 fa6e 	bl	800719c <_Bfree>
 8006cc0:	e69c      	b.n	80069fc <_dtoa_r+0x6c4>
 8006cc2:	2600      	movs	r6, #0
 8006cc4:	4637      	mov	r7, r6
 8006cc6:	e7e1      	b.n	8006c8c <_dtoa_r+0x954>
 8006cc8:	46bb      	mov	fp, r7
 8006cca:	4637      	mov	r7, r6
 8006ccc:	e599      	b.n	8006802 <_dtoa_r+0x4ca>
 8006cce:	bf00      	nop
 8006cd0:	40240000 	.word	0x40240000
 8006cd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	f000 80c8 	beq.w	8006e6c <_dtoa_r+0xb34>
 8006cdc:	9b04      	ldr	r3, [sp, #16]
 8006cde:	9301      	str	r3, [sp, #4]
 8006ce0:	2d00      	cmp	r5, #0
 8006ce2:	dd05      	ble.n	8006cf0 <_dtoa_r+0x9b8>
 8006ce4:	4639      	mov	r1, r7
 8006ce6:	462a      	mov	r2, r5
 8006ce8:	4620      	mov	r0, r4
 8006cea:	f000 fc27 	bl	800753c <__lshift>
 8006cee:	4607      	mov	r7, r0
 8006cf0:	f1b8 0f00 	cmp.w	r8, #0
 8006cf4:	d05b      	beq.n	8006dae <_dtoa_r+0xa76>
 8006cf6:	6879      	ldr	r1, [r7, #4]
 8006cf8:	4620      	mov	r0, r4
 8006cfa:	f000 fa0f 	bl	800711c <_Balloc>
 8006cfe:	4605      	mov	r5, r0
 8006d00:	b928      	cbnz	r0, 8006d0e <_dtoa_r+0x9d6>
 8006d02:	4b83      	ldr	r3, [pc, #524]	; (8006f10 <_dtoa_r+0xbd8>)
 8006d04:	4602      	mov	r2, r0
 8006d06:	f240 21ef 	movw	r1, #751	; 0x2ef
 8006d0a:	f7ff bb2e 	b.w	800636a <_dtoa_r+0x32>
 8006d0e:	693a      	ldr	r2, [r7, #16]
 8006d10:	3202      	adds	r2, #2
 8006d12:	0092      	lsls	r2, r2, #2
 8006d14:	f107 010c 	add.w	r1, r7, #12
 8006d18:	300c      	adds	r0, #12
 8006d1a:	f000 ffab 	bl	8007c74 <memcpy>
 8006d1e:	2201      	movs	r2, #1
 8006d20:	4629      	mov	r1, r5
 8006d22:	4620      	mov	r0, r4
 8006d24:	f000 fc0a 	bl	800753c <__lshift>
 8006d28:	9b00      	ldr	r3, [sp, #0]
 8006d2a:	3301      	adds	r3, #1
 8006d2c:	9304      	str	r3, [sp, #16]
 8006d2e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006d32:	4413      	add	r3, r2
 8006d34:	9308      	str	r3, [sp, #32]
 8006d36:	9b02      	ldr	r3, [sp, #8]
 8006d38:	f003 0301 	and.w	r3, r3, #1
 8006d3c:	46b8      	mov	r8, r7
 8006d3e:	9306      	str	r3, [sp, #24]
 8006d40:	4607      	mov	r7, r0
 8006d42:	9b04      	ldr	r3, [sp, #16]
 8006d44:	4631      	mov	r1, r6
 8006d46:	3b01      	subs	r3, #1
 8006d48:	4650      	mov	r0, sl
 8006d4a:	9301      	str	r3, [sp, #4]
 8006d4c:	f7ff fa6b 	bl	8006226 <quorem>
 8006d50:	4641      	mov	r1, r8
 8006d52:	9002      	str	r0, [sp, #8]
 8006d54:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006d58:	4650      	mov	r0, sl
 8006d5a:	f000 fc5b 	bl	8007614 <__mcmp>
 8006d5e:	463a      	mov	r2, r7
 8006d60:	9005      	str	r0, [sp, #20]
 8006d62:	4631      	mov	r1, r6
 8006d64:	4620      	mov	r0, r4
 8006d66:	f000 fc71 	bl	800764c <__mdiff>
 8006d6a:	68c2      	ldr	r2, [r0, #12]
 8006d6c:	4605      	mov	r5, r0
 8006d6e:	bb02      	cbnz	r2, 8006db2 <_dtoa_r+0xa7a>
 8006d70:	4601      	mov	r1, r0
 8006d72:	4650      	mov	r0, sl
 8006d74:	f000 fc4e 	bl	8007614 <__mcmp>
 8006d78:	4602      	mov	r2, r0
 8006d7a:	4629      	mov	r1, r5
 8006d7c:	4620      	mov	r0, r4
 8006d7e:	9209      	str	r2, [sp, #36]	; 0x24
 8006d80:	f000 fa0c 	bl	800719c <_Bfree>
 8006d84:	9b07      	ldr	r3, [sp, #28]
 8006d86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d88:	9d04      	ldr	r5, [sp, #16]
 8006d8a:	ea43 0102 	orr.w	r1, r3, r2
 8006d8e:	9b06      	ldr	r3, [sp, #24]
 8006d90:	4319      	orrs	r1, r3
 8006d92:	d110      	bne.n	8006db6 <_dtoa_r+0xa7e>
 8006d94:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006d98:	d029      	beq.n	8006dee <_dtoa_r+0xab6>
 8006d9a:	9b05      	ldr	r3, [sp, #20]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	dd02      	ble.n	8006da6 <_dtoa_r+0xa6e>
 8006da0:	9b02      	ldr	r3, [sp, #8]
 8006da2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8006da6:	9b01      	ldr	r3, [sp, #4]
 8006da8:	f883 9000 	strb.w	r9, [r3]
 8006dac:	e774      	b.n	8006c98 <_dtoa_r+0x960>
 8006dae:	4638      	mov	r0, r7
 8006db0:	e7ba      	b.n	8006d28 <_dtoa_r+0x9f0>
 8006db2:	2201      	movs	r2, #1
 8006db4:	e7e1      	b.n	8006d7a <_dtoa_r+0xa42>
 8006db6:	9b05      	ldr	r3, [sp, #20]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	db04      	blt.n	8006dc6 <_dtoa_r+0xa8e>
 8006dbc:	9907      	ldr	r1, [sp, #28]
 8006dbe:	430b      	orrs	r3, r1
 8006dc0:	9906      	ldr	r1, [sp, #24]
 8006dc2:	430b      	orrs	r3, r1
 8006dc4:	d120      	bne.n	8006e08 <_dtoa_r+0xad0>
 8006dc6:	2a00      	cmp	r2, #0
 8006dc8:	dded      	ble.n	8006da6 <_dtoa_r+0xa6e>
 8006dca:	4651      	mov	r1, sl
 8006dcc:	2201      	movs	r2, #1
 8006dce:	4620      	mov	r0, r4
 8006dd0:	f000 fbb4 	bl	800753c <__lshift>
 8006dd4:	4631      	mov	r1, r6
 8006dd6:	4682      	mov	sl, r0
 8006dd8:	f000 fc1c 	bl	8007614 <__mcmp>
 8006ddc:	2800      	cmp	r0, #0
 8006dde:	dc03      	bgt.n	8006de8 <_dtoa_r+0xab0>
 8006de0:	d1e1      	bne.n	8006da6 <_dtoa_r+0xa6e>
 8006de2:	f019 0f01 	tst.w	r9, #1
 8006de6:	d0de      	beq.n	8006da6 <_dtoa_r+0xa6e>
 8006de8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006dec:	d1d8      	bne.n	8006da0 <_dtoa_r+0xa68>
 8006dee:	9a01      	ldr	r2, [sp, #4]
 8006df0:	2339      	movs	r3, #57	; 0x39
 8006df2:	7013      	strb	r3, [r2, #0]
 8006df4:	462b      	mov	r3, r5
 8006df6:	461d      	mov	r5, r3
 8006df8:	3b01      	subs	r3, #1
 8006dfa:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006dfe:	2a39      	cmp	r2, #57	; 0x39
 8006e00:	d06c      	beq.n	8006edc <_dtoa_r+0xba4>
 8006e02:	3201      	adds	r2, #1
 8006e04:	701a      	strb	r2, [r3, #0]
 8006e06:	e747      	b.n	8006c98 <_dtoa_r+0x960>
 8006e08:	2a00      	cmp	r2, #0
 8006e0a:	dd07      	ble.n	8006e1c <_dtoa_r+0xae4>
 8006e0c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006e10:	d0ed      	beq.n	8006dee <_dtoa_r+0xab6>
 8006e12:	9a01      	ldr	r2, [sp, #4]
 8006e14:	f109 0301 	add.w	r3, r9, #1
 8006e18:	7013      	strb	r3, [r2, #0]
 8006e1a:	e73d      	b.n	8006c98 <_dtoa_r+0x960>
 8006e1c:	9b04      	ldr	r3, [sp, #16]
 8006e1e:	9a08      	ldr	r2, [sp, #32]
 8006e20:	f803 9c01 	strb.w	r9, [r3, #-1]
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d043      	beq.n	8006eb0 <_dtoa_r+0xb78>
 8006e28:	4651      	mov	r1, sl
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	220a      	movs	r2, #10
 8006e2e:	4620      	mov	r0, r4
 8006e30:	f000 f9d6 	bl	80071e0 <__multadd>
 8006e34:	45b8      	cmp	r8, r7
 8006e36:	4682      	mov	sl, r0
 8006e38:	f04f 0300 	mov.w	r3, #0
 8006e3c:	f04f 020a 	mov.w	r2, #10
 8006e40:	4641      	mov	r1, r8
 8006e42:	4620      	mov	r0, r4
 8006e44:	d107      	bne.n	8006e56 <_dtoa_r+0xb1e>
 8006e46:	f000 f9cb 	bl	80071e0 <__multadd>
 8006e4a:	4680      	mov	r8, r0
 8006e4c:	4607      	mov	r7, r0
 8006e4e:	9b04      	ldr	r3, [sp, #16]
 8006e50:	3301      	adds	r3, #1
 8006e52:	9304      	str	r3, [sp, #16]
 8006e54:	e775      	b.n	8006d42 <_dtoa_r+0xa0a>
 8006e56:	f000 f9c3 	bl	80071e0 <__multadd>
 8006e5a:	4639      	mov	r1, r7
 8006e5c:	4680      	mov	r8, r0
 8006e5e:	2300      	movs	r3, #0
 8006e60:	220a      	movs	r2, #10
 8006e62:	4620      	mov	r0, r4
 8006e64:	f000 f9bc 	bl	80071e0 <__multadd>
 8006e68:	4607      	mov	r7, r0
 8006e6a:	e7f0      	b.n	8006e4e <_dtoa_r+0xb16>
 8006e6c:	9b04      	ldr	r3, [sp, #16]
 8006e6e:	9301      	str	r3, [sp, #4]
 8006e70:	9d00      	ldr	r5, [sp, #0]
 8006e72:	4631      	mov	r1, r6
 8006e74:	4650      	mov	r0, sl
 8006e76:	f7ff f9d6 	bl	8006226 <quorem>
 8006e7a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006e7e:	9b00      	ldr	r3, [sp, #0]
 8006e80:	f805 9b01 	strb.w	r9, [r5], #1
 8006e84:	1aea      	subs	r2, r5, r3
 8006e86:	9b01      	ldr	r3, [sp, #4]
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	dd07      	ble.n	8006e9c <_dtoa_r+0xb64>
 8006e8c:	4651      	mov	r1, sl
 8006e8e:	2300      	movs	r3, #0
 8006e90:	220a      	movs	r2, #10
 8006e92:	4620      	mov	r0, r4
 8006e94:	f000 f9a4 	bl	80071e0 <__multadd>
 8006e98:	4682      	mov	sl, r0
 8006e9a:	e7ea      	b.n	8006e72 <_dtoa_r+0xb3a>
 8006e9c:	9b01      	ldr	r3, [sp, #4]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	bfc8      	it	gt
 8006ea2:	461d      	movgt	r5, r3
 8006ea4:	9b00      	ldr	r3, [sp, #0]
 8006ea6:	bfd8      	it	le
 8006ea8:	2501      	movle	r5, #1
 8006eaa:	441d      	add	r5, r3
 8006eac:	f04f 0800 	mov.w	r8, #0
 8006eb0:	4651      	mov	r1, sl
 8006eb2:	2201      	movs	r2, #1
 8006eb4:	4620      	mov	r0, r4
 8006eb6:	f000 fb41 	bl	800753c <__lshift>
 8006eba:	4631      	mov	r1, r6
 8006ebc:	4682      	mov	sl, r0
 8006ebe:	f000 fba9 	bl	8007614 <__mcmp>
 8006ec2:	2800      	cmp	r0, #0
 8006ec4:	dc96      	bgt.n	8006df4 <_dtoa_r+0xabc>
 8006ec6:	d102      	bne.n	8006ece <_dtoa_r+0xb96>
 8006ec8:	f019 0f01 	tst.w	r9, #1
 8006ecc:	d192      	bne.n	8006df4 <_dtoa_r+0xabc>
 8006ece:	462b      	mov	r3, r5
 8006ed0:	461d      	mov	r5, r3
 8006ed2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006ed6:	2a30      	cmp	r2, #48	; 0x30
 8006ed8:	d0fa      	beq.n	8006ed0 <_dtoa_r+0xb98>
 8006eda:	e6dd      	b.n	8006c98 <_dtoa_r+0x960>
 8006edc:	9a00      	ldr	r2, [sp, #0]
 8006ede:	429a      	cmp	r2, r3
 8006ee0:	d189      	bne.n	8006df6 <_dtoa_r+0xabe>
 8006ee2:	f10b 0b01 	add.w	fp, fp, #1
 8006ee6:	2331      	movs	r3, #49	; 0x31
 8006ee8:	e796      	b.n	8006e18 <_dtoa_r+0xae0>
 8006eea:	4b0a      	ldr	r3, [pc, #40]	; (8006f14 <_dtoa_r+0xbdc>)
 8006eec:	f7ff ba99 	b.w	8006422 <_dtoa_r+0xea>
 8006ef0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	f47f aa6d 	bne.w	80063d2 <_dtoa_r+0x9a>
 8006ef8:	4b07      	ldr	r3, [pc, #28]	; (8006f18 <_dtoa_r+0xbe0>)
 8006efa:	f7ff ba92 	b.w	8006422 <_dtoa_r+0xea>
 8006efe:	9b01      	ldr	r3, [sp, #4]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	dcb5      	bgt.n	8006e70 <_dtoa_r+0xb38>
 8006f04:	9b07      	ldr	r3, [sp, #28]
 8006f06:	2b02      	cmp	r3, #2
 8006f08:	f73f aeb1 	bgt.w	8006c6e <_dtoa_r+0x936>
 8006f0c:	e7b0      	b.n	8006e70 <_dtoa_r+0xb38>
 8006f0e:	bf00      	nop
 8006f10:	08008478 	.word	0x08008478
 8006f14:	080083d8 	.word	0x080083d8
 8006f18:	080083fc 	.word	0x080083fc

08006f1c <_free_r>:
 8006f1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006f1e:	2900      	cmp	r1, #0
 8006f20:	d044      	beq.n	8006fac <_free_r+0x90>
 8006f22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f26:	9001      	str	r0, [sp, #4]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	f1a1 0404 	sub.w	r4, r1, #4
 8006f2e:	bfb8      	it	lt
 8006f30:	18e4      	addlt	r4, r4, r3
 8006f32:	f000 f8e7 	bl	8007104 <__malloc_lock>
 8006f36:	4a1e      	ldr	r2, [pc, #120]	; (8006fb0 <_free_r+0x94>)
 8006f38:	9801      	ldr	r0, [sp, #4]
 8006f3a:	6813      	ldr	r3, [r2, #0]
 8006f3c:	b933      	cbnz	r3, 8006f4c <_free_r+0x30>
 8006f3e:	6063      	str	r3, [r4, #4]
 8006f40:	6014      	str	r4, [r2, #0]
 8006f42:	b003      	add	sp, #12
 8006f44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006f48:	f000 b8e2 	b.w	8007110 <__malloc_unlock>
 8006f4c:	42a3      	cmp	r3, r4
 8006f4e:	d908      	bls.n	8006f62 <_free_r+0x46>
 8006f50:	6825      	ldr	r5, [r4, #0]
 8006f52:	1961      	adds	r1, r4, r5
 8006f54:	428b      	cmp	r3, r1
 8006f56:	bf01      	itttt	eq
 8006f58:	6819      	ldreq	r1, [r3, #0]
 8006f5a:	685b      	ldreq	r3, [r3, #4]
 8006f5c:	1949      	addeq	r1, r1, r5
 8006f5e:	6021      	streq	r1, [r4, #0]
 8006f60:	e7ed      	b.n	8006f3e <_free_r+0x22>
 8006f62:	461a      	mov	r2, r3
 8006f64:	685b      	ldr	r3, [r3, #4]
 8006f66:	b10b      	cbz	r3, 8006f6c <_free_r+0x50>
 8006f68:	42a3      	cmp	r3, r4
 8006f6a:	d9fa      	bls.n	8006f62 <_free_r+0x46>
 8006f6c:	6811      	ldr	r1, [r2, #0]
 8006f6e:	1855      	adds	r5, r2, r1
 8006f70:	42a5      	cmp	r5, r4
 8006f72:	d10b      	bne.n	8006f8c <_free_r+0x70>
 8006f74:	6824      	ldr	r4, [r4, #0]
 8006f76:	4421      	add	r1, r4
 8006f78:	1854      	adds	r4, r2, r1
 8006f7a:	42a3      	cmp	r3, r4
 8006f7c:	6011      	str	r1, [r2, #0]
 8006f7e:	d1e0      	bne.n	8006f42 <_free_r+0x26>
 8006f80:	681c      	ldr	r4, [r3, #0]
 8006f82:	685b      	ldr	r3, [r3, #4]
 8006f84:	6053      	str	r3, [r2, #4]
 8006f86:	440c      	add	r4, r1
 8006f88:	6014      	str	r4, [r2, #0]
 8006f8a:	e7da      	b.n	8006f42 <_free_r+0x26>
 8006f8c:	d902      	bls.n	8006f94 <_free_r+0x78>
 8006f8e:	230c      	movs	r3, #12
 8006f90:	6003      	str	r3, [r0, #0]
 8006f92:	e7d6      	b.n	8006f42 <_free_r+0x26>
 8006f94:	6825      	ldr	r5, [r4, #0]
 8006f96:	1961      	adds	r1, r4, r5
 8006f98:	428b      	cmp	r3, r1
 8006f9a:	bf04      	itt	eq
 8006f9c:	6819      	ldreq	r1, [r3, #0]
 8006f9e:	685b      	ldreq	r3, [r3, #4]
 8006fa0:	6063      	str	r3, [r4, #4]
 8006fa2:	bf04      	itt	eq
 8006fa4:	1949      	addeq	r1, r1, r5
 8006fa6:	6021      	streq	r1, [r4, #0]
 8006fa8:	6054      	str	r4, [r2, #4]
 8006faa:	e7ca      	b.n	8006f42 <_free_r+0x26>
 8006fac:	b003      	add	sp, #12
 8006fae:	bd30      	pop	{r4, r5, pc}
 8006fb0:	200004c0 	.word	0x200004c0

08006fb4 <malloc>:
 8006fb4:	4b02      	ldr	r3, [pc, #8]	; (8006fc0 <malloc+0xc>)
 8006fb6:	4601      	mov	r1, r0
 8006fb8:	6818      	ldr	r0, [r3, #0]
 8006fba:	f000 b823 	b.w	8007004 <_malloc_r>
 8006fbe:	bf00      	nop
 8006fc0:	20000064 	.word	0x20000064

08006fc4 <sbrk_aligned>:
 8006fc4:	b570      	push	{r4, r5, r6, lr}
 8006fc6:	4e0e      	ldr	r6, [pc, #56]	; (8007000 <sbrk_aligned+0x3c>)
 8006fc8:	460c      	mov	r4, r1
 8006fca:	6831      	ldr	r1, [r6, #0]
 8006fcc:	4605      	mov	r5, r0
 8006fce:	b911      	cbnz	r1, 8006fd6 <sbrk_aligned+0x12>
 8006fd0:	f000 fe40 	bl	8007c54 <_sbrk_r>
 8006fd4:	6030      	str	r0, [r6, #0]
 8006fd6:	4621      	mov	r1, r4
 8006fd8:	4628      	mov	r0, r5
 8006fda:	f000 fe3b 	bl	8007c54 <_sbrk_r>
 8006fde:	1c43      	adds	r3, r0, #1
 8006fe0:	d00a      	beq.n	8006ff8 <sbrk_aligned+0x34>
 8006fe2:	1cc4      	adds	r4, r0, #3
 8006fe4:	f024 0403 	bic.w	r4, r4, #3
 8006fe8:	42a0      	cmp	r0, r4
 8006fea:	d007      	beq.n	8006ffc <sbrk_aligned+0x38>
 8006fec:	1a21      	subs	r1, r4, r0
 8006fee:	4628      	mov	r0, r5
 8006ff0:	f000 fe30 	bl	8007c54 <_sbrk_r>
 8006ff4:	3001      	adds	r0, #1
 8006ff6:	d101      	bne.n	8006ffc <sbrk_aligned+0x38>
 8006ff8:	f04f 34ff 	mov.w	r4, #4294967295
 8006ffc:	4620      	mov	r0, r4
 8006ffe:	bd70      	pop	{r4, r5, r6, pc}
 8007000:	200004c4 	.word	0x200004c4

08007004 <_malloc_r>:
 8007004:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007008:	1ccd      	adds	r5, r1, #3
 800700a:	f025 0503 	bic.w	r5, r5, #3
 800700e:	3508      	adds	r5, #8
 8007010:	2d0c      	cmp	r5, #12
 8007012:	bf38      	it	cc
 8007014:	250c      	movcc	r5, #12
 8007016:	2d00      	cmp	r5, #0
 8007018:	4607      	mov	r7, r0
 800701a:	db01      	blt.n	8007020 <_malloc_r+0x1c>
 800701c:	42a9      	cmp	r1, r5
 800701e:	d905      	bls.n	800702c <_malloc_r+0x28>
 8007020:	230c      	movs	r3, #12
 8007022:	603b      	str	r3, [r7, #0]
 8007024:	2600      	movs	r6, #0
 8007026:	4630      	mov	r0, r6
 8007028:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800702c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007100 <_malloc_r+0xfc>
 8007030:	f000 f868 	bl	8007104 <__malloc_lock>
 8007034:	f8d8 3000 	ldr.w	r3, [r8]
 8007038:	461c      	mov	r4, r3
 800703a:	bb5c      	cbnz	r4, 8007094 <_malloc_r+0x90>
 800703c:	4629      	mov	r1, r5
 800703e:	4638      	mov	r0, r7
 8007040:	f7ff ffc0 	bl	8006fc4 <sbrk_aligned>
 8007044:	1c43      	adds	r3, r0, #1
 8007046:	4604      	mov	r4, r0
 8007048:	d155      	bne.n	80070f6 <_malloc_r+0xf2>
 800704a:	f8d8 4000 	ldr.w	r4, [r8]
 800704e:	4626      	mov	r6, r4
 8007050:	2e00      	cmp	r6, #0
 8007052:	d145      	bne.n	80070e0 <_malloc_r+0xdc>
 8007054:	2c00      	cmp	r4, #0
 8007056:	d048      	beq.n	80070ea <_malloc_r+0xe6>
 8007058:	6823      	ldr	r3, [r4, #0]
 800705a:	4631      	mov	r1, r6
 800705c:	4638      	mov	r0, r7
 800705e:	eb04 0903 	add.w	r9, r4, r3
 8007062:	f000 fdf7 	bl	8007c54 <_sbrk_r>
 8007066:	4581      	cmp	r9, r0
 8007068:	d13f      	bne.n	80070ea <_malloc_r+0xe6>
 800706a:	6821      	ldr	r1, [r4, #0]
 800706c:	1a6d      	subs	r5, r5, r1
 800706e:	4629      	mov	r1, r5
 8007070:	4638      	mov	r0, r7
 8007072:	f7ff ffa7 	bl	8006fc4 <sbrk_aligned>
 8007076:	3001      	adds	r0, #1
 8007078:	d037      	beq.n	80070ea <_malloc_r+0xe6>
 800707a:	6823      	ldr	r3, [r4, #0]
 800707c:	442b      	add	r3, r5
 800707e:	6023      	str	r3, [r4, #0]
 8007080:	f8d8 3000 	ldr.w	r3, [r8]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d038      	beq.n	80070fa <_malloc_r+0xf6>
 8007088:	685a      	ldr	r2, [r3, #4]
 800708a:	42a2      	cmp	r2, r4
 800708c:	d12b      	bne.n	80070e6 <_malloc_r+0xe2>
 800708e:	2200      	movs	r2, #0
 8007090:	605a      	str	r2, [r3, #4]
 8007092:	e00f      	b.n	80070b4 <_malloc_r+0xb0>
 8007094:	6822      	ldr	r2, [r4, #0]
 8007096:	1b52      	subs	r2, r2, r5
 8007098:	d41f      	bmi.n	80070da <_malloc_r+0xd6>
 800709a:	2a0b      	cmp	r2, #11
 800709c:	d917      	bls.n	80070ce <_malloc_r+0xca>
 800709e:	1961      	adds	r1, r4, r5
 80070a0:	42a3      	cmp	r3, r4
 80070a2:	6025      	str	r5, [r4, #0]
 80070a4:	bf18      	it	ne
 80070a6:	6059      	strne	r1, [r3, #4]
 80070a8:	6863      	ldr	r3, [r4, #4]
 80070aa:	bf08      	it	eq
 80070ac:	f8c8 1000 	streq.w	r1, [r8]
 80070b0:	5162      	str	r2, [r4, r5]
 80070b2:	604b      	str	r3, [r1, #4]
 80070b4:	4638      	mov	r0, r7
 80070b6:	f104 060b 	add.w	r6, r4, #11
 80070ba:	f000 f829 	bl	8007110 <__malloc_unlock>
 80070be:	f026 0607 	bic.w	r6, r6, #7
 80070c2:	1d23      	adds	r3, r4, #4
 80070c4:	1af2      	subs	r2, r6, r3
 80070c6:	d0ae      	beq.n	8007026 <_malloc_r+0x22>
 80070c8:	1b9b      	subs	r3, r3, r6
 80070ca:	50a3      	str	r3, [r4, r2]
 80070cc:	e7ab      	b.n	8007026 <_malloc_r+0x22>
 80070ce:	42a3      	cmp	r3, r4
 80070d0:	6862      	ldr	r2, [r4, #4]
 80070d2:	d1dd      	bne.n	8007090 <_malloc_r+0x8c>
 80070d4:	f8c8 2000 	str.w	r2, [r8]
 80070d8:	e7ec      	b.n	80070b4 <_malloc_r+0xb0>
 80070da:	4623      	mov	r3, r4
 80070dc:	6864      	ldr	r4, [r4, #4]
 80070de:	e7ac      	b.n	800703a <_malloc_r+0x36>
 80070e0:	4634      	mov	r4, r6
 80070e2:	6876      	ldr	r6, [r6, #4]
 80070e4:	e7b4      	b.n	8007050 <_malloc_r+0x4c>
 80070e6:	4613      	mov	r3, r2
 80070e8:	e7cc      	b.n	8007084 <_malloc_r+0x80>
 80070ea:	230c      	movs	r3, #12
 80070ec:	603b      	str	r3, [r7, #0]
 80070ee:	4638      	mov	r0, r7
 80070f0:	f000 f80e 	bl	8007110 <__malloc_unlock>
 80070f4:	e797      	b.n	8007026 <_malloc_r+0x22>
 80070f6:	6025      	str	r5, [r4, #0]
 80070f8:	e7dc      	b.n	80070b4 <_malloc_r+0xb0>
 80070fa:	605b      	str	r3, [r3, #4]
 80070fc:	deff      	udf	#255	; 0xff
 80070fe:	bf00      	nop
 8007100:	200004c0 	.word	0x200004c0

08007104 <__malloc_lock>:
 8007104:	4801      	ldr	r0, [pc, #4]	; (800710c <__malloc_lock+0x8>)
 8007106:	f7ff b88c 	b.w	8006222 <__retarget_lock_acquire_recursive>
 800710a:	bf00      	nop
 800710c:	200004bc 	.word	0x200004bc

08007110 <__malloc_unlock>:
 8007110:	4801      	ldr	r0, [pc, #4]	; (8007118 <__malloc_unlock+0x8>)
 8007112:	f7ff b887 	b.w	8006224 <__retarget_lock_release_recursive>
 8007116:	bf00      	nop
 8007118:	200004bc 	.word	0x200004bc

0800711c <_Balloc>:
 800711c:	b570      	push	{r4, r5, r6, lr}
 800711e:	69c6      	ldr	r6, [r0, #28]
 8007120:	4604      	mov	r4, r0
 8007122:	460d      	mov	r5, r1
 8007124:	b976      	cbnz	r6, 8007144 <_Balloc+0x28>
 8007126:	2010      	movs	r0, #16
 8007128:	f7ff ff44 	bl	8006fb4 <malloc>
 800712c:	4602      	mov	r2, r0
 800712e:	61e0      	str	r0, [r4, #28]
 8007130:	b920      	cbnz	r0, 800713c <_Balloc+0x20>
 8007132:	4b18      	ldr	r3, [pc, #96]	; (8007194 <_Balloc+0x78>)
 8007134:	4818      	ldr	r0, [pc, #96]	; (8007198 <_Balloc+0x7c>)
 8007136:	216b      	movs	r1, #107	; 0x6b
 8007138:	f000 fdaa 	bl	8007c90 <__assert_func>
 800713c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007140:	6006      	str	r6, [r0, #0]
 8007142:	60c6      	str	r6, [r0, #12]
 8007144:	69e6      	ldr	r6, [r4, #28]
 8007146:	68f3      	ldr	r3, [r6, #12]
 8007148:	b183      	cbz	r3, 800716c <_Balloc+0x50>
 800714a:	69e3      	ldr	r3, [r4, #28]
 800714c:	68db      	ldr	r3, [r3, #12]
 800714e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007152:	b9b8      	cbnz	r0, 8007184 <_Balloc+0x68>
 8007154:	2101      	movs	r1, #1
 8007156:	fa01 f605 	lsl.w	r6, r1, r5
 800715a:	1d72      	adds	r2, r6, #5
 800715c:	0092      	lsls	r2, r2, #2
 800715e:	4620      	mov	r0, r4
 8007160:	f000 fdb4 	bl	8007ccc <_calloc_r>
 8007164:	b160      	cbz	r0, 8007180 <_Balloc+0x64>
 8007166:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800716a:	e00e      	b.n	800718a <_Balloc+0x6e>
 800716c:	2221      	movs	r2, #33	; 0x21
 800716e:	2104      	movs	r1, #4
 8007170:	4620      	mov	r0, r4
 8007172:	f000 fdab 	bl	8007ccc <_calloc_r>
 8007176:	69e3      	ldr	r3, [r4, #28]
 8007178:	60f0      	str	r0, [r6, #12]
 800717a:	68db      	ldr	r3, [r3, #12]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d1e4      	bne.n	800714a <_Balloc+0x2e>
 8007180:	2000      	movs	r0, #0
 8007182:	bd70      	pop	{r4, r5, r6, pc}
 8007184:	6802      	ldr	r2, [r0, #0]
 8007186:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800718a:	2300      	movs	r3, #0
 800718c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007190:	e7f7      	b.n	8007182 <_Balloc+0x66>
 8007192:	bf00      	nop
 8007194:	08008409 	.word	0x08008409
 8007198:	08008489 	.word	0x08008489

0800719c <_Bfree>:
 800719c:	b570      	push	{r4, r5, r6, lr}
 800719e:	69c6      	ldr	r6, [r0, #28]
 80071a0:	4605      	mov	r5, r0
 80071a2:	460c      	mov	r4, r1
 80071a4:	b976      	cbnz	r6, 80071c4 <_Bfree+0x28>
 80071a6:	2010      	movs	r0, #16
 80071a8:	f7ff ff04 	bl	8006fb4 <malloc>
 80071ac:	4602      	mov	r2, r0
 80071ae:	61e8      	str	r0, [r5, #28]
 80071b0:	b920      	cbnz	r0, 80071bc <_Bfree+0x20>
 80071b2:	4b09      	ldr	r3, [pc, #36]	; (80071d8 <_Bfree+0x3c>)
 80071b4:	4809      	ldr	r0, [pc, #36]	; (80071dc <_Bfree+0x40>)
 80071b6:	218f      	movs	r1, #143	; 0x8f
 80071b8:	f000 fd6a 	bl	8007c90 <__assert_func>
 80071bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80071c0:	6006      	str	r6, [r0, #0]
 80071c2:	60c6      	str	r6, [r0, #12]
 80071c4:	b13c      	cbz	r4, 80071d6 <_Bfree+0x3a>
 80071c6:	69eb      	ldr	r3, [r5, #28]
 80071c8:	6862      	ldr	r2, [r4, #4]
 80071ca:	68db      	ldr	r3, [r3, #12]
 80071cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80071d0:	6021      	str	r1, [r4, #0]
 80071d2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80071d6:	bd70      	pop	{r4, r5, r6, pc}
 80071d8:	08008409 	.word	0x08008409
 80071dc:	08008489 	.word	0x08008489

080071e0 <__multadd>:
 80071e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071e4:	690d      	ldr	r5, [r1, #16]
 80071e6:	4607      	mov	r7, r0
 80071e8:	460c      	mov	r4, r1
 80071ea:	461e      	mov	r6, r3
 80071ec:	f101 0c14 	add.w	ip, r1, #20
 80071f0:	2000      	movs	r0, #0
 80071f2:	f8dc 3000 	ldr.w	r3, [ip]
 80071f6:	b299      	uxth	r1, r3
 80071f8:	fb02 6101 	mla	r1, r2, r1, r6
 80071fc:	0c1e      	lsrs	r6, r3, #16
 80071fe:	0c0b      	lsrs	r3, r1, #16
 8007200:	fb02 3306 	mla	r3, r2, r6, r3
 8007204:	b289      	uxth	r1, r1
 8007206:	3001      	adds	r0, #1
 8007208:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800720c:	4285      	cmp	r5, r0
 800720e:	f84c 1b04 	str.w	r1, [ip], #4
 8007212:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007216:	dcec      	bgt.n	80071f2 <__multadd+0x12>
 8007218:	b30e      	cbz	r6, 800725e <__multadd+0x7e>
 800721a:	68a3      	ldr	r3, [r4, #8]
 800721c:	42ab      	cmp	r3, r5
 800721e:	dc19      	bgt.n	8007254 <__multadd+0x74>
 8007220:	6861      	ldr	r1, [r4, #4]
 8007222:	4638      	mov	r0, r7
 8007224:	3101      	adds	r1, #1
 8007226:	f7ff ff79 	bl	800711c <_Balloc>
 800722a:	4680      	mov	r8, r0
 800722c:	b928      	cbnz	r0, 800723a <__multadd+0x5a>
 800722e:	4602      	mov	r2, r0
 8007230:	4b0c      	ldr	r3, [pc, #48]	; (8007264 <__multadd+0x84>)
 8007232:	480d      	ldr	r0, [pc, #52]	; (8007268 <__multadd+0x88>)
 8007234:	21ba      	movs	r1, #186	; 0xba
 8007236:	f000 fd2b 	bl	8007c90 <__assert_func>
 800723a:	6922      	ldr	r2, [r4, #16]
 800723c:	3202      	adds	r2, #2
 800723e:	f104 010c 	add.w	r1, r4, #12
 8007242:	0092      	lsls	r2, r2, #2
 8007244:	300c      	adds	r0, #12
 8007246:	f000 fd15 	bl	8007c74 <memcpy>
 800724a:	4621      	mov	r1, r4
 800724c:	4638      	mov	r0, r7
 800724e:	f7ff ffa5 	bl	800719c <_Bfree>
 8007252:	4644      	mov	r4, r8
 8007254:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007258:	3501      	adds	r5, #1
 800725a:	615e      	str	r6, [r3, #20]
 800725c:	6125      	str	r5, [r4, #16]
 800725e:	4620      	mov	r0, r4
 8007260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007264:	08008478 	.word	0x08008478
 8007268:	08008489 	.word	0x08008489

0800726c <__hi0bits>:
 800726c:	0c03      	lsrs	r3, r0, #16
 800726e:	041b      	lsls	r3, r3, #16
 8007270:	b9d3      	cbnz	r3, 80072a8 <__hi0bits+0x3c>
 8007272:	0400      	lsls	r0, r0, #16
 8007274:	2310      	movs	r3, #16
 8007276:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800727a:	bf04      	itt	eq
 800727c:	0200      	lsleq	r0, r0, #8
 800727e:	3308      	addeq	r3, #8
 8007280:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007284:	bf04      	itt	eq
 8007286:	0100      	lsleq	r0, r0, #4
 8007288:	3304      	addeq	r3, #4
 800728a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800728e:	bf04      	itt	eq
 8007290:	0080      	lsleq	r0, r0, #2
 8007292:	3302      	addeq	r3, #2
 8007294:	2800      	cmp	r0, #0
 8007296:	db05      	blt.n	80072a4 <__hi0bits+0x38>
 8007298:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800729c:	f103 0301 	add.w	r3, r3, #1
 80072a0:	bf08      	it	eq
 80072a2:	2320      	moveq	r3, #32
 80072a4:	4618      	mov	r0, r3
 80072a6:	4770      	bx	lr
 80072a8:	2300      	movs	r3, #0
 80072aa:	e7e4      	b.n	8007276 <__hi0bits+0xa>

080072ac <__lo0bits>:
 80072ac:	6803      	ldr	r3, [r0, #0]
 80072ae:	f013 0207 	ands.w	r2, r3, #7
 80072b2:	d00c      	beq.n	80072ce <__lo0bits+0x22>
 80072b4:	07d9      	lsls	r1, r3, #31
 80072b6:	d422      	bmi.n	80072fe <__lo0bits+0x52>
 80072b8:	079a      	lsls	r2, r3, #30
 80072ba:	bf49      	itett	mi
 80072bc:	085b      	lsrmi	r3, r3, #1
 80072be:	089b      	lsrpl	r3, r3, #2
 80072c0:	6003      	strmi	r3, [r0, #0]
 80072c2:	2201      	movmi	r2, #1
 80072c4:	bf5c      	itt	pl
 80072c6:	6003      	strpl	r3, [r0, #0]
 80072c8:	2202      	movpl	r2, #2
 80072ca:	4610      	mov	r0, r2
 80072cc:	4770      	bx	lr
 80072ce:	b299      	uxth	r1, r3
 80072d0:	b909      	cbnz	r1, 80072d6 <__lo0bits+0x2a>
 80072d2:	0c1b      	lsrs	r3, r3, #16
 80072d4:	2210      	movs	r2, #16
 80072d6:	b2d9      	uxtb	r1, r3
 80072d8:	b909      	cbnz	r1, 80072de <__lo0bits+0x32>
 80072da:	3208      	adds	r2, #8
 80072dc:	0a1b      	lsrs	r3, r3, #8
 80072de:	0719      	lsls	r1, r3, #28
 80072e0:	bf04      	itt	eq
 80072e2:	091b      	lsreq	r3, r3, #4
 80072e4:	3204      	addeq	r2, #4
 80072e6:	0799      	lsls	r1, r3, #30
 80072e8:	bf04      	itt	eq
 80072ea:	089b      	lsreq	r3, r3, #2
 80072ec:	3202      	addeq	r2, #2
 80072ee:	07d9      	lsls	r1, r3, #31
 80072f0:	d403      	bmi.n	80072fa <__lo0bits+0x4e>
 80072f2:	085b      	lsrs	r3, r3, #1
 80072f4:	f102 0201 	add.w	r2, r2, #1
 80072f8:	d003      	beq.n	8007302 <__lo0bits+0x56>
 80072fa:	6003      	str	r3, [r0, #0]
 80072fc:	e7e5      	b.n	80072ca <__lo0bits+0x1e>
 80072fe:	2200      	movs	r2, #0
 8007300:	e7e3      	b.n	80072ca <__lo0bits+0x1e>
 8007302:	2220      	movs	r2, #32
 8007304:	e7e1      	b.n	80072ca <__lo0bits+0x1e>
	...

08007308 <__i2b>:
 8007308:	b510      	push	{r4, lr}
 800730a:	460c      	mov	r4, r1
 800730c:	2101      	movs	r1, #1
 800730e:	f7ff ff05 	bl	800711c <_Balloc>
 8007312:	4602      	mov	r2, r0
 8007314:	b928      	cbnz	r0, 8007322 <__i2b+0x1a>
 8007316:	4b05      	ldr	r3, [pc, #20]	; (800732c <__i2b+0x24>)
 8007318:	4805      	ldr	r0, [pc, #20]	; (8007330 <__i2b+0x28>)
 800731a:	f240 1145 	movw	r1, #325	; 0x145
 800731e:	f000 fcb7 	bl	8007c90 <__assert_func>
 8007322:	2301      	movs	r3, #1
 8007324:	6144      	str	r4, [r0, #20]
 8007326:	6103      	str	r3, [r0, #16]
 8007328:	bd10      	pop	{r4, pc}
 800732a:	bf00      	nop
 800732c:	08008478 	.word	0x08008478
 8007330:	08008489 	.word	0x08008489

08007334 <__multiply>:
 8007334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007338:	4691      	mov	r9, r2
 800733a:	690a      	ldr	r2, [r1, #16]
 800733c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007340:	429a      	cmp	r2, r3
 8007342:	bfb8      	it	lt
 8007344:	460b      	movlt	r3, r1
 8007346:	460c      	mov	r4, r1
 8007348:	bfbc      	itt	lt
 800734a:	464c      	movlt	r4, r9
 800734c:	4699      	movlt	r9, r3
 800734e:	6927      	ldr	r7, [r4, #16]
 8007350:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007354:	68a3      	ldr	r3, [r4, #8]
 8007356:	6861      	ldr	r1, [r4, #4]
 8007358:	eb07 060a 	add.w	r6, r7, sl
 800735c:	42b3      	cmp	r3, r6
 800735e:	b085      	sub	sp, #20
 8007360:	bfb8      	it	lt
 8007362:	3101      	addlt	r1, #1
 8007364:	f7ff feda 	bl	800711c <_Balloc>
 8007368:	b930      	cbnz	r0, 8007378 <__multiply+0x44>
 800736a:	4602      	mov	r2, r0
 800736c:	4b44      	ldr	r3, [pc, #272]	; (8007480 <__multiply+0x14c>)
 800736e:	4845      	ldr	r0, [pc, #276]	; (8007484 <__multiply+0x150>)
 8007370:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8007374:	f000 fc8c 	bl	8007c90 <__assert_func>
 8007378:	f100 0514 	add.w	r5, r0, #20
 800737c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007380:	462b      	mov	r3, r5
 8007382:	2200      	movs	r2, #0
 8007384:	4543      	cmp	r3, r8
 8007386:	d321      	bcc.n	80073cc <__multiply+0x98>
 8007388:	f104 0314 	add.w	r3, r4, #20
 800738c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007390:	f109 0314 	add.w	r3, r9, #20
 8007394:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007398:	9202      	str	r2, [sp, #8]
 800739a:	1b3a      	subs	r2, r7, r4
 800739c:	3a15      	subs	r2, #21
 800739e:	f022 0203 	bic.w	r2, r2, #3
 80073a2:	3204      	adds	r2, #4
 80073a4:	f104 0115 	add.w	r1, r4, #21
 80073a8:	428f      	cmp	r7, r1
 80073aa:	bf38      	it	cc
 80073ac:	2204      	movcc	r2, #4
 80073ae:	9201      	str	r2, [sp, #4]
 80073b0:	9a02      	ldr	r2, [sp, #8]
 80073b2:	9303      	str	r3, [sp, #12]
 80073b4:	429a      	cmp	r2, r3
 80073b6:	d80c      	bhi.n	80073d2 <__multiply+0x9e>
 80073b8:	2e00      	cmp	r6, #0
 80073ba:	dd03      	ble.n	80073c4 <__multiply+0x90>
 80073bc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d05b      	beq.n	800747c <__multiply+0x148>
 80073c4:	6106      	str	r6, [r0, #16]
 80073c6:	b005      	add	sp, #20
 80073c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073cc:	f843 2b04 	str.w	r2, [r3], #4
 80073d0:	e7d8      	b.n	8007384 <__multiply+0x50>
 80073d2:	f8b3 a000 	ldrh.w	sl, [r3]
 80073d6:	f1ba 0f00 	cmp.w	sl, #0
 80073da:	d024      	beq.n	8007426 <__multiply+0xf2>
 80073dc:	f104 0e14 	add.w	lr, r4, #20
 80073e0:	46a9      	mov	r9, r5
 80073e2:	f04f 0c00 	mov.w	ip, #0
 80073e6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80073ea:	f8d9 1000 	ldr.w	r1, [r9]
 80073ee:	fa1f fb82 	uxth.w	fp, r2
 80073f2:	b289      	uxth	r1, r1
 80073f4:	fb0a 110b 	mla	r1, sl, fp, r1
 80073f8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80073fc:	f8d9 2000 	ldr.w	r2, [r9]
 8007400:	4461      	add	r1, ip
 8007402:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007406:	fb0a c20b 	mla	r2, sl, fp, ip
 800740a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800740e:	b289      	uxth	r1, r1
 8007410:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007414:	4577      	cmp	r7, lr
 8007416:	f849 1b04 	str.w	r1, [r9], #4
 800741a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800741e:	d8e2      	bhi.n	80073e6 <__multiply+0xb2>
 8007420:	9a01      	ldr	r2, [sp, #4]
 8007422:	f845 c002 	str.w	ip, [r5, r2]
 8007426:	9a03      	ldr	r2, [sp, #12]
 8007428:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800742c:	3304      	adds	r3, #4
 800742e:	f1b9 0f00 	cmp.w	r9, #0
 8007432:	d021      	beq.n	8007478 <__multiply+0x144>
 8007434:	6829      	ldr	r1, [r5, #0]
 8007436:	f104 0c14 	add.w	ip, r4, #20
 800743a:	46ae      	mov	lr, r5
 800743c:	f04f 0a00 	mov.w	sl, #0
 8007440:	f8bc b000 	ldrh.w	fp, [ip]
 8007444:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007448:	fb09 220b 	mla	r2, r9, fp, r2
 800744c:	4452      	add	r2, sl
 800744e:	b289      	uxth	r1, r1
 8007450:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007454:	f84e 1b04 	str.w	r1, [lr], #4
 8007458:	f85c 1b04 	ldr.w	r1, [ip], #4
 800745c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007460:	f8be 1000 	ldrh.w	r1, [lr]
 8007464:	fb09 110a 	mla	r1, r9, sl, r1
 8007468:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800746c:	4567      	cmp	r7, ip
 800746e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007472:	d8e5      	bhi.n	8007440 <__multiply+0x10c>
 8007474:	9a01      	ldr	r2, [sp, #4]
 8007476:	50a9      	str	r1, [r5, r2]
 8007478:	3504      	adds	r5, #4
 800747a:	e799      	b.n	80073b0 <__multiply+0x7c>
 800747c:	3e01      	subs	r6, #1
 800747e:	e79b      	b.n	80073b8 <__multiply+0x84>
 8007480:	08008478 	.word	0x08008478
 8007484:	08008489 	.word	0x08008489

08007488 <__pow5mult>:
 8007488:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800748c:	4615      	mov	r5, r2
 800748e:	f012 0203 	ands.w	r2, r2, #3
 8007492:	4606      	mov	r6, r0
 8007494:	460f      	mov	r7, r1
 8007496:	d007      	beq.n	80074a8 <__pow5mult+0x20>
 8007498:	4c25      	ldr	r4, [pc, #148]	; (8007530 <__pow5mult+0xa8>)
 800749a:	3a01      	subs	r2, #1
 800749c:	2300      	movs	r3, #0
 800749e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80074a2:	f7ff fe9d 	bl	80071e0 <__multadd>
 80074a6:	4607      	mov	r7, r0
 80074a8:	10ad      	asrs	r5, r5, #2
 80074aa:	d03d      	beq.n	8007528 <__pow5mult+0xa0>
 80074ac:	69f4      	ldr	r4, [r6, #28]
 80074ae:	b97c      	cbnz	r4, 80074d0 <__pow5mult+0x48>
 80074b0:	2010      	movs	r0, #16
 80074b2:	f7ff fd7f 	bl	8006fb4 <malloc>
 80074b6:	4602      	mov	r2, r0
 80074b8:	61f0      	str	r0, [r6, #28]
 80074ba:	b928      	cbnz	r0, 80074c8 <__pow5mult+0x40>
 80074bc:	4b1d      	ldr	r3, [pc, #116]	; (8007534 <__pow5mult+0xac>)
 80074be:	481e      	ldr	r0, [pc, #120]	; (8007538 <__pow5mult+0xb0>)
 80074c0:	f240 11b3 	movw	r1, #435	; 0x1b3
 80074c4:	f000 fbe4 	bl	8007c90 <__assert_func>
 80074c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80074cc:	6004      	str	r4, [r0, #0]
 80074ce:	60c4      	str	r4, [r0, #12]
 80074d0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80074d4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80074d8:	b94c      	cbnz	r4, 80074ee <__pow5mult+0x66>
 80074da:	f240 2171 	movw	r1, #625	; 0x271
 80074de:	4630      	mov	r0, r6
 80074e0:	f7ff ff12 	bl	8007308 <__i2b>
 80074e4:	2300      	movs	r3, #0
 80074e6:	f8c8 0008 	str.w	r0, [r8, #8]
 80074ea:	4604      	mov	r4, r0
 80074ec:	6003      	str	r3, [r0, #0]
 80074ee:	f04f 0900 	mov.w	r9, #0
 80074f2:	07eb      	lsls	r3, r5, #31
 80074f4:	d50a      	bpl.n	800750c <__pow5mult+0x84>
 80074f6:	4639      	mov	r1, r7
 80074f8:	4622      	mov	r2, r4
 80074fa:	4630      	mov	r0, r6
 80074fc:	f7ff ff1a 	bl	8007334 <__multiply>
 8007500:	4639      	mov	r1, r7
 8007502:	4680      	mov	r8, r0
 8007504:	4630      	mov	r0, r6
 8007506:	f7ff fe49 	bl	800719c <_Bfree>
 800750a:	4647      	mov	r7, r8
 800750c:	106d      	asrs	r5, r5, #1
 800750e:	d00b      	beq.n	8007528 <__pow5mult+0xa0>
 8007510:	6820      	ldr	r0, [r4, #0]
 8007512:	b938      	cbnz	r0, 8007524 <__pow5mult+0x9c>
 8007514:	4622      	mov	r2, r4
 8007516:	4621      	mov	r1, r4
 8007518:	4630      	mov	r0, r6
 800751a:	f7ff ff0b 	bl	8007334 <__multiply>
 800751e:	6020      	str	r0, [r4, #0]
 8007520:	f8c0 9000 	str.w	r9, [r0]
 8007524:	4604      	mov	r4, r0
 8007526:	e7e4      	b.n	80074f2 <__pow5mult+0x6a>
 8007528:	4638      	mov	r0, r7
 800752a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800752e:	bf00      	nop
 8007530:	080085d8 	.word	0x080085d8
 8007534:	08008409 	.word	0x08008409
 8007538:	08008489 	.word	0x08008489

0800753c <__lshift>:
 800753c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007540:	460c      	mov	r4, r1
 8007542:	6849      	ldr	r1, [r1, #4]
 8007544:	6923      	ldr	r3, [r4, #16]
 8007546:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800754a:	68a3      	ldr	r3, [r4, #8]
 800754c:	4607      	mov	r7, r0
 800754e:	4691      	mov	r9, r2
 8007550:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007554:	f108 0601 	add.w	r6, r8, #1
 8007558:	42b3      	cmp	r3, r6
 800755a:	db0b      	blt.n	8007574 <__lshift+0x38>
 800755c:	4638      	mov	r0, r7
 800755e:	f7ff fddd 	bl	800711c <_Balloc>
 8007562:	4605      	mov	r5, r0
 8007564:	b948      	cbnz	r0, 800757a <__lshift+0x3e>
 8007566:	4602      	mov	r2, r0
 8007568:	4b28      	ldr	r3, [pc, #160]	; (800760c <__lshift+0xd0>)
 800756a:	4829      	ldr	r0, [pc, #164]	; (8007610 <__lshift+0xd4>)
 800756c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007570:	f000 fb8e 	bl	8007c90 <__assert_func>
 8007574:	3101      	adds	r1, #1
 8007576:	005b      	lsls	r3, r3, #1
 8007578:	e7ee      	b.n	8007558 <__lshift+0x1c>
 800757a:	2300      	movs	r3, #0
 800757c:	f100 0114 	add.w	r1, r0, #20
 8007580:	f100 0210 	add.w	r2, r0, #16
 8007584:	4618      	mov	r0, r3
 8007586:	4553      	cmp	r3, sl
 8007588:	db33      	blt.n	80075f2 <__lshift+0xb6>
 800758a:	6920      	ldr	r0, [r4, #16]
 800758c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007590:	f104 0314 	add.w	r3, r4, #20
 8007594:	f019 091f 	ands.w	r9, r9, #31
 8007598:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800759c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80075a0:	d02b      	beq.n	80075fa <__lshift+0xbe>
 80075a2:	f1c9 0e20 	rsb	lr, r9, #32
 80075a6:	468a      	mov	sl, r1
 80075a8:	2200      	movs	r2, #0
 80075aa:	6818      	ldr	r0, [r3, #0]
 80075ac:	fa00 f009 	lsl.w	r0, r0, r9
 80075b0:	4310      	orrs	r0, r2
 80075b2:	f84a 0b04 	str.w	r0, [sl], #4
 80075b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80075ba:	459c      	cmp	ip, r3
 80075bc:	fa22 f20e 	lsr.w	r2, r2, lr
 80075c0:	d8f3      	bhi.n	80075aa <__lshift+0x6e>
 80075c2:	ebac 0304 	sub.w	r3, ip, r4
 80075c6:	3b15      	subs	r3, #21
 80075c8:	f023 0303 	bic.w	r3, r3, #3
 80075cc:	3304      	adds	r3, #4
 80075ce:	f104 0015 	add.w	r0, r4, #21
 80075d2:	4584      	cmp	ip, r0
 80075d4:	bf38      	it	cc
 80075d6:	2304      	movcc	r3, #4
 80075d8:	50ca      	str	r2, [r1, r3]
 80075da:	b10a      	cbz	r2, 80075e0 <__lshift+0xa4>
 80075dc:	f108 0602 	add.w	r6, r8, #2
 80075e0:	3e01      	subs	r6, #1
 80075e2:	4638      	mov	r0, r7
 80075e4:	612e      	str	r6, [r5, #16]
 80075e6:	4621      	mov	r1, r4
 80075e8:	f7ff fdd8 	bl	800719c <_Bfree>
 80075ec:	4628      	mov	r0, r5
 80075ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075f2:	f842 0f04 	str.w	r0, [r2, #4]!
 80075f6:	3301      	adds	r3, #1
 80075f8:	e7c5      	b.n	8007586 <__lshift+0x4a>
 80075fa:	3904      	subs	r1, #4
 80075fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8007600:	f841 2f04 	str.w	r2, [r1, #4]!
 8007604:	459c      	cmp	ip, r3
 8007606:	d8f9      	bhi.n	80075fc <__lshift+0xc0>
 8007608:	e7ea      	b.n	80075e0 <__lshift+0xa4>
 800760a:	bf00      	nop
 800760c:	08008478 	.word	0x08008478
 8007610:	08008489 	.word	0x08008489

08007614 <__mcmp>:
 8007614:	b530      	push	{r4, r5, lr}
 8007616:	6902      	ldr	r2, [r0, #16]
 8007618:	690c      	ldr	r4, [r1, #16]
 800761a:	1b12      	subs	r2, r2, r4
 800761c:	d10e      	bne.n	800763c <__mcmp+0x28>
 800761e:	f100 0314 	add.w	r3, r0, #20
 8007622:	3114      	adds	r1, #20
 8007624:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007628:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800762c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007630:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007634:	42a5      	cmp	r5, r4
 8007636:	d003      	beq.n	8007640 <__mcmp+0x2c>
 8007638:	d305      	bcc.n	8007646 <__mcmp+0x32>
 800763a:	2201      	movs	r2, #1
 800763c:	4610      	mov	r0, r2
 800763e:	bd30      	pop	{r4, r5, pc}
 8007640:	4283      	cmp	r3, r0
 8007642:	d3f3      	bcc.n	800762c <__mcmp+0x18>
 8007644:	e7fa      	b.n	800763c <__mcmp+0x28>
 8007646:	f04f 32ff 	mov.w	r2, #4294967295
 800764a:	e7f7      	b.n	800763c <__mcmp+0x28>

0800764c <__mdiff>:
 800764c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007650:	460c      	mov	r4, r1
 8007652:	4606      	mov	r6, r0
 8007654:	4611      	mov	r1, r2
 8007656:	4620      	mov	r0, r4
 8007658:	4690      	mov	r8, r2
 800765a:	f7ff ffdb 	bl	8007614 <__mcmp>
 800765e:	1e05      	subs	r5, r0, #0
 8007660:	d110      	bne.n	8007684 <__mdiff+0x38>
 8007662:	4629      	mov	r1, r5
 8007664:	4630      	mov	r0, r6
 8007666:	f7ff fd59 	bl	800711c <_Balloc>
 800766a:	b930      	cbnz	r0, 800767a <__mdiff+0x2e>
 800766c:	4b3a      	ldr	r3, [pc, #232]	; (8007758 <__mdiff+0x10c>)
 800766e:	4602      	mov	r2, r0
 8007670:	f240 2137 	movw	r1, #567	; 0x237
 8007674:	4839      	ldr	r0, [pc, #228]	; (800775c <__mdiff+0x110>)
 8007676:	f000 fb0b 	bl	8007c90 <__assert_func>
 800767a:	2301      	movs	r3, #1
 800767c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007680:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007684:	bfa4      	itt	ge
 8007686:	4643      	movge	r3, r8
 8007688:	46a0      	movge	r8, r4
 800768a:	4630      	mov	r0, r6
 800768c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007690:	bfa6      	itte	ge
 8007692:	461c      	movge	r4, r3
 8007694:	2500      	movge	r5, #0
 8007696:	2501      	movlt	r5, #1
 8007698:	f7ff fd40 	bl	800711c <_Balloc>
 800769c:	b920      	cbnz	r0, 80076a8 <__mdiff+0x5c>
 800769e:	4b2e      	ldr	r3, [pc, #184]	; (8007758 <__mdiff+0x10c>)
 80076a0:	4602      	mov	r2, r0
 80076a2:	f240 2145 	movw	r1, #581	; 0x245
 80076a6:	e7e5      	b.n	8007674 <__mdiff+0x28>
 80076a8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80076ac:	6926      	ldr	r6, [r4, #16]
 80076ae:	60c5      	str	r5, [r0, #12]
 80076b0:	f104 0914 	add.w	r9, r4, #20
 80076b4:	f108 0514 	add.w	r5, r8, #20
 80076b8:	f100 0e14 	add.w	lr, r0, #20
 80076bc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80076c0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80076c4:	f108 0210 	add.w	r2, r8, #16
 80076c8:	46f2      	mov	sl, lr
 80076ca:	2100      	movs	r1, #0
 80076cc:	f859 3b04 	ldr.w	r3, [r9], #4
 80076d0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80076d4:	fa11 f88b 	uxtah	r8, r1, fp
 80076d8:	b299      	uxth	r1, r3
 80076da:	0c1b      	lsrs	r3, r3, #16
 80076dc:	eba8 0801 	sub.w	r8, r8, r1
 80076e0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80076e4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80076e8:	fa1f f888 	uxth.w	r8, r8
 80076ec:	1419      	asrs	r1, r3, #16
 80076ee:	454e      	cmp	r6, r9
 80076f0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80076f4:	f84a 3b04 	str.w	r3, [sl], #4
 80076f8:	d8e8      	bhi.n	80076cc <__mdiff+0x80>
 80076fa:	1b33      	subs	r3, r6, r4
 80076fc:	3b15      	subs	r3, #21
 80076fe:	f023 0303 	bic.w	r3, r3, #3
 8007702:	3304      	adds	r3, #4
 8007704:	3415      	adds	r4, #21
 8007706:	42a6      	cmp	r6, r4
 8007708:	bf38      	it	cc
 800770a:	2304      	movcc	r3, #4
 800770c:	441d      	add	r5, r3
 800770e:	4473      	add	r3, lr
 8007710:	469e      	mov	lr, r3
 8007712:	462e      	mov	r6, r5
 8007714:	4566      	cmp	r6, ip
 8007716:	d30e      	bcc.n	8007736 <__mdiff+0xea>
 8007718:	f10c 0203 	add.w	r2, ip, #3
 800771c:	1b52      	subs	r2, r2, r5
 800771e:	f022 0203 	bic.w	r2, r2, #3
 8007722:	3d03      	subs	r5, #3
 8007724:	45ac      	cmp	ip, r5
 8007726:	bf38      	it	cc
 8007728:	2200      	movcc	r2, #0
 800772a:	4413      	add	r3, r2
 800772c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007730:	b17a      	cbz	r2, 8007752 <__mdiff+0x106>
 8007732:	6107      	str	r7, [r0, #16]
 8007734:	e7a4      	b.n	8007680 <__mdiff+0x34>
 8007736:	f856 8b04 	ldr.w	r8, [r6], #4
 800773a:	fa11 f288 	uxtah	r2, r1, r8
 800773e:	1414      	asrs	r4, r2, #16
 8007740:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007744:	b292      	uxth	r2, r2
 8007746:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800774a:	f84e 2b04 	str.w	r2, [lr], #4
 800774e:	1421      	asrs	r1, r4, #16
 8007750:	e7e0      	b.n	8007714 <__mdiff+0xc8>
 8007752:	3f01      	subs	r7, #1
 8007754:	e7ea      	b.n	800772c <__mdiff+0xe0>
 8007756:	bf00      	nop
 8007758:	08008478 	.word	0x08008478
 800775c:	08008489 	.word	0x08008489

08007760 <__d2b>:
 8007760:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007764:	460f      	mov	r7, r1
 8007766:	2101      	movs	r1, #1
 8007768:	ec59 8b10 	vmov	r8, r9, d0
 800776c:	4616      	mov	r6, r2
 800776e:	f7ff fcd5 	bl	800711c <_Balloc>
 8007772:	4604      	mov	r4, r0
 8007774:	b930      	cbnz	r0, 8007784 <__d2b+0x24>
 8007776:	4602      	mov	r2, r0
 8007778:	4b24      	ldr	r3, [pc, #144]	; (800780c <__d2b+0xac>)
 800777a:	4825      	ldr	r0, [pc, #148]	; (8007810 <__d2b+0xb0>)
 800777c:	f240 310f 	movw	r1, #783	; 0x30f
 8007780:	f000 fa86 	bl	8007c90 <__assert_func>
 8007784:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007788:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800778c:	bb2d      	cbnz	r5, 80077da <__d2b+0x7a>
 800778e:	9301      	str	r3, [sp, #4]
 8007790:	f1b8 0300 	subs.w	r3, r8, #0
 8007794:	d026      	beq.n	80077e4 <__d2b+0x84>
 8007796:	4668      	mov	r0, sp
 8007798:	9300      	str	r3, [sp, #0]
 800779a:	f7ff fd87 	bl	80072ac <__lo0bits>
 800779e:	e9dd 1200 	ldrd	r1, r2, [sp]
 80077a2:	b1e8      	cbz	r0, 80077e0 <__d2b+0x80>
 80077a4:	f1c0 0320 	rsb	r3, r0, #32
 80077a8:	fa02 f303 	lsl.w	r3, r2, r3
 80077ac:	430b      	orrs	r3, r1
 80077ae:	40c2      	lsrs	r2, r0
 80077b0:	6163      	str	r3, [r4, #20]
 80077b2:	9201      	str	r2, [sp, #4]
 80077b4:	9b01      	ldr	r3, [sp, #4]
 80077b6:	61a3      	str	r3, [r4, #24]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	bf14      	ite	ne
 80077bc:	2202      	movne	r2, #2
 80077be:	2201      	moveq	r2, #1
 80077c0:	6122      	str	r2, [r4, #16]
 80077c2:	b1bd      	cbz	r5, 80077f4 <__d2b+0x94>
 80077c4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80077c8:	4405      	add	r5, r0
 80077ca:	603d      	str	r5, [r7, #0]
 80077cc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80077d0:	6030      	str	r0, [r6, #0]
 80077d2:	4620      	mov	r0, r4
 80077d4:	b003      	add	sp, #12
 80077d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80077da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80077de:	e7d6      	b.n	800778e <__d2b+0x2e>
 80077e0:	6161      	str	r1, [r4, #20]
 80077e2:	e7e7      	b.n	80077b4 <__d2b+0x54>
 80077e4:	a801      	add	r0, sp, #4
 80077e6:	f7ff fd61 	bl	80072ac <__lo0bits>
 80077ea:	9b01      	ldr	r3, [sp, #4]
 80077ec:	6163      	str	r3, [r4, #20]
 80077ee:	3020      	adds	r0, #32
 80077f0:	2201      	movs	r2, #1
 80077f2:	e7e5      	b.n	80077c0 <__d2b+0x60>
 80077f4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80077f8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80077fc:	6038      	str	r0, [r7, #0]
 80077fe:	6918      	ldr	r0, [r3, #16]
 8007800:	f7ff fd34 	bl	800726c <__hi0bits>
 8007804:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007808:	e7e2      	b.n	80077d0 <__d2b+0x70>
 800780a:	bf00      	nop
 800780c:	08008478 	.word	0x08008478
 8007810:	08008489 	.word	0x08008489

08007814 <__ssputs_r>:
 8007814:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007818:	688e      	ldr	r6, [r1, #8]
 800781a:	461f      	mov	r7, r3
 800781c:	42be      	cmp	r6, r7
 800781e:	680b      	ldr	r3, [r1, #0]
 8007820:	4682      	mov	sl, r0
 8007822:	460c      	mov	r4, r1
 8007824:	4690      	mov	r8, r2
 8007826:	d82c      	bhi.n	8007882 <__ssputs_r+0x6e>
 8007828:	898a      	ldrh	r2, [r1, #12]
 800782a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800782e:	d026      	beq.n	800787e <__ssputs_r+0x6a>
 8007830:	6965      	ldr	r5, [r4, #20]
 8007832:	6909      	ldr	r1, [r1, #16]
 8007834:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007838:	eba3 0901 	sub.w	r9, r3, r1
 800783c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007840:	1c7b      	adds	r3, r7, #1
 8007842:	444b      	add	r3, r9
 8007844:	106d      	asrs	r5, r5, #1
 8007846:	429d      	cmp	r5, r3
 8007848:	bf38      	it	cc
 800784a:	461d      	movcc	r5, r3
 800784c:	0553      	lsls	r3, r2, #21
 800784e:	d527      	bpl.n	80078a0 <__ssputs_r+0x8c>
 8007850:	4629      	mov	r1, r5
 8007852:	f7ff fbd7 	bl	8007004 <_malloc_r>
 8007856:	4606      	mov	r6, r0
 8007858:	b360      	cbz	r0, 80078b4 <__ssputs_r+0xa0>
 800785a:	6921      	ldr	r1, [r4, #16]
 800785c:	464a      	mov	r2, r9
 800785e:	f000 fa09 	bl	8007c74 <memcpy>
 8007862:	89a3      	ldrh	r3, [r4, #12]
 8007864:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007868:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800786c:	81a3      	strh	r3, [r4, #12]
 800786e:	6126      	str	r6, [r4, #16]
 8007870:	6165      	str	r5, [r4, #20]
 8007872:	444e      	add	r6, r9
 8007874:	eba5 0509 	sub.w	r5, r5, r9
 8007878:	6026      	str	r6, [r4, #0]
 800787a:	60a5      	str	r5, [r4, #8]
 800787c:	463e      	mov	r6, r7
 800787e:	42be      	cmp	r6, r7
 8007880:	d900      	bls.n	8007884 <__ssputs_r+0x70>
 8007882:	463e      	mov	r6, r7
 8007884:	6820      	ldr	r0, [r4, #0]
 8007886:	4632      	mov	r2, r6
 8007888:	4641      	mov	r1, r8
 800788a:	f000 f9c9 	bl	8007c20 <memmove>
 800788e:	68a3      	ldr	r3, [r4, #8]
 8007890:	1b9b      	subs	r3, r3, r6
 8007892:	60a3      	str	r3, [r4, #8]
 8007894:	6823      	ldr	r3, [r4, #0]
 8007896:	4433      	add	r3, r6
 8007898:	6023      	str	r3, [r4, #0]
 800789a:	2000      	movs	r0, #0
 800789c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078a0:	462a      	mov	r2, r5
 80078a2:	f000 fa3b 	bl	8007d1c <_realloc_r>
 80078a6:	4606      	mov	r6, r0
 80078a8:	2800      	cmp	r0, #0
 80078aa:	d1e0      	bne.n	800786e <__ssputs_r+0x5a>
 80078ac:	6921      	ldr	r1, [r4, #16]
 80078ae:	4650      	mov	r0, sl
 80078b0:	f7ff fb34 	bl	8006f1c <_free_r>
 80078b4:	230c      	movs	r3, #12
 80078b6:	f8ca 3000 	str.w	r3, [sl]
 80078ba:	89a3      	ldrh	r3, [r4, #12]
 80078bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80078c0:	81a3      	strh	r3, [r4, #12]
 80078c2:	f04f 30ff 	mov.w	r0, #4294967295
 80078c6:	e7e9      	b.n	800789c <__ssputs_r+0x88>

080078c8 <_svfiprintf_r>:
 80078c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078cc:	4698      	mov	r8, r3
 80078ce:	898b      	ldrh	r3, [r1, #12]
 80078d0:	061b      	lsls	r3, r3, #24
 80078d2:	b09d      	sub	sp, #116	; 0x74
 80078d4:	4607      	mov	r7, r0
 80078d6:	460d      	mov	r5, r1
 80078d8:	4614      	mov	r4, r2
 80078da:	d50e      	bpl.n	80078fa <_svfiprintf_r+0x32>
 80078dc:	690b      	ldr	r3, [r1, #16]
 80078de:	b963      	cbnz	r3, 80078fa <_svfiprintf_r+0x32>
 80078e0:	2140      	movs	r1, #64	; 0x40
 80078e2:	f7ff fb8f 	bl	8007004 <_malloc_r>
 80078e6:	6028      	str	r0, [r5, #0]
 80078e8:	6128      	str	r0, [r5, #16]
 80078ea:	b920      	cbnz	r0, 80078f6 <_svfiprintf_r+0x2e>
 80078ec:	230c      	movs	r3, #12
 80078ee:	603b      	str	r3, [r7, #0]
 80078f0:	f04f 30ff 	mov.w	r0, #4294967295
 80078f4:	e0d0      	b.n	8007a98 <_svfiprintf_r+0x1d0>
 80078f6:	2340      	movs	r3, #64	; 0x40
 80078f8:	616b      	str	r3, [r5, #20]
 80078fa:	2300      	movs	r3, #0
 80078fc:	9309      	str	r3, [sp, #36]	; 0x24
 80078fe:	2320      	movs	r3, #32
 8007900:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007904:	f8cd 800c 	str.w	r8, [sp, #12]
 8007908:	2330      	movs	r3, #48	; 0x30
 800790a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007ab0 <_svfiprintf_r+0x1e8>
 800790e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007912:	f04f 0901 	mov.w	r9, #1
 8007916:	4623      	mov	r3, r4
 8007918:	469a      	mov	sl, r3
 800791a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800791e:	b10a      	cbz	r2, 8007924 <_svfiprintf_r+0x5c>
 8007920:	2a25      	cmp	r2, #37	; 0x25
 8007922:	d1f9      	bne.n	8007918 <_svfiprintf_r+0x50>
 8007924:	ebba 0b04 	subs.w	fp, sl, r4
 8007928:	d00b      	beq.n	8007942 <_svfiprintf_r+0x7a>
 800792a:	465b      	mov	r3, fp
 800792c:	4622      	mov	r2, r4
 800792e:	4629      	mov	r1, r5
 8007930:	4638      	mov	r0, r7
 8007932:	f7ff ff6f 	bl	8007814 <__ssputs_r>
 8007936:	3001      	adds	r0, #1
 8007938:	f000 80a9 	beq.w	8007a8e <_svfiprintf_r+0x1c6>
 800793c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800793e:	445a      	add	r2, fp
 8007940:	9209      	str	r2, [sp, #36]	; 0x24
 8007942:	f89a 3000 	ldrb.w	r3, [sl]
 8007946:	2b00      	cmp	r3, #0
 8007948:	f000 80a1 	beq.w	8007a8e <_svfiprintf_r+0x1c6>
 800794c:	2300      	movs	r3, #0
 800794e:	f04f 32ff 	mov.w	r2, #4294967295
 8007952:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007956:	f10a 0a01 	add.w	sl, sl, #1
 800795a:	9304      	str	r3, [sp, #16]
 800795c:	9307      	str	r3, [sp, #28]
 800795e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007962:	931a      	str	r3, [sp, #104]	; 0x68
 8007964:	4654      	mov	r4, sl
 8007966:	2205      	movs	r2, #5
 8007968:	f814 1b01 	ldrb.w	r1, [r4], #1
 800796c:	4850      	ldr	r0, [pc, #320]	; (8007ab0 <_svfiprintf_r+0x1e8>)
 800796e:	f7f8 fc2f 	bl	80001d0 <memchr>
 8007972:	9a04      	ldr	r2, [sp, #16]
 8007974:	b9d8      	cbnz	r0, 80079ae <_svfiprintf_r+0xe6>
 8007976:	06d0      	lsls	r0, r2, #27
 8007978:	bf44      	itt	mi
 800797a:	2320      	movmi	r3, #32
 800797c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007980:	0711      	lsls	r1, r2, #28
 8007982:	bf44      	itt	mi
 8007984:	232b      	movmi	r3, #43	; 0x2b
 8007986:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800798a:	f89a 3000 	ldrb.w	r3, [sl]
 800798e:	2b2a      	cmp	r3, #42	; 0x2a
 8007990:	d015      	beq.n	80079be <_svfiprintf_r+0xf6>
 8007992:	9a07      	ldr	r2, [sp, #28]
 8007994:	4654      	mov	r4, sl
 8007996:	2000      	movs	r0, #0
 8007998:	f04f 0c0a 	mov.w	ip, #10
 800799c:	4621      	mov	r1, r4
 800799e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80079a2:	3b30      	subs	r3, #48	; 0x30
 80079a4:	2b09      	cmp	r3, #9
 80079a6:	d94d      	bls.n	8007a44 <_svfiprintf_r+0x17c>
 80079a8:	b1b0      	cbz	r0, 80079d8 <_svfiprintf_r+0x110>
 80079aa:	9207      	str	r2, [sp, #28]
 80079ac:	e014      	b.n	80079d8 <_svfiprintf_r+0x110>
 80079ae:	eba0 0308 	sub.w	r3, r0, r8
 80079b2:	fa09 f303 	lsl.w	r3, r9, r3
 80079b6:	4313      	orrs	r3, r2
 80079b8:	9304      	str	r3, [sp, #16]
 80079ba:	46a2      	mov	sl, r4
 80079bc:	e7d2      	b.n	8007964 <_svfiprintf_r+0x9c>
 80079be:	9b03      	ldr	r3, [sp, #12]
 80079c0:	1d19      	adds	r1, r3, #4
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	9103      	str	r1, [sp, #12]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	bfbb      	ittet	lt
 80079ca:	425b      	neglt	r3, r3
 80079cc:	f042 0202 	orrlt.w	r2, r2, #2
 80079d0:	9307      	strge	r3, [sp, #28]
 80079d2:	9307      	strlt	r3, [sp, #28]
 80079d4:	bfb8      	it	lt
 80079d6:	9204      	strlt	r2, [sp, #16]
 80079d8:	7823      	ldrb	r3, [r4, #0]
 80079da:	2b2e      	cmp	r3, #46	; 0x2e
 80079dc:	d10c      	bne.n	80079f8 <_svfiprintf_r+0x130>
 80079de:	7863      	ldrb	r3, [r4, #1]
 80079e0:	2b2a      	cmp	r3, #42	; 0x2a
 80079e2:	d134      	bne.n	8007a4e <_svfiprintf_r+0x186>
 80079e4:	9b03      	ldr	r3, [sp, #12]
 80079e6:	1d1a      	adds	r2, r3, #4
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	9203      	str	r2, [sp, #12]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	bfb8      	it	lt
 80079f0:	f04f 33ff 	movlt.w	r3, #4294967295
 80079f4:	3402      	adds	r4, #2
 80079f6:	9305      	str	r3, [sp, #20]
 80079f8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007ac0 <_svfiprintf_r+0x1f8>
 80079fc:	7821      	ldrb	r1, [r4, #0]
 80079fe:	2203      	movs	r2, #3
 8007a00:	4650      	mov	r0, sl
 8007a02:	f7f8 fbe5 	bl	80001d0 <memchr>
 8007a06:	b138      	cbz	r0, 8007a18 <_svfiprintf_r+0x150>
 8007a08:	9b04      	ldr	r3, [sp, #16]
 8007a0a:	eba0 000a 	sub.w	r0, r0, sl
 8007a0e:	2240      	movs	r2, #64	; 0x40
 8007a10:	4082      	lsls	r2, r0
 8007a12:	4313      	orrs	r3, r2
 8007a14:	3401      	adds	r4, #1
 8007a16:	9304      	str	r3, [sp, #16]
 8007a18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a1c:	4825      	ldr	r0, [pc, #148]	; (8007ab4 <_svfiprintf_r+0x1ec>)
 8007a1e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007a22:	2206      	movs	r2, #6
 8007a24:	f7f8 fbd4 	bl	80001d0 <memchr>
 8007a28:	2800      	cmp	r0, #0
 8007a2a:	d038      	beq.n	8007a9e <_svfiprintf_r+0x1d6>
 8007a2c:	4b22      	ldr	r3, [pc, #136]	; (8007ab8 <_svfiprintf_r+0x1f0>)
 8007a2e:	bb1b      	cbnz	r3, 8007a78 <_svfiprintf_r+0x1b0>
 8007a30:	9b03      	ldr	r3, [sp, #12]
 8007a32:	3307      	adds	r3, #7
 8007a34:	f023 0307 	bic.w	r3, r3, #7
 8007a38:	3308      	adds	r3, #8
 8007a3a:	9303      	str	r3, [sp, #12]
 8007a3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a3e:	4433      	add	r3, r6
 8007a40:	9309      	str	r3, [sp, #36]	; 0x24
 8007a42:	e768      	b.n	8007916 <_svfiprintf_r+0x4e>
 8007a44:	fb0c 3202 	mla	r2, ip, r2, r3
 8007a48:	460c      	mov	r4, r1
 8007a4a:	2001      	movs	r0, #1
 8007a4c:	e7a6      	b.n	800799c <_svfiprintf_r+0xd4>
 8007a4e:	2300      	movs	r3, #0
 8007a50:	3401      	adds	r4, #1
 8007a52:	9305      	str	r3, [sp, #20]
 8007a54:	4619      	mov	r1, r3
 8007a56:	f04f 0c0a 	mov.w	ip, #10
 8007a5a:	4620      	mov	r0, r4
 8007a5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a60:	3a30      	subs	r2, #48	; 0x30
 8007a62:	2a09      	cmp	r2, #9
 8007a64:	d903      	bls.n	8007a6e <_svfiprintf_r+0x1a6>
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d0c6      	beq.n	80079f8 <_svfiprintf_r+0x130>
 8007a6a:	9105      	str	r1, [sp, #20]
 8007a6c:	e7c4      	b.n	80079f8 <_svfiprintf_r+0x130>
 8007a6e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007a72:	4604      	mov	r4, r0
 8007a74:	2301      	movs	r3, #1
 8007a76:	e7f0      	b.n	8007a5a <_svfiprintf_r+0x192>
 8007a78:	ab03      	add	r3, sp, #12
 8007a7a:	9300      	str	r3, [sp, #0]
 8007a7c:	462a      	mov	r2, r5
 8007a7e:	4b0f      	ldr	r3, [pc, #60]	; (8007abc <_svfiprintf_r+0x1f4>)
 8007a80:	a904      	add	r1, sp, #16
 8007a82:	4638      	mov	r0, r7
 8007a84:	f7fd fe50 	bl	8005728 <_printf_float>
 8007a88:	1c42      	adds	r2, r0, #1
 8007a8a:	4606      	mov	r6, r0
 8007a8c:	d1d6      	bne.n	8007a3c <_svfiprintf_r+0x174>
 8007a8e:	89ab      	ldrh	r3, [r5, #12]
 8007a90:	065b      	lsls	r3, r3, #25
 8007a92:	f53f af2d 	bmi.w	80078f0 <_svfiprintf_r+0x28>
 8007a96:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007a98:	b01d      	add	sp, #116	; 0x74
 8007a9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a9e:	ab03      	add	r3, sp, #12
 8007aa0:	9300      	str	r3, [sp, #0]
 8007aa2:	462a      	mov	r2, r5
 8007aa4:	4b05      	ldr	r3, [pc, #20]	; (8007abc <_svfiprintf_r+0x1f4>)
 8007aa6:	a904      	add	r1, sp, #16
 8007aa8:	4638      	mov	r0, r7
 8007aaa:	f7fe f8e1 	bl	8005c70 <_printf_i>
 8007aae:	e7eb      	b.n	8007a88 <_svfiprintf_r+0x1c0>
 8007ab0:	080085e4 	.word	0x080085e4
 8007ab4:	080085ee 	.word	0x080085ee
 8007ab8:	08005729 	.word	0x08005729
 8007abc:	08007815 	.word	0x08007815
 8007ac0:	080085ea 	.word	0x080085ea

08007ac4 <__sflush_r>:
 8007ac4:	898a      	ldrh	r2, [r1, #12]
 8007ac6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007aca:	4605      	mov	r5, r0
 8007acc:	0710      	lsls	r0, r2, #28
 8007ace:	460c      	mov	r4, r1
 8007ad0:	d458      	bmi.n	8007b84 <__sflush_r+0xc0>
 8007ad2:	684b      	ldr	r3, [r1, #4]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	dc05      	bgt.n	8007ae4 <__sflush_r+0x20>
 8007ad8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	dc02      	bgt.n	8007ae4 <__sflush_r+0x20>
 8007ade:	2000      	movs	r0, #0
 8007ae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ae4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007ae6:	2e00      	cmp	r6, #0
 8007ae8:	d0f9      	beq.n	8007ade <__sflush_r+0x1a>
 8007aea:	2300      	movs	r3, #0
 8007aec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007af0:	682f      	ldr	r7, [r5, #0]
 8007af2:	6a21      	ldr	r1, [r4, #32]
 8007af4:	602b      	str	r3, [r5, #0]
 8007af6:	d032      	beq.n	8007b5e <__sflush_r+0x9a>
 8007af8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007afa:	89a3      	ldrh	r3, [r4, #12]
 8007afc:	075a      	lsls	r2, r3, #29
 8007afe:	d505      	bpl.n	8007b0c <__sflush_r+0x48>
 8007b00:	6863      	ldr	r3, [r4, #4]
 8007b02:	1ac0      	subs	r0, r0, r3
 8007b04:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007b06:	b10b      	cbz	r3, 8007b0c <__sflush_r+0x48>
 8007b08:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007b0a:	1ac0      	subs	r0, r0, r3
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	4602      	mov	r2, r0
 8007b10:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007b12:	6a21      	ldr	r1, [r4, #32]
 8007b14:	4628      	mov	r0, r5
 8007b16:	47b0      	blx	r6
 8007b18:	1c43      	adds	r3, r0, #1
 8007b1a:	89a3      	ldrh	r3, [r4, #12]
 8007b1c:	d106      	bne.n	8007b2c <__sflush_r+0x68>
 8007b1e:	6829      	ldr	r1, [r5, #0]
 8007b20:	291d      	cmp	r1, #29
 8007b22:	d82b      	bhi.n	8007b7c <__sflush_r+0xb8>
 8007b24:	4a29      	ldr	r2, [pc, #164]	; (8007bcc <__sflush_r+0x108>)
 8007b26:	410a      	asrs	r2, r1
 8007b28:	07d6      	lsls	r6, r2, #31
 8007b2a:	d427      	bmi.n	8007b7c <__sflush_r+0xb8>
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	6062      	str	r2, [r4, #4]
 8007b30:	04d9      	lsls	r1, r3, #19
 8007b32:	6922      	ldr	r2, [r4, #16]
 8007b34:	6022      	str	r2, [r4, #0]
 8007b36:	d504      	bpl.n	8007b42 <__sflush_r+0x7e>
 8007b38:	1c42      	adds	r2, r0, #1
 8007b3a:	d101      	bne.n	8007b40 <__sflush_r+0x7c>
 8007b3c:	682b      	ldr	r3, [r5, #0]
 8007b3e:	b903      	cbnz	r3, 8007b42 <__sflush_r+0x7e>
 8007b40:	6560      	str	r0, [r4, #84]	; 0x54
 8007b42:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007b44:	602f      	str	r7, [r5, #0]
 8007b46:	2900      	cmp	r1, #0
 8007b48:	d0c9      	beq.n	8007ade <__sflush_r+0x1a>
 8007b4a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007b4e:	4299      	cmp	r1, r3
 8007b50:	d002      	beq.n	8007b58 <__sflush_r+0x94>
 8007b52:	4628      	mov	r0, r5
 8007b54:	f7ff f9e2 	bl	8006f1c <_free_r>
 8007b58:	2000      	movs	r0, #0
 8007b5a:	6360      	str	r0, [r4, #52]	; 0x34
 8007b5c:	e7c0      	b.n	8007ae0 <__sflush_r+0x1c>
 8007b5e:	2301      	movs	r3, #1
 8007b60:	4628      	mov	r0, r5
 8007b62:	47b0      	blx	r6
 8007b64:	1c41      	adds	r1, r0, #1
 8007b66:	d1c8      	bne.n	8007afa <__sflush_r+0x36>
 8007b68:	682b      	ldr	r3, [r5, #0]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d0c5      	beq.n	8007afa <__sflush_r+0x36>
 8007b6e:	2b1d      	cmp	r3, #29
 8007b70:	d001      	beq.n	8007b76 <__sflush_r+0xb2>
 8007b72:	2b16      	cmp	r3, #22
 8007b74:	d101      	bne.n	8007b7a <__sflush_r+0xb6>
 8007b76:	602f      	str	r7, [r5, #0]
 8007b78:	e7b1      	b.n	8007ade <__sflush_r+0x1a>
 8007b7a:	89a3      	ldrh	r3, [r4, #12]
 8007b7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b80:	81a3      	strh	r3, [r4, #12]
 8007b82:	e7ad      	b.n	8007ae0 <__sflush_r+0x1c>
 8007b84:	690f      	ldr	r7, [r1, #16]
 8007b86:	2f00      	cmp	r7, #0
 8007b88:	d0a9      	beq.n	8007ade <__sflush_r+0x1a>
 8007b8a:	0793      	lsls	r3, r2, #30
 8007b8c:	680e      	ldr	r6, [r1, #0]
 8007b8e:	bf08      	it	eq
 8007b90:	694b      	ldreq	r3, [r1, #20]
 8007b92:	600f      	str	r7, [r1, #0]
 8007b94:	bf18      	it	ne
 8007b96:	2300      	movne	r3, #0
 8007b98:	eba6 0807 	sub.w	r8, r6, r7
 8007b9c:	608b      	str	r3, [r1, #8]
 8007b9e:	f1b8 0f00 	cmp.w	r8, #0
 8007ba2:	dd9c      	ble.n	8007ade <__sflush_r+0x1a>
 8007ba4:	6a21      	ldr	r1, [r4, #32]
 8007ba6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007ba8:	4643      	mov	r3, r8
 8007baa:	463a      	mov	r2, r7
 8007bac:	4628      	mov	r0, r5
 8007bae:	47b0      	blx	r6
 8007bb0:	2800      	cmp	r0, #0
 8007bb2:	dc06      	bgt.n	8007bc2 <__sflush_r+0xfe>
 8007bb4:	89a3      	ldrh	r3, [r4, #12]
 8007bb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007bba:	81a3      	strh	r3, [r4, #12]
 8007bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8007bc0:	e78e      	b.n	8007ae0 <__sflush_r+0x1c>
 8007bc2:	4407      	add	r7, r0
 8007bc4:	eba8 0800 	sub.w	r8, r8, r0
 8007bc8:	e7e9      	b.n	8007b9e <__sflush_r+0xda>
 8007bca:	bf00      	nop
 8007bcc:	dfbffffe 	.word	0xdfbffffe

08007bd0 <_fflush_r>:
 8007bd0:	b538      	push	{r3, r4, r5, lr}
 8007bd2:	690b      	ldr	r3, [r1, #16]
 8007bd4:	4605      	mov	r5, r0
 8007bd6:	460c      	mov	r4, r1
 8007bd8:	b913      	cbnz	r3, 8007be0 <_fflush_r+0x10>
 8007bda:	2500      	movs	r5, #0
 8007bdc:	4628      	mov	r0, r5
 8007bde:	bd38      	pop	{r3, r4, r5, pc}
 8007be0:	b118      	cbz	r0, 8007bea <_fflush_r+0x1a>
 8007be2:	6a03      	ldr	r3, [r0, #32]
 8007be4:	b90b      	cbnz	r3, 8007bea <_fflush_r+0x1a>
 8007be6:	f7fe f9f1 	bl	8005fcc <__sinit>
 8007bea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d0f3      	beq.n	8007bda <_fflush_r+0xa>
 8007bf2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007bf4:	07d0      	lsls	r0, r2, #31
 8007bf6:	d404      	bmi.n	8007c02 <_fflush_r+0x32>
 8007bf8:	0599      	lsls	r1, r3, #22
 8007bfa:	d402      	bmi.n	8007c02 <_fflush_r+0x32>
 8007bfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007bfe:	f7fe fb10 	bl	8006222 <__retarget_lock_acquire_recursive>
 8007c02:	4628      	mov	r0, r5
 8007c04:	4621      	mov	r1, r4
 8007c06:	f7ff ff5d 	bl	8007ac4 <__sflush_r>
 8007c0a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007c0c:	07da      	lsls	r2, r3, #31
 8007c0e:	4605      	mov	r5, r0
 8007c10:	d4e4      	bmi.n	8007bdc <_fflush_r+0xc>
 8007c12:	89a3      	ldrh	r3, [r4, #12]
 8007c14:	059b      	lsls	r3, r3, #22
 8007c16:	d4e1      	bmi.n	8007bdc <_fflush_r+0xc>
 8007c18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c1a:	f7fe fb03 	bl	8006224 <__retarget_lock_release_recursive>
 8007c1e:	e7dd      	b.n	8007bdc <_fflush_r+0xc>

08007c20 <memmove>:
 8007c20:	4288      	cmp	r0, r1
 8007c22:	b510      	push	{r4, lr}
 8007c24:	eb01 0402 	add.w	r4, r1, r2
 8007c28:	d902      	bls.n	8007c30 <memmove+0x10>
 8007c2a:	4284      	cmp	r4, r0
 8007c2c:	4623      	mov	r3, r4
 8007c2e:	d807      	bhi.n	8007c40 <memmove+0x20>
 8007c30:	1e43      	subs	r3, r0, #1
 8007c32:	42a1      	cmp	r1, r4
 8007c34:	d008      	beq.n	8007c48 <memmove+0x28>
 8007c36:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007c3a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007c3e:	e7f8      	b.n	8007c32 <memmove+0x12>
 8007c40:	4402      	add	r2, r0
 8007c42:	4601      	mov	r1, r0
 8007c44:	428a      	cmp	r2, r1
 8007c46:	d100      	bne.n	8007c4a <memmove+0x2a>
 8007c48:	bd10      	pop	{r4, pc}
 8007c4a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007c4e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007c52:	e7f7      	b.n	8007c44 <memmove+0x24>

08007c54 <_sbrk_r>:
 8007c54:	b538      	push	{r3, r4, r5, lr}
 8007c56:	4d06      	ldr	r5, [pc, #24]	; (8007c70 <_sbrk_r+0x1c>)
 8007c58:	2300      	movs	r3, #0
 8007c5a:	4604      	mov	r4, r0
 8007c5c:	4608      	mov	r0, r1
 8007c5e:	602b      	str	r3, [r5, #0]
 8007c60:	f7f9 fe2a 	bl	80018b8 <_sbrk>
 8007c64:	1c43      	adds	r3, r0, #1
 8007c66:	d102      	bne.n	8007c6e <_sbrk_r+0x1a>
 8007c68:	682b      	ldr	r3, [r5, #0]
 8007c6a:	b103      	cbz	r3, 8007c6e <_sbrk_r+0x1a>
 8007c6c:	6023      	str	r3, [r4, #0]
 8007c6e:	bd38      	pop	{r3, r4, r5, pc}
 8007c70:	200004b8 	.word	0x200004b8

08007c74 <memcpy>:
 8007c74:	440a      	add	r2, r1
 8007c76:	4291      	cmp	r1, r2
 8007c78:	f100 33ff 	add.w	r3, r0, #4294967295
 8007c7c:	d100      	bne.n	8007c80 <memcpy+0xc>
 8007c7e:	4770      	bx	lr
 8007c80:	b510      	push	{r4, lr}
 8007c82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c86:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007c8a:	4291      	cmp	r1, r2
 8007c8c:	d1f9      	bne.n	8007c82 <memcpy+0xe>
 8007c8e:	bd10      	pop	{r4, pc}

08007c90 <__assert_func>:
 8007c90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007c92:	4614      	mov	r4, r2
 8007c94:	461a      	mov	r2, r3
 8007c96:	4b09      	ldr	r3, [pc, #36]	; (8007cbc <__assert_func+0x2c>)
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	4605      	mov	r5, r0
 8007c9c:	68d8      	ldr	r0, [r3, #12]
 8007c9e:	b14c      	cbz	r4, 8007cb4 <__assert_func+0x24>
 8007ca0:	4b07      	ldr	r3, [pc, #28]	; (8007cc0 <__assert_func+0x30>)
 8007ca2:	9100      	str	r1, [sp, #0]
 8007ca4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007ca8:	4906      	ldr	r1, [pc, #24]	; (8007cc4 <__assert_func+0x34>)
 8007caa:	462b      	mov	r3, r5
 8007cac:	f000 f872 	bl	8007d94 <fiprintf>
 8007cb0:	f000 f882 	bl	8007db8 <abort>
 8007cb4:	4b04      	ldr	r3, [pc, #16]	; (8007cc8 <__assert_func+0x38>)
 8007cb6:	461c      	mov	r4, r3
 8007cb8:	e7f3      	b.n	8007ca2 <__assert_func+0x12>
 8007cba:	bf00      	nop
 8007cbc:	20000064 	.word	0x20000064
 8007cc0:	080085ff 	.word	0x080085ff
 8007cc4:	0800860c 	.word	0x0800860c
 8007cc8:	0800863a 	.word	0x0800863a

08007ccc <_calloc_r>:
 8007ccc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007cce:	fba1 2402 	umull	r2, r4, r1, r2
 8007cd2:	b94c      	cbnz	r4, 8007ce8 <_calloc_r+0x1c>
 8007cd4:	4611      	mov	r1, r2
 8007cd6:	9201      	str	r2, [sp, #4]
 8007cd8:	f7ff f994 	bl	8007004 <_malloc_r>
 8007cdc:	9a01      	ldr	r2, [sp, #4]
 8007cde:	4605      	mov	r5, r0
 8007ce0:	b930      	cbnz	r0, 8007cf0 <_calloc_r+0x24>
 8007ce2:	4628      	mov	r0, r5
 8007ce4:	b003      	add	sp, #12
 8007ce6:	bd30      	pop	{r4, r5, pc}
 8007ce8:	220c      	movs	r2, #12
 8007cea:	6002      	str	r2, [r0, #0]
 8007cec:	2500      	movs	r5, #0
 8007cee:	e7f8      	b.n	8007ce2 <_calloc_r+0x16>
 8007cf0:	4621      	mov	r1, r4
 8007cf2:	f7fe fa18 	bl	8006126 <memset>
 8007cf6:	e7f4      	b.n	8007ce2 <_calloc_r+0x16>

08007cf8 <__ascii_mbtowc>:
 8007cf8:	b082      	sub	sp, #8
 8007cfa:	b901      	cbnz	r1, 8007cfe <__ascii_mbtowc+0x6>
 8007cfc:	a901      	add	r1, sp, #4
 8007cfe:	b142      	cbz	r2, 8007d12 <__ascii_mbtowc+0x1a>
 8007d00:	b14b      	cbz	r3, 8007d16 <__ascii_mbtowc+0x1e>
 8007d02:	7813      	ldrb	r3, [r2, #0]
 8007d04:	600b      	str	r3, [r1, #0]
 8007d06:	7812      	ldrb	r2, [r2, #0]
 8007d08:	1e10      	subs	r0, r2, #0
 8007d0a:	bf18      	it	ne
 8007d0c:	2001      	movne	r0, #1
 8007d0e:	b002      	add	sp, #8
 8007d10:	4770      	bx	lr
 8007d12:	4610      	mov	r0, r2
 8007d14:	e7fb      	b.n	8007d0e <__ascii_mbtowc+0x16>
 8007d16:	f06f 0001 	mvn.w	r0, #1
 8007d1a:	e7f8      	b.n	8007d0e <__ascii_mbtowc+0x16>

08007d1c <_realloc_r>:
 8007d1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d20:	4680      	mov	r8, r0
 8007d22:	4614      	mov	r4, r2
 8007d24:	460e      	mov	r6, r1
 8007d26:	b921      	cbnz	r1, 8007d32 <_realloc_r+0x16>
 8007d28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007d2c:	4611      	mov	r1, r2
 8007d2e:	f7ff b969 	b.w	8007004 <_malloc_r>
 8007d32:	b92a      	cbnz	r2, 8007d40 <_realloc_r+0x24>
 8007d34:	f7ff f8f2 	bl	8006f1c <_free_r>
 8007d38:	4625      	mov	r5, r4
 8007d3a:	4628      	mov	r0, r5
 8007d3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d40:	f000 f841 	bl	8007dc6 <_malloc_usable_size_r>
 8007d44:	4284      	cmp	r4, r0
 8007d46:	4607      	mov	r7, r0
 8007d48:	d802      	bhi.n	8007d50 <_realloc_r+0x34>
 8007d4a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007d4e:	d812      	bhi.n	8007d76 <_realloc_r+0x5a>
 8007d50:	4621      	mov	r1, r4
 8007d52:	4640      	mov	r0, r8
 8007d54:	f7ff f956 	bl	8007004 <_malloc_r>
 8007d58:	4605      	mov	r5, r0
 8007d5a:	2800      	cmp	r0, #0
 8007d5c:	d0ed      	beq.n	8007d3a <_realloc_r+0x1e>
 8007d5e:	42bc      	cmp	r4, r7
 8007d60:	4622      	mov	r2, r4
 8007d62:	4631      	mov	r1, r6
 8007d64:	bf28      	it	cs
 8007d66:	463a      	movcs	r2, r7
 8007d68:	f7ff ff84 	bl	8007c74 <memcpy>
 8007d6c:	4631      	mov	r1, r6
 8007d6e:	4640      	mov	r0, r8
 8007d70:	f7ff f8d4 	bl	8006f1c <_free_r>
 8007d74:	e7e1      	b.n	8007d3a <_realloc_r+0x1e>
 8007d76:	4635      	mov	r5, r6
 8007d78:	e7df      	b.n	8007d3a <_realloc_r+0x1e>

08007d7a <__ascii_wctomb>:
 8007d7a:	b149      	cbz	r1, 8007d90 <__ascii_wctomb+0x16>
 8007d7c:	2aff      	cmp	r2, #255	; 0xff
 8007d7e:	bf85      	ittet	hi
 8007d80:	238a      	movhi	r3, #138	; 0x8a
 8007d82:	6003      	strhi	r3, [r0, #0]
 8007d84:	700a      	strbls	r2, [r1, #0]
 8007d86:	f04f 30ff 	movhi.w	r0, #4294967295
 8007d8a:	bf98      	it	ls
 8007d8c:	2001      	movls	r0, #1
 8007d8e:	4770      	bx	lr
 8007d90:	4608      	mov	r0, r1
 8007d92:	4770      	bx	lr

08007d94 <fiprintf>:
 8007d94:	b40e      	push	{r1, r2, r3}
 8007d96:	b503      	push	{r0, r1, lr}
 8007d98:	4601      	mov	r1, r0
 8007d9a:	ab03      	add	r3, sp, #12
 8007d9c:	4805      	ldr	r0, [pc, #20]	; (8007db4 <fiprintf+0x20>)
 8007d9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007da2:	6800      	ldr	r0, [r0, #0]
 8007da4:	9301      	str	r3, [sp, #4]
 8007da6:	f000 f83f 	bl	8007e28 <_vfiprintf_r>
 8007daa:	b002      	add	sp, #8
 8007dac:	f85d eb04 	ldr.w	lr, [sp], #4
 8007db0:	b003      	add	sp, #12
 8007db2:	4770      	bx	lr
 8007db4:	20000064 	.word	0x20000064

08007db8 <abort>:
 8007db8:	b508      	push	{r3, lr}
 8007dba:	2006      	movs	r0, #6
 8007dbc:	f000 fa0c 	bl	80081d8 <raise>
 8007dc0:	2001      	movs	r0, #1
 8007dc2:	f7f9 fd01 	bl	80017c8 <_exit>

08007dc6 <_malloc_usable_size_r>:
 8007dc6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007dca:	1f18      	subs	r0, r3, #4
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	bfbc      	itt	lt
 8007dd0:	580b      	ldrlt	r3, [r1, r0]
 8007dd2:	18c0      	addlt	r0, r0, r3
 8007dd4:	4770      	bx	lr

08007dd6 <__sfputc_r>:
 8007dd6:	6893      	ldr	r3, [r2, #8]
 8007dd8:	3b01      	subs	r3, #1
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	b410      	push	{r4}
 8007dde:	6093      	str	r3, [r2, #8]
 8007de0:	da08      	bge.n	8007df4 <__sfputc_r+0x1e>
 8007de2:	6994      	ldr	r4, [r2, #24]
 8007de4:	42a3      	cmp	r3, r4
 8007de6:	db01      	blt.n	8007dec <__sfputc_r+0x16>
 8007de8:	290a      	cmp	r1, #10
 8007dea:	d103      	bne.n	8007df4 <__sfputc_r+0x1e>
 8007dec:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007df0:	f000 b934 	b.w	800805c <__swbuf_r>
 8007df4:	6813      	ldr	r3, [r2, #0]
 8007df6:	1c58      	adds	r0, r3, #1
 8007df8:	6010      	str	r0, [r2, #0]
 8007dfa:	7019      	strb	r1, [r3, #0]
 8007dfc:	4608      	mov	r0, r1
 8007dfe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007e02:	4770      	bx	lr

08007e04 <__sfputs_r>:
 8007e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e06:	4606      	mov	r6, r0
 8007e08:	460f      	mov	r7, r1
 8007e0a:	4614      	mov	r4, r2
 8007e0c:	18d5      	adds	r5, r2, r3
 8007e0e:	42ac      	cmp	r4, r5
 8007e10:	d101      	bne.n	8007e16 <__sfputs_r+0x12>
 8007e12:	2000      	movs	r0, #0
 8007e14:	e007      	b.n	8007e26 <__sfputs_r+0x22>
 8007e16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e1a:	463a      	mov	r2, r7
 8007e1c:	4630      	mov	r0, r6
 8007e1e:	f7ff ffda 	bl	8007dd6 <__sfputc_r>
 8007e22:	1c43      	adds	r3, r0, #1
 8007e24:	d1f3      	bne.n	8007e0e <__sfputs_r+0xa>
 8007e26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007e28 <_vfiprintf_r>:
 8007e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e2c:	460d      	mov	r5, r1
 8007e2e:	b09d      	sub	sp, #116	; 0x74
 8007e30:	4614      	mov	r4, r2
 8007e32:	4698      	mov	r8, r3
 8007e34:	4606      	mov	r6, r0
 8007e36:	b118      	cbz	r0, 8007e40 <_vfiprintf_r+0x18>
 8007e38:	6a03      	ldr	r3, [r0, #32]
 8007e3a:	b90b      	cbnz	r3, 8007e40 <_vfiprintf_r+0x18>
 8007e3c:	f7fe f8c6 	bl	8005fcc <__sinit>
 8007e40:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007e42:	07d9      	lsls	r1, r3, #31
 8007e44:	d405      	bmi.n	8007e52 <_vfiprintf_r+0x2a>
 8007e46:	89ab      	ldrh	r3, [r5, #12]
 8007e48:	059a      	lsls	r2, r3, #22
 8007e4a:	d402      	bmi.n	8007e52 <_vfiprintf_r+0x2a>
 8007e4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007e4e:	f7fe f9e8 	bl	8006222 <__retarget_lock_acquire_recursive>
 8007e52:	89ab      	ldrh	r3, [r5, #12]
 8007e54:	071b      	lsls	r3, r3, #28
 8007e56:	d501      	bpl.n	8007e5c <_vfiprintf_r+0x34>
 8007e58:	692b      	ldr	r3, [r5, #16]
 8007e5a:	b99b      	cbnz	r3, 8007e84 <_vfiprintf_r+0x5c>
 8007e5c:	4629      	mov	r1, r5
 8007e5e:	4630      	mov	r0, r6
 8007e60:	f000 f93a 	bl	80080d8 <__swsetup_r>
 8007e64:	b170      	cbz	r0, 8007e84 <_vfiprintf_r+0x5c>
 8007e66:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007e68:	07dc      	lsls	r4, r3, #31
 8007e6a:	d504      	bpl.n	8007e76 <_vfiprintf_r+0x4e>
 8007e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8007e70:	b01d      	add	sp, #116	; 0x74
 8007e72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e76:	89ab      	ldrh	r3, [r5, #12]
 8007e78:	0598      	lsls	r0, r3, #22
 8007e7a:	d4f7      	bmi.n	8007e6c <_vfiprintf_r+0x44>
 8007e7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007e7e:	f7fe f9d1 	bl	8006224 <__retarget_lock_release_recursive>
 8007e82:	e7f3      	b.n	8007e6c <_vfiprintf_r+0x44>
 8007e84:	2300      	movs	r3, #0
 8007e86:	9309      	str	r3, [sp, #36]	; 0x24
 8007e88:	2320      	movs	r3, #32
 8007e8a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007e8e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007e92:	2330      	movs	r3, #48	; 0x30
 8007e94:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008048 <_vfiprintf_r+0x220>
 8007e98:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007e9c:	f04f 0901 	mov.w	r9, #1
 8007ea0:	4623      	mov	r3, r4
 8007ea2:	469a      	mov	sl, r3
 8007ea4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ea8:	b10a      	cbz	r2, 8007eae <_vfiprintf_r+0x86>
 8007eaa:	2a25      	cmp	r2, #37	; 0x25
 8007eac:	d1f9      	bne.n	8007ea2 <_vfiprintf_r+0x7a>
 8007eae:	ebba 0b04 	subs.w	fp, sl, r4
 8007eb2:	d00b      	beq.n	8007ecc <_vfiprintf_r+0xa4>
 8007eb4:	465b      	mov	r3, fp
 8007eb6:	4622      	mov	r2, r4
 8007eb8:	4629      	mov	r1, r5
 8007eba:	4630      	mov	r0, r6
 8007ebc:	f7ff ffa2 	bl	8007e04 <__sfputs_r>
 8007ec0:	3001      	adds	r0, #1
 8007ec2:	f000 80a9 	beq.w	8008018 <_vfiprintf_r+0x1f0>
 8007ec6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ec8:	445a      	add	r2, fp
 8007eca:	9209      	str	r2, [sp, #36]	; 0x24
 8007ecc:	f89a 3000 	ldrb.w	r3, [sl]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	f000 80a1 	beq.w	8008018 <_vfiprintf_r+0x1f0>
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	f04f 32ff 	mov.w	r2, #4294967295
 8007edc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007ee0:	f10a 0a01 	add.w	sl, sl, #1
 8007ee4:	9304      	str	r3, [sp, #16]
 8007ee6:	9307      	str	r3, [sp, #28]
 8007ee8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007eec:	931a      	str	r3, [sp, #104]	; 0x68
 8007eee:	4654      	mov	r4, sl
 8007ef0:	2205      	movs	r2, #5
 8007ef2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ef6:	4854      	ldr	r0, [pc, #336]	; (8008048 <_vfiprintf_r+0x220>)
 8007ef8:	f7f8 f96a 	bl	80001d0 <memchr>
 8007efc:	9a04      	ldr	r2, [sp, #16]
 8007efe:	b9d8      	cbnz	r0, 8007f38 <_vfiprintf_r+0x110>
 8007f00:	06d1      	lsls	r1, r2, #27
 8007f02:	bf44      	itt	mi
 8007f04:	2320      	movmi	r3, #32
 8007f06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007f0a:	0713      	lsls	r3, r2, #28
 8007f0c:	bf44      	itt	mi
 8007f0e:	232b      	movmi	r3, #43	; 0x2b
 8007f10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007f14:	f89a 3000 	ldrb.w	r3, [sl]
 8007f18:	2b2a      	cmp	r3, #42	; 0x2a
 8007f1a:	d015      	beq.n	8007f48 <_vfiprintf_r+0x120>
 8007f1c:	9a07      	ldr	r2, [sp, #28]
 8007f1e:	4654      	mov	r4, sl
 8007f20:	2000      	movs	r0, #0
 8007f22:	f04f 0c0a 	mov.w	ip, #10
 8007f26:	4621      	mov	r1, r4
 8007f28:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f2c:	3b30      	subs	r3, #48	; 0x30
 8007f2e:	2b09      	cmp	r3, #9
 8007f30:	d94d      	bls.n	8007fce <_vfiprintf_r+0x1a6>
 8007f32:	b1b0      	cbz	r0, 8007f62 <_vfiprintf_r+0x13a>
 8007f34:	9207      	str	r2, [sp, #28]
 8007f36:	e014      	b.n	8007f62 <_vfiprintf_r+0x13a>
 8007f38:	eba0 0308 	sub.w	r3, r0, r8
 8007f3c:	fa09 f303 	lsl.w	r3, r9, r3
 8007f40:	4313      	orrs	r3, r2
 8007f42:	9304      	str	r3, [sp, #16]
 8007f44:	46a2      	mov	sl, r4
 8007f46:	e7d2      	b.n	8007eee <_vfiprintf_r+0xc6>
 8007f48:	9b03      	ldr	r3, [sp, #12]
 8007f4a:	1d19      	adds	r1, r3, #4
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	9103      	str	r1, [sp, #12]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	bfbb      	ittet	lt
 8007f54:	425b      	neglt	r3, r3
 8007f56:	f042 0202 	orrlt.w	r2, r2, #2
 8007f5a:	9307      	strge	r3, [sp, #28]
 8007f5c:	9307      	strlt	r3, [sp, #28]
 8007f5e:	bfb8      	it	lt
 8007f60:	9204      	strlt	r2, [sp, #16]
 8007f62:	7823      	ldrb	r3, [r4, #0]
 8007f64:	2b2e      	cmp	r3, #46	; 0x2e
 8007f66:	d10c      	bne.n	8007f82 <_vfiprintf_r+0x15a>
 8007f68:	7863      	ldrb	r3, [r4, #1]
 8007f6a:	2b2a      	cmp	r3, #42	; 0x2a
 8007f6c:	d134      	bne.n	8007fd8 <_vfiprintf_r+0x1b0>
 8007f6e:	9b03      	ldr	r3, [sp, #12]
 8007f70:	1d1a      	adds	r2, r3, #4
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	9203      	str	r2, [sp, #12]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	bfb8      	it	lt
 8007f7a:	f04f 33ff 	movlt.w	r3, #4294967295
 8007f7e:	3402      	adds	r4, #2
 8007f80:	9305      	str	r3, [sp, #20]
 8007f82:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008058 <_vfiprintf_r+0x230>
 8007f86:	7821      	ldrb	r1, [r4, #0]
 8007f88:	2203      	movs	r2, #3
 8007f8a:	4650      	mov	r0, sl
 8007f8c:	f7f8 f920 	bl	80001d0 <memchr>
 8007f90:	b138      	cbz	r0, 8007fa2 <_vfiprintf_r+0x17a>
 8007f92:	9b04      	ldr	r3, [sp, #16]
 8007f94:	eba0 000a 	sub.w	r0, r0, sl
 8007f98:	2240      	movs	r2, #64	; 0x40
 8007f9a:	4082      	lsls	r2, r0
 8007f9c:	4313      	orrs	r3, r2
 8007f9e:	3401      	adds	r4, #1
 8007fa0:	9304      	str	r3, [sp, #16]
 8007fa2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fa6:	4829      	ldr	r0, [pc, #164]	; (800804c <_vfiprintf_r+0x224>)
 8007fa8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007fac:	2206      	movs	r2, #6
 8007fae:	f7f8 f90f 	bl	80001d0 <memchr>
 8007fb2:	2800      	cmp	r0, #0
 8007fb4:	d03f      	beq.n	8008036 <_vfiprintf_r+0x20e>
 8007fb6:	4b26      	ldr	r3, [pc, #152]	; (8008050 <_vfiprintf_r+0x228>)
 8007fb8:	bb1b      	cbnz	r3, 8008002 <_vfiprintf_r+0x1da>
 8007fba:	9b03      	ldr	r3, [sp, #12]
 8007fbc:	3307      	adds	r3, #7
 8007fbe:	f023 0307 	bic.w	r3, r3, #7
 8007fc2:	3308      	adds	r3, #8
 8007fc4:	9303      	str	r3, [sp, #12]
 8007fc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fc8:	443b      	add	r3, r7
 8007fca:	9309      	str	r3, [sp, #36]	; 0x24
 8007fcc:	e768      	b.n	8007ea0 <_vfiprintf_r+0x78>
 8007fce:	fb0c 3202 	mla	r2, ip, r2, r3
 8007fd2:	460c      	mov	r4, r1
 8007fd4:	2001      	movs	r0, #1
 8007fd6:	e7a6      	b.n	8007f26 <_vfiprintf_r+0xfe>
 8007fd8:	2300      	movs	r3, #0
 8007fda:	3401      	adds	r4, #1
 8007fdc:	9305      	str	r3, [sp, #20]
 8007fde:	4619      	mov	r1, r3
 8007fe0:	f04f 0c0a 	mov.w	ip, #10
 8007fe4:	4620      	mov	r0, r4
 8007fe6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007fea:	3a30      	subs	r2, #48	; 0x30
 8007fec:	2a09      	cmp	r2, #9
 8007fee:	d903      	bls.n	8007ff8 <_vfiprintf_r+0x1d0>
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d0c6      	beq.n	8007f82 <_vfiprintf_r+0x15a>
 8007ff4:	9105      	str	r1, [sp, #20]
 8007ff6:	e7c4      	b.n	8007f82 <_vfiprintf_r+0x15a>
 8007ff8:	fb0c 2101 	mla	r1, ip, r1, r2
 8007ffc:	4604      	mov	r4, r0
 8007ffe:	2301      	movs	r3, #1
 8008000:	e7f0      	b.n	8007fe4 <_vfiprintf_r+0x1bc>
 8008002:	ab03      	add	r3, sp, #12
 8008004:	9300      	str	r3, [sp, #0]
 8008006:	462a      	mov	r2, r5
 8008008:	4b12      	ldr	r3, [pc, #72]	; (8008054 <_vfiprintf_r+0x22c>)
 800800a:	a904      	add	r1, sp, #16
 800800c:	4630      	mov	r0, r6
 800800e:	f7fd fb8b 	bl	8005728 <_printf_float>
 8008012:	4607      	mov	r7, r0
 8008014:	1c78      	adds	r0, r7, #1
 8008016:	d1d6      	bne.n	8007fc6 <_vfiprintf_r+0x19e>
 8008018:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800801a:	07d9      	lsls	r1, r3, #31
 800801c:	d405      	bmi.n	800802a <_vfiprintf_r+0x202>
 800801e:	89ab      	ldrh	r3, [r5, #12]
 8008020:	059a      	lsls	r2, r3, #22
 8008022:	d402      	bmi.n	800802a <_vfiprintf_r+0x202>
 8008024:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008026:	f7fe f8fd 	bl	8006224 <__retarget_lock_release_recursive>
 800802a:	89ab      	ldrh	r3, [r5, #12]
 800802c:	065b      	lsls	r3, r3, #25
 800802e:	f53f af1d 	bmi.w	8007e6c <_vfiprintf_r+0x44>
 8008032:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008034:	e71c      	b.n	8007e70 <_vfiprintf_r+0x48>
 8008036:	ab03      	add	r3, sp, #12
 8008038:	9300      	str	r3, [sp, #0]
 800803a:	462a      	mov	r2, r5
 800803c:	4b05      	ldr	r3, [pc, #20]	; (8008054 <_vfiprintf_r+0x22c>)
 800803e:	a904      	add	r1, sp, #16
 8008040:	4630      	mov	r0, r6
 8008042:	f7fd fe15 	bl	8005c70 <_printf_i>
 8008046:	e7e4      	b.n	8008012 <_vfiprintf_r+0x1ea>
 8008048:	080085e4 	.word	0x080085e4
 800804c:	080085ee 	.word	0x080085ee
 8008050:	08005729 	.word	0x08005729
 8008054:	08007e05 	.word	0x08007e05
 8008058:	080085ea 	.word	0x080085ea

0800805c <__swbuf_r>:
 800805c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800805e:	460e      	mov	r6, r1
 8008060:	4614      	mov	r4, r2
 8008062:	4605      	mov	r5, r0
 8008064:	b118      	cbz	r0, 800806e <__swbuf_r+0x12>
 8008066:	6a03      	ldr	r3, [r0, #32]
 8008068:	b90b      	cbnz	r3, 800806e <__swbuf_r+0x12>
 800806a:	f7fd ffaf 	bl	8005fcc <__sinit>
 800806e:	69a3      	ldr	r3, [r4, #24]
 8008070:	60a3      	str	r3, [r4, #8]
 8008072:	89a3      	ldrh	r3, [r4, #12]
 8008074:	071a      	lsls	r2, r3, #28
 8008076:	d525      	bpl.n	80080c4 <__swbuf_r+0x68>
 8008078:	6923      	ldr	r3, [r4, #16]
 800807a:	b31b      	cbz	r3, 80080c4 <__swbuf_r+0x68>
 800807c:	6823      	ldr	r3, [r4, #0]
 800807e:	6922      	ldr	r2, [r4, #16]
 8008080:	1a98      	subs	r0, r3, r2
 8008082:	6963      	ldr	r3, [r4, #20]
 8008084:	b2f6      	uxtb	r6, r6
 8008086:	4283      	cmp	r3, r0
 8008088:	4637      	mov	r7, r6
 800808a:	dc04      	bgt.n	8008096 <__swbuf_r+0x3a>
 800808c:	4621      	mov	r1, r4
 800808e:	4628      	mov	r0, r5
 8008090:	f7ff fd9e 	bl	8007bd0 <_fflush_r>
 8008094:	b9e0      	cbnz	r0, 80080d0 <__swbuf_r+0x74>
 8008096:	68a3      	ldr	r3, [r4, #8]
 8008098:	3b01      	subs	r3, #1
 800809a:	60a3      	str	r3, [r4, #8]
 800809c:	6823      	ldr	r3, [r4, #0]
 800809e:	1c5a      	adds	r2, r3, #1
 80080a0:	6022      	str	r2, [r4, #0]
 80080a2:	701e      	strb	r6, [r3, #0]
 80080a4:	6962      	ldr	r2, [r4, #20]
 80080a6:	1c43      	adds	r3, r0, #1
 80080a8:	429a      	cmp	r2, r3
 80080aa:	d004      	beq.n	80080b6 <__swbuf_r+0x5a>
 80080ac:	89a3      	ldrh	r3, [r4, #12]
 80080ae:	07db      	lsls	r3, r3, #31
 80080b0:	d506      	bpl.n	80080c0 <__swbuf_r+0x64>
 80080b2:	2e0a      	cmp	r6, #10
 80080b4:	d104      	bne.n	80080c0 <__swbuf_r+0x64>
 80080b6:	4621      	mov	r1, r4
 80080b8:	4628      	mov	r0, r5
 80080ba:	f7ff fd89 	bl	8007bd0 <_fflush_r>
 80080be:	b938      	cbnz	r0, 80080d0 <__swbuf_r+0x74>
 80080c0:	4638      	mov	r0, r7
 80080c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80080c4:	4621      	mov	r1, r4
 80080c6:	4628      	mov	r0, r5
 80080c8:	f000 f806 	bl	80080d8 <__swsetup_r>
 80080cc:	2800      	cmp	r0, #0
 80080ce:	d0d5      	beq.n	800807c <__swbuf_r+0x20>
 80080d0:	f04f 37ff 	mov.w	r7, #4294967295
 80080d4:	e7f4      	b.n	80080c0 <__swbuf_r+0x64>
	...

080080d8 <__swsetup_r>:
 80080d8:	b538      	push	{r3, r4, r5, lr}
 80080da:	4b2a      	ldr	r3, [pc, #168]	; (8008184 <__swsetup_r+0xac>)
 80080dc:	4605      	mov	r5, r0
 80080de:	6818      	ldr	r0, [r3, #0]
 80080e0:	460c      	mov	r4, r1
 80080e2:	b118      	cbz	r0, 80080ec <__swsetup_r+0x14>
 80080e4:	6a03      	ldr	r3, [r0, #32]
 80080e6:	b90b      	cbnz	r3, 80080ec <__swsetup_r+0x14>
 80080e8:	f7fd ff70 	bl	8005fcc <__sinit>
 80080ec:	89a3      	ldrh	r3, [r4, #12]
 80080ee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80080f2:	0718      	lsls	r0, r3, #28
 80080f4:	d422      	bmi.n	800813c <__swsetup_r+0x64>
 80080f6:	06d9      	lsls	r1, r3, #27
 80080f8:	d407      	bmi.n	800810a <__swsetup_r+0x32>
 80080fa:	2309      	movs	r3, #9
 80080fc:	602b      	str	r3, [r5, #0]
 80080fe:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008102:	81a3      	strh	r3, [r4, #12]
 8008104:	f04f 30ff 	mov.w	r0, #4294967295
 8008108:	e034      	b.n	8008174 <__swsetup_r+0x9c>
 800810a:	0758      	lsls	r0, r3, #29
 800810c:	d512      	bpl.n	8008134 <__swsetup_r+0x5c>
 800810e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008110:	b141      	cbz	r1, 8008124 <__swsetup_r+0x4c>
 8008112:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008116:	4299      	cmp	r1, r3
 8008118:	d002      	beq.n	8008120 <__swsetup_r+0x48>
 800811a:	4628      	mov	r0, r5
 800811c:	f7fe fefe 	bl	8006f1c <_free_r>
 8008120:	2300      	movs	r3, #0
 8008122:	6363      	str	r3, [r4, #52]	; 0x34
 8008124:	89a3      	ldrh	r3, [r4, #12]
 8008126:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800812a:	81a3      	strh	r3, [r4, #12]
 800812c:	2300      	movs	r3, #0
 800812e:	6063      	str	r3, [r4, #4]
 8008130:	6923      	ldr	r3, [r4, #16]
 8008132:	6023      	str	r3, [r4, #0]
 8008134:	89a3      	ldrh	r3, [r4, #12]
 8008136:	f043 0308 	orr.w	r3, r3, #8
 800813a:	81a3      	strh	r3, [r4, #12]
 800813c:	6923      	ldr	r3, [r4, #16]
 800813e:	b94b      	cbnz	r3, 8008154 <__swsetup_r+0x7c>
 8008140:	89a3      	ldrh	r3, [r4, #12]
 8008142:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008146:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800814a:	d003      	beq.n	8008154 <__swsetup_r+0x7c>
 800814c:	4621      	mov	r1, r4
 800814e:	4628      	mov	r0, r5
 8008150:	f000 f884 	bl	800825c <__smakebuf_r>
 8008154:	89a0      	ldrh	r0, [r4, #12]
 8008156:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800815a:	f010 0301 	ands.w	r3, r0, #1
 800815e:	d00a      	beq.n	8008176 <__swsetup_r+0x9e>
 8008160:	2300      	movs	r3, #0
 8008162:	60a3      	str	r3, [r4, #8]
 8008164:	6963      	ldr	r3, [r4, #20]
 8008166:	425b      	negs	r3, r3
 8008168:	61a3      	str	r3, [r4, #24]
 800816a:	6923      	ldr	r3, [r4, #16]
 800816c:	b943      	cbnz	r3, 8008180 <__swsetup_r+0xa8>
 800816e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008172:	d1c4      	bne.n	80080fe <__swsetup_r+0x26>
 8008174:	bd38      	pop	{r3, r4, r5, pc}
 8008176:	0781      	lsls	r1, r0, #30
 8008178:	bf58      	it	pl
 800817a:	6963      	ldrpl	r3, [r4, #20]
 800817c:	60a3      	str	r3, [r4, #8]
 800817e:	e7f4      	b.n	800816a <__swsetup_r+0x92>
 8008180:	2000      	movs	r0, #0
 8008182:	e7f7      	b.n	8008174 <__swsetup_r+0x9c>
 8008184:	20000064 	.word	0x20000064

08008188 <_raise_r>:
 8008188:	291f      	cmp	r1, #31
 800818a:	b538      	push	{r3, r4, r5, lr}
 800818c:	4604      	mov	r4, r0
 800818e:	460d      	mov	r5, r1
 8008190:	d904      	bls.n	800819c <_raise_r+0x14>
 8008192:	2316      	movs	r3, #22
 8008194:	6003      	str	r3, [r0, #0]
 8008196:	f04f 30ff 	mov.w	r0, #4294967295
 800819a:	bd38      	pop	{r3, r4, r5, pc}
 800819c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800819e:	b112      	cbz	r2, 80081a6 <_raise_r+0x1e>
 80081a0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80081a4:	b94b      	cbnz	r3, 80081ba <_raise_r+0x32>
 80081a6:	4620      	mov	r0, r4
 80081a8:	f000 f830 	bl	800820c <_getpid_r>
 80081ac:	462a      	mov	r2, r5
 80081ae:	4601      	mov	r1, r0
 80081b0:	4620      	mov	r0, r4
 80081b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80081b6:	f000 b817 	b.w	80081e8 <_kill_r>
 80081ba:	2b01      	cmp	r3, #1
 80081bc:	d00a      	beq.n	80081d4 <_raise_r+0x4c>
 80081be:	1c59      	adds	r1, r3, #1
 80081c0:	d103      	bne.n	80081ca <_raise_r+0x42>
 80081c2:	2316      	movs	r3, #22
 80081c4:	6003      	str	r3, [r0, #0]
 80081c6:	2001      	movs	r0, #1
 80081c8:	e7e7      	b.n	800819a <_raise_r+0x12>
 80081ca:	2400      	movs	r4, #0
 80081cc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80081d0:	4628      	mov	r0, r5
 80081d2:	4798      	blx	r3
 80081d4:	2000      	movs	r0, #0
 80081d6:	e7e0      	b.n	800819a <_raise_r+0x12>

080081d8 <raise>:
 80081d8:	4b02      	ldr	r3, [pc, #8]	; (80081e4 <raise+0xc>)
 80081da:	4601      	mov	r1, r0
 80081dc:	6818      	ldr	r0, [r3, #0]
 80081de:	f7ff bfd3 	b.w	8008188 <_raise_r>
 80081e2:	bf00      	nop
 80081e4:	20000064 	.word	0x20000064

080081e8 <_kill_r>:
 80081e8:	b538      	push	{r3, r4, r5, lr}
 80081ea:	4d07      	ldr	r5, [pc, #28]	; (8008208 <_kill_r+0x20>)
 80081ec:	2300      	movs	r3, #0
 80081ee:	4604      	mov	r4, r0
 80081f0:	4608      	mov	r0, r1
 80081f2:	4611      	mov	r1, r2
 80081f4:	602b      	str	r3, [r5, #0]
 80081f6:	f7f9 fad7 	bl	80017a8 <_kill>
 80081fa:	1c43      	adds	r3, r0, #1
 80081fc:	d102      	bne.n	8008204 <_kill_r+0x1c>
 80081fe:	682b      	ldr	r3, [r5, #0]
 8008200:	b103      	cbz	r3, 8008204 <_kill_r+0x1c>
 8008202:	6023      	str	r3, [r4, #0]
 8008204:	bd38      	pop	{r3, r4, r5, pc}
 8008206:	bf00      	nop
 8008208:	200004b8 	.word	0x200004b8

0800820c <_getpid_r>:
 800820c:	f7f9 bac4 	b.w	8001798 <_getpid>

08008210 <__swhatbuf_r>:
 8008210:	b570      	push	{r4, r5, r6, lr}
 8008212:	460c      	mov	r4, r1
 8008214:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008218:	2900      	cmp	r1, #0
 800821a:	b096      	sub	sp, #88	; 0x58
 800821c:	4615      	mov	r5, r2
 800821e:	461e      	mov	r6, r3
 8008220:	da0d      	bge.n	800823e <__swhatbuf_r+0x2e>
 8008222:	89a3      	ldrh	r3, [r4, #12]
 8008224:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008228:	f04f 0100 	mov.w	r1, #0
 800822c:	bf0c      	ite	eq
 800822e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008232:	2340      	movne	r3, #64	; 0x40
 8008234:	2000      	movs	r0, #0
 8008236:	6031      	str	r1, [r6, #0]
 8008238:	602b      	str	r3, [r5, #0]
 800823a:	b016      	add	sp, #88	; 0x58
 800823c:	bd70      	pop	{r4, r5, r6, pc}
 800823e:	466a      	mov	r2, sp
 8008240:	f000 f848 	bl	80082d4 <_fstat_r>
 8008244:	2800      	cmp	r0, #0
 8008246:	dbec      	blt.n	8008222 <__swhatbuf_r+0x12>
 8008248:	9901      	ldr	r1, [sp, #4]
 800824a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800824e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008252:	4259      	negs	r1, r3
 8008254:	4159      	adcs	r1, r3
 8008256:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800825a:	e7eb      	b.n	8008234 <__swhatbuf_r+0x24>

0800825c <__smakebuf_r>:
 800825c:	898b      	ldrh	r3, [r1, #12]
 800825e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008260:	079d      	lsls	r5, r3, #30
 8008262:	4606      	mov	r6, r0
 8008264:	460c      	mov	r4, r1
 8008266:	d507      	bpl.n	8008278 <__smakebuf_r+0x1c>
 8008268:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800826c:	6023      	str	r3, [r4, #0]
 800826e:	6123      	str	r3, [r4, #16]
 8008270:	2301      	movs	r3, #1
 8008272:	6163      	str	r3, [r4, #20]
 8008274:	b002      	add	sp, #8
 8008276:	bd70      	pop	{r4, r5, r6, pc}
 8008278:	ab01      	add	r3, sp, #4
 800827a:	466a      	mov	r2, sp
 800827c:	f7ff ffc8 	bl	8008210 <__swhatbuf_r>
 8008280:	9900      	ldr	r1, [sp, #0]
 8008282:	4605      	mov	r5, r0
 8008284:	4630      	mov	r0, r6
 8008286:	f7fe febd 	bl	8007004 <_malloc_r>
 800828a:	b948      	cbnz	r0, 80082a0 <__smakebuf_r+0x44>
 800828c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008290:	059a      	lsls	r2, r3, #22
 8008292:	d4ef      	bmi.n	8008274 <__smakebuf_r+0x18>
 8008294:	f023 0303 	bic.w	r3, r3, #3
 8008298:	f043 0302 	orr.w	r3, r3, #2
 800829c:	81a3      	strh	r3, [r4, #12]
 800829e:	e7e3      	b.n	8008268 <__smakebuf_r+0xc>
 80082a0:	89a3      	ldrh	r3, [r4, #12]
 80082a2:	6020      	str	r0, [r4, #0]
 80082a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082a8:	81a3      	strh	r3, [r4, #12]
 80082aa:	9b00      	ldr	r3, [sp, #0]
 80082ac:	6163      	str	r3, [r4, #20]
 80082ae:	9b01      	ldr	r3, [sp, #4]
 80082b0:	6120      	str	r0, [r4, #16]
 80082b2:	b15b      	cbz	r3, 80082cc <__smakebuf_r+0x70>
 80082b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80082b8:	4630      	mov	r0, r6
 80082ba:	f000 f81d 	bl	80082f8 <_isatty_r>
 80082be:	b128      	cbz	r0, 80082cc <__smakebuf_r+0x70>
 80082c0:	89a3      	ldrh	r3, [r4, #12]
 80082c2:	f023 0303 	bic.w	r3, r3, #3
 80082c6:	f043 0301 	orr.w	r3, r3, #1
 80082ca:	81a3      	strh	r3, [r4, #12]
 80082cc:	89a3      	ldrh	r3, [r4, #12]
 80082ce:	431d      	orrs	r5, r3
 80082d0:	81a5      	strh	r5, [r4, #12]
 80082d2:	e7cf      	b.n	8008274 <__smakebuf_r+0x18>

080082d4 <_fstat_r>:
 80082d4:	b538      	push	{r3, r4, r5, lr}
 80082d6:	4d07      	ldr	r5, [pc, #28]	; (80082f4 <_fstat_r+0x20>)
 80082d8:	2300      	movs	r3, #0
 80082da:	4604      	mov	r4, r0
 80082dc:	4608      	mov	r0, r1
 80082de:	4611      	mov	r1, r2
 80082e0:	602b      	str	r3, [r5, #0]
 80082e2:	f7f9 fac0 	bl	8001866 <_fstat>
 80082e6:	1c43      	adds	r3, r0, #1
 80082e8:	d102      	bne.n	80082f0 <_fstat_r+0x1c>
 80082ea:	682b      	ldr	r3, [r5, #0]
 80082ec:	b103      	cbz	r3, 80082f0 <_fstat_r+0x1c>
 80082ee:	6023      	str	r3, [r4, #0]
 80082f0:	bd38      	pop	{r3, r4, r5, pc}
 80082f2:	bf00      	nop
 80082f4:	200004b8 	.word	0x200004b8

080082f8 <_isatty_r>:
 80082f8:	b538      	push	{r3, r4, r5, lr}
 80082fa:	4d06      	ldr	r5, [pc, #24]	; (8008314 <_isatty_r+0x1c>)
 80082fc:	2300      	movs	r3, #0
 80082fe:	4604      	mov	r4, r0
 8008300:	4608      	mov	r0, r1
 8008302:	602b      	str	r3, [r5, #0]
 8008304:	f7f9 fabf 	bl	8001886 <_isatty>
 8008308:	1c43      	adds	r3, r0, #1
 800830a:	d102      	bne.n	8008312 <_isatty_r+0x1a>
 800830c:	682b      	ldr	r3, [r5, #0]
 800830e:	b103      	cbz	r3, 8008312 <_isatty_r+0x1a>
 8008310:	6023      	str	r3, [r4, #0]
 8008312:	bd38      	pop	{r3, r4, r5, pc}
 8008314:	200004b8 	.word	0x200004b8

08008318 <_init>:
 8008318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800831a:	bf00      	nop
 800831c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800831e:	bc08      	pop	{r3}
 8008320:	469e      	mov	lr, r3
 8008322:	4770      	bx	lr

08008324 <_fini>:
 8008324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008326:	bf00      	nop
 8008328:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800832a:	bc08      	pop	{r3}
 800832c:	469e      	mov	lr, r3
 800832e:	4770      	bx	lr
