
Projekt_warsztaty_KoNaR_2023.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a958  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000040c  0800aae8  0800aae8  0001aae8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aef4  0800aef4  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800aef4  0800aef4  0001aef4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aefc  0800aefc  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aefc  0800aefc  0001aefc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800af00  0800af00  0001af00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800af04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000354  200001d4  0800b0d8  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000528  0800b0d8  00020528  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014ea3  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000029ba  00000000  00000000  000350ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001330  00000000  00000000  00037aa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f10  00000000  00000000  00038dd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002849b  00000000  00000000  00039ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017543  00000000  00000000  00062183  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f75f4  00000000  00000000  000796c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006324  00000000  00000000  00170cbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  00176fe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800aad0 	.word	0x0800aad0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	0800aad0 	.word	0x0800aad0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b970 	b.w	8000f40 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	460d      	mov	r5, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	460f      	mov	r7, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4694      	mov	ip, r2
 8000c8c:	d965      	bls.n	8000d5a <__udivmoddi4+0xe2>
 8000c8e:	fab2 f382 	clz	r3, r2
 8000c92:	b143      	cbz	r3, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c98:	f1c3 0220 	rsb	r2, r3, #32
 8000c9c:	409f      	lsls	r7, r3
 8000c9e:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca2:	4317      	orrs	r7, r2
 8000ca4:	409c      	lsls	r4, r3
 8000ca6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000caa:	fa1f f58c 	uxth.w	r5, ip
 8000cae:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cb2:	0c22      	lsrs	r2, r4, #16
 8000cb4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cb8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cbc:	fb01 f005 	mul.w	r0, r1, r5
 8000cc0:	4290      	cmp	r0, r2
 8000cc2:	d90a      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cc8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ccc:	f080 811c 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	f240 8119 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	4462      	add	r2, ip
 8000cda:	1a12      	subs	r2, r2, r0
 8000cdc:	b2a4      	uxth	r4, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cea:	fb00 f505 	mul.w	r5, r0, r5
 8000cee:	42a5      	cmp	r5, r4
 8000cf0:	d90a      	bls.n	8000d08 <__udivmoddi4+0x90>
 8000cf2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cfa:	f080 8107 	bcs.w	8000f0c <__udivmoddi4+0x294>
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	f240 8104 	bls.w	8000f0c <__udivmoddi4+0x294>
 8000d04:	4464      	add	r4, ip
 8000d06:	3802      	subs	r0, #2
 8000d08:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0c:	1b64      	subs	r4, r4, r5
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11e      	cbz	r6, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40dc      	lsrs	r4, r3
 8000d14:	2300      	movs	r3, #0
 8000d16:	e9c6 4300 	strd	r4, r3, [r6]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0xbc>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80ed 	beq.w	8000f02 <__udivmoddi4+0x28a>
 8000d28:	2100      	movs	r1, #0
 8000d2a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d34:	fab3 f183 	clz	r1, r3
 8000d38:	2900      	cmp	r1, #0
 8000d3a:	d149      	bne.n	8000dd0 <__udivmoddi4+0x158>
 8000d3c:	42ab      	cmp	r3, r5
 8000d3e:	d302      	bcc.n	8000d46 <__udivmoddi4+0xce>
 8000d40:	4282      	cmp	r2, r0
 8000d42:	f200 80f8 	bhi.w	8000f36 <__udivmoddi4+0x2be>
 8000d46:	1a84      	subs	r4, r0, r2
 8000d48:	eb65 0203 	sbc.w	r2, r5, r3
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	4617      	mov	r7, r2
 8000d50:	2e00      	cmp	r6, #0
 8000d52:	d0e2      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	e9c6 4700 	strd	r4, r7, [r6]
 8000d58:	e7df      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d5a:	b902      	cbnz	r2, 8000d5e <__udivmoddi4+0xe6>
 8000d5c:	deff      	udf	#255	; 0xff
 8000d5e:	fab2 f382 	clz	r3, r2
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f040 8090 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d68:	1a8a      	subs	r2, r1, r2
 8000d6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d6e:	fa1f fe8c 	uxth.w	lr, ip
 8000d72:	2101      	movs	r1, #1
 8000d74:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d78:	fb07 2015 	mls	r0, r7, r5, r2
 8000d7c:	0c22      	lsrs	r2, r4, #16
 8000d7e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d82:	fb0e f005 	mul.w	r0, lr, r5
 8000d86:	4290      	cmp	r0, r2
 8000d88:	d908      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d8e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4290      	cmp	r0, r2
 8000d96:	f200 80cb 	bhi.w	8000f30 <__udivmoddi4+0x2b8>
 8000d9a:	4645      	mov	r5, r8
 8000d9c:	1a12      	subs	r2, r2, r0
 8000d9e:	b2a4      	uxth	r4, r4
 8000da0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000da4:	fb07 2210 	mls	r2, r7, r0, r2
 8000da8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dac:	fb0e fe00 	mul.w	lr, lr, r0
 8000db0:	45a6      	cmp	lr, r4
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x14e>
 8000db4:	eb1c 0404 	adds.w	r4, ip, r4
 8000db8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dbc:	d202      	bcs.n	8000dc4 <__udivmoddi4+0x14c>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f200 80bb 	bhi.w	8000f3a <__udivmoddi4+0x2c2>
 8000dc4:	4610      	mov	r0, r2
 8000dc6:	eba4 040e 	sub.w	r4, r4, lr
 8000dca:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dce:	e79f      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dd0:	f1c1 0720 	rsb	r7, r1, #32
 8000dd4:	408b      	lsls	r3, r1
 8000dd6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dda:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dde:	fa05 f401 	lsl.w	r4, r5, r1
 8000de2:	fa20 f307 	lsr.w	r3, r0, r7
 8000de6:	40fd      	lsrs	r5, r7
 8000de8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dec:	4323      	orrs	r3, r4
 8000dee:	fbb5 f8f9 	udiv	r8, r5, r9
 8000df2:	fa1f fe8c 	uxth.w	lr, ip
 8000df6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dfa:	0c1c      	lsrs	r4, r3, #16
 8000dfc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e00:	fb08 f50e 	mul.w	r5, r8, lr
 8000e04:	42a5      	cmp	r5, r4
 8000e06:	fa02 f201 	lsl.w	r2, r2, r1
 8000e0a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e18:	f080 8088 	bcs.w	8000f2c <__udivmoddi4+0x2b4>
 8000e1c:	42a5      	cmp	r5, r4
 8000e1e:	f240 8085 	bls.w	8000f2c <__udivmoddi4+0x2b4>
 8000e22:	f1a8 0802 	sub.w	r8, r8, #2
 8000e26:	4464      	add	r4, ip
 8000e28:	1b64      	subs	r4, r4, r5
 8000e2a:	b29d      	uxth	r5, r3
 8000e2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e30:	fb09 4413 	mls	r4, r9, r3, r4
 8000e34:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e38:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e48:	d26c      	bcs.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4a:	45a6      	cmp	lr, r4
 8000e4c:	d96a      	bls.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4e:	3b02      	subs	r3, #2
 8000e50:	4464      	add	r4, ip
 8000e52:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e56:	fba3 9502 	umull	r9, r5, r3, r2
 8000e5a:	eba4 040e 	sub.w	r4, r4, lr
 8000e5e:	42ac      	cmp	r4, r5
 8000e60:	46c8      	mov	r8, r9
 8000e62:	46ae      	mov	lr, r5
 8000e64:	d356      	bcc.n	8000f14 <__udivmoddi4+0x29c>
 8000e66:	d053      	beq.n	8000f10 <__udivmoddi4+0x298>
 8000e68:	b156      	cbz	r6, 8000e80 <__udivmoddi4+0x208>
 8000e6a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e6e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e72:	fa04 f707 	lsl.w	r7, r4, r7
 8000e76:	40ca      	lsrs	r2, r1
 8000e78:	40cc      	lsrs	r4, r1
 8000e7a:	4317      	orrs	r7, r2
 8000e7c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e80:	4618      	mov	r0, r3
 8000e82:	2100      	movs	r1, #0
 8000e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e88:	f1c3 0120 	rsb	r1, r3, #32
 8000e8c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e90:	fa20 f201 	lsr.w	r2, r0, r1
 8000e94:	fa25 f101 	lsr.w	r1, r5, r1
 8000e98:	409d      	lsls	r5, r3
 8000e9a:	432a      	orrs	r2, r5
 8000e9c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea0:	fa1f fe8c 	uxth.w	lr, ip
 8000ea4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ea8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eac:	0c11      	lsrs	r1, r2, #16
 8000eae:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000eb2:	fb00 f50e 	mul.w	r5, r0, lr
 8000eb6:	428d      	cmp	r5, r1
 8000eb8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ebc:	d908      	bls.n	8000ed0 <__udivmoddi4+0x258>
 8000ebe:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ec6:	d22f      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000ec8:	428d      	cmp	r5, r1
 8000eca:	d92d      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000ecc:	3802      	subs	r0, #2
 8000ece:	4461      	add	r1, ip
 8000ed0:	1b49      	subs	r1, r1, r5
 8000ed2:	b292      	uxth	r2, r2
 8000ed4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ed8:	fb07 1115 	mls	r1, r7, r5, r1
 8000edc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ee0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ee4:	4291      	cmp	r1, r2
 8000ee6:	d908      	bls.n	8000efa <__udivmoddi4+0x282>
 8000ee8:	eb1c 0202 	adds.w	r2, ip, r2
 8000eec:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ef0:	d216      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef2:	4291      	cmp	r1, r2
 8000ef4:	d914      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef6:	3d02      	subs	r5, #2
 8000ef8:	4462      	add	r2, ip
 8000efa:	1a52      	subs	r2, r2, r1
 8000efc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f00:	e738      	b.n	8000d74 <__udivmoddi4+0xfc>
 8000f02:	4631      	mov	r1, r6
 8000f04:	4630      	mov	r0, r6
 8000f06:	e708      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000f08:	4639      	mov	r1, r7
 8000f0a:	e6e6      	b.n	8000cda <__udivmoddi4+0x62>
 8000f0c:	4610      	mov	r0, r2
 8000f0e:	e6fb      	b.n	8000d08 <__udivmoddi4+0x90>
 8000f10:	4548      	cmp	r0, r9
 8000f12:	d2a9      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f14:	ebb9 0802 	subs.w	r8, r9, r2
 8000f18:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	e7a3      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f20:	4645      	mov	r5, r8
 8000f22:	e7ea      	b.n	8000efa <__udivmoddi4+0x282>
 8000f24:	462b      	mov	r3, r5
 8000f26:	e794      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f28:	4640      	mov	r0, r8
 8000f2a:	e7d1      	b.n	8000ed0 <__udivmoddi4+0x258>
 8000f2c:	46d0      	mov	r8, sl
 8000f2e:	e77b      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f30:	3d02      	subs	r5, #2
 8000f32:	4462      	add	r2, ip
 8000f34:	e732      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f36:	4608      	mov	r0, r1
 8000f38:	e70a      	b.n	8000d50 <__udivmoddi4+0xd8>
 8000f3a:	4464      	add	r4, ip
 8000f3c:	3802      	subs	r0, #2
 8000f3e:	e742      	b.n	8000dc6 <__udivmoddi4+0x14e>

08000f40 <__aeabi_idiv0>:
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop

08000f44 <HAL_TIM_PeriodElapsedCallback>:

static volatile uint8_t flag_tim_13hz = 0;
static volatile uint8_t flag_acc = 0;
static volatile uint8_t flag_acc_gyr_inter = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
	if(htim==&htim3){
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	4a07      	ldr	r2, [pc, #28]	; (8000f6c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000f50:	4293      	cmp	r3, r2
 8000f52:	d107      	bne.n	8000f64 <HAL_TIM_PeriodElapsedCallback+0x20>
		HAL_GPIO_TogglePin(GPIOA, INTERRUPT_TIM_Pin);
 8000f54:	2104      	movs	r1, #4
 8000f56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f5a:	f001 fa41 	bl	80023e0 <HAL_GPIO_TogglePin>
		flag_tim_13hz = 1;
 8000f5e:	4b04      	ldr	r3, [pc, #16]	; (8000f70 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000f60:	2201      	movs	r2, #1
 8000f62:	701a      	strb	r2, [r3, #0]
	}
}
 8000f64:	bf00      	nop
 8000f66:	3708      	adds	r7, #8
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	20000244 	.word	0x20000244
 8000f70:	200003d0 	.word	0x200003d0

08000f74 <MPU6050_Init>:

void MPU6050_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b086      	sub	sp, #24
 8000f78:	af04      	add	r7, sp, #16
    uint8_t check, reg;
    HAL_I2C_Mem_Read(&hi2c1,MPU6050_ADDR,WHO_AM_I_REG,1,&check,1,HAL_MAX_DELAY);
 8000f7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f7e:	9302      	str	r3, [sp, #8]
 8000f80:	2301      	movs	r3, #1
 8000f82:	9301      	str	r3, [sp, #4]
 8000f84:	1dfb      	adds	r3, r7, #7
 8000f86:	9300      	str	r3, [sp, #0]
 8000f88:	2301      	movs	r3, #1
 8000f8a:	2275      	movs	r2, #117	; 0x75
 8000f8c:	21d0      	movs	r1, #208	; 0xd0
 8000f8e:	4823      	ldr	r0, [pc, #140]	; (800101c <MPU6050_Init+0xa8>)
 8000f90:	f001 fc08 	bl	80027a4 <HAL_I2C_Mem_Read>
    if(check == 0b01101000)
 8000f94:	79fb      	ldrb	r3, [r7, #7]
 8000f96:	2b68      	cmp	r3, #104	; 0x68
 8000f98:	d13b      	bne.n	8001012 <MPU6050_Init+0x9e>
    {
    	//HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);

        reg = 0x07;
 8000f9a:	2307      	movs	r3, #7
 8000f9c:	71bb      	strb	r3, [r7, #6]
        HAL_I2C_Mem_Write(&hi2c1,MPU6050_ADDR,SMPLRT_DIV_REG,1,&reg,1,HAL_MAX_DELAY);
 8000f9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000fa2:	9302      	str	r3, [sp, #8]
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	9301      	str	r3, [sp, #4]
 8000fa8:	1dbb      	adds	r3, r7, #6
 8000faa:	9300      	str	r3, [sp, #0]
 8000fac:	2301      	movs	r3, #1
 8000fae:	2219      	movs	r2, #25
 8000fb0:	21d0      	movs	r1, #208	; 0xd0
 8000fb2:	481a      	ldr	r0, [pc, #104]	; (800101c <MPU6050_Init+0xa8>)
 8000fb4:	f001 fae2 	bl	800257c <HAL_I2C_Mem_Write>

        reg = 0x00;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	71bb      	strb	r3, [r7, #6]
        HAL_I2C_Mem_Write(&hi2c1,MPU6050_ADDR,ACCEL_CONFIG_REG,1,&reg,1,HAL_MAX_DELAY);
 8000fbc:	f04f 33ff 	mov.w	r3, #4294967295
 8000fc0:	9302      	str	r3, [sp, #8]
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	9301      	str	r3, [sp, #4]
 8000fc6:	1dbb      	adds	r3, r7, #6
 8000fc8:	9300      	str	r3, [sp, #0]
 8000fca:	2301      	movs	r3, #1
 8000fcc:	221c      	movs	r2, #28
 8000fce:	21d0      	movs	r1, #208	; 0xd0
 8000fd0:	4812      	ldr	r0, [pc, #72]	; (800101c <MPU6050_Init+0xa8>)
 8000fd2:	f001 fad3 	bl	800257c <HAL_I2C_Mem_Write>

        reg = 0x00;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	71bb      	strb	r3, [r7, #6]
        HAL_I2C_Mem_Write(&hi2c1,MPU6050_ADDR,GYRO_CONFIG_REG,1,&reg,1,HAL_MAX_DELAY);
 8000fda:	f04f 33ff 	mov.w	r3, #4294967295
 8000fde:	9302      	str	r3, [sp, #8]
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	9301      	str	r3, [sp, #4]
 8000fe4:	1dbb      	adds	r3, r7, #6
 8000fe6:	9300      	str	r3, [sp, #0]
 8000fe8:	2301      	movs	r3, #1
 8000fea:	221b      	movs	r2, #27
 8000fec:	21d0      	movs	r1, #208	; 0xd0
 8000fee:	480b      	ldr	r0, [pc, #44]	; (800101c <MPU6050_Init+0xa8>)
 8000ff0:	f001 fac4 	bl	800257c <HAL_I2C_Mem_Write>

        reg = 0;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	71bb      	strb	r3, [r7, #6]
        HAL_I2C_Mem_Write(&hi2c1,MPU6050_ADDR,PWR_MGMT_1_REG,1,&reg,1,HAL_MAX_DELAY);
 8000ff8:	f04f 33ff 	mov.w	r3, #4294967295
 8000ffc:	9302      	str	r3, [sp, #8]
 8000ffe:	2301      	movs	r3, #1
 8001000:	9301      	str	r3, [sp, #4]
 8001002:	1dbb      	adds	r3, r7, #6
 8001004:	9300      	str	r3, [sp, #0]
 8001006:	2301      	movs	r3, #1
 8001008:	226b      	movs	r2, #107	; 0x6b
 800100a:	21d0      	movs	r1, #208	; 0xd0
 800100c:	4803      	ldr	r0, [pc, #12]	; (800101c <MPU6050_Init+0xa8>)
 800100e:	f001 fab5 	bl	800257c <HAL_I2C_Mem_Write>

    }
}
 8001012:	bf00      	nop
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	200001f0 	.word	0x200001f0

08001020 <MPU6050_Read_Accel>:

void MPU6050_Read_Accel(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
    Accel_X_RAW = (int16_t)(buffer_a[0] << 8 | buffer_a[1]);
 8001024:	4b27      	ldr	r3, [pc, #156]	; (80010c4 <MPU6050_Read_Accel+0xa4>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	021b      	lsls	r3, r3, #8
 800102a:	b21a      	sxth	r2, r3
 800102c:	4b25      	ldr	r3, [pc, #148]	; (80010c4 <MPU6050_Read_Accel+0xa4>)
 800102e:	785b      	ldrb	r3, [r3, #1]
 8001030:	b21b      	sxth	r3, r3
 8001032:	4313      	orrs	r3, r2
 8001034:	b21a      	sxth	r2, r3
 8001036:	4b24      	ldr	r3, [pc, #144]	; (80010c8 <MPU6050_Read_Accel+0xa8>)
 8001038:	801a      	strh	r2, [r3, #0]
    Accel_Y_RAW = (int16_t)(buffer_a[2] << 8 | buffer_a[3]);
 800103a:	4b22      	ldr	r3, [pc, #136]	; (80010c4 <MPU6050_Read_Accel+0xa4>)
 800103c:	789b      	ldrb	r3, [r3, #2]
 800103e:	021b      	lsls	r3, r3, #8
 8001040:	b21a      	sxth	r2, r3
 8001042:	4b20      	ldr	r3, [pc, #128]	; (80010c4 <MPU6050_Read_Accel+0xa4>)
 8001044:	78db      	ldrb	r3, [r3, #3]
 8001046:	b21b      	sxth	r3, r3
 8001048:	4313      	orrs	r3, r2
 800104a:	b21a      	sxth	r2, r3
 800104c:	4b1f      	ldr	r3, [pc, #124]	; (80010cc <MPU6050_Read_Accel+0xac>)
 800104e:	801a      	strh	r2, [r3, #0]
    Accel_Z_RAW = (int16_t)(buffer_a[4] << 8 | buffer_a[5]);
 8001050:	4b1c      	ldr	r3, [pc, #112]	; (80010c4 <MPU6050_Read_Accel+0xa4>)
 8001052:	791b      	ldrb	r3, [r3, #4]
 8001054:	021b      	lsls	r3, r3, #8
 8001056:	b21a      	sxth	r2, r3
 8001058:	4b1a      	ldr	r3, [pc, #104]	; (80010c4 <MPU6050_Read_Accel+0xa4>)
 800105a:	795b      	ldrb	r3, [r3, #5]
 800105c:	b21b      	sxth	r3, r3
 800105e:	4313      	orrs	r3, r2
 8001060:	b21a      	sxth	r2, r3
 8001062:	4b1b      	ldr	r3, [pc, #108]	; (80010d0 <MPU6050_Read_Accel+0xb0>)
 8001064:	801a      	strh	r2, [r3, #0]

    Ax = Accel_X_RAW / 16384.f;		// Zamiana raw value na g
 8001066:	4b18      	ldr	r3, [pc, #96]	; (80010c8 <MPU6050_Read_Accel+0xa8>)
 8001068:	f9b3 3000 	ldrsh.w	r3, [r3]
 800106c:	ee07 3a90 	vmov	s15, r3
 8001070:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001074:	eddf 6a17 	vldr	s13, [pc, #92]	; 80010d4 <MPU6050_Read_Accel+0xb4>
 8001078:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800107c:	4b16      	ldr	r3, [pc, #88]	; (80010d8 <MPU6050_Read_Accel+0xb8>)
 800107e:	edc3 7a00 	vstr	s15, [r3]
    Ay = Accel_Y_RAW / 16384.f;
 8001082:	4b12      	ldr	r3, [pc, #72]	; (80010cc <MPU6050_Read_Accel+0xac>)
 8001084:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001088:	ee07 3a90 	vmov	s15, r3
 800108c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001090:	eddf 6a10 	vldr	s13, [pc, #64]	; 80010d4 <MPU6050_Read_Accel+0xb4>
 8001094:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001098:	4b10      	ldr	r3, [pc, #64]	; (80010dc <MPU6050_Read_Accel+0xbc>)
 800109a:	edc3 7a00 	vstr	s15, [r3]
    Az = Accel_Z_RAW / 16384.f;
 800109e:	4b0c      	ldr	r3, [pc, #48]	; (80010d0 <MPU6050_Read_Accel+0xb0>)
 80010a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010a4:	ee07 3a90 	vmov	s15, r3
 80010a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010ac:	eddf 6a09 	vldr	s13, [pc, #36]	; 80010d4 <MPU6050_Read_Accel+0xb4>
 80010b0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010b4:	4b0a      	ldr	r3, [pc, #40]	; (80010e0 <MPU6050_Read_Accel+0xc0>)
 80010b6:	edc3 7a00 	vstr	s15, [r3]
}
 80010ba:	bf00      	nop
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr
 80010c4:	20000340 	.word	0x20000340
 80010c8:	20000318 	.word	0x20000318
 80010cc:	2000031a 	.word	0x2000031a
 80010d0:	2000031c 	.word	0x2000031c
 80010d4:	46800000 	.word	0x46800000
 80010d8:	20000320 	.word	0x20000320
 80010dc:	20000324 	.word	0x20000324
 80010e0:	20000328 	.word	0x20000328
 80010e4:	00000000 	.word	0x00000000

080010e8 <MPU6050_Read_Gyro>:

void MPU6050_Read_Gyro(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
    Gyro_X_RAW = (int16_t)(buffer_g[0] << 8 | buffer_g[1]);
 80010ec:	4b32      	ldr	r3, [pc, #200]	; (80011b8 <MPU6050_Read_Gyro+0xd0>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	021b      	lsls	r3, r3, #8
 80010f2:	b21a      	sxth	r2, r3
 80010f4:	4b30      	ldr	r3, [pc, #192]	; (80011b8 <MPU6050_Read_Gyro+0xd0>)
 80010f6:	785b      	ldrb	r3, [r3, #1]
 80010f8:	b21b      	sxth	r3, r3
 80010fa:	4313      	orrs	r3, r2
 80010fc:	b21a      	sxth	r2, r3
 80010fe:	4b2f      	ldr	r3, [pc, #188]	; (80011bc <MPU6050_Read_Gyro+0xd4>)
 8001100:	801a      	strh	r2, [r3, #0]
    Gyro_Y_RAW = (int16_t)(buffer_g[2] << 8 | buffer_g[3]);
 8001102:	4b2d      	ldr	r3, [pc, #180]	; (80011b8 <MPU6050_Read_Gyro+0xd0>)
 8001104:	789b      	ldrb	r3, [r3, #2]
 8001106:	021b      	lsls	r3, r3, #8
 8001108:	b21a      	sxth	r2, r3
 800110a:	4b2b      	ldr	r3, [pc, #172]	; (80011b8 <MPU6050_Read_Gyro+0xd0>)
 800110c:	78db      	ldrb	r3, [r3, #3]
 800110e:	b21b      	sxth	r3, r3
 8001110:	4313      	orrs	r3, r2
 8001112:	b21a      	sxth	r2, r3
 8001114:	4b2a      	ldr	r3, [pc, #168]	; (80011c0 <MPU6050_Read_Gyro+0xd8>)
 8001116:	801a      	strh	r2, [r3, #0]
    Gyro_Z_RAW = (int16_t)(buffer_g[4] << 8 | buffer_g[5]);
 8001118:	4b27      	ldr	r3, [pc, #156]	; (80011b8 <MPU6050_Read_Gyro+0xd0>)
 800111a:	791b      	ldrb	r3, [r3, #4]
 800111c:	021b      	lsls	r3, r3, #8
 800111e:	b21a      	sxth	r2, r3
 8001120:	4b25      	ldr	r3, [pc, #148]	; (80011b8 <MPU6050_Read_Gyro+0xd0>)
 8001122:	795b      	ldrb	r3, [r3, #5]
 8001124:	b21b      	sxth	r3, r3
 8001126:	4313      	orrs	r3, r2
 8001128:	b21a      	sxth	r2, r3
 800112a:	4b26      	ldr	r3, [pc, #152]	; (80011c4 <MPU6050_Read_Gyro+0xdc>)
 800112c:	801a      	strh	r2, [r3, #0]

	Gx = Gyro_X_RAW/131.0;		// Zamiana raw value na °/s
 800112e:	4b23      	ldr	r3, [pc, #140]	; (80011bc <MPU6050_Read_Gyro+0xd4>)
 8001130:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001134:	4618      	mov	r0, r3
 8001136:	f7ff f9f5 	bl	8000524 <__aeabi_i2d>
 800113a:	a31d      	add	r3, pc, #116	; (adr r3, 80011b0 <MPU6050_Read_Gyro+0xc8>)
 800113c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001140:	f7ff fb84 	bl	800084c <__aeabi_ddiv>
 8001144:	4602      	mov	r2, r0
 8001146:	460b      	mov	r3, r1
 8001148:	4610      	mov	r0, r2
 800114a:	4619      	mov	r1, r3
 800114c:	f7ff fd2c 	bl	8000ba8 <__aeabi_d2f>
 8001150:	4603      	mov	r3, r0
 8001152:	4a1d      	ldr	r2, [pc, #116]	; (80011c8 <MPU6050_Read_Gyro+0xe0>)
 8001154:	6013      	str	r3, [r2, #0]
	Gy = Gyro_Y_RAW/131.0;
 8001156:	4b1a      	ldr	r3, [pc, #104]	; (80011c0 <MPU6050_Read_Gyro+0xd8>)
 8001158:	f9b3 3000 	ldrsh.w	r3, [r3]
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff f9e1 	bl	8000524 <__aeabi_i2d>
 8001162:	a313      	add	r3, pc, #76	; (adr r3, 80011b0 <MPU6050_Read_Gyro+0xc8>)
 8001164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001168:	f7ff fb70 	bl	800084c <__aeabi_ddiv>
 800116c:	4602      	mov	r2, r0
 800116e:	460b      	mov	r3, r1
 8001170:	4610      	mov	r0, r2
 8001172:	4619      	mov	r1, r3
 8001174:	f7ff fd18 	bl	8000ba8 <__aeabi_d2f>
 8001178:	4603      	mov	r3, r0
 800117a:	4a14      	ldr	r2, [pc, #80]	; (80011cc <MPU6050_Read_Gyro+0xe4>)
 800117c:	6013      	str	r3, [r2, #0]
	Gz = Gyro_Z_RAW/131.0;
 800117e:	4b11      	ldr	r3, [pc, #68]	; (80011c4 <MPU6050_Read_Gyro+0xdc>)
 8001180:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001184:	4618      	mov	r0, r3
 8001186:	f7ff f9cd 	bl	8000524 <__aeabi_i2d>
 800118a:	a309      	add	r3, pc, #36	; (adr r3, 80011b0 <MPU6050_Read_Gyro+0xc8>)
 800118c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001190:	f7ff fb5c 	bl	800084c <__aeabi_ddiv>
 8001194:	4602      	mov	r2, r0
 8001196:	460b      	mov	r3, r1
 8001198:	4610      	mov	r0, r2
 800119a:	4619      	mov	r1, r3
 800119c:	f7ff fd04 	bl	8000ba8 <__aeabi_d2f>
 80011a0:	4603      	mov	r3, r0
 80011a2:	4a0b      	ldr	r2, [pc, #44]	; (80011d0 <MPU6050_Read_Gyro+0xe8>)
 80011a4:	6013      	str	r3, [r2, #0]
}
 80011a6:	bf00      	nop
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	f3af 8000 	nop.w
 80011b0:	00000000 	.word	0x00000000
 80011b4:	40606000 	.word	0x40606000
 80011b8:	20000348 	.word	0x20000348
 80011bc:	2000032c 	.word	0x2000032c
 80011c0:	2000032e 	.word	0x2000032e
 80011c4:	20000330 	.word	0x20000330
 80011c8:	20000334 	.word	0x20000334
 80011cc:	20000338 	.word	0x20000338
 80011d0:	2000033c 	.word	0x2000033c

080011d4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	4603      	mov	r3, r0
 80011dc:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==INTERRUPT_Pin) {
 80011de:	88fb      	ldrh	r3, [r7, #6]
 80011e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011e4:	d104      	bne.n	80011f0 <HAL_GPIO_EXTI_Callback+0x1c>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80011e6:	2120      	movs	r1, #32
 80011e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011ec:	f001 f8f8 	bl	80023e0 <HAL_GPIO_TogglePin>
	}
}
 80011f0:	bf00      	nop
 80011f2:	3708      	adds	r7, #8
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}

080011f8 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af02      	add	r7, sp, #8
 80011fe:	6078      	str	r0, [r7, #4]

	if(hi2c->Instance==I2C1) {
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a15      	ldr	r2, [pc, #84]	; (800125c <HAL_I2C_MemRxCpltCallback+0x64>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d123      	bne.n	8001252 <HAL_I2C_MemRxCpltCallback+0x5a>
		if(flag_acc){
 800120a:	4b15      	ldr	r3, [pc, #84]	; (8001260 <HAL_I2C_MemRxCpltCallback+0x68>)
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	b2db      	uxtb	r3, r3
 8001210:	2b00      	cmp	r3, #0
 8001212:	d00f      	beq.n	8001234 <HAL_I2C_MemRxCpltCallback+0x3c>
			MPU6050_Read_Accel();
 8001214:	f7ff ff04 	bl	8001020 <MPU6050_Read_Accel>
			HAL_I2C_Mem_Read_IT(&hi2c1,MPU6050_ADDR,GYRO_XOUT_H_REG,1,buffer_g,6);
 8001218:	2306      	movs	r3, #6
 800121a:	9301      	str	r3, [sp, #4]
 800121c:	4b11      	ldr	r3, [pc, #68]	; (8001264 <HAL_I2C_MemRxCpltCallback+0x6c>)
 800121e:	9300      	str	r3, [sp, #0]
 8001220:	2301      	movs	r3, #1
 8001222:	2243      	movs	r2, #67	; 0x43
 8001224:	21d0      	movs	r1, #208	; 0xd0
 8001226:	4810      	ldr	r0, [pc, #64]	; (8001268 <HAL_I2C_MemRxCpltCallback+0x70>)
 8001228:	f001 fbd6 	bl	80029d8 <HAL_I2C_Mem_Read_IT>
			flag_acc = 0;
 800122c:	4b0c      	ldr	r3, [pc, #48]	; (8001260 <HAL_I2C_MemRxCpltCallback+0x68>)
 800122e:	2200      	movs	r2, #0
 8001230:	701a      	strb	r2, [r3, #0]
			MPU6050_Read_Gyro();
			HAL_I2C_Mem_Read_IT(&hi2c1,MPU6050_ADDR,ACCEL_XOUT_H_REG,1,buffer_a,6);
			flag_acc = 1;
		}
	}
}
 8001232:	e00e      	b.n	8001252 <HAL_I2C_MemRxCpltCallback+0x5a>
			MPU6050_Read_Gyro();
 8001234:	f7ff ff58 	bl	80010e8 <MPU6050_Read_Gyro>
			HAL_I2C_Mem_Read_IT(&hi2c1,MPU6050_ADDR,ACCEL_XOUT_H_REG,1,buffer_a,6);
 8001238:	2306      	movs	r3, #6
 800123a:	9301      	str	r3, [sp, #4]
 800123c:	4b0b      	ldr	r3, [pc, #44]	; (800126c <HAL_I2C_MemRxCpltCallback+0x74>)
 800123e:	9300      	str	r3, [sp, #0]
 8001240:	2301      	movs	r3, #1
 8001242:	223b      	movs	r2, #59	; 0x3b
 8001244:	21d0      	movs	r1, #208	; 0xd0
 8001246:	4808      	ldr	r0, [pc, #32]	; (8001268 <HAL_I2C_MemRxCpltCallback+0x70>)
 8001248:	f001 fbc6 	bl	80029d8 <HAL_I2C_Mem_Read_IT>
			flag_acc = 1;
 800124c:	4b04      	ldr	r3, [pc, #16]	; (8001260 <HAL_I2C_MemRxCpltCallback+0x68>)
 800124e:	2201      	movs	r2, #1
 8001250:	701a      	strb	r2, [r3, #0]
}
 8001252:	bf00      	nop
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	40005400 	.word	0x40005400
 8001260:	200003d1 	.word	0x200003d1
 8001264:	20000348 	.word	0x20000348
 8001268:	200001f0 	.word	0x200001f0
 800126c:	20000340 	.word	0x20000340

08001270 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001270:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001274:	b090      	sub	sp, #64	; 0x40
 8001276:	af0c      	add	r7, sp, #48	; 0x30
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001278:	f000 fca4 	bl	8001bc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800127c:	f000 f88a 	bl	8001394 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001280:	f000 f9a2 	bl	80015c8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001284:	f000 f970 	bl	8001568 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001288:	f000 f8d6 	bl	8001438 <MX_I2C1_Init>
  MX_TIM3_Init();
 800128c:	f000 f914 	bl	80014b8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim3);
 8001290:	4833      	ldr	r0, [pc, #204]	; (8001360 <main+0xf0>)
 8001292:	f004 fd77 	bl	8005d84 <HAL_TIM_Base_Start_IT>
  HAL_NVIC_DisableIRQ(INTERRUPT_EXTI_IRQn);
 8001296:	2028      	movs	r0, #40	; 0x28
 8001298:	f000 fe39 	bl	8001f0e <HAL_NVIC_DisableIRQ>
  MPU6050_Init();
 800129c:	f7ff fe6a 	bl	8000f74 <MPU6050_Init>
  HAL_NVIC_EnableIRQ(INTERRUPT_EXTI_IRQn);
 80012a0:	2028      	movs	r0, #40	; 0x28
 80012a2:	f000 fe26 	bl	8001ef2 <HAL_NVIC_EnableIRQ>

  // dummy read
  HAL_I2C_Mem_Read_IT(&hi2c1,MPU6050_ADDR,GYRO_XOUT_H_REG,1,buffer_g,6);
 80012a6:	2306      	movs	r3, #6
 80012a8:	9301      	str	r3, [sp, #4]
 80012aa:	4b2e      	ldr	r3, [pc, #184]	; (8001364 <main+0xf4>)
 80012ac:	9300      	str	r3, [sp, #0]
 80012ae:	2301      	movs	r3, #1
 80012b0:	2243      	movs	r2, #67	; 0x43
 80012b2:	21d0      	movs	r1, #208	; 0xd0
 80012b4:	482c      	ldr	r0, [pc, #176]	; (8001368 <main+0xf8>)
 80012b6:	f001 fb8f 	bl	80029d8 <HAL_I2C_Mem_Read_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(flag_tim_13hz){
 80012ba:	4b2c      	ldr	r3, [pc, #176]	; (800136c <main+0xfc>)
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	b2db      	uxtb	r3, r3
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d0fa      	beq.n	80012ba <main+0x4a>
		  flag_tim_13hz = 0;
 80012c4:	4b29      	ldr	r3, [pc, #164]	; (800136c <main+0xfc>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	701a      	strb	r2, [r3, #0]
		  snprintf((char *)string_out, sizeof(string_out), "Accel x: %.3fg y: %.3fg z: %.3fg   Gyro x: %.3f°/s y: %.3f°/s z: %.3f°/s\n\r", Ax, Ay, Az, Gx, Gy, Gz);
 80012ca:	4b29      	ldr	r3, [pc, #164]	; (8001370 <main+0x100>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4618      	mov	r0, r3
 80012d0:	f7ff f93a 	bl	8000548 <__aeabi_f2d>
 80012d4:	4604      	mov	r4, r0
 80012d6:	460d      	mov	r5, r1
 80012d8:	4b26      	ldr	r3, [pc, #152]	; (8001374 <main+0x104>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff f933 	bl	8000548 <__aeabi_f2d>
 80012e2:	4680      	mov	r8, r0
 80012e4:	4689      	mov	r9, r1
 80012e6:	4b24      	ldr	r3, [pc, #144]	; (8001378 <main+0x108>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4618      	mov	r0, r3
 80012ec:	f7ff f92c 	bl	8000548 <__aeabi_f2d>
 80012f0:	4682      	mov	sl, r0
 80012f2:	468b      	mov	fp, r1
 80012f4:	4b21      	ldr	r3, [pc, #132]	; (800137c <main+0x10c>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff f925 	bl	8000548 <__aeabi_f2d>
 80012fe:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001302:	4b1f      	ldr	r3, [pc, #124]	; (8001380 <main+0x110>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4618      	mov	r0, r3
 8001308:	f7ff f91e 	bl	8000548 <__aeabi_f2d>
 800130c:	e9c7 0100 	strd	r0, r1, [r7]
 8001310:	4b1c      	ldr	r3, [pc, #112]	; (8001384 <main+0x114>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4618      	mov	r0, r3
 8001316:	f7ff f917 	bl	8000548 <__aeabi_f2d>
 800131a:	4602      	mov	r2, r0
 800131c:	460b      	mov	r3, r1
 800131e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8001322:	ed97 7b00 	vldr	d7, [r7]
 8001326:	ed8d 7b08 	vstr	d7, [sp, #32]
 800132a:	ed97 7b02 	vldr	d7, [r7, #8]
 800132e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001332:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8001336:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800133a:	e9cd 4500 	strd	r4, r5, [sp]
 800133e:	4a12      	ldr	r2, [pc, #72]	; (8001388 <main+0x118>)
 8001340:	2180      	movs	r1, #128	; 0x80
 8001342:	4812      	ldr	r0, [pc, #72]	; (800138c <main+0x11c>)
 8001344:	f007 fa52 	bl	80087ec <sniprintf>
		  HAL_UART_Transmit_IT(&huart2,string_out, strlen((char *) string_out));
 8001348:	4810      	ldr	r0, [pc, #64]	; (800138c <main+0x11c>)
 800134a:	f7fe ff91 	bl	8000270 <strlen>
 800134e:	4603      	mov	r3, r0
 8001350:	b29b      	uxth	r3, r3
 8001352:	461a      	mov	r2, r3
 8001354:	490d      	ldr	r1, [pc, #52]	; (800138c <main+0x11c>)
 8001356:	480e      	ldr	r0, [pc, #56]	; (8001390 <main+0x120>)
 8001358:	f005 fbe4 	bl	8006b24 <HAL_UART_Transmit_IT>
	  if(flag_tim_13hz){
 800135c:	e7ad      	b.n	80012ba <main+0x4a>
 800135e:	bf00      	nop
 8001360:	20000244 	.word	0x20000244
 8001364:	20000348 	.word	0x20000348
 8001368:	200001f0 	.word	0x200001f0
 800136c:	200003d0 	.word	0x200003d0
 8001370:	20000320 	.word	0x20000320
 8001374:	20000324 	.word	0x20000324
 8001378:	20000328 	.word	0x20000328
 800137c:	20000334 	.word	0x20000334
 8001380:	20000338 	.word	0x20000338
 8001384:	2000033c 	.word	0x2000033c
 8001388:	0800aae8 	.word	0x0800aae8
 800138c:	20000350 	.word	0x20000350
 8001390:	20000290 	.word	0x20000290

08001394 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b096      	sub	sp, #88	; 0x58
 8001398:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800139a:	f107 0314 	add.w	r3, r7, #20
 800139e:	2244      	movs	r2, #68	; 0x44
 80013a0:	2100      	movs	r1, #0
 80013a2:	4618      	mov	r0, r3
 80013a4:	f007 fa99 	bl	80088da <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013a8:	463b      	mov	r3, r7
 80013aa:	2200      	movs	r2, #0
 80013ac:	601a      	str	r2, [r3, #0]
 80013ae:	605a      	str	r2, [r3, #4]
 80013b0:	609a      	str	r2, [r3, #8]
 80013b2:	60da      	str	r2, [r3, #12]
 80013b4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80013b6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80013ba:	f003 f9d1 	bl	8004760 <HAL_PWREx_ControlVoltageScaling>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80013c4:	f000 f986 	bl	80016d4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013c8:	2302      	movs	r3, #2
 80013ca:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013d0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013d2:	2310      	movs	r3, #16
 80013d4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013d6:	2302      	movs	r3, #2
 80013d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013da:	2302      	movs	r3, #2
 80013dc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80013de:	2301      	movs	r3, #1
 80013e0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80013e2:	230a      	movs	r3, #10
 80013e4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80013e6:	2307      	movs	r3, #7
 80013e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80013ea:	2302      	movs	r3, #2
 80013ec:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80013ee:	2302      	movs	r3, #2
 80013f0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013f2:	f107 0314 	add.w	r3, r7, #20
 80013f6:	4618      	mov	r0, r3
 80013f8:	f003 fa08 	bl	800480c <HAL_RCC_OscConfig>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001402:	f000 f967 	bl	80016d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001406:	230f      	movs	r3, #15
 8001408:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800140a:	2303      	movs	r3, #3
 800140c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800140e:	2300      	movs	r3, #0
 8001410:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001412:	2300      	movs	r3, #0
 8001414:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001416:	2300      	movs	r3, #0
 8001418:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800141a:	463b      	mov	r3, r7
 800141c:	2104      	movs	r1, #4
 800141e:	4618      	mov	r0, r3
 8001420:	f003 fdd0 	bl	8004fc4 <HAL_RCC_ClockConfig>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800142a:	f000 f953 	bl	80016d4 <Error_Handler>
  }
}
 800142e:	bf00      	nop
 8001430:	3758      	adds	r7, #88	; 0x58
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
	...

08001438 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800143c:	4b1b      	ldr	r3, [pc, #108]	; (80014ac <MX_I2C1_Init+0x74>)
 800143e:	4a1c      	ldr	r2, [pc, #112]	; (80014b0 <MX_I2C1_Init+0x78>)
 8001440:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8001442:	4b1a      	ldr	r3, [pc, #104]	; (80014ac <MX_I2C1_Init+0x74>)
 8001444:	4a1b      	ldr	r2, [pc, #108]	; (80014b4 <MX_I2C1_Init+0x7c>)
 8001446:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001448:	4b18      	ldr	r3, [pc, #96]	; (80014ac <MX_I2C1_Init+0x74>)
 800144a:	2200      	movs	r2, #0
 800144c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800144e:	4b17      	ldr	r3, [pc, #92]	; (80014ac <MX_I2C1_Init+0x74>)
 8001450:	2201      	movs	r2, #1
 8001452:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001454:	4b15      	ldr	r3, [pc, #84]	; (80014ac <MX_I2C1_Init+0x74>)
 8001456:	2200      	movs	r2, #0
 8001458:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800145a:	4b14      	ldr	r3, [pc, #80]	; (80014ac <MX_I2C1_Init+0x74>)
 800145c:	2200      	movs	r2, #0
 800145e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001460:	4b12      	ldr	r3, [pc, #72]	; (80014ac <MX_I2C1_Init+0x74>)
 8001462:	2200      	movs	r2, #0
 8001464:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001466:	4b11      	ldr	r3, [pc, #68]	; (80014ac <MX_I2C1_Init+0x74>)
 8001468:	2200      	movs	r2, #0
 800146a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800146c:	4b0f      	ldr	r3, [pc, #60]	; (80014ac <MX_I2C1_Init+0x74>)
 800146e:	2200      	movs	r2, #0
 8001470:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001472:	480e      	ldr	r0, [pc, #56]	; (80014ac <MX_I2C1_Init+0x74>)
 8001474:	f000 ffe6 	bl	8002444 <HAL_I2C_Init>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800147e:	f000 f929 	bl	80016d4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001482:	2100      	movs	r1, #0
 8001484:	4809      	ldr	r0, [pc, #36]	; (80014ac <MX_I2C1_Init+0x74>)
 8001486:	f003 f8c5 	bl	8004614 <HAL_I2CEx_ConfigAnalogFilter>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001490:	f000 f920 	bl	80016d4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001494:	2100      	movs	r1, #0
 8001496:	4805      	ldr	r0, [pc, #20]	; (80014ac <MX_I2C1_Init+0x74>)
 8001498:	f003 f907 	bl	80046aa <HAL_I2CEx_ConfigDigitalFilter>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80014a2:	f000 f917 	bl	80016d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80014a6:	bf00      	nop
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	200001f0 	.word	0x200001f0
 80014b0:	40005400 	.word	0x40005400
 80014b4:	10909cec 	.word	0x10909cec

080014b8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b08a      	sub	sp, #40	; 0x28
 80014bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014be:	f107 031c 	add.w	r3, r7, #28
 80014c2:	2200      	movs	r2, #0
 80014c4:	601a      	str	r2, [r3, #0]
 80014c6:	605a      	str	r2, [r3, #4]
 80014c8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014ca:	463b      	mov	r3, r7
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]
 80014d0:	605a      	str	r2, [r3, #4]
 80014d2:	609a      	str	r2, [r3, #8]
 80014d4:	60da      	str	r2, [r3, #12]
 80014d6:	611a      	str	r2, [r3, #16]
 80014d8:	615a      	str	r2, [r3, #20]
 80014da:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80014dc:	4b20      	ldr	r3, [pc, #128]	; (8001560 <MX_TIM3_Init+0xa8>)
 80014de:	4a21      	ldr	r2, [pc, #132]	; (8001564 <MX_TIM3_Init+0xac>)
 80014e0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7999;
 80014e2:	4b1f      	ldr	r3, [pc, #124]	; (8001560 <MX_TIM3_Init+0xa8>)
 80014e4:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80014e8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014ea:	4b1d      	ldr	r3, [pc, #116]	; (8001560 <MX_TIM3_Init+0xa8>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 908;
 80014f0:	4b1b      	ldr	r3, [pc, #108]	; (8001560 <MX_TIM3_Init+0xa8>)
 80014f2:	f44f 7263 	mov.w	r2, #908	; 0x38c
 80014f6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014f8:	4b19      	ldr	r3, [pc, #100]	; (8001560 <MX_TIM3_Init+0xa8>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014fe:	4b18      	ldr	r3, [pc, #96]	; (8001560 <MX_TIM3_Init+0xa8>)
 8001500:	2200      	movs	r2, #0
 8001502:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8001504:	4816      	ldr	r0, [pc, #88]	; (8001560 <MX_TIM3_Init+0xa8>)
 8001506:	f004 fcad 	bl	8005e64 <HAL_TIM_OC_Init>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
 8001510:	f000 f8e0 	bl	80016d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001514:	2300      	movs	r3, #0
 8001516:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001518:	2300      	movs	r3, #0
 800151a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800151c:	f107 031c 	add.w	r3, r7, #28
 8001520:	4619      	mov	r1, r3
 8001522:	480f      	ldr	r0, [pc, #60]	; (8001560 <MX_TIM3_Init+0xa8>)
 8001524:	f005 fa0a 	bl	800693c <HAL_TIMEx_MasterConfigSynchronization>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 800152e:	f000 f8d1 	bl	80016d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001532:	2300      	movs	r3, #0
 8001534:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001536:	2300      	movs	r3, #0
 8001538:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800153a:	2300      	movs	r3, #0
 800153c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800153e:	2300      	movs	r3, #0
 8001540:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001542:	463b      	mov	r3, r7
 8001544:	2200      	movs	r2, #0
 8001546:	4619      	mov	r1, r3
 8001548:	4805      	ldr	r0, [pc, #20]	; (8001560 <MX_TIM3_Init+0xa8>)
 800154a:	f004 fde5 	bl	8006118 <HAL_TIM_OC_ConfigChannel>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8001554:	f000 f8be 	bl	80016d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001558:	bf00      	nop
 800155a:	3728      	adds	r7, #40	; 0x28
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	20000244 	.word	0x20000244
 8001564:	40000400 	.word	0x40000400

08001568 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800156c:	4b14      	ldr	r3, [pc, #80]	; (80015c0 <MX_USART2_UART_Init+0x58>)
 800156e:	4a15      	ldr	r2, [pc, #84]	; (80015c4 <MX_USART2_UART_Init+0x5c>)
 8001570:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001572:	4b13      	ldr	r3, [pc, #76]	; (80015c0 <MX_USART2_UART_Init+0x58>)
 8001574:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001578:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800157a:	4b11      	ldr	r3, [pc, #68]	; (80015c0 <MX_USART2_UART_Init+0x58>)
 800157c:	2200      	movs	r2, #0
 800157e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001580:	4b0f      	ldr	r3, [pc, #60]	; (80015c0 <MX_USART2_UART_Init+0x58>)
 8001582:	2200      	movs	r2, #0
 8001584:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001586:	4b0e      	ldr	r3, [pc, #56]	; (80015c0 <MX_USART2_UART_Init+0x58>)
 8001588:	2200      	movs	r2, #0
 800158a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800158c:	4b0c      	ldr	r3, [pc, #48]	; (80015c0 <MX_USART2_UART_Init+0x58>)
 800158e:	220c      	movs	r2, #12
 8001590:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001592:	4b0b      	ldr	r3, [pc, #44]	; (80015c0 <MX_USART2_UART_Init+0x58>)
 8001594:	2200      	movs	r2, #0
 8001596:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001598:	4b09      	ldr	r3, [pc, #36]	; (80015c0 <MX_USART2_UART_Init+0x58>)
 800159a:	2200      	movs	r2, #0
 800159c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800159e:	4b08      	ldr	r3, [pc, #32]	; (80015c0 <MX_USART2_UART_Init+0x58>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015a4:	4b06      	ldr	r3, [pc, #24]	; (80015c0 <MX_USART2_UART_Init+0x58>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015aa:	4805      	ldr	r0, [pc, #20]	; (80015c0 <MX_USART2_UART_Init+0x58>)
 80015ac:	f005 fa6c 	bl	8006a88 <HAL_UART_Init>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80015b6:	f000 f88d 	bl	80016d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015ba:	bf00      	nop
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	20000290 	.word	0x20000290
 80015c4:	40004400 	.word	0x40004400

080015c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b08a      	sub	sp, #40	; 0x28
 80015cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ce:	f107 0314 	add.w	r3, r7, #20
 80015d2:	2200      	movs	r2, #0
 80015d4:	601a      	str	r2, [r3, #0]
 80015d6:	605a      	str	r2, [r3, #4]
 80015d8:	609a      	str	r2, [r3, #8]
 80015da:	60da      	str	r2, [r3, #12]
 80015dc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015de:	4b3a      	ldr	r3, [pc, #232]	; (80016c8 <MX_GPIO_Init+0x100>)
 80015e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015e2:	4a39      	ldr	r2, [pc, #228]	; (80016c8 <MX_GPIO_Init+0x100>)
 80015e4:	f043 0304 	orr.w	r3, r3, #4
 80015e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015ea:	4b37      	ldr	r3, [pc, #220]	; (80016c8 <MX_GPIO_Init+0x100>)
 80015ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ee:	f003 0304 	and.w	r3, r3, #4
 80015f2:	613b      	str	r3, [r7, #16]
 80015f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015f6:	4b34      	ldr	r3, [pc, #208]	; (80016c8 <MX_GPIO_Init+0x100>)
 80015f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015fa:	4a33      	ldr	r2, [pc, #204]	; (80016c8 <MX_GPIO_Init+0x100>)
 80015fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001600:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001602:	4b31      	ldr	r3, [pc, #196]	; (80016c8 <MX_GPIO_Init+0x100>)
 8001604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001606:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800160a:	60fb      	str	r3, [r7, #12]
 800160c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800160e:	4b2e      	ldr	r3, [pc, #184]	; (80016c8 <MX_GPIO_Init+0x100>)
 8001610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001612:	4a2d      	ldr	r2, [pc, #180]	; (80016c8 <MX_GPIO_Init+0x100>)
 8001614:	f043 0301 	orr.w	r3, r3, #1
 8001618:	64d3      	str	r3, [r2, #76]	; 0x4c
 800161a:	4b2b      	ldr	r3, [pc, #172]	; (80016c8 <MX_GPIO_Init+0x100>)
 800161c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800161e:	f003 0301 	and.w	r3, r3, #1
 8001622:	60bb      	str	r3, [r7, #8]
 8001624:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001626:	4b28      	ldr	r3, [pc, #160]	; (80016c8 <MX_GPIO_Init+0x100>)
 8001628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800162a:	4a27      	ldr	r2, [pc, #156]	; (80016c8 <MX_GPIO_Init+0x100>)
 800162c:	f043 0302 	orr.w	r3, r3, #2
 8001630:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001632:	4b25      	ldr	r3, [pc, #148]	; (80016c8 <MX_GPIO_Init+0x100>)
 8001634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001636:	f003 0302 	and.w	r3, r3, #2
 800163a:	607b      	str	r3, [r7, #4]
 800163c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800163e:	2200      	movs	r2, #0
 8001640:	2120      	movs	r1, #32
 8001642:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001646:	f000 feb3 	bl	80023b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800164a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800164e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001650:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001654:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001656:	2300      	movs	r3, #0
 8001658:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800165a:	f107 0314 	add.w	r3, r7, #20
 800165e:	4619      	mov	r1, r3
 8001660:	481a      	ldr	r0, [pc, #104]	; (80016cc <MX_GPIO_Init+0x104>)
 8001662:	f000 fcfb 	bl	800205c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001666:	2320      	movs	r3, #32
 8001668:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800166a:	2301      	movs	r3, #1
 800166c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166e:	2300      	movs	r3, #0
 8001670:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001672:	2300      	movs	r3, #0
 8001674:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001676:	f107 0314 	add.w	r3, r7, #20
 800167a:	4619      	mov	r1, r3
 800167c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001680:	f000 fcec 	bl	800205c <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERRUPT_TIM_Pin INTERRUPT_Pin */
  GPIO_InitStruct.Pin = INTERRUPT_TIM_Pin|INTERRUPT_Pin;
 8001684:	f240 4304 	movw	r3, #1028	; 0x404
 8001688:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800168a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800168e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001690:	2300      	movs	r3, #0
 8001692:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001694:	f107 0314 	add.w	r3, r7, #20
 8001698:	4619      	mov	r1, r3
 800169a:	480d      	ldr	r0, [pc, #52]	; (80016d0 <MX_GPIO_Init+0x108>)
 800169c:	f000 fcde 	bl	800205c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80016a0:	2200      	movs	r2, #0
 80016a2:	2100      	movs	r1, #0
 80016a4:	2008      	movs	r0, #8
 80016a6:	f000 fc08 	bl	8001eba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80016aa:	2008      	movs	r0, #8
 80016ac:	f000 fc21 	bl	8001ef2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80016b0:	2200      	movs	r2, #0
 80016b2:	2100      	movs	r1, #0
 80016b4:	2028      	movs	r0, #40	; 0x28
 80016b6:	f000 fc00 	bl	8001eba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80016ba:	2028      	movs	r0, #40	; 0x28
 80016bc:	f000 fc19 	bl	8001ef2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80016c0:	bf00      	nop
 80016c2:	3728      	adds	r7, #40	; 0x28
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	40021000 	.word	0x40021000
 80016cc:	48000800 	.word	0x48000800
 80016d0:	48000400 	.word	0x48000400

080016d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016d8:	b672      	cpsid	i
}
 80016da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016dc:	e7fe      	b.n	80016dc <Error_Handler+0x8>
	...

080016e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016e6:	4b0f      	ldr	r3, [pc, #60]	; (8001724 <HAL_MspInit+0x44>)
 80016e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016ea:	4a0e      	ldr	r2, [pc, #56]	; (8001724 <HAL_MspInit+0x44>)
 80016ec:	f043 0301 	orr.w	r3, r3, #1
 80016f0:	6613      	str	r3, [r2, #96]	; 0x60
 80016f2:	4b0c      	ldr	r3, [pc, #48]	; (8001724 <HAL_MspInit+0x44>)
 80016f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016f6:	f003 0301 	and.w	r3, r3, #1
 80016fa:	607b      	str	r3, [r7, #4]
 80016fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016fe:	4b09      	ldr	r3, [pc, #36]	; (8001724 <HAL_MspInit+0x44>)
 8001700:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001702:	4a08      	ldr	r2, [pc, #32]	; (8001724 <HAL_MspInit+0x44>)
 8001704:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001708:	6593      	str	r3, [r2, #88]	; 0x58
 800170a:	4b06      	ldr	r3, [pc, #24]	; (8001724 <HAL_MspInit+0x44>)
 800170c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800170e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001712:	603b      	str	r3, [r7, #0]
 8001714:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001716:	bf00      	nop
 8001718:	370c      	adds	r7, #12
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	40021000 	.word	0x40021000

08001728 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b0ac      	sub	sp, #176	; 0xb0
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001730:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001734:	2200      	movs	r2, #0
 8001736:	601a      	str	r2, [r3, #0]
 8001738:	605a      	str	r2, [r3, #4]
 800173a:	609a      	str	r2, [r3, #8]
 800173c:	60da      	str	r2, [r3, #12]
 800173e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001740:	f107 0314 	add.w	r3, r7, #20
 8001744:	2288      	movs	r2, #136	; 0x88
 8001746:	2100      	movs	r1, #0
 8001748:	4618      	mov	r0, r3
 800174a:	f007 f8c6 	bl	80088da <memset>
  if(hi2c->Instance==I2C1)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a25      	ldr	r2, [pc, #148]	; (80017e8 <HAL_I2C_MspInit+0xc0>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d143      	bne.n	80017e0 <HAL_I2C_MspInit+0xb8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001758:	2340      	movs	r3, #64	; 0x40
 800175a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800175c:	2300      	movs	r3, #0
 800175e:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001760:	f107 0314 	add.w	r3, r7, #20
 8001764:	4618      	mov	r0, r3
 8001766:	f003 fe51 	bl	800540c <HAL_RCCEx_PeriphCLKConfig>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d001      	beq.n	8001774 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001770:	f7ff ffb0 	bl	80016d4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001774:	4b1d      	ldr	r3, [pc, #116]	; (80017ec <HAL_I2C_MspInit+0xc4>)
 8001776:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001778:	4a1c      	ldr	r2, [pc, #112]	; (80017ec <HAL_I2C_MspInit+0xc4>)
 800177a:	f043 0302 	orr.w	r3, r3, #2
 800177e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001780:	4b1a      	ldr	r3, [pc, #104]	; (80017ec <HAL_I2C_MspInit+0xc4>)
 8001782:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001784:	f003 0302 	and.w	r3, r3, #2
 8001788:	613b      	str	r3, [r7, #16]
 800178a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800178c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001790:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001794:	2312      	movs	r3, #18
 8001796:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179a:	2300      	movs	r3, #0
 800179c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017a0:	2303      	movs	r3, #3
 80017a2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80017a6:	2304      	movs	r3, #4
 80017a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017ac:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80017b0:	4619      	mov	r1, r3
 80017b2:	480f      	ldr	r0, [pc, #60]	; (80017f0 <HAL_I2C_MspInit+0xc8>)
 80017b4:	f000 fc52 	bl	800205c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017b8:	4b0c      	ldr	r3, [pc, #48]	; (80017ec <HAL_I2C_MspInit+0xc4>)
 80017ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017bc:	4a0b      	ldr	r2, [pc, #44]	; (80017ec <HAL_I2C_MspInit+0xc4>)
 80017be:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017c2:	6593      	str	r3, [r2, #88]	; 0x58
 80017c4:	4b09      	ldr	r3, [pc, #36]	; (80017ec <HAL_I2C_MspInit+0xc4>)
 80017c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017cc:	60fb      	str	r3, [r7, #12]
 80017ce:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80017d0:	2200      	movs	r2, #0
 80017d2:	2100      	movs	r1, #0
 80017d4:	201f      	movs	r0, #31
 80017d6:	f000 fb70 	bl	8001eba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80017da:	201f      	movs	r0, #31
 80017dc:	f000 fb89 	bl	8001ef2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80017e0:	bf00      	nop
 80017e2:	37b0      	adds	r7, #176	; 0xb0
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	40005400 	.word	0x40005400
 80017ec:	40021000 	.word	0x40021000
 80017f0:	48000400 	.word	0x48000400

080017f4 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b084      	sub	sp, #16
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM3)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a0d      	ldr	r2, [pc, #52]	; (8001838 <HAL_TIM_OC_MspInit+0x44>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d113      	bne.n	800182e <HAL_TIM_OC_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001806:	4b0d      	ldr	r3, [pc, #52]	; (800183c <HAL_TIM_OC_MspInit+0x48>)
 8001808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800180a:	4a0c      	ldr	r2, [pc, #48]	; (800183c <HAL_TIM_OC_MspInit+0x48>)
 800180c:	f043 0302 	orr.w	r3, r3, #2
 8001810:	6593      	str	r3, [r2, #88]	; 0x58
 8001812:	4b0a      	ldr	r3, [pc, #40]	; (800183c <HAL_TIM_OC_MspInit+0x48>)
 8001814:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001816:	f003 0302 	and.w	r3, r3, #2
 800181a:	60fb      	str	r3, [r7, #12]
 800181c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800181e:	2200      	movs	r2, #0
 8001820:	2100      	movs	r1, #0
 8001822:	201d      	movs	r0, #29
 8001824:	f000 fb49 	bl	8001eba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001828:	201d      	movs	r0, #29
 800182a:	f000 fb62 	bl	8001ef2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800182e:	bf00      	nop
 8001830:	3710      	adds	r7, #16
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	40000400 	.word	0x40000400
 800183c:	40021000 	.word	0x40021000

08001840 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b0ac      	sub	sp, #176	; 0xb0
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001848:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800184c:	2200      	movs	r2, #0
 800184e:	601a      	str	r2, [r3, #0]
 8001850:	605a      	str	r2, [r3, #4]
 8001852:	609a      	str	r2, [r3, #8]
 8001854:	60da      	str	r2, [r3, #12]
 8001856:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001858:	f107 0314 	add.w	r3, r7, #20
 800185c:	2288      	movs	r2, #136	; 0x88
 800185e:	2100      	movs	r1, #0
 8001860:	4618      	mov	r0, r3
 8001862:	f007 f83a 	bl	80088da <memset>
  if(huart->Instance==USART2)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a25      	ldr	r2, [pc, #148]	; (8001900 <HAL_UART_MspInit+0xc0>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d143      	bne.n	80018f8 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001870:	2302      	movs	r3, #2
 8001872:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001874:	2300      	movs	r3, #0
 8001876:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001878:	f107 0314 	add.w	r3, r7, #20
 800187c:	4618      	mov	r0, r3
 800187e:	f003 fdc5 	bl	800540c <HAL_RCCEx_PeriphCLKConfig>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d001      	beq.n	800188c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001888:	f7ff ff24 	bl	80016d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800188c:	4b1d      	ldr	r3, [pc, #116]	; (8001904 <HAL_UART_MspInit+0xc4>)
 800188e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001890:	4a1c      	ldr	r2, [pc, #112]	; (8001904 <HAL_UART_MspInit+0xc4>)
 8001892:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001896:	6593      	str	r3, [r2, #88]	; 0x58
 8001898:	4b1a      	ldr	r3, [pc, #104]	; (8001904 <HAL_UART_MspInit+0xc4>)
 800189a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800189c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018a0:	613b      	str	r3, [r7, #16]
 80018a2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018a4:	4b17      	ldr	r3, [pc, #92]	; (8001904 <HAL_UART_MspInit+0xc4>)
 80018a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018a8:	4a16      	ldr	r2, [pc, #88]	; (8001904 <HAL_UART_MspInit+0xc4>)
 80018aa:	f043 0301 	orr.w	r3, r3, #1
 80018ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018b0:	4b14      	ldr	r3, [pc, #80]	; (8001904 <HAL_UART_MspInit+0xc4>)
 80018b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018b4:	f003 0301 	and.w	r3, r3, #1
 80018b8:	60fb      	str	r3, [r7, #12]
 80018ba:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80018bc:	230c      	movs	r3, #12
 80018be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c2:	2302      	movs	r3, #2
 80018c4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c8:	2300      	movs	r3, #0
 80018ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ce:	2303      	movs	r3, #3
 80018d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018d4:	2307      	movs	r3, #7
 80018d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018da:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80018de:	4619      	mov	r1, r3
 80018e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018e4:	f000 fbba 	bl	800205c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80018e8:	2200      	movs	r2, #0
 80018ea:	2100      	movs	r1, #0
 80018ec:	2026      	movs	r0, #38	; 0x26
 80018ee:	f000 fae4 	bl	8001eba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80018f2:	2026      	movs	r0, #38	; 0x26
 80018f4:	f000 fafd 	bl	8001ef2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80018f8:	bf00      	nop
 80018fa:	37b0      	adds	r7, #176	; 0xb0
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	40004400 	.word	0x40004400
 8001904:	40021000 	.word	0x40021000

08001908 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800190c:	e7fe      	b.n	800190c <NMI_Handler+0x4>

0800190e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800190e:	b480      	push	{r7}
 8001910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001912:	e7fe      	b.n	8001912 <HardFault_Handler+0x4>

08001914 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001918:	e7fe      	b.n	8001918 <MemManage_Handler+0x4>

0800191a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800191a:	b480      	push	{r7}
 800191c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800191e:	e7fe      	b.n	800191e <BusFault_Handler+0x4>

08001920 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001924:	e7fe      	b.n	8001924 <UsageFault_Handler+0x4>

08001926 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001926:	b480      	push	{r7}
 8001928:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800192a:	bf00      	nop
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr

08001934 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001938:	bf00      	nop
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr

08001942 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001942:	b480      	push	{r7}
 8001944:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001946:	bf00      	nop
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr

08001950 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001954:	f000 f992 	bl	8001c7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001958:	bf00      	nop
 800195a:	bd80      	pop	{r7, pc}

0800195c <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INTERRUPT_TIM_Pin);
 8001960:	2004      	movs	r0, #4
 8001962:	f000 fd57 	bl	8002414 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001966:	bf00      	nop
 8001968:	bd80      	pop	{r7, pc}
	...

0800196c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001970:	4802      	ldr	r0, [pc, #8]	; (800197c <TIM3_IRQHandler+0x10>)
 8001972:	f004 face 	bl	8005f12 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001976:	bf00      	nop
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	20000244 	.word	0x20000244

08001980 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001984:	4802      	ldr	r0, [pc, #8]	; (8001990 <I2C1_EV_IRQHandler+0x10>)
 8001986:	f001 f8ad 	bl	8002ae4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800198a:	bf00      	nop
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	200001f0 	.word	0x200001f0

08001994 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001998:	4802      	ldr	r0, [pc, #8]	; (80019a4 <USART2_IRQHandler+0x10>)
 800199a:	f005 f921 	bl	8006be0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800199e:	bf00      	nop
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	20000290 	.word	0x20000290

080019a8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INTERRUPT_Pin);
 80019ac:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80019b0:	f000 fd30 	bl	8002414 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80019b4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80019b8:	f000 fd2c 	bl	8002414 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80019bc:	bf00      	nop
 80019be:	bd80      	pop	{r7, pc}

080019c0 <_getpid>:
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	2301      	movs	r3, #1
 80019c6:	4618      	mov	r0, r3
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr

080019d0 <_kill>:
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	6039      	str	r1, [r7, #0]
 80019da:	f006 ffd1 	bl	8008980 <__errno>
 80019de:	4603      	mov	r3, r0
 80019e0:	2216      	movs	r2, #22
 80019e2:	601a      	str	r2, [r3, #0]
 80019e4:	f04f 33ff 	mov.w	r3, #4294967295
 80019e8:	4618      	mov	r0, r3
 80019ea:	3708      	adds	r7, #8
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}

080019f0 <_exit>:
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	f04f 31ff 	mov.w	r1, #4294967295
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	f7ff ffe7 	bl	80019d0 <_kill>
 8001a02:	e7fe      	b.n	8001a02 <_exit+0x12>

08001a04 <_read>:
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b086      	sub	sp, #24
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	60f8      	str	r0, [r7, #12]
 8001a0c:	60b9      	str	r1, [r7, #8]
 8001a0e:	607a      	str	r2, [r7, #4]
 8001a10:	2300      	movs	r3, #0
 8001a12:	617b      	str	r3, [r7, #20]
 8001a14:	e00a      	b.n	8001a2c <_read+0x28>
 8001a16:	f3af 8000 	nop.w
 8001a1a:	4601      	mov	r1, r0
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	1c5a      	adds	r2, r3, #1
 8001a20:	60ba      	str	r2, [r7, #8]
 8001a22:	b2ca      	uxtb	r2, r1
 8001a24:	701a      	strb	r2, [r3, #0]
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	3301      	adds	r3, #1
 8001a2a:	617b      	str	r3, [r7, #20]
 8001a2c:	697a      	ldr	r2, [r7, #20]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	429a      	cmp	r2, r3
 8001a32:	dbf0      	blt.n	8001a16 <_read+0x12>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	4618      	mov	r0, r3
 8001a38:	3718      	adds	r7, #24
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}

08001a3e <_write>:
 8001a3e:	b580      	push	{r7, lr}
 8001a40:	b086      	sub	sp, #24
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	60f8      	str	r0, [r7, #12]
 8001a46:	60b9      	str	r1, [r7, #8]
 8001a48:	607a      	str	r2, [r7, #4]
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	617b      	str	r3, [r7, #20]
 8001a4e:	e009      	b.n	8001a64 <_write+0x26>
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	1c5a      	adds	r2, r3, #1
 8001a54:	60ba      	str	r2, [r7, #8]
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f3af 8000 	nop.w
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	3301      	adds	r3, #1
 8001a62:	617b      	str	r3, [r7, #20]
 8001a64:	697a      	ldr	r2, [r7, #20]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	dbf1      	blt.n	8001a50 <_write+0x12>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3718      	adds	r7, #24
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}

08001a76 <_close>:
 8001a76:	b480      	push	{r7}
 8001a78:	b083      	sub	sp, #12
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	6078      	str	r0, [r7, #4]
 8001a7e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a82:	4618      	mov	r0, r3
 8001a84:	370c      	adds	r7, #12
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr

08001a8e <_fstat>:
 8001a8e:	b480      	push	{r7}
 8001a90:	b083      	sub	sp, #12
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	6078      	str	r0, [r7, #4]
 8001a96:	6039      	str	r1, [r7, #0]
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a9e:	605a      	str	r2, [r3, #4]
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	370c      	adds	r7, #12
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr

08001aae <_isatty>:
 8001aae:	b480      	push	{r7}
 8001ab0:	b083      	sub	sp, #12
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	6078      	str	r0, [r7, #4]
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	4618      	mov	r0, r3
 8001aba:	370c      	adds	r7, #12
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr

08001ac4 <_lseek>:
 8001ac4:	b480      	push	{r7}
 8001ac6:	b085      	sub	sp, #20
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	60f8      	str	r0, [r7, #12]
 8001acc:	60b9      	str	r1, [r7, #8]
 8001ace:	607a      	str	r2, [r7, #4]
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3714      	adds	r7, #20
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
	...

08001ae0 <_sbrk>:
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b086      	sub	sp, #24
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
 8001ae8:	4a14      	ldr	r2, [pc, #80]	; (8001b3c <_sbrk+0x5c>)
 8001aea:	4b15      	ldr	r3, [pc, #84]	; (8001b40 <_sbrk+0x60>)
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	617b      	str	r3, [r7, #20]
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	613b      	str	r3, [r7, #16]
 8001af4:	4b13      	ldr	r3, [pc, #76]	; (8001b44 <_sbrk+0x64>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d102      	bne.n	8001b02 <_sbrk+0x22>
 8001afc:	4b11      	ldr	r3, [pc, #68]	; (8001b44 <_sbrk+0x64>)
 8001afe:	4a12      	ldr	r2, [pc, #72]	; (8001b48 <_sbrk+0x68>)
 8001b00:	601a      	str	r2, [r3, #0]
 8001b02:	4b10      	ldr	r3, [pc, #64]	; (8001b44 <_sbrk+0x64>)
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4413      	add	r3, r2
 8001b0a:	693a      	ldr	r2, [r7, #16]
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	d207      	bcs.n	8001b20 <_sbrk+0x40>
 8001b10:	f006 ff36 	bl	8008980 <__errno>
 8001b14:	4603      	mov	r3, r0
 8001b16:	220c      	movs	r2, #12
 8001b18:	601a      	str	r2, [r3, #0]
 8001b1a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b1e:	e009      	b.n	8001b34 <_sbrk+0x54>
 8001b20:	4b08      	ldr	r3, [pc, #32]	; (8001b44 <_sbrk+0x64>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	60fb      	str	r3, [r7, #12]
 8001b26:	4b07      	ldr	r3, [pc, #28]	; (8001b44 <_sbrk+0x64>)
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4413      	add	r3, r2
 8001b2e:	4a05      	ldr	r2, [pc, #20]	; (8001b44 <_sbrk+0x64>)
 8001b30:	6013      	str	r3, [r2, #0]
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	4618      	mov	r0, r3
 8001b36:	3718      	adds	r7, #24
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	20018000 	.word	0x20018000
 8001b40:	00000400 	.word	0x00000400
 8001b44:	200003d4 	.word	0x200003d4
 8001b48:	20000528 	.word	0x20000528

08001b4c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001b50:	4b06      	ldr	r3, [pc, #24]	; (8001b6c <SystemInit+0x20>)
 8001b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b56:	4a05      	ldr	r2, [pc, #20]	; (8001b6c <SystemInit+0x20>)
 8001b58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001b60:	bf00      	nop
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	e000ed00 	.word	0xe000ed00

08001b70 <Reset_Handler>:
 8001b70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ba8 <LoopForever+0x2>
 8001b74:	f7ff ffea 	bl	8001b4c <SystemInit>
 8001b78:	480c      	ldr	r0, [pc, #48]	; (8001bac <LoopForever+0x6>)
 8001b7a:	490d      	ldr	r1, [pc, #52]	; (8001bb0 <LoopForever+0xa>)
 8001b7c:	4a0d      	ldr	r2, [pc, #52]	; (8001bb4 <LoopForever+0xe>)
 8001b7e:	2300      	movs	r3, #0
 8001b80:	e002      	b.n	8001b88 <LoopCopyDataInit>

08001b82 <CopyDataInit>:
 8001b82:	58d4      	ldr	r4, [r2, r3]
 8001b84:	50c4      	str	r4, [r0, r3]
 8001b86:	3304      	adds	r3, #4

08001b88 <LoopCopyDataInit>:
 8001b88:	18c4      	adds	r4, r0, r3
 8001b8a:	428c      	cmp	r4, r1
 8001b8c:	d3f9      	bcc.n	8001b82 <CopyDataInit>
 8001b8e:	4a0a      	ldr	r2, [pc, #40]	; (8001bb8 <LoopForever+0x12>)
 8001b90:	4c0a      	ldr	r4, [pc, #40]	; (8001bbc <LoopForever+0x16>)
 8001b92:	2300      	movs	r3, #0
 8001b94:	e001      	b.n	8001b9a <LoopFillZerobss>

08001b96 <FillZerobss>:
 8001b96:	6013      	str	r3, [r2, #0]
 8001b98:	3204      	adds	r2, #4

08001b9a <LoopFillZerobss>:
 8001b9a:	42a2      	cmp	r2, r4
 8001b9c:	d3fb      	bcc.n	8001b96 <FillZerobss>
 8001b9e:	f006 fef5 	bl	800898c <__libc_init_array>
 8001ba2:	f7ff fb65 	bl	8001270 <main>

08001ba6 <LoopForever>:
 8001ba6:	e7fe      	b.n	8001ba6 <LoopForever>
 8001ba8:	20018000 	.word	0x20018000
 8001bac:	20000000 	.word	0x20000000
 8001bb0:	200001d4 	.word	0x200001d4
 8001bb4:	0800af04 	.word	0x0800af04
 8001bb8:	200001d4 	.word	0x200001d4
 8001bbc:	20000528 	.word	0x20000528

08001bc0 <ADC1_2_IRQHandler>:
 8001bc0:	e7fe      	b.n	8001bc0 <ADC1_2_IRQHandler>
	...

08001bc4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bce:	4b0c      	ldr	r3, [pc, #48]	; (8001c00 <HAL_Init+0x3c>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a0b      	ldr	r2, [pc, #44]	; (8001c00 <HAL_Init+0x3c>)
 8001bd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bd8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bda:	2003      	movs	r0, #3
 8001bdc:	f000 f962 	bl	8001ea4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001be0:	2000      	movs	r0, #0
 8001be2:	f000 f80f 	bl	8001c04 <HAL_InitTick>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d002      	beq.n	8001bf2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
 8001bee:	71fb      	strb	r3, [r7, #7]
 8001bf0:	e001      	b.n	8001bf6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001bf2:	f7ff fd75 	bl	80016e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001bf6:	79fb      	ldrb	r3, [r7, #7]
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3708      	adds	r7, #8
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	40022000 	.word	0x40022000

08001c04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b084      	sub	sp, #16
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001c10:	4b17      	ldr	r3, [pc, #92]	; (8001c70 <HAL_InitTick+0x6c>)
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d023      	beq.n	8001c60 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001c18:	4b16      	ldr	r3, [pc, #88]	; (8001c74 <HAL_InitTick+0x70>)
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	4b14      	ldr	r3, [pc, #80]	; (8001c70 <HAL_InitTick+0x6c>)
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	4619      	mov	r1, r3
 8001c22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c26:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f000 f97b 	bl	8001f2a <HAL_SYSTICK_Config>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d10f      	bne.n	8001c5a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2b0f      	cmp	r3, #15
 8001c3e:	d809      	bhi.n	8001c54 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c40:	2200      	movs	r2, #0
 8001c42:	6879      	ldr	r1, [r7, #4]
 8001c44:	f04f 30ff 	mov.w	r0, #4294967295
 8001c48:	f000 f937 	bl	8001eba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c4c:	4a0a      	ldr	r2, [pc, #40]	; (8001c78 <HAL_InitTick+0x74>)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6013      	str	r3, [r2, #0]
 8001c52:	e007      	b.n	8001c64 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	73fb      	strb	r3, [r7, #15]
 8001c58:	e004      	b.n	8001c64 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	73fb      	strb	r3, [r7, #15]
 8001c5e:	e001      	b.n	8001c64 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001c64:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3710      	adds	r7, #16
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	20000008 	.word	0x20000008
 8001c74:	20000000 	.word	0x20000000
 8001c78:	20000004 	.word	0x20000004

08001c7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c80:	4b06      	ldr	r3, [pc, #24]	; (8001c9c <HAL_IncTick+0x20>)
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	461a      	mov	r2, r3
 8001c86:	4b06      	ldr	r3, [pc, #24]	; (8001ca0 <HAL_IncTick+0x24>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4413      	add	r3, r2
 8001c8c:	4a04      	ldr	r2, [pc, #16]	; (8001ca0 <HAL_IncTick+0x24>)
 8001c8e:	6013      	str	r3, [r2, #0]
}
 8001c90:	bf00      	nop
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	20000008 	.word	0x20000008
 8001ca0:	200003d8 	.word	0x200003d8

08001ca4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ca8:	4b03      	ldr	r3, [pc, #12]	; (8001cb8 <HAL_GetTick+0x14>)
 8001caa:	681b      	ldr	r3, [r3, #0]
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	200003d8 	.word	0x200003d8

08001cbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b085      	sub	sp, #20
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	f003 0307 	and.w	r3, r3, #7
 8001cca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ccc:	4b0c      	ldr	r3, [pc, #48]	; (8001d00 <__NVIC_SetPriorityGrouping+0x44>)
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cd2:	68ba      	ldr	r2, [r7, #8]
 8001cd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cd8:	4013      	ands	r3, r2
 8001cda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ce4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ce8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cee:	4a04      	ldr	r2, [pc, #16]	; (8001d00 <__NVIC_SetPriorityGrouping+0x44>)
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	60d3      	str	r3, [r2, #12]
}
 8001cf4:	bf00      	nop
 8001cf6:	3714      	adds	r7, #20
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr
 8001d00:	e000ed00 	.word	0xe000ed00

08001d04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d08:	4b04      	ldr	r3, [pc, #16]	; (8001d1c <__NVIC_GetPriorityGrouping+0x18>)
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	0a1b      	lsrs	r3, r3, #8
 8001d0e:	f003 0307 	and.w	r3, r3, #7
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr
 8001d1c:	e000ed00 	.word	0xe000ed00

08001d20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	4603      	mov	r3, r0
 8001d28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	db0b      	blt.n	8001d4a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d32:	79fb      	ldrb	r3, [r7, #7]
 8001d34:	f003 021f 	and.w	r2, r3, #31
 8001d38:	4907      	ldr	r1, [pc, #28]	; (8001d58 <__NVIC_EnableIRQ+0x38>)
 8001d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d3e:	095b      	lsrs	r3, r3, #5
 8001d40:	2001      	movs	r0, #1
 8001d42:	fa00 f202 	lsl.w	r2, r0, r2
 8001d46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d4a:	bf00      	nop
 8001d4c:	370c      	adds	r7, #12
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr
 8001d56:	bf00      	nop
 8001d58:	e000e100 	.word	0xe000e100

08001d5c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	4603      	mov	r3, r0
 8001d64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	db12      	blt.n	8001d94 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d6e:	79fb      	ldrb	r3, [r7, #7]
 8001d70:	f003 021f 	and.w	r2, r3, #31
 8001d74:	490a      	ldr	r1, [pc, #40]	; (8001da0 <__NVIC_DisableIRQ+0x44>)
 8001d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d7a:	095b      	lsrs	r3, r3, #5
 8001d7c:	2001      	movs	r0, #1
 8001d7e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d82:	3320      	adds	r3, #32
 8001d84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001d88:	f3bf 8f4f 	dsb	sy
}
 8001d8c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001d8e:	f3bf 8f6f 	isb	sy
}
 8001d92:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001d94:	bf00      	nop
 8001d96:	370c      	adds	r7, #12
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr
 8001da0:	e000e100 	.word	0xe000e100

08001da4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	4603      	mov	r3, r0
 8001dac:	6039      	str	r1, [r7, #0]
 8001dae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001db0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	db0a      	blt.n	8001dce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	b2da      	uxtb	r2, r3
 8001dbc:	490c      	ldr	r1, [pc, #48]	; (8001df0 <__NVIC_SetPriority+0x4c>)
 8001dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc2:	0112      	lsls	r2, r2, #4
 8001dc4:	b2d2      	uxtb	r2, r2
 8001dc6:	440b      	add	r3, r1
 8001dc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dcc:	e00a      	b.n	8001de4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	b2da      	uxtb	r2, r3
 8001dd2:	4908      	ldr	r1, [pc, #32]	; (8001df4 <__NVIC_SetPriority+0x50>)
 8001dd4:	79fb      	ldrb	r3, [r7, #7]
 8001dd6:	f003 030f 	and.w	r3, r3, #15
 8001dda:	3b04      	subs	r3, #4
 8001ddc:	0112      	lsls	r2, r2, #4
 8001dde:	b2d2      	uxtb	r2, r2
 8001de0:	440b      	add	r3, r1
 8001de2:	761a      	strb	r2, [r3, #24]
}
 8001de4:	bf00      	nop
 8001de6:	370c      	adds	r7, #12
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr
 8001df0:	e000e100 	.word	0xe000e100
 8001df4:	e000ed00 	.word	0xe000ed00

08001df8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b089      	sub	sp, #36	; 0x24
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	60f8      	str	r0, [r7, #12]
 8001e00:	60b9      	str	r1, [r7, #8]
 8001e02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	f003 0307 	and.w	r3, r3, #7
 8001e0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	f1c3 0307 	rsb	r3, r3, #7
 8001e12:	2b04      	cmp	r3, #4
 8001e14:	bf28      	it	cs
 8001e16:	2304      	movcs	r3, #4
 8001e18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	3304      	adds	r3, #4
 8001e1e:	2b06      	cmp	r3, #6
 8001e20:	d902      	bls.n	8001e28 <NVIC_EncodePriority+0x30>
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	3b03      	subs	r3, #3
 8001e26:	e000      	b.n	8001e2a <NVIC_EncodePriority+0x32>
 8001e28:	2300      	movs	r3, #0
 8001e2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e2c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e30:	69bb      	ldr	r3, [r7, #24]
 8001e32:	fa02 f303 	lsl.w	r3, r2, r3
 8001e36:	43da      	mvns	r2, r3
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	401a      	ands	r2, r3
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e40:	f04f 31ff 	mov.w	r1, #4294967295
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	fa01 f303 	lsl.w	r3, r1, r3
 8001e4a:	43d9      	mvns	r1, r3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e50:	4313      	orrs	r3, r2
         );
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3724      	adds	r7, #36	; 0x24
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
	...

08001e60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	3b01      	subs	r3, #1
 8001e6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e70:	d301      	bcc.n	8001e76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e72:	2301      	movs	r3, #1
 8001e74:	e00f      	b.n	8001e96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e76:	4a0a      	ldr	r2, [pc, #40]	; (8001ea0 <SysTick_Config+0x40>)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	3b01      	subs	r3, #1
 8001e7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e7e:	210f      	movs	r1, #15
 8001e80:	f04f 30ff 	mov.w	r0, #4294967295
 8001e84:	f7ff ff8e 	bl	8001da4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e88:	4b05      	ldr	r3, [pc, #20]	; (8001ea0 <SysTick_Config+0x40>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e8e:	4b04      	ldr	r3, [pc, #16]	; (8001ea0 <SysTick_Config+0x40>)
 8001e90:	2207      	movs	r2, #7
 8001e92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3708      	adds	r7, #8
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	e000e010 	.word	0xe000e010

08001ea4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f7ff ff05 	bl	8001cbc <__NVIC_SetPriorityGrouping>
}
 8001eb2:	bf00      	nop
 8001eb4:	3708      	adds	r7, #8
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}

08001eba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001eba:	b580      	push	{r7, lr}
 8001ebc:	b086      	sub	sp, #24
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	60b9      	str	r1, [r7, #8]
 8001ec4:	607a      	str	r2, [r7, #4]
 8001ec6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ecc:	f7ff ff1a 	bl	8001d04 <__NVIC_GetPriorityGrouping>
 8001ed0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ed2:	687a      	ldr	r2, [r7, #4]
 8001ed4:	68b9      	ldr	r1, [r7, #8]
 8001ed6:	6978      	ldr	r0, [r7, #20]
 8001ed8:	f7ff ff8e 	bl	8001df8 <NVIC_EncodePriority>
 8001edc:	4602      	mov	r2, r0
 8001ede:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ee2:	4611      	mov	r1, r2
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f7ff ff5d 	bl	8001da4 <__NVIC_SetPriority>
}
 8001eea:	bf00      	nop
 8001eec:	3718      	adds	r7, #24
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}

08001ef2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ef2:	b580      	push	{r7, lr}
 8001ef4:	b082      	sub	sp, #8
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	4603      	mov	r3, r0
 8001efa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001efc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7ff ff0d 	bl	8001d20 <__NVIC_EnableIRQ>
}
 8001f06:	bf00      	nop
 8001f08:	3708      	adds	r7, #8
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}

08001f0e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001f0e:	b580      	push	{r7, lr}
 8001f10:	b082      	sub	sp, #8
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	4603      	mov	r3, r0
 8001f16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001f18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7ff ff1d 	bl	8001d5c <__NVIC_DisableIRQ>
}
 8001f22:	bf00      	nop
 8001f24:	3708      	adds	r7, #8
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}

08001f2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f2a:	b580      	push	{r7, lr}
 8001f2c:	b082      	sub	sp, #8
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f7ff ff94 	bl	8001e60 <SysTick_Config>
 8001f38:	4603      	mov	r3, r0
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3708      	adds	r7, #8
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}

08001f42 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f42:	b480      	push	{r7}
 8001f44:	b085      	sub	sp, #20
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	d008      	beq.n	8001f6c <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2204      	movs	r2, #4
 8001f5e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2200      	movs	r2, #0
 8001f64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e022      	b.n	8001fb2 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f022 020e 	bic.w	r2, r2, #14
 8001f7a:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f022 0201 	bic.w	r2, r2, #1
 8001f8a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f90:	f003 021c 	and.w	r2, r3, #28
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f98:	2101      	movs	r1, #1
 8001f9a:	fa01 f202 	lsl.w	r2, r1, r2
 8001f9e:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2200      	movs	r2, #0
 8001fac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001fb0:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3714      	adds	r7, #20
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr

08001fbe <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001fbe:	b580      	push	{r7, lr}
 8001fc0:	b084      	sub	sp, #16
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d005      	beq.n	8001fe2 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2204      	movs	r2, #4
 8001fda:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	73fb      	strb	r3, [r7, #15]
 8001fe0:	e029      	b.n	8002036 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f022 020e 	bic.w	r2, r2, #14
 8001ff0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f022 0201 	bic.w	r2, r2, #1
 8002000:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002006:	f003 021c 	and.w	r2, r3, #28
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200e:	2101      	movs	r1, #1
 8002010:	fa01 f202 	lsl.w	r2, r1, r2
 8002014:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2201      	movs	r2, #1
 800201a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2200      	movs	r2, #0
 8002022:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800202a:	2b00      	cmp	r3, #0
 800202c:	d003      	beq.n	8002036 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	4798      	blx	r3
    }
  }
  return status;
 8002036:	7bfb      	ldrb	r3, [r7, #15]
}
 8002038:	4618      	mov	r0, r3
 800203a:	3710      	adds	r7, #16
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}

08002040 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800204e:	b2db      	uxtb	r3, r3
}
 8002050:	4618      	mov	r0, r3
 8002052:	370c      	adds	r7, #12
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr

0800205c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800205c:	b480      	push	{r7}
 800205e:	b087      	sub	sp, #28
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
 8002064:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002066:	2300      	movs	r3, #0
 8002068:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800206a:	e17f      	b.n	800236c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	2101      	movs	r1, #1
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	fa01 f303 	lsl.w	r3, r1, r3
 8002078:	4013      	ands	r3, r2
 800207a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	2b00      	cmp	r3, #0
 8002080:	f000 8171 	beq.w	8002366 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f003 0303 	and.w	r3, r3, #3
 800208c:	2b01      	cmp	r3, #1
 800208e:	d005      	beq.n	800209c <HAL_GPIO_Init+0x40>
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f003 0303 	and.w	r3, r3, #3
 8002098:	2b02      	cmp	r3, #2
 800209a:	d130      	bne.n	80020fe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	005b      	lsls	r3, r3, #1
 80020a6:	2203      	movs	r2, #3
 80020a8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ac:	43db      	mvns	r3, r3
 80020ae:	693a      	ldr	r2, [r7, #16]
 80020b0:	4013      	ands	r3, r2
 80020b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	68da      	ldr	r2, [r3, #12]
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	005b      	lsls	r3, r3, #1
 80020bc:	fa02 f303 	lsl.w	r3, r2, r3
 80020c0:	693a      	ldr	r2, [r7, #16]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	693a      	ldr	r2, [r7, #16]
 80020ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80020d2:	2201      	movs	r2, #1
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	fa02 f303 	lsl.w	r3, r2, r3
 80020da:	43db      	mvns	r3, r3
 80020dc:	693a      	ldr	r2, [r7, #16]
 80020de:	4013      	ands	r3, r2
 80020e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	091b      	lsrs	r3, r3, #4
 80020e8:	f003 0201 	and.w	r2, r3, #1
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	fa02 f303 	lsl.w	r3, r2, r3
 80020f2:	693a      	ldr	r2, [r7, #16]
 80020f4:	4313      	orrs	r3, r2
 80020f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	693a      	ldr	r2, [r7, #16]
 80020fc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f003 0303 	and.w	r3, r3, #3
 8002106:	2b03      	cmp	r3, #3
 8002108:	d118      	bne.n	800213c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800210e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002110:	2201      	movs	r2, #1
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	fa02 f303 	lsl.w	r3, r2, r3
 8002118:	43db      	mvns	r3, r3
 800211a:	693a      	ldr	r2, [r7, #16]
 800211c:	4013      	ands	r3, r2
 800211e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	08db      	lsrs	r3, r3, #3
 8002126:	f003 0201 	and.w	r2, r3, #1
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	fa02 f303 	lsl.w	r3, r2, r3
 8002130:	693a      	ldr	r2, [r7, #16]
 8002132:	4313      	orrs	r3, r2
 8002134:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	693a      	ldr	r2, [r7, #16]
 800213a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f003 0303 	and.w	r3, r3, #3
 8002144:	2b03      	cmp	r3, #3
 8002146:	d017      	beq.n	8002178 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	005b      	lsls	r3, r3, #1
 8002152:	2203      	movs	r2, #3
 8002154:	fa02 f303 	lsl.w	r3, r2, r3
 8002158:	43db      	mvns	r3, r3
 800215a:	693a      	ldr	r2, [r7, #16]
 800215c:	4013      	ands	r3, r2
 800215e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	689a      	ldr	r2, [r3, #8]
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	005b      	lsls	r3, r3, #1
 8002168:	fa02 f303 	lsl.w	r3, r2, r3
 800216c:	693a      	ldr	r2, [r7, #16]
 800216e:	4313      	orrs	r3, r2
 8002170:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	693a      	ldr	r2, [r7, #16]
 8002176:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f003 0303 	and.w	r3, r3, #3
 8002180:	2b02      	cmp	r3, #2
 8002182:	d123      	bne.n	80021cc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	08da      	lsrs	r2, r3, #3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	3208      	adds	r2, #8
 800218c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002190:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	f003 0307 	and.w	r3, r3, #7
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	220f      	movs	r2, #15
 800219c:	fa02 f303 	lsl.w	r3, r2, r3
 80021a0:	43db      	mvns	r3, r3
 80021a2:	693a      	ldr	r2, [r7, #16]
 80021a4:	4013      	ands	r3, r2
 80021a6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	691a      	ldr	r2, [r3, #16]
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	f003 0307 	and.w	r3, r3, #7
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	fa02 f303 	lsl.w	r3, r2, r3
 80021b8:	693a      	ldr	r2, [r7, #16]
 80021ba:	4313      	orrs	r3, r2
 80021bc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	08da      	lsrs	r2, r3, #3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	3208      	adds	r2, #8
 80021c6:	6939      	ldr	r1, [r7, #16]
 80021c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	005b      	lsls	r3, r3, #1
 80021d6:	2203      	movs	r2, #3
 80021d8:	fa02 f303 	lsl.w	r3, r2, r3
 80021dc:	43db      	mvns	r3, r3
 80021de:	693a      	ldr	r2, [r7, #16]
 80021e0:	4013      	ands	r3, r2
 80021e2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f003 0203 	and.w	r2, r3, #3
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	005b      	lsls	r3, r3, #1
 80021f0:	fa02 f303 	lsl.w	r3, r2, r3
 80021f4:	693a      	ldr	r2, [r7, #16]
 80021f6:	4313      	orrs	r3, r2
 80021f8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	693a      	ldr	r2, [r7, #16]
 80021fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002208:	2b00      	cmp	r3, #0
 800220a:	f000 80ac 	beq.w	8002366 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800220e:	4b5f      	ldr	r3, [pc, #380]	; (800238c <HAL_GPIO_Init+0x330>)
 8002210:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002212:	4a5e      	ldr	r2, [pc, #376]	; (800238c <HAL_GPIO_Init+0x330>)
 8002214:	f043 0301 	orr.w	r3, r3, #1
 8002218:	6613      	str	r3, [r2, #96]	; 0x60
 800221a:	4b5c      	ldr	r3, [pc, #368]	; (800238c <HAL_GPIO_Init+0x330>)
 800221c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800221e:	f003 0301 	and.w	r3, r3, #1
 8002222:	60bb      	str	r3, [r7, #8]
 8002224:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002226:	4a5a      	ldr	r2, [pc, #360]	; (8002390 <HAL_GPIO_Init+0x334>)
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	089b      	lsrs	r3, r3, #2
 800222c:	3302      	adds	r3, #2
 800222e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002232:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	f003 0303 	and.w	r3, r3, #3
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	220f      	movs	r2, #15
 800223e:	fa02 f303 	lsl.w	r3, r2, r3
 8002242:	43db      	mvns	r3, r3
 8002244:	693a      	ldr	r2, [r7, #16]
 8002246:	4013      	ands	r3, r2
 8002248:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002250:	d025      	beq.n	800229e <HAL_GPIO_Init+0x242>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4a4f      	ldr	r2, [pc, #316]	; (8002394 <HAL_GPIO_Init+0x338>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d01f      	beq.n	800229a <HAL_GPIO_Init+0x23e>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4a4e      	ldr	r2, [pc, #312]	; (8002398 <HAL_GPIO_Init+0x33c>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d019      	beq.n	8002296 <HAL_GPIO_Init+0x23a>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a4d      	ldr	r2, [pc, #308]	; (800239c <HAL_GPIO_Init+0x340>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d013      	beq.n	8002292 <HAL_GPIO_Init+0x236>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a4c      	ldr	r2, [pc, #304]	; (80023a0 <HAL_GPIO_Init+0x344>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d00d      	beq.n	800228e <HAL_GPIO_Init+0x232>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4a4b      	ldr	r2, [pc, #300]	; (80023a4 <HAL_GPIO_Init+0x348>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d007      	beq.n	800228a <HAL_GPIO_Init+0x22e>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4a4a      	ldr	r2, [pc, #296]	; (80023a8 <HAL_GPIO_Init+0x34c>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d101      	bne.n	8002286 <HAL_GPIO_Init+0x22a>
 8002282:	2306      	movs	r3, #6
 8002284:	e00c      	b.n	80022a0 <HAL_GPIO_Init+0x244>
 8002286:	2307      	movs	r3, #7
 8002288:	e00a      	b.n	80022a0 <HAL_GPIO_Init+0x244>
 800228a:	2305      	movs	r3, #5
 800228c:	e008      	b.n	80022a0 <HAL_GPIO_Init+0x244>
 800228e:	2304      	movs	r3, #4
 8002290:	e006      	b.n	80022a0 <HAL_GPIO_Init+0x244>
 8002292:	2303      	movs	r3, #3
 8002294:	e004      	b.n	80022a0 <HAL_GPIO_Init+0x244>
 8002296:	2302      	movs	r3, #2
 8002298:	e002      	b.n	80022a0 <HAL_GPIO_Init+0x244>
 800229a:	2301      	movs	r3, #1
 800229c:	e000      	b.n	80022a0 <HAL_GPIO_Init+0x244>
 800229e:	2300      	movs	r3, #0
 80022a0:	697a      	ldr	r2, [r7, #20]
 80022a2:	f002 0203 	and.w	r2, r2, #3
 80022a6:	0092      	lsls	r2, r2, #2
 80022a8:	4093      	lsls	r3, r2
 80022aa:	693a      	ldr	r2, [r7, #16]
 80022ac:	4313      	orrs	r3, r2
 80022ae:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80022b0:	4937      	ldr	r1, [pc, #220]	; (8002390 <HAL_GPIO_Init+0x334>)
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	089b      	lsrs	r3, r3, #2
 80022b6:	3302      	adds	r3, #2
 80022b8:	693a      	ldr	r2, [r7, #16]
 80022ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80022be:	4b3b      	ldr	r3, [pc, #236]	; (80023ac <HAL_GPIO_Init+0x350>)
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	43db      	mvns	r3, r3
 80022c8:	693a      	ldr	r2, [r7, #16]
 80022ca:	4013      	ands	r3, r2
 80022cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d003      	beq.n	80022e2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80022da:	693a      	ldr	r2, [r7, #16]
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	4313      	orrs	r3, r2
 80022e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80022e2:	4a32      	ldr	r2, [pc, #200]	; (80023ac <HAL_GPIO_Init+0x350>)
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80022e8:	4b30      	ldr	r3, [pc, #192]	; (80023ac <HAL_GPIO_Init+0x350>)
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	43db      	mvns	r3, r3
 80022f2:	693a      	ldr	r2, [r7, #16]
 80022f4:	4013      	ands	r3, r2
 80022f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002300:	2b00      	cmp	r3, #0
 8002302:	d003      	beq.n	800230c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002304:	693a      	ldr	r2, [r7, #16]
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	4313      	orrs	r3, r2
 800230a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800230c:	4a27      	ldr	r2, [pc, #156]	; (80023ac <HAL_GPIO_Init+0x350>)
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002312:	4b26      	ldr	r3, [pc, #152]	; (80023ac <HAL_GPIO_Init+0x350>)
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	43db      	mvns	r3, r3
 800231c:	693a      	ldr	r2, [r7, #16]
 800231e:	4013      	ands	r3, r2
 8002320:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d003      	beq.n	8002336 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800232e:	693a      	ldr	r2, [r7, #16]
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	4313      	orrs	r3, r2
 8002334:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002336:	4a1d      	ldr	r2, [pc, #116]	; (80023ac <HAL_GPIO_Init+0x350>)
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800233c:	4b1b      	ldr	r3, [pc, #108]	; (80023ac <HAL_GPIO_Init+0x350>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	43db      	mvns	r3, r3
 8002346:	693a      	ldr	r2, [r7, #16]
 8002348:	4013      	ands	r3, r2
 800234a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002354:	2b00      	cmp	r3, #0
 8002356:	d003      	beq.n	8002360 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002358:	693a      	ldr	r2, [r7, #16]
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	4313      	orrs	r3, r2
 800235e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002360:	4a12      	ldr	r2, [pc, #72]	; (80023ac <HAL_GPIO_Init+0x350>)
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	3301      	adds	r3, #1
 800236a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	fa22 f303 	lsr.w	r3, r2, r3
 8002376:	2b00      	cmp	r3, #0
 8002378:	f47f ae78 	bne.w	800206c <HAL_GPIO_Init+0x10>
  }
}
 800237c:	bf00      	nop
 800237e:	bf00      	nop
 8002380:	371c      	adds	r7, #28
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop
 800238c:	40021000 	.word	0x40021000
 8002390:	40010000 	.word	0x40010000
 8002394:	48000400 	.word	0x48000400
 8002398:	48000800 	.word	0x48000800
 800239c:	48000c00 	.word	0x48000c00
 80023a0:	48001000 	.word	0x48001000
 80023a4:	48001400 	.word	0x48001400
 80023a8:	48001800 	.word	0x48001800
 80023ac:	40010400 	.word	0x40010400

080023b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	460b      	mov	r3, r1
 80023ba:	807b      	strh	r3, [r7, #2]
 80023bc:	4613      	mov	r3, r2
 80023be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023c0:	787b      	ldrb	r3, [r7, #1]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d003      	beq.n	80023ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80023c6:	887a      	ldrh	r2, [r7, #2]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80023cc:	e002      	b.n	80023d4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80023ce:	887a      	ldrh	r2, [r7, #2]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80023d4:	bf00      	nop
 80023d6:	370c      	adds	r7, #12
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr

080023e0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b085      	sub	sp, #20
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
 80023e8:	460b      	mov	r3, r1
 80023ea:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	695b      	ldr	r3, [r3, #20]
 80023f0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80023f2:	887a      	ldrh	r2, [r7, #2]
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	4013      	ands	r3, r2
 80023f8:	041a      	lsls	r2, r3, #16
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	43d9      	mvns	r1, r3
 80023fe:	887b      	ldrh	r3, [r7, #2]
 8002400:	400b      	ands	r3, r1
 8002402:	431a      	orrs	r2, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	619a      	str	r2, [r3, #24]
}
 8002408:	bf00      	nop
 800240a:	3714      	adds	r7, #20
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr

08002414 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
 800241a:	4603      	mov	r3, r0
 800241c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800241e:	4b08      	ldr	r3, [pc, #32]	; (8002440 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002420:	695a      	ldr	r2, [r3, #20]
 8002422:	88fb      	ldrh	r3, [r7, #6]
 8002424:	4013      	ands	r3, r2
 8002426:	2b00      	cmp	r3, #0
 8002428:	d006      	beq.n	8002438 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800242a:	4a05      	ldr	r2, [pc, #20]	; (8002440 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800242c:	88fb      	ldrh	r3, [r7, #6]
 800242e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002430:	88fb      	ldrh	r3, [r7, #6]
 8002432:	4618      	mov	r0, r3
 8002434:	f7fe fece 	bl	80011d4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002438:	bf00      	nop
 800243a:	3708      	adds	r7, #8
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}
 8002440:	40010400 	.word	0x40010400

08002444 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b082      	sub	sp, #8
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d101      	bne.n	8002456 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e08d      	b.n	8002572 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800245c:	b2db      	uxtb	r3, r3
 800245e:	2b00      	cmp	r3, #0
 8002460:	d106      	bne.n	8002470 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2200      	movs	r2, #0
 8002466:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f7ff f95c 	bl	8001728 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2224      	movs	r2, #36	; 0x24
 8002474:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f022 0201 	bic.w	r2, r2, #1
 8002486:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	685a      	ldr	r2, [r3, #4]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002494:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	689a      	ldr	r2, [r3, #8]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80024a4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	68db      	ldr	r3, [r3, #12]
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d107      	bne.n	80024be <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	689a      	ldr	r2, [r3, #8]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80024ba:	609a      	str	r2, [r3, #8]
 80024bc:	e006      	b.n	80024cc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	689a      	ldr	r2, [r3, #8]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80024ca:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	2b02      	cmp	r3, #2
 80024d2:	d108      	bne.n	80024e6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	685a      	ldr	r2, [r3, #4]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80024e2:	605a      	str	r2, [r3, #4]
 80024e4:	e007      	b.n	80024f6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	685a      	ldr	r2, [r3, #4]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024f4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	6812      	ldr	r2, [r2, #0]
 8002500:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002504:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002508:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	68da      	ldr	r2, [r3, #12]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002518:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	691a      	ldr	r2, [r3, #16]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	695b      	ldr	r3, [r3, #20]
 8002522:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	699b      	ldr	r3, [r3, #24]
 800252a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	430a      	orrs	r2, r1
 8002532:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	69d9      	ldr	r1, [r3, #28]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6a1a      	ldr	r2, [r3, #32]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	430a      	orrs	r2, r1
 8002542:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f042 0201 	orr.w	r2, r2, #1
 8002552:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2200      	movs	r2, #0
 8002558:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2220      	movs	r2, #32
 800255e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2200      	movs	r2, #0
 8002566:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2200      	movs	r2, #0
 800256c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002570:	2300      	movs	r3, #0
}
 8002572:	4618      	mov	r0, r3
 8002574:	3708      	adds	r7, #8
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
	...

0800257c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b088      	sub	sp, #32
 8002580:	af02      	add	r7, sp, #8
 8002582:	60f8      	str	r0, [r7, #12]
 8002584:	4608      	mov	r0, r1
 8002586:	4611      	mov	r1, r2
 8002588:	461a      	mov	r2, r3
 800258a:	4603      	mov	r3, r0
 800258c:	817b      	strh	r3, [r7, #10]
 800258e:	460b      	mov	r3, r1
 8002590:	813b      	strh	r3, [r7, #8]
 8002592:	4613      	mov	r3, r2
 8002594:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800259c:	b2db      	uxtb	r3, r3
 800259e:	2b20      	cmp	r3, #32
 80025a0:	f040 80f9 	bne.w	8002796 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80025a4:	6a3b      	ldr	r3, [r7, #32]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d002      	beq.n	80025b0 <HAL_I2C_Mem_Write+0x34>
 80025aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d105      	bne.n	80025bc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025b6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e0ed      	b.n	8002798 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d101      	bne.n	80025ca <HAL_I2C_Mem_Write+0x4e>
 80025c6:	2302      	movs	r3, #2
 80025c8:	e0e6      	b.n	8002798 <HAL_I2C_Mem_Write+0x21c>
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2201      	movs	r2, #1
 80025ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80025d2:	f7ff fb67 	bl	8001ca4 <HAL_GetTick>
 80025d6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	9300      	str	r3, [sp, #0]
 80025dc:	2319      	movs	r3, #25
 80025de:	2201      	movs	r2, #1
 80025e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80025e4:	68f8      	ldr	r0, [r7, #12]
 80025e6:	f001 fd48 	bl	800407a <I2C_WaitOnFlagUntilTimeout>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d001      	beq.n	80025f4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e0d1      	b.n	8002798 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2221      	movs	r2, #33	; 0x21
 80025f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2240      	movs	r2, #64	; 0x40
 8002600:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2200      	movs	r2, #0
 8002608:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	6a3a      	ldr	r2, [r7, #32]
 800260e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002614:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2200      	movs	r2, #0
 800261a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800261c:	88f8      	ldrh	r0, [r7, #6]
 800261e:	893a      	ldrh	r2, [r7, #8]
 8002620:	8979      	ldrh	r1, [r7, #10]
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	9301      	str	r3, [sp, #4]
 8002626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002628:	9300      	str	r3, [sp, #0]
 800262a:	4603      	mov	r3, r0
 800262c:	68f8      	ldr	r0, [r7, #12]
 800262e:	f000 ffd7 	bl	80035e0 <I2C_RequestMemoryWrite>
 8002632:	4603      	mov	r3, r0
 8002634:	2b00      	cmp	r3, #0
 8002636:	d005      	beq.n	8002644 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2200      	movs	r2, #0
 800263c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e0a9      	b.n	8002798 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002648:	b29b      	uxth	r3, r3
 800264a:	2bff      	cmp	r3, #255	; 0xff
 800264c:	d90e      	bls.n	800266c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	22ff      	movs	r2, #255	; 0xff
 8002652:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002658:	b2da      	uxtb	r2, r3
 800265a:	8979      	ldrh	r1, [r7, #10]
 800265c:	2300      	movs	r3, #0
 800265e:	9300      	str	r3, [sp, #0]
 8002660:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002664:	68f8      	ldr	r0, [r7, #12]
 8002666:	f001 fec1 	bl	80043ec <I2C_TransferConfig>
 800266a:	e00f      	b.n	800268c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002670:	b29a      	uxth	r2, r3
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800267a:	b2da      	uxtb	r2, r3
 800267c:	8979      	ldrh	r1, [r7, #10]
 800267e:	2300      	movs	r3, #0
 8002680:	9300      	str	r3, [sp, #0]
 8002682:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002686:	68f8      	ldr	r0, [r7, #12]
 8002688:	f001 feb0 	bl	80043ec <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800268c:	697a      	ldr	r2, [r7, #20]
 800268e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002690:	68f8      	ldr	r0, [r7, #12]
 8002692:	f001 fd41 	bl	8004118 <I2C_WaitOnTXISFlagUntilTimeout>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d001      	beq.n	80026a0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	e07b      	b.n	8002798 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a4:	781a      	ldrb	r2, [r3, #0]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b0:	1c5a      	adds	r2, r3, #1
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026ba:	b29b      	uxth	r3, r3
 80026bc:	3b01      	subs	r3, #1
 80026be:	b29a      	uxth	r2, r3
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026c8:	3b01      	subs	r3, #1
 80026ca:	b29a      	uxth	r2, r3
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026d4:	b29b      	uxth	r3, r3
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d034      	beq.n	8002744 <HAL_I2C_Mem_Write+0x1c8>
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d130      	bne.n	8002744 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	9300      	str	r3, [sp, #0]
 80026e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026e8:	2200      	movs	r2, #0
 80026ea:	2180      	movs	r1, #128	; 0x80
 80026ec:	68f8      	ldr	r0, [r7, #12]
 80026ee:	f001 fcc4 	bl	800407a <I2C_WaitOnFlagUntilTimeout>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d001      	beq.n	80026fc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	e04d      	b.n	8002798 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002700:	b29b      	uxth	r3, r3
 8002702:	2bff      	cmp	r3, #255	; 0xff
 8002704:	d90e      	bls.n	8002724 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	22ff      	movs	r2, #255	; 0xff
 800270a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002710:	b2da      	uxtb	r2, r3
 8002712:	8979      	ldrh	r1, [r7, #10]
 8002714:	2300      	movs	r3, #0
 8002716:	9300      	str	r3, [sp, #0]
 8002718:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800271c:	68f8      	ldr	r0, [r7, #12]
 800271e:	f001 fe65 	bl	80043ec <I2C_TransferConfig>
 8002722:	e00f      	b.n	8002744 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002728:	b29a      	uxth	r2, r3
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002732:	b2da      	uxtb	r2, r3
 8002734:	8979      	ldrh	r1, [r7, #10]
 8002736:	2300      	movs	r3, #0
 8002738:	9300      	str	r3, [sp, #0]
 800273a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800273e:	68f8      	ldr	r0, [r7, #12]
 8002740:	f001 fe54 	bl	80043ec <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002748:	b29b      	uxth	r3, r3
 800274a:	2b00      	cmp	r3, #0
 800274c:	d19e      	bne.n	800268c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800274e:	697a      	ldr	r2, [r7, #20]
 8002750:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002752:	68f8      	ldr	r0, [r7, #12]
 8002754:	f001 fd27 	bl	80041a6 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d001      	beq.n	8002762 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e01a      	b.n	8002798 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	2220      	movs	r2, #32
 8002768:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	6859      	ldr	r1, [r3, #4]
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	4b0a      	ldr	r3, [pc, #40]	; (80027a0 <HAL_I2C_Mem_Write+0x224>)
 8002776:	400b      	ands	r3, r1
 8002778:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2220      	movs	r2, #32
 800277e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2200      	movs	r2, #0
 8002786:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2200      	movs	r2, #0
 800278e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002792:	2300      	movs	r3, #0
 8002794:	e000      	b.n	8002798 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002796:	2302      	movs	r3, #2
  }
}
 8002798:	4618      	mov	r0, r3
 800279a:	3718      	adds	r7, #24
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	fe00e800 	.word	0xfe00e800

080027a4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b088      	sub	sp, #32
 80027a8:	af02      	add	r7, sp, #8
 80027aa:	60f8      	str	r0, [r7, #12]
 80027ac:	4608      	mov	r0, r1
 80027ae:	4611      	mov	r1, r2
 80027b0:	461a      	mov	r2, r3
 80027b2:	4603      	mov	r3, r0
 80027b4:	817b      	strh	r3, [r7, #10]
 80027b6:	460b      	mov	r3, r1
 80027b8:	813b      	strh	r3, [r7, #8]
 80027ba:	4613      	mov	r3, r2
 80027bc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	2b20      	cmp	r3, #32
 80027c8:	f040 80fd 	bne.w	80029c6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80027cc:	6a3b      	ldr	r3, [r7, #32]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d002      	beq.n	80027d8 <HAL_I2C_Mem_Read+0x34>
 80027d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d105      	bne.n	80027e4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027de:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	e0f1      	b.n	80029c8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d101      	bne.n	80027f2 <HAL_I2C_Mem_Read+0x4e>
 80027ee:	2302      	movs	r3, #2
 80027f0:	e0ea      	b.n	80029c8 <HAL_I2C_Mem_Read+0x224>
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2201      	movs	r2, #1
 80027f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80027fa:	f7ff fa53 	bl	8001ca4 <HAL_GetTick>
 80027fe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	9300      	str	r3, [sp, #0]
 8002804:	2319      	movs	r3, #25
 8002806:	2201      	movs	r2, #1
 8002808:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800280c:	68f8      	ldr	r0, [r7, #12]
 800280e:	f001 fc34 	bl	800407a <I2C_WaitOnFlagUntilTimeout>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d001      	beq.n	800281c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	e0d5      	b.n	80029c8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2222      	movs	r2, #34	; 0x22
 8002820:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2240      	movs	r2, #64	; 0x40
 8002828:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2200      	movs	r2, #0
 8002830:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	6a3a      	ldr	r2, [r7, #32]
 8002836:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800283c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2200      	movs	r2, #0
 8002842:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002844:	88f8      	ldrh	r0, [r7, #6]
 8002846:	893a      	ldrh	r2, [r7, #8]
 8002848:	8979      	ldrh	r1, [r7, #10]
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	9301      	str	r3, [sp, #4]
 800284e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002850:	9300      	str	r3, [sp, #0]
 8002852:	4603      	mov	r3, r0
 8002854:	68f8      	ldr	r0, [r7, #12]
 8002856:	f000 ff17 	bl	8003688 <I2C_RequestMemoryRead>
 800285a:	4603      	mov	r3, r0
 800285c:	2b00      	cmp	r3, #0
 800285e:	d005      	beq.n	800286c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2200      	movs	r2, #0
 8002864:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	e0ad      	b.n	80029c8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002870:	b29b      	uxth	r3, r3
 8002872:	2bff      	cmp	r3, #255	; 0xff
 8002874:	d90e      	bls.n	8002894 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	22ff      	movs	r2, #255	; 0xff
 800287a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002880:	b2da      	uxtb	r2, r3
 8002882:	8979      	ldrh	r1, [r7, #10]
 8002884:	4b52      	ldr	r3, [pc, #328]	; (80029d0 <HAL_I2C_Mem_Read+0x22c>)
 8002886:	9300      	str	r3, [sp, #0]
 8002888:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800288c:	68f8      	ldr	r0, [r7, #12]
 800288e:	f001 fdad 	bl	80043ec <I2C_TransferConfig>
 8002892:	e00f      	b.n	80028b4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002898:	b29a      	uxth	r2, r3
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028a2:	b2da      	uxtb	r2, r3
 80028a4:	8979      	ldrh	r1, [r7, #10]
 80028a6:	4b4a      	ldr	r3, [pc, #296]	; (80029d0 <HAL_I2C_Mem_Read+0x22c>)
 80028a8:	9300      	str	r3, [sp, #0]
 80028aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028ae:	68f8      	ldr	r0, [r7, #12]
 80028b0:	f001 fd9c 	bl	80043ec <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	9300      	str	r3, [sp, #0]
 80028b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ba:	2200      	movs	r2, #0
 80028bc:	2104      	movs	r1, #4
 80028be:	68f8      	ldr	r0, [r7, #12]
 80028c0:	f001 fbdb 	bl	800407a <I2C_WaitOnFlagUntilTimeout>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d001      	beq.n	80028ce <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e07c      	b.n	80029c8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d8:	b2d2      	uxtb	r2, r2
 80028da:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e0:	1c5a      	adds	r2, r3, #1
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ea:	3b01      	subs	r3, #1
 80028ec:	b29a      	uxth	r2, r3
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028f6:	b29b      	uxth	r3, r3
 80028f8:	3b01      	subs	r3, #1
 80028fa:	b29a      	uxth	r2, r3
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002904:	b29b      	uxth	r3, r3
 8002906:	2b00      	cmp	r3, #0
 8002908:	d034      	beq.n	8002974 <HAL_I2C_Mem_Read+0x1d0>
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800290e:	2b00      	cmp	r3, #0
 8002910:	d130      	bne.n	8002974 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	9300      	str	r3, [sp, #0]
 8002916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002918:	2200      	movs	r2, #0
 800291a:	2180      	movs	r1, #128	; 0x80
 800291c:	68f8      	ldr	r0, [r7, #12]
 800291e:	f001 fbac 	bl	800407a <I2C_WaitOnFlagUntilTimeout>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d001      	beq.n	800292c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e04d      	b.n	80029c8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002930:	b29b      	uxth	r3, r3
 8002932:	2bff      	cmp	r3, #255	; 0xff
 8002934:	d90e      	bls.n	8002954 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	22ff      	movs	r2, #255	; 0xff
 800293a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002940:	b2da      	uxtb	r2, r3
 8002942:	8979      	ldrh	r1, [r7, #10]
 8002944:	2300      	movs	r3, #0
 8002946:	9300      	str	r3, [sp, #0]
 8002948:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800294c:	68f8      	ldr	r0, [r7, #12]
 800294e:	f001 fd4d 	bl	80043ec <I2C_TransferConfig>
 8002952:	e00f      	b.n	8002974 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002958:	b29a      	uxth	r2, r3
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002962:	b2da      	uxtb	r2, r3
 8002964:	8979      	ldrh	r1, [r7, #10]
 8002966:	2300      	movs	r3, #0
 8002968:	9300      	str	r3, [sp, #0]
 800296a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800296e:	68f8      	ldr	r0, [r7, #12]
 8002970:	f001 fd3c 	bl	80043ec <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002978:	b29b      	uxth	r3, r3
 800297a:	2b00      	cmp	r3, #0
 800297c:	d19a      	bne.n	80028b4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800297e:	697a      	ldr	r2, [r7, #20]
 8002980:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002982:	68f8      	ldr	r0, [r7, #12]
 8002984:	f001 fc0f 	bl	80041a6 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002988:	4603      	mov	r3, r0
 800298a:	2b00      	cmp	r3, #0
 800298c:	d001      	beq.n	8002992 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e01a      	b.n	80029c8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	2220      	movs	r2, #32
 8002998:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	6859      	ldr	r1, [r3, #4]
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	4b0b      	ldr	r3, [pc, #44]	; (80029d4 <HAL_I2C_Mem_Read+0x230>)
 80029a6:	400b      	ands	r3, r1
 80029a8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2220      	movs	r2, #32
 80029ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2200      	movs	r2, #0
 80029b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2200      	movs	r2, #0
 80029be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80029c2:	2300      	movs	r3, #0
 80029c4:	e000      	b.n	80029c8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80029c6:	2302      	movs	r3, #2
  }
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3718      	adds	r7, #24
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	80002400 	.word	0x80002400
 80029d4:	fe00e800 	.word	0xfe00e800

080029d8 <HAL_I2C_Mem_Read_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                      uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b086      	sub	sp, #24
 80029dc:	af02      	add	r7, sp, #8
 80029de:	60f8      	str	r0, [r7, #12]
 80029e0:	4608      	mov	r0, r1
 80029e2:	4611      	mov	r1, r2
 80029e4:	461a      	mov	r2, r3
 80029e6:	4603      	mov	r3, r0
 80029e8:	817b      	strh	r3, [r7, #10]
 80029ea:	460b      	mov	r3, r1
 80029ec:	813b      	strh	r3, [r7, #8]
 80029ee:	4613      	mov	r3, r2
 80029f0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	2b20      	cmp	r3, #32
 80029fc:	d166      	bne.n	8002acc <HAL_I2C_Mem_Read_IT+0xf4>
  {
    if ((pData == NULL) || (Size == 0U))
 80029fe:	69bb      	ldr	r3, [r7, #24]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d002      	beq.n	8002a0a <HAL_I2C_Mem_Read_IT+0x32>
 8002a04:	8bbb      	ldrh	r3, [r7, #28]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d105      	bne.n	8002a16 <HAL_I2C_Mem_Read_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a10:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e05b      	b.n	8002ace <HAL_I2C_Mem_Read_IT+0xf6>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	699b      	ldr	r3, [r3, #24]
 8002a1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a24:	d101      	bne.n	8002a2a <HAL_I2C_Mem_Read_IT+0x52>
    {
      return HAL_BUSY;
 8002a26:	2302      	movs	r3, #2
 8002a28:	e051      	b.n	8002ace <HAL_I2C_Mem_Read_IT+0xf6>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d101      	bne.n	8002a38 <HAL_I2C_Mem_Read_IT+0x60>
 8002a34:	2302      	movs	r3, #2
 8002a36:	e04a      	b.n	8002ace <HAL_I2C_Mem_Read_IT+0xf6>
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2222      	movs	r2, #34	; 0x22
 8002a44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2240      	movs	r2, #64	; 0x40
 8002a4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2200      	movs	r2, #0
 8002a54:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	69ba      	ldr	r2, [r7, #24]
 8002a5a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	8bba      	ldrh	r2, [r7, #28]
 8002a60:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	4a1c      	ldr	r2, [pc, #112]	; (8002ad8 <HAL_I2C_Mem_Read_IT+0x100>)
 8002a66:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	4a1c      	ldr	r2, [pc, #112]	; (8002adc <HAL_I2C_Mem_Read_IT+0x104>)
 8002a6c:	635a      	str	r2, [r3, #52]	; 0x34
    hi2c->Devaddress  = DevAddress;
 8002a6e:	897a      	ldrh	r2, [r7, #10]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002a74:	88fb      	ldrh	r3, [r7, #6]
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d109      	bne.n	8002a8e <HAL_I2C_Mem_Read_IT+0xb6>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002a7a:	893b      	ldrh	r3, [r7, #8]
 8002a7c:	b2da      	uxtb	r2, r3
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	629a      	str	r2, [r3, #40]	; 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f04f 32ff 	mov.w	r2, #4294967295
 8002a8a:	651a      	str	r2, [r3, #80]	; 0x50
 8002a8c:	e00b      	b.n	8002aa6 <HAL_I2C_Mem_Read_IT+0xce>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002a8e:	893b      	ldrh	r3, [r7, #8]
 8002a90:	0a1b      	lsrs	r3, r3, #8
 8002a92:	b29b      	uxth	r3, r3
 8002a94:	b2da      	uxtb	r2, r3
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 8002a9c:	893b      	ldrh	r3, [r7, #8]
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	461a      	mov	r2, r3
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002aa6:	88fb      	ldrh	r3, [r7, #6]
 8002aa8:	b2da      	uxtb	r2, r3
 8002aaa:	8979      	ldrh	r1, [r7, #10]
 8002aac:	4b0c      	ldr	r3, [pc, #48]	; (8002ae0 <HAL_I2C_Mem_Read_IT+0x108>)
 8002aae:	9300      	str	r3, [sp, #0]
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	68f8      	ldr	r0, [r7, #12]
 8002ab4:	f001 fc9a 	bl	80043ec <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2200      	movs	r2, #0
 8002abc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002ac0:	2101      	movs	r1, #1
 8002ac2:	68f8      	ldr	r0, [r7, #12]
 8002ac4:	f001 fcc4 	bl	8004450 <I2C_Enable_IRQ>

    return HAL_OK;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	e000      	b.n	8002ace <HAL_I2C_Mem_Read_IT+0xf6>
  }
  else
  {
    return HAL_BUSY;
 8002acc:	2302      	movs	r3, #2
  }
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3710      	adds	r7, #16
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	ffff0000 	.word	0xffff0000
 8002adc:	08002bd5 	.word	0x08002bd5
 8002ae0:	80002000 	.word	0x80002000

08002ae4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b084      	sub	sp, #16
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	699b      	ldr	r3, [r3, #24]
 8002af2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d005      	beq.n	8002b10 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b08:	68ba      	ldr	r2, [r7, #8]
 8002b0a:	68f9      	ldr	r1, [r7, #12]
 8002b0c:	6878      	ldr	r0, [r7, #4]
 8002b0e:	4798      	blx	r3
  }
}
 8002b10:	bf00      	nop
 8002b12:	3710      	adds	r7, #16
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}

08002b18 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002b20:	bf00      	nop
 8002b22:	370c      	adds	r7, #12
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr

08002b2c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b083      	sub	sp, #12
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002b34:	bf00      	nop
 8002b36:	370c      	adds	r7, #12
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr

08002b40 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002b48:	bf00      	nop
 8002b4a:	370c      	adds	r7, #12
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr

08002b54 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002b5c:	bf00      	nop
 8002b5e:	370c      	adds	r7, #12
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr

08002b68 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	460b      	mov	r3, r1
 8002b72:	70fb      	strb	r3, [r7, #3]
 8002b74:	4613      	mov	r3, r2
 8002b76:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002b78:	bf00      	nop
 8002b7a:	370c      	adds	r7, #12
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr

08002b84 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8002b8c:	bf00      	nop
 8002b8e:	370c      	adds	r7, #12
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr

08002b98 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002ba0:	bf00      	nop
 8002ba2:	370c      	adds	r7, #12
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr

08002bac <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b083      	sub	sp, #12
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002bb4:	bf00      	nop
 8002bb6:	370c      	adds	r7, #12
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr

08002bc0 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b083      	sub	sp, #12
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002bc8:	bf00      	nop
 8002bca:	370c      	adds	r7, #12
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr

08002bd4 <I2C_Mem_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                        uint32_t ITSources)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b088      	sub	sp, #32
 8002bd8:	af02      	add	r7, sp, #8
 8002bda:	60f8      	str	r0, [r7, #12]
 8002bdc:	60b9      	str	r1, [r7, #8]
 8002bde:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8002be0:	4b8d      	ldr	r3, [pc, #564]	; (8002e18 <I2C_Mem_ISR_IT+0x244>)
 8002be2:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d101      	bne.n	8002bf6 <I2C_Mem_ISR_IT+0x22>
 8002bf2:	2302      	movs	r3, #2
 8002bf4:	e10c      	b.n	8002e10 <I2C_Mem_ISR_IT+0x23c>
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	f003 0310 	and.w	r3, r3, #16
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d012      	beq.n	8002c2e <I2C_Mem_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d00d      	beq.n	8002c2e <I2C_Mem_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	2210      	movs	r2, #16
 8002c18:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c1e:	f043 0204 	orr.w	r2, r3, #4
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002c26:	68f8      	ldr	r0, [r7, #12]
 8002c28:	f001 f9e5 	bl	8003ff6 <I2C_Flush_TXDR>
 8002c2c:	e0dd      	b.n	8002dea <I2C_Mem_ISR_IT+0x216>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	f003 0304 	and.w	r3, r3, #4
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d022      	beq.n	8002c7e <I2C_Mem_ISR_IT+0xaa>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d01d      	beq.n	8002c7e <I2C_Mem_ISR_IT+0xaa>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	f023 0304 	bic.w	r3, r3, #4
 8002c48:	613b      	str	r3, [r7, #16]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c54:	b2d2      	uxtb	r2, r2
 8002c56:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5c:	1c5a      	adds	r2, r3, #1
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c66:	3b01      	subs	r3, #1
 8002c68:	b29a      	uxth	r2, r3
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c72:	b29b      	uxth	r3, r3
 8002c74:	3b01      	subs	r3, #1
 8002c76:	b29a      	uxth	r2, r3
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002c7c:	e0b5      	b.n	8002dea <I2C_Mem_ISR_IT+0x216>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	f003 0302 	and.w	r3, r3, #2
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d02c      	beq.n	8002ce2 <I2C_Mem_ISR_IT+0x10e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d027      	beq.n	8002ce2 <I2C_Mem_ISR_IT+0x10e>
  {
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c9a:	d118      	bne.n	8002cce <I2C_Mem_ISR_IT+0xfa>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca0:	781a      	ldrb	r2, [r3, #0]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cac:	1c5a      	adds	r2, r3, #1
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cb6:	3b01      	subs	r3, #1
 8002cb8:	b29a      	uxth	r2, r3
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cc2:	b29b      	uxth	r3, r3
 8002cc4:	3b01      	subs	r3, #1
 8002cc6:	b29a      	uxth	r2, r3
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 8002ccc:	e08d      	b.n	8002dea <I2C_Mem_ISR_IT+0x216>
    }
    else
    {
      /* Write LSB part of Memory Address */
      hi2c->Instance->TXDR = hi2c->Memaddress;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	68fa      	ldr	r2, [r7, #12]
 8002cd4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002cd6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	f04f 32ff 	mov.w	r2, #4294967295
 8002cde:	651a      	str	r2, [r3, #80]	; 0x50
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 8002ce0:	e083      	b.n	8002dea <I2C_Mem_ISR_IT+0x216>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d03c      	beq.n	8002d66 <I2C_Mem_ISR_IT+0x192>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d037      	beq.n	8002d66 <I2C_Mem_ISR_IT+0x192>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cfa:	b29b      	uxth	r3, r3
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d02c      	beq.n	8002d5a <I2C_Mem_ISR_IT+0x186>
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d128      	bne.n	8002d5a <I2C_Mem_ISR_IT+0x186>
    {
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d0c:	b29b      	uxth	r3, r3
 8002d0e:	2bff      	cmp	r3, #255	; 0xff
 8002d10:	d910      	bls.n	8002d34 <I2C_Mem_ISR_IT+0x160>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	22ff      	movs	r2, #255	; 0xff
 8002d16:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d1c:	b299      	uxth	r1, r3
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d22:	b2da      	uxtb	r2, r3
 8002d24:	2300      	movs	r3, #0
 8002d26:	9300      	str	r3, [sp, #0]
 8002d28:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d2c:	68f8      	ldr	r0, [r7, #12]
 8002d2e:	f001 fb5d 	bl	80043ec <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d32:	e017      	b.n	8002d64 <I2C_Mem_ISR_IT+0x190>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d38:	b29a      	uxth	r2, r3
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d42:	b299      	uxth	r1, r3
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d48:	b2da      	uxtb	r2, r3
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	9300      	str	r3, [sp, #0]
 8002d4e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d52:	68f8      	ldr	r0, [r7, #12]
 8002d54:	f001 fb4a 	bl	80043ec <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d58:	e004      	b.n	8002d64 <I2C_Mem_ISR_IT+0x190>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002d5a:	2140      	movs	r1, #64	; 0x40
 8002d5c:	68f8      	ldr	r0, [r7, #12]
 8002d5e:	f001 f833 	bl	8003dc8 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002d62:	e042      	b.n	8002dea <I2C_Mem_ISR_IT+0x216>
 8002d64:	e041      	b.n	8002dea <I2C_Mem_ISR_IT+0x216>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d03c      	beq.n	8002dea <I2C_Mem_ISR_IT+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d037      	beq.n	8002dea <I2C_Mem_ISR_IT+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002d7a:	2101      	movs	r1, #1
 8002d7c:	68f8      	ldr	r0, [r7, #12]
 8002d7e:	f001 fbeb 	bl	8004558 <I2C_Disable_IRQ>

    /* Enable ERR, TC, STOP, NACK and RXI interrupts */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002d82:	2102      	movs	r1, #2
 8002d84:	68f8      	ldr	r0, [r7, #12]
 8002d86:	f001 fb63 	bl	8004450 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	2b22      	cmp	r3, #34	; 0x22
 8002d94:	d101      	bne.n	8002d9a <I2C_Mem_ISR_IT+0x1c6>
    {
      direction = I2C_GENERATE_START_READ;
 8002d96:	4b21      	ldr	r3, [pc, #132]	; (8002e1c <I2C_Mem_ISR_IT+0x248>)
 8002d98:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d9e:	b29b      	uxth	r3, r3
 8002da0:	2bff      	cmp	r3, #255	; 0xff
 8002da2:	d910      	bls.n	8002dc6 <I2C_Mem_ISR_IT+0x1f2>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	22ff      	movs	r2, #255	; 0xff
 8002da8:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dae:	b299      	uxth	r1, r3
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002db4:	b2da      	uxtb	r2, r3
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	9300      	str	r3, [sp, #0]
 8002dba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002dbe:	68f8      	ldr	r0, [r7, #12]
 8002dc0:	f001 fb14 	bl	80043ec <I2C_TransferConfig>
 8002dc4:	e011      	b.n	8002dea <I2C_Mem_ISR_IT+0x216>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dca:	b29a      	uxth	r2, r3
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dd4:	b299      	uxth	r1, r3
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dda:	b2da      	uxtb	r2, r3
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	9300      	str	r3, [sp, #0]
 8002de0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002de4:	68f8      	ldr	r0, [r7, #12]
 8002de6:	f001 fb01 	bl	80043ec <I2C_TransferConfig>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	f003 0320 	and.w	r3, r3, #32
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d008      	beq.n	8002e06 <I2C_Mem_ISR_IT+0x232>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d003      	beq.n	8002e06 <I2C_Mem_ISR_IT+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8002dfe:	6939      	ldr	r1, [r7, #16]
 8002e00:	68f8      	ldr	r0, [r7, #12]
 8002e02:	f000 fdb3 	bl	800396c <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002e0e:	2300      	movs	r3, #0
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3718      	adds	r7, #24
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	80002000 	.word	0x80002000
 8002e1c:	80002400 	.word	0x80002400

08002e20 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b086      	sub	sp, #24
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	60f8      	str	r0, [r7, #12]
 8002e28:	60b9      	str	r1, [r7, #8]
 8002e2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e30:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d101      	bne.n	8002e44 <I2C_Slave_ISR_IT+0x24>
 8002e40:	2302      	movs	r3, #2
 8002e42:	e0e1      	b.n	8003008 <I2C_Slave_ISR_IT+0x1e8>
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2201      	movs	r2, #1
 8002e48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	f003 0320 	and.w	r3, r3, #32
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d008      	beq.n	8002e68 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d003      	beq.n	8002e68 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002e60:	6939      	ldr	r1, [r7, #16]
 8002e62:	68f8      	ldr	r0, [r7, #12]
 8002e64:	f000 fe4a 	bl	8003afc <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	f003 0310 	and.w	r3, r3, #16
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d04b      	beq.n	8002f0a <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d046      	beq.n	8002f0a <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e80:	b29b      	uxth	r3, r3
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d128      	bne.n	8002ed8 <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	2b28      	cmp	r3, #40	; 0x28
 8002e90:	d108      	bne.n	8002ea4 <I2C_Slave_ISR_IT+0x84>
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002e98:	d104      	bne.n	8002ea4 <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002e9a:	6939      	ldr	r1, [r7, #16]
 8002e9c:	68f8      	ldr	r0, [r7, #12]
 8002e9e:	f000 ff3f 	bl	8003d20 <I2C_ITListenCplt>
 8002ea2:	e031      	b.n	8002f08 <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	2b29      	cmp	r3, #41	; 0x29
 8002eae:	d10e      	bne.n	8002ece <I2C_Slave_ISR_IT+0xae>
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002eb6:	d00a      	beq.n	8002ece <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	2210      	movs	r2, #16
 8002ebe:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002ec0:	68f8      	ldr	r0, [r7, #12]
 8002ec2:	f001 f898 	bl	8003ff6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002ec6:	68f8      	ldr	r0, [r7, #12]
 8002ec8:	f000 fcf3 	bl	80038b2 <I2C_ITSlaveSeqCplt>
 8002ecc:	e01c      	b.n	8002f08 <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	2210      	movs	r2, #16
 8002ed4:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8002ed6:	e08f      	b.n	8002ff8 <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	2210      	movs	r2, #16
 8002ede:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ee4:	f043 0204 	orr.w	r2, r3, #4
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d003      	beq.n	8002efa <I2C_Slave_ISR_IT+0xda>
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ef8:	d17e      	bne.n	8002ff8 <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002efe:	4619      	mov	r1, r3
 8002f00:	68f8      	ldr	r0, [r7, #12]
 8002f02:	f000 ff61 	bl	8003dc8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002f06:	e077      	b.n	8002ff8 <I2C_Slave_ISR_IT+0x1d8>
 8002f08:	e076      	b.n	8002ff8 <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	f003 0304 	and.w	r3, r3, #4
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d02f      	beq.n	8002f74 <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d02a      	beq.n	8002f74 <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f22:	b29b      	uxth	r3, r3
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d018      	beq.n	8002f5a <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f32:	b2d2      	uxtb	r2, r2
 8002f34:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3a:	1c5a      	adds	r2, r3, #1
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f44:	3b01      	subs	r3, #1
 8002f46:	b29a      	uxth	r2, r3
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f50:	b29b      	uxth	r3, r3
 8002f52:	3b01      	subs	r3, #1
 8002f54:	b29a      	uxth	r2, r3
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d14b      	bne.n	8002ffc <I2C_Slave_ISR_IT+0x1dc>
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002f6a:	d047      	beq.n	8002ffc <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002f6c:	68f8      	ldr	r0, [r7, #12]
 8002f6e:	f000 fca0 	bl	80038b2 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002f72:	e043      	b.n	8002ffc <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	f003 0308 	and.w	r3, r3, #8
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d009      	beq.n	8002f92 <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d004      	beq.n	8002f92 <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8002f88:	6939      	ldr	r1, [r7, #16]
 8002f8a:	68f8      	ldr	r0, [r7, #12]
 8002f8c:	f000 fbd0 	bl	8003730 <I2C_ITAddrCplt>
 8002f90:	e035      	b.n	8002ffe <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	f003 0302 	and.w	r3, r3, #2
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d030      	beq.n	8002ffe <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d02b      	beq.n	8002ffe <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002faa:	b29b      	uxth	r3, r3
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d018      	beq.n	8002fe2 <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb4:	781a      	ldrb	r2, [r3, #0]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc0:	1c5a      	adds	r2, r3, #1
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fca:	b29b      	uxth	r3, r3
 8002fcc:	3b01      	subs	r3, #1
 8002fce:	b29a      	uxth	r2, r3
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fd8:	3b01      	subs	r3, #1
 8002fda:	b29a      	uxth	r2, r3
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	851a      	strh	r2, [r3, #40]	; 0x28
 8002fe0:	e00d      	b.n	8002ffe <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002fe8:	d002      	beq.n	8002ff0 <I2C_Slave_ISR_IT+0x1d0>
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d106      	bne.n	8002ffe <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002ff0:	68f8      	ldr	r0, [r7, #12]
 8002ff2:	f000 fc5e 	bl	80038b2 <I2C_ITSlaveSeqCplt>
 8002ff6:	e002      	b.n	8002ffe <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 8002ff8:	bf00      	nop
 8002ffa:	e000      	b.n	8002ffe <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 8002ffc:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2200      	movs	r2, #0
 8003002:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003006:	2300      	movs	r3, #0
}
 8003008:	4618      	mov	r0, r3
 800300a:	3718      	adds	r7, #24
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}

08003010 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b088      	sub	sp, #32
 8003014:	af02      	add	r7, sp, #8
 8003016:	60f8      	str	r0, [r7, #12]
 8003018:	60b9      	str	r1, [r7, #8]
 800301a:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003022:	2b01      	cmp	r3, #1
 8003024:	d101      	bne.n	800302a <I2C_Master_ISR_DMA+0x1a>
 8003026:	2302      	movs	r3, #2
 8003028:	e0d9      	b.n	80031de <I2C_Master_ISR_DMA+0x1ce>
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2201      	movs	r2, #1
 800302e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	f003 0310 	and.w	r3, r3, #16
 8003038:	2b00      	cmp	r3, #0
 800303a:	d016      	beq.n	800306a <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003042:	2b00      	cmp	r3, #0
 8003044:	d011      	beq.n	800306a <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	2210      	movs	r2, #16
 800304c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003052:	f043 0204 	orr.w	r2, r3, #4
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800305a:	2120      	movs	r1, #32
 800305c:	68f8      	ldr	r0, [r7, #12]
 800305e:	f001 f9f7 	bl	8004450 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003062:	68f8      	ldr	r0, [r7, #12]
 8003064:	f000 ffc7 	bl	8003ff6 <I2C_Flush_TXDR>
 8003068:	e0b4      	b.n	80031d4 <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003070:	2b00      	cmp	r3, #0
 8003072:	d071      	beq.n	8003158 <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800307a:	2b00      	cmp	r3, #0
 800307c:	d06c      	beq.n	8003158 <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800308c:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003092:	b29b      	uxth	r3, r3
 8003094:	2b00      	cmp	r3, #0
 8003096:	d04e      	beq.n	8003136 <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	b29b      	uxth	r3, r3
 80030a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030a4:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030aa:	b29b      	uxth	r3, r3
 80030ac:	2bff      	cmp	r3, #255	; 0xff
 80030ae:	d906      	bls.n	80030be <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	22ff      	movs	r2, #255	; 0xff
 80030b4:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 80030b6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80030ba:	617b      	str	r3, [r7, #20]
 80030bc:	e010      	b.n	80030e0 <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030c2:	b29a      	uxth	r2, r3
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030cc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80030d0:	d003      	beq.n	80030da <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d6:	617b      	str	r3, [r7, #20]
 80030d8:	e002      	b.n	80030e0 <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80030da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80030de:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030e4:	b2da      	uxtb	r2, r3
 80030e6:	8a79      	ldrh	r1, [r7, #18]
 80030e8:	2300      	movs	r3, #0
 80030ea:	9300      	str	r3, [sp, #0]
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	68f8      	ldr	r0, [r7, #12]
 80030f0:	f001 f97c 	bl	80043ec <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030f8:	b29a      	uxth	r2, r3
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	b29a      	uxth	r2, r3
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800310c:	b2db      	uxtb	r3, r3
 800310e:	2b22      	cmp	r3, #34	; 0x22
 8003110:	d108      	bne.n	8003124 <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003120:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003122:	e057      	b.n	80031d4 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003132:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003134:	e04e      	b.n	80031d4 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003140:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003144:	d003      	beq.n	800314e <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8003146:	68f8      	ldr	r0, [r7, #12]
 8003148:	f000 fb76 	bl	8003838 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800314c:	e042      	b.n	80031d4 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800314e:	2140      	movs	r1, #64	; 0x40
 8003150:	68f8      	ldr	r0, [r7, #12]
 8003152:	f000 fe39 	bl	8003dc8 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8003156:	e03d      	b.n	80031d4 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800315e:	2b00      	cmp	r3, #0
 8003160:	d028      	beq.n	80031b4 <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003168:	2b00      	cmp	r3, #0
 800316a:	d023      	beq.n	80031b4 <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003170:	b29b      	uxth	r3, r3
 8003172:	2b00      	cmp	r3, #0
 8003174:	d119      	bne.n	80031aa <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003180:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003184:	d025      	beq.n	80031d2 <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800318a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800318e:	d108      	bne.n	80031a2 <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	685a      	ldr	r2, [r3, #4]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800319e:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 80031a0:	e017      	b.n	80031d2 <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80031a2:	68f8      	ldr	r0, [r7, #12]
 80031a4:	f000 fb48 	bl	8003838 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 80031a8:	e013      	b.n	80031d2 <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80031aa:	2140      	movs	r1, #64	; 0x40
 80031ac:	68f8      	ldr	r0, [r7, #12]
 80031ae:	f000 fe0b 	bl	8003dc8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80031b2:	e00e      	b.n	80031d2 <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	f003 0320 	and.w	r3, r3, #32
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d00a      	beq.n	80031d4 <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d005      	beq.n	80031d4 <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80031c8:	68b9      	ldr	r1, [r7, #8]
 80031ca:	68f8      	ldr	r0, [r7, #12]
 80031cc:	f000 fbce 	bl	800396c <I2C_ITMasterCplt>
 80031d0:	e000      	b.n	80031d4 <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 80031d2:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2200      	movs	r2, #0
 80031d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80031dc:	2300      	movs	r3, #0
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3718      	adds	r7, #24
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
	...

080031e8 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b088      	sub	sp, #32
 80031ec:	af02      	add	r7, sp, #8
 80031ee:	60f8      	str	r0, [r7, #12]
 80031f0:	60b9      	str	r1, [r7, #8]
 80031f2:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 80031f4:	4b8d      	ldr	r3, [pc, #564]	; (800342c <I2C_Mem_ISR_DMA+0x244>)
 80031f6:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d101      	bne.n	8003206 <I2C_Mem_ISR_DMA+0x1e>
 8003202:	2302      	movs	r3, #2
 8003204:	e10e      	b.n	8003424 <I2C_Mem_ISR_DMA+0x23c>
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2201      	movs	r2, #1
 800320a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	f003 0310 	and.w	r3, r3, #16
 8003214:	2b00      	cmp	r3, #0
 8003216:	d016      	beq.n	8003246 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800321e:	2b00      	cmp	r3, #0
 8003220:	d011      	beq.n	8003246 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	2210      	movs	r2, #16
 8003228:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800322e:	f043 0204 	orr.w	r2, r3, #4
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8003236:	2120      	movs	r1, #32
 8003238:	68f8      	ldr	r0, [r7, #12]
 800323a:	f001 f909 	bl	8004450 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800323e:	68f8      	ldr	r0, [r7, #12]
 8003240:	f000 fed9 	bl	8003ff6 <I2C_Flush_TXDR>
 8003244:	e0e9      	b.n	800341a <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	f003 0302 	and.w	r3, r3, #2
 800324c:	2b00      	cmp	r3, #0
 800324e:	d00e      	beq.n	800326e <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003256:	2b00      	cmp	r3, #0
 8003258:	d009      	beq.n	800326e <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	68fa      	ldr	r2, [r7, #12]
 8003260:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003262:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	f04f 32ff 	mov.w	r2, #4294967295
 800326a:	651a      	str	r2, [r3, #80]	; 0x50
 800326c:	e0d5      	b.n	800341a <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003274:	2b00      	cmp	r3, #0
 8003276:	d05f      	beq.n	8003338 <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800327e:	2b00      	cmp	r3, #0
 8003280:	d05a      	beq.n	8003338 <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003282:	2101      	movs	r1, #1
 8003284:	68f8      	ldr	r0, [r7, #12]
 8003286:	f001 f967 	bl	8004558 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800328a:	2110      	movs	r1, #16
 800328c:	68f8      	ldr	r0, [r7, #12]
 800328e:	f001 f8df 	bl	8004450 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003296:	b29b      	uxth	r3, r3
 8003298:	2b00      	cmp	r3, #0
 800329a:	d048      	beq.n	800332e <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032a0:	b29b      	uxth	r3, r3
 80032a2:	2bff      	cmp	r3, #255	; 0xff
 80032a4:	d910      	bls.n	80032c8 <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	22ff      	movs	r2, #255	; 0xff
 80032aa:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032b0:	b299      	uxth	r1, r3
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032b6:	b2da      	uxtb	r2, r3
 80032b8:	2300      	movs	r3, #0
 80032ba:	9300      	str	r3, [sp, #0]
 80032bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80032c0:	68f8      	ldr	r0, [r7, #12]
 80032c2:	f001 f893 	bl	80043ec <I2C_TransferConfig>
 80032c6:	e011      	b.n	80032ec <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032cc:	b29a      	uxth	r2, r3
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032d6:	b299      	uxth	r1, r3
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032dc:	b2da      	uxtb	r2, r3
 80032de:	2300      	movs	r3, #0
 80032e0:	9300      	str	r3, [sp, #0]
 80032e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80032e6:	68f8      	ldr	r0, [r7, #12]
 80032e8:	f001 f880 	bl	80043ec <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032f0:	b29a      	uxth	r2, r3
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032f6:	1ad3      	subs	r3, r2, r3
 80032f8:	b29a      	uxth	r2, r3
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003304:	b2db      	uxtb	r3, r3
 8003306:	2b22      	cmp	r3, #34	; 0x22
 8003308:	d108      	bne.n	800331c <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003318:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800331a:	e07e      	b.n	800341a <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800332a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800332c:	e075      	b.n	800341a <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800332e:	2140      	movs	r1, #64	; 0x40
 8003330:	68f8      	ldr	r0, [r7, #12]
 8003332:	f000 fd49 	bl	8003dc8 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8003336:	e070      	b.n	800341a <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800333e:	2b00      	cmp	r3, #0
 8003340:	d05d      	beq.n	80033fe <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003348:	2b00      	cmp	r3, #0
 800334a:	d058      	beq.n	80033fe <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800334c:	2101      	movs	r1, #1
 800334e:	68f8      	ldr	r0, [r7, #12]
 8003350:	f001 f902 	bl	8004558 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8003354:	2110      	movs	r1, #16
 8003356:	68f8      	ldr	r0, [r7, #12]
 8003358:	f001 f87a 	bl	8004450 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003362:	b2db      	uxtb	r3, r3
 8003364:	2b22      	cmp	r3, #34	; 0x22
 8003366:	d101      	bne.n	800336c <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 8003368:	4b31      	ldr	r3, [pc, #196]	; (8003430 <I2C_Mem_ISR_DMA+0x248>)
 800336a:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003370:	b29b      	uxth	r3, r3
 8003372:	2bff      	cmp	r3, #255	; 0xff
 8003374:	d910      	bls.n	8003398 <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	22ff      	movs	r2, #255	; 0xff
 800337a:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003380:	b299      	uxth	r1, r3
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003386:	b2da      	uxtb	r2, r3
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	9300      	str	r3, [sp, #0]
 800338c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003390:	68f8      	ldr	r0, [r7, #12]
 8003392:	f001 f82b 	bl	80043ec <I2C_TransferConfig>
 8003396:	e011      	b.n	80033bc <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800339c:	b29a      	uxth	r2, r3
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033a6:	b299      	uxth	r1, r3
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033ac:	b2da      	uxtb	r2, r3
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	9300      	str	r3, [sp, #0]
 80033b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80033b6:	68f8      	ldr	r0, [r7, #12]
 80033b8:	f001 f818 	bl	80043ec <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033c0:	b29a      	uxth	r2, r3
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033c6:	1ad3      	subs	r3, r2, r3
 80033c8:	b29a      	uxth	r2, r3
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	2b22      	cmp	r3, #34	; 0x22
 80033d8:	d108      	bne.n	80033ec <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80033e8:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80033ea:	e016      	b.n	800341a <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80033fa:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80033fc:	e00d      	b.n	800341a <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	f003 0320 	and.w	r3, r3, #32
 8003404:	2b00      	cmp	r3, #0
 8003406:	d008      	beq.n	800341a <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800340e:	2b00      	cmp	r3, #0
 8003410:	d003      	beq.n	800341a <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8003412:	68b9      	ldr	r1, [r7, #8]
 8003414:	68f8      	ldr	r0, [r7, #12]
 8003416:	f000 faa9 	bl	800396c <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2200      	movs	r2, #0
 800341e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003422:	2300      	movs	r3, #0
}
 8003424:	4618      	mov	r0, r3
 8003426:	3718      	adds	r7, #24
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}
 800342c:	80002000 	.word	0x80002000
 8003430:	80002400 	.word	0x80002400

08003434 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b088      	sub	sp, #32
 8003438:	af00      	add	r7, sp, #0
 800343a:	60f8      	str	r0, [r7, #12]
 800343c:	60b9      	str	r1, [r7, #8]
 800343e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003444:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8003446:	2300      	movs	r3, #0
 8003448:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003450:	2b01      	cmp	r3, #1
 8003452:	d101      	bne.n	8003458 <I2C_Slave_ISR_DMA+0x24>
 8003454:	2302      	movs	r3, #2
 8003456:	e0bf      	b.n	80035d8 <I2C_Slave_ISR_DMA+0x1a4>
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2201      	movs	r2, #1
 800345c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	f003 0320 	and.w	r3, r3, #32
 8003466:	2b00      	cmp	r3, #0
 8003468:	d008      	beq.n	800347c <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003470:	2b00      	cmp	r3, #0
 8003472:	d003      	beq.n	800347c <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8003474:	68b9      	ldr	r1, [r7, #8]
 8003476:	68f8      	ldr	r0, [r7, #12]
 8003478:	f000 fb40 	bl	8003afc <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	f003 0310 	and.w	r3, r3, #16
 8003482:	2b00      	cmp	r3, #0
 8003484:	f000 8095 	beq.w	80035b2 <I2C_Slave_ISR_DMA+0x17e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800348e:	2b00      	cmp	r3, #0
 8003490:	f000 808f 	beq.w	80035b2 <I2C_Slave_ISR_DMA+0x17e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800349a:	2b00      	cmp	r3, #0
 800349c:	d104      	bne.n	80034a8 <I2C_Slave_ISR_DMA+0x74>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d07d      	beq.n	80035a4 <I2C_Slave_ISR_DMA+0x170>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d00c      	beq.n	80034ca <I2C_Slave_ISR_DMA+0x96>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d007      	beq.n	80034ca <I2C_Slave_ISR_DMA+0x96>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d101      	bne.n	80034ca <I2C_Slave_ISR_DMA+0x96>
          {
            treatdmanack = 1U;
 80034c6:	2301      	movs	r3, #1
 80034c8:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d00c      	beq.n	80034ec <I2C_Slave_ISR_DMA+0xb8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d007      	beq.n	80034ec <I2C_Slave_ISR_DMA+0xb8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d101      	bne.n	80034ec <I2C_Slave_ISR_DMA+0xb8>
          {
            treatdmanack = 1U;
 80034e8:	2301      	movs	r3, #1
 80034ea:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 80034ec:	69fb      	ldr	r3, [r7, #28]
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d128      	bne.n	8003544 <I2C_Slave_ISR_DMA+0x110>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	2b28      	cmp	r3, #40	; 0x28
 80034fc:	d108      	bne.n	8003510 <I2C_Slave_ISR_DMA+0xdc>
 80034fe:	69bb      	ldr	r3, [r7, #24]
 8003500:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003504:	d104      	bne.n	8003510 <I2C_Slave_ISR_DMA+0xdc>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8003506:	68b9      	ldr	r1, [r7, #8]
 8003508:	68f8      	ldr	r0, [r7, #12]
 800350a:	f000 fc09 	bl	8003d20 <I2C_ITListenCplt>
 800350e:	e048      	b.n	80035a2 <I2C_Slave_ISR_DMA+0x16e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003516:	b2db      	uxtb	r3, r3
 8003518:	2b29      	cmp	r3, #41	; 0x29
 800351a:	d10e      	bne.n	800353a <I2C_Slave_ISR_DMA+0x106>
 800351c:	69bb      	ldr	r3, [r7, #24]
 800351e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003522:	d00a      	beq.n	800353a <I2C_Slave_ISR_DMA+0x106>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	2210      	movs	r2, #16
 800352a:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800352c:	68f8      	ldr	r0, [r7, #12]
 800352e:	f000 fd62 	bl	8003ff6 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8003532:	68f8      	ldr	r0, [r7, #12]
 8003534:	f000 f9bd 	bl	80038b2 <I2C_ITSlaveSeqCplt>
 8003538:	e033      	b.n	80035a2 <I2C_Slave_ISR_DMA+0x16e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	2210      	movs	r2, #16
 8003540:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8003542:	e034      	b.n	80035ae <I2C_Slave_ISR_DMA+0x17a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	2210      	movs	r2, #16
 800354a:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003550:	f043 0204 	orr.w	r2, r3, #4
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800355e:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003560:	69bb      	ldr	r3, [r7, #24]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d003      	beq.n	800356e <I2C_Slave_ISR_DMA+0x13a>
 8003566:	69bb      	ldr	r3, [r7, #24]
 8003568:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800356c:	d11f      	bne.n	80035ae <I2C_Slave_ISR_DMA+0x17a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800356e:	7dfb      	ldrb	r3, [r7, #23]
 8003570:	2b21      	cmp	r3, #33	; 0x21
 8003572:	d002      	beq.n	800357a <I2C_Slave_ISR_DMA+0x146>
 8003574:	7dfb      	ldrb	r3, [r7, #23]
 8003576:	2b29      	cmp	r3, #41	; 0x29
 8003578:	d103      	bne.n	8003582 <I2C_Slave_ISR_DMA+0x14e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2221      	movs	r2, #33	; 0x21
 800357e:	631a      	str	r2, [r3, #48]	; 0x30
 8003580:	e008      	b.n	8003594 <I2C_Slave_ISR_DMA+0x160>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003582:	7dfb      	ldrb	r3, [r7, #23]
 8003584:	2b22      	cmp	r3, #34	; 0x22
 8003586:	d002      	beq.n	800358e <I2C_Slave_ISR_DMA+0x15a>
 8003588:	7dfb      	ldrb	r3, [r7, #23]
 800358a:	2b2a      	cmp	r3, #42	; 0x2a
 800358c:	d102      	bne.n	8003594 <I2C_Slave_ISR_DMA+0x160>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2222      	movs	r2, #34	; 0x22
 8003592:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003598:	4619      	mov	r1, r3
 800359a:	68f8      	ldr	r0, [r7, #12]
 800359c:	f000 fc14 	bl	8003dc8 <I2C_ITError>
      if (treatdmanack == 1U)
 80035a0:	e005      	b.n	80035ae <I2C_Slave_ISR_DMA+0x17a>
 80035a2:	e004      	b.n	80035ae <I2C_Slave_ISR_DMA+0x17a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	2210      	movs	r2, #16
 80035aa:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80035ac:	e00f      	b.n	80035ce <I2C_Slave_ISR_DMA+0x19a>
      if (treatdmanack == 1U)
 80035ae:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80035b0:	e00d      	b.n	80035ce <I2C_Slave_ISR_DMA+0x19a>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	f003 0308 	and.w	r3, r3, #8
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d008      	beq.n	80035ce <I2C_Slave_ISR_DMA+0x19a>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d003      	beq.n	80035ce <I2C_Slave_ISR_DMA+0x19a>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 80035c6:	68b9      	ldr	r1, [r7, #8]
 80035c8:	68f8      	ldr	r0, [r7, #12]
 80035ca:	f000 f8b1 	bl	8003730 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2200      	movs	r2, #0
 80035d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80035d6:	2300      	movs	r3, #0
}
 80035d8:	4618      	mov	r0, r3
 80035da:	3720      	adds	r7, #32
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}

080035e0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b086      	sub	sp, #24
 80035e4:	af02      	add	r7, sp, #8
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	4608      	mov	r0, r1
 80035ea:	4611      	mov	r1, r2
 80035ec:	461a      	mov	r2, r3
 80035ee:	4603      	mov	r3, r0
 80035f0:	817b      	strh	r3, [r7, #10]
 80035f2:	460b      	mov	r3, r1
 80035f4:	813b      	strh	r3, [r7, #8]
 80035f6:	4613      	mov	r3, r2
 80035f8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80035fa:	88fb      	ldrh	r3, [r7, #6]
 80035fc:	b2da      	uxtb	r2, r3
 80035fe:	8979      	ldrh	r1, [r7, #10]
 8003600:	4b20      	ldr	r3, [pc, #128]	; (8003684 <I2C_RequestMemoryWrite+0xa4>)
 8003602:	9300      	str	r3, [sp, #0]
 8003604:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003608:	68f8      	ldr	r0, [r7, #12]
 800360a:	f000 feef 	bl	80043ec <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800360e:	69fa      	ldr	r2, [r7, #28]
 8003610:	69b9      	ldr	r1, [r7, #24]
 8003612:	68f8      	ldr	r0, [r7, #12]
 8003614:	f000 fd80 	bl	8004118 <I2C_WaitOnTXISFlagUntilTimeout>
 8003618:	4603      	mov	r3, r0
 800361a:	2b00      	cmp	r3, #0
 800361c:	d001      	beq.n	8003622 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e02c      	b.n	800367c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003622:	88fb      	ldrh	r3, [r7, #6]
 8003624:	2b01      	cmp	r3, #1
 8003626:	d105      	bne.n	8003634 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003628:	893b      	ldrh	r3, [r7, #8]
 800362a:	b2da      	uxtb	r2, r3
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	629a      	str	r2, [r3, #40]	; 0x28
 8003632:	e015      	b.n	8003660 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003634:	893b      	ldrh	r3, [r7, #8]
 8003636:	0a1b      	lsrs	r3, r3, #8
 8003638:	b29b      	uxth	r3, r3
 800363a:	b2da      	uxtb	r2, r3
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003642:	69fa      	ldr	r2, [r7, #28]
 8003644:	69b9      	ldr	r1, [r7, #24]
 8003646:	68f8      	ldr	r0, [r7, #12]
 8003648:	f000 fd66 	bl	8004118 <I2C_WaitOnTXISFlagUntilTimeout>
 800364c:	4603      	mov	r3, r0
 800364e:	2b00      	cmp	r3, #0
 8003650:	d001      	beq.n	8003656 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e012      	b.n	800367c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003656:	893b      	ldrh	r3, [r7, #8]
 8003658:	b2da      	uxtb	r2, r3
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003660:	69fb      	ldr	r3, [r7, #28]
 8003662:	9300      	str	r3, [sp, #0]
 8003664:	69bb      	ldr	r3, [r7, #24]
 8003666:	2200      	movs	r2, #0
 8003668:	2180      	movs	r1, #128	; 0x80
 800366a:	68f8      	ldr	r0, [r7, #12]
 800366c:	f000 fd05 	bl	800407a <I2C_WaitOnFlagUntilTimeout>
 8003670:	4603      	mov	r3, r0
 8003672:	2b00      	cmp	r3, #0
 8003674:	d001      	beq.n	800367a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e000      	b.n	800367c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800367a:	2300      	movs	r3, #0
}
 800367c:	4618      	mov	r0, r3
 800367e:	3710      	adds	r7, #16
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}
 8003684:	80002000 	.word	0x80002000

08003688 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b086      	sub	sp, #24
 800368c:	af02      	add	r7, sp, #8
 800368e:	60f8      	str	r0, [r7, #12]
 8003690:	4608      	mov	r0, r1
 8003692:	4611      	mov	r1, r2
 8003694:	461a      	mov	r2, r3
 8003696:	4603      	mov	r3, r0
 8003698:	817b      	strh	r3, [r7, #10]
 800369a:	460b      	mov	r3, r1
 800369c:	813b      	strh	r3, [r7, #8]
 800369e:	4613      	mov	r3, r2
 80036a0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80036a2:	88fb      	ldrh	r3, [r7, #6]
 80036a4:	b2da      	uxtb	r2, r3
 80036a6:	8979      	ldrh	r1, [r7, #10]
 80036a8:	4b20      	ldr	r3, [pc, #128]	; (800372c <I2C_RequestMemoryRead+0xa4>)
 80036aa:	9300      	str	r3, [sp, #0]
 80036ac:	2300      	movs	r3, #0
 80036ae:	68f8      	ldr	r0, [r7, #12]
 80036b0:	f000 fe9c 	bl	80043ec <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036b4:	69fa      	ldr	r2, [r7, #28]
 80036b6:	69b9      	ldr	r1, [r7, #24]
 80036b8:	68f8      	ldr	r0, [r7, #12]
 80036ba:	f000 fd2d 	bl	8004118 <I2C_WaitOnTXISFlagUntilTimeout>
 80036be:	4603      	mov	r3, r0
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d001      	beq.n	80036c8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e02c      	b.n	8003722 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80036c8:	88fb      	ldrh	r3, [r7, #6]
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d105      	bne.n	80036da <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80036ce:	893b      	ldrh	r3, [r7, #8]
 80036d0:	b2da      	uxtb	r2, r3
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	629a      	str	r2, [r3, #40]	; 0x28
 80036d8:	e015      	b.n	8003706 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80036da:	893b      	ldrh	r3, [r7, #8]
 80036dc:	0a1b      	lsrs	r3, r3, #8
 80036de:	b29b      	uxth	r3, r3
 80036e0:	b2da      	uxtb	r2, r3
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036e8:	69fa      	ldr	r2, [r7, #28]
 80036ea:	69b9      	ldr	r1, [r7, #24]
 80036ec:	68f8      	ldr	r0, [r7, #12]
 80036ee:	f000 fd13 	bl	8004118 <I2C_WaitOnTXISFlagUntilTimeout>
 80036f2:	4603      	mov	r3, r0
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d001      	beq.n	80036fc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	e012      	b.n	8003722 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80036fc:	893b      	ldrh	r3, [r7, #8]
 80036fe:	b2da      	uxtb	r2, r3
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003706:	69fb      	ldr	r3, [r7, #28]
 8003708:	9300      	str	r3, [sp, #0]
 800370a:	69bb      	ldr	r3, [r7, #24]
 800370c:	2200      	movs	r2, #0
 800370e:	2140      	movs	r1, #64	; 0x40
 8003710:	68f8      	ldr	r0, [r7, #12]
 8003712:	f000 fcb2 	bl	800407a <I2C_WaitOnFlagUntilTimeout>
 8003716:	4603      	mov	r3, r0
 8003718:	2b00      	cmp	r3, #0
 800371a:	d001      	beq.n	8003720 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	e000      	b.n	8003722 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003720:	2300      	movs	r3, #0
}
 8003722:	4618      	mov	r0, r3
 8003724:	3710      	adds	r7, #16
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	80002000 	.word	0x80002000

08003730 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b084      	sub	sp, #16
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003740:	b2db      	uxtb	r3, r3
 8003742:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003746:	2b28      	cmp	r3, #40	; 0x28
 8003748:	d16a      	bne.n	8003820 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	699b      	ldr	r3, [r3, #24]
 8003750:	0c1b      	lsrs	r3, r3, #16
 8003752:	b2db      	uxtb	r3, r3
 8003754:	f003 0301 	and.w	r3, r3, #1
 8003758:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	699b      	ldr	r3, [r3, #24]
 8003760:	0c1b      	lsrs	r3, r3, #16
 8003762:	b29b      	uxth	r3, r3
 8003764:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003768:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	b29b      	uxth	r3, r3
 8003772:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003776:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	68db      	ldr	r3, [r3, #12]
 800377e:	b29b      	uxth	r3, r3
 8003780:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003784:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	68db      	ldr	r3, [r3, #12]
 800378a:	2b02      	cmp	r3, #2
 800378c:	d138      	bne.n	8003800 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800378e:	897b      	ldrh	r3, [r7, #10]
 8003790:	09db      	lsrs	r3, r3, #7
 8003792:	b29a      	uxth	r2, r3
 8003794:	89bb      	ldrh	r3, [r7, #12]
 8003796:	4053      	eors	r3, r2
 8003798:	b29b      	uxth	r3, r3
 800379a:	f003 0306 	and.w	r3, r3, #6
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d11c      	bne.n	80037dc <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80037a2:	897b      	ldrh	r3, [r7, #10]
 80037a4:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037aa:	1c5a      	adds	r2, r3, #1
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037b4:	2b02      	cmp	r3, #2
 80037b6:	d13b      	bne.n	8003830 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2200      	movs	r2, #0
 80037bc:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	2208      	movs	r2, #8
 80037c4:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2200      	movs	r2, #0
 80037ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80037ce:	89ba      	ldrh	r2, [r7, #12]
 80037d0:	7bfb      	ldrb	r3, [r7, #15]
 80037d2:	4619      	mov	r1, r3
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	f7ff f9c7 	bl	8002b68 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80037da:	e029      	b.n	8003830 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80037dc:	893b      	ldrh	r3, [r7, #8]
 80037de:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80037e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	f000 feb7 	bl	8004558 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2200      	movs	r2, #0
 80037ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80037f2:	89ba      	ldrh	r2, [r7, #12]
 80037f4:	7bfb      	ldrb	r3, [r7, #15]
 80037f6:	4619      	mov	r1, r3
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	f7ff f9b5 	bl	8002b68 <HAL_I2C_AddrCallback>
}
 80037fe:	e017      	b.n	8003830 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003800:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	f000 fea7 	bl	8004558 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003812:	89ba      	ldrh	r2, [r7, #12]
 8003814:	7bfb      	ldrb	r3, [r7, #15]
 8003816:	4619      	mov	r1, r3
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	f7ff f9a5 	bl	8002b68 <HAL_I2C_AddrCallback>
}
 800381e:	e007      	b.n	8003830 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	2208      	movs	r2, #8
 8003826:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2200      	movs	r2, #0
 800382c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8003830:	bf00      	nop
 8003832:	3710      	adds	r7, #16
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}

08003838 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b082      	sub	sp, #8
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2200      	movs	r2, #0
 8003844:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800384e:	b2db      	uxtb	r3, r3
 8003850:	2b21      	cmp	r3, #33	; 0x21
 8003852:	d115      	bne.n	8003880 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2220      	movs	r2, #32
 8003858:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2211      	movs	r2, #17
 8003860:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003868:	2101      	movs	r1, #1
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f000 fe74 	bl	8004558 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2200      	movs	r2, #0
 8003874:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	f7ff f94d 	bl	8002b18 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800387e:	e014      	b.n	80038aa <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2220      	movs	r2, #32
 8003884:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2212      	movs	r2, #18
 800388c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2200      	movs	r2, #0
 8003892:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003894:	2102      	movs	r1, #2
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f000 fe5e 	bl	8004558 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2200      	movs	r2, #0
 80038a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	f7ff f941 	bl	8002b2c <HAL_I2C_MasterRxCpltCallback>
}
 80038aa:	bf00      	nop
 80038ac:	3708      	adds	r7, #8
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}

080038b2 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80038b2:	b580      	push	{r7, lr}
 80038b4:	b084      	sub	sp, #16
 80038b6:	af00      	add	r7, sp, #0
 80038b8:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2200      	movs	r2, #0
 80038c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d008      	beq.n	80038e6 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80038e2:	601a      	str	r2, [r3, #0]
 80038e4:	e00c      	b.n	8003900 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d007      	beq.n	8003900 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80038fe:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003906:	b2db      	uxtb	r3, r3
 8003908:	2b29      	cmp	r3, #41	; 0x29
 800390a:	d112      	bne.n	8003932 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2228      	movs	r2, #40	; 0x28
 8003910:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2221      	movs	r2, #33	; 0x21
 8003918:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800391a:	2101      	movs	r1, #1
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	f000 fe1b 	bl	8004558 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2200      	movs	r2, #0
 8003926:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f7ff f908 	bl	8002b40 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003930:	e017      	b.n	8003962 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003938:	b2db      	uxtb	r3, r3
 800393a:	2b2a      	cmp	r3, #42	; 0x2a
 800393c:	d111      	bne.n	8003962 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2228      	movs	r2, #40	; 0x28
 8003942:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2222      	movs	r2, #34	; 0x22
 800394a:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800394c:	2102      	movs	r1, #2
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f000 fe02 	bl	8004558 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2200      	movs	r2, #0
 8003958:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	f7ff f8f9 	bl	8002b54 <HAL_I2C_SlaveRxCpltCallback>
}
 8003962:	bf00      	nop
 8003964:	3710      	adds	r7, #16
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
	...

0800396c <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b086      	sub	sp, #24
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	2220      	movs	r2, #32
 8003980:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003988:	b2db      	uxtb	r3, r3
 800398a:	2b21      	cmp	r3, #33	; 0x21
 800398c:	d107      	bne.n	800399e <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800398e:	2101      	movs	r1, #1
 8003990:	6878      	ldr	r0, [r7, #4]
 8003992:	f000 fde1 	bl	8004558 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2211      	movs	r2, #17
 800399a:	631a      	str	r2, [r3, #48]	; 0x30
 800399c:	e00c      	b.n	80039b8 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	2b22      	cmp	r3, #34	; 0x22
 80039a8:	d106      	bne.n	80039b8 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80039aa:	2102      	movs	r1, #2
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	f000 fdd3 	bl	8004558 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2212      	movs	r2, #18
 80039b6:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	6859      	ldr	r1, [r3, #4]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	4b4c      	ldr	r3, [pc, #304]	; (8003af4 <I2C_ITMasterCplt+0x188>)
 80039c4:	400b      	ands	r3, r1
 80039c6:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2200      	movs	r2, #0
 80039cc:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4a49      	ldr	r2, [pc, #292]	; (8003af8 <I2C_ITMasterCplt+0x18c>)
 80039d2:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	f003 0310 	and.w	r3, r3, #16
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d009      	beq.n	80039f2 <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	2210      	movs	r2, #16
 80039e4:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ea:	f043 0204 	orr.w	r2, r3, #4
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	2b60      	cmp	r3, #96	; 0x60
 80039fc:	d10a      	bne.n	8003a14 <I2C_ITMasterCplt+0xa8>
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	f003 0304 	and.w	r3, r3, #4
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d005      	beq.n	8003a14 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a0e:	b2db      	uxtb	r3, r3
 8003a10:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8003a12:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f000 faee 	bl	8003ff6 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a1e:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a26:	b2db      	uxtb	r3, r3
 8003a28:	2b60      	cmp	r3, #96	; 0x60
 8003a2a:	d002      	beq.n	8003a32 <I2C_ITMasterCplt+0xc6>
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d006      	beq.n	8003a40 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a36:	4619      	mov	r1, r3
 8003a38:	6878      	ldr	r0, [r7, #4]
 8003a3a:	f000 f9c5 	bl	8003dc8 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003a3e:	e054      	b.n	8003aea <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a46:	b2db      	uxtb	r3, r3
 8003a48:	2b21      	cmp	r3, #33	; 0x21
 8003a4a:	d124      	bne.n	8003a96 <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2220      	movs	r2, #32
 8003a50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2200      	movs	r2, #0
 8003a58:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	2b40      	cmp	r3, #64	; 0x40
 8003a64:	d10b      	bne.n	8003a7e <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f7ff f88e 	bl	8002b98 <HAL_I2C_MemTxCpltCallback>
}
 8003a7c:	e035      	b.n	8003aea <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2200      	movs	r2, #0
 8003a82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f7ff f842 	bl	8002b18 <HAL_I2C_MasterTxCpltCallback>
}
 8003a94:	e029      	b.n	8003aea <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	2b22      	cmp	r3, #34	; 0x22
 8003aa0:	d123      	bne.n	8003aea <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2220      	movs	r2, #32
 8003aa6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2200      	movs	r2, #0
 8003aae:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	2b40      	cmp	r3, #64	; 0x40
 8003aba:	d10b      	bne.n	8003ad4 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f7fd fb93 	bl	80011f8 <HAL_I2C_MemRxCpltCallback>
}
 8003ad2:	e00a      	b.n	8003aea <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	f7ff f821 	bl	8002b2c <HAL_I2C_MasterRxCpltCallback>
}
 8003aea:	bf00      	nop
 8003aec:	3718      	adds	r7, #24
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	bf00      	nop
 8003af4:	fe00e800 	.word	0xfe00e800
 8003af8:	ffff0000 	.word	0xffff0000

08003afc <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b086      	sub	sp, #24
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
 8003b04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b18:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	2220      	movs	r2, #32
 8003b20:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003b22:	7bfb      	ldrb	r3, [r7, #15]
 8003b24:	2b21      	cmp	r3, #33	; 0x21
 8003b26:	d002      	beq.n	8003b2e <I2C_ITSlaveCplt+0x32>
 8003b28:	7bfb      	ldrb	r3, [r7, #15]
 8003b2a:	2b29      	cmp	r3, #41	; 0x29
 8003b2c:	d108      	bne.n	8003b40 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003b2e:	f248 0101 	movw	r1, #32769	; 0x8001
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f000 fd10 	bl	8004558 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2221      	movs	r2, #33	; 0x21
 8003b3c:	631a      	str	r2, [r3, #48]	; 0x30
 8003b3e:	e019      	b.n	8003b74 <I2C_ITSlaveCplt+0x78>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003b40:	7bfb      	ldrb	r3, [r7, #15]
 8003b42:	2b22      	cmp	r3, #34	; 0x22
 8003b44:	d002      	beq.n	8003b4c <I2C_ITSlaveCplt+0x50>
 8003b46:	7bfb      	ldrb	r3, [r7, #15]
 8003b48:	2b2a      	cmp	r3, #42	; 0x2a
 8003b4a:	d108      	bne.n	8003b5e <I2C_ITSlaveCplt+0x62>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003b4c:	f248 0102 	movw	r1, #32770	; 0x8002
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f000 fd01 	bl	8004558 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2222      	movs	r2, #34	; 0x22
 8003b5a:	631a      	str	r2, [r3, #48]	; 0x30
 8003b5c:	e00a      	b.n	8003b74 <I2C_ITSlaveCplt+0x78>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8003b5e:	7bfb      	ldrb	r3, [r7, #15]
 8003b60:	2b28      	cmp	r3, #40	; 0x28
 8003b62:	d107      	bne.n	8003b74 <I2C_ITSlaveCplt+0x78>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8003b64:	f248 0103 	movw	r1, #32771	; 0x8003
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f000 fcf5 	bl	8004558 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	685a      	ldr	r2, [r3, #4]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b82:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	6859      	ldr	r1, [r3, #4]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	4b62      	ldr	r3, [pc, #392]	; (8003d18 <I2C_ITSlaveCplt+0x21c>)
 8003b90:	400b      	ands	r3, r1
 8003b92:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003b94:	6878      	ldr	r0, [r7, #4]
 8003b96:	f000 fa2e 	bl	8003ff6 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d013      	beq.n	8003bcc <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003bb2:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d01f      	beq.n	8003bfc <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	b29a      	uxth	r2, r3
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003bca:	e017      	b.n	8003bfc <I2C_ITSlaveCplt+0x100>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d012      	beq.n	8003bfc <I2C_ITSlaveCplt+0x100>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003be4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d006      	beq.n	8003bfc <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	b29a      	uxth	r2, r3
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	f003 0304 	and.w	r3, r3, #4
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d020      	beq.n	8003c48 <I2C_ITSlaveCplt+0x14c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	f023 0304 	bic.w	r3, r3, #4
 8003c0c:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c18:	b2d2      	uxtb	r2, r2
 8003c1a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c20:	1c5a      	adds	r2, r3, #1
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d00c      	beq.n	8003c48 <I2C_ITSlaveCplt+0x14c>
    {
      hi2c->XferSize--;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c32:	3b01      	subs	r3, #1
 8003c34:	b29a      	uxth	r2, r3
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c3e:	b29b      	uxth	r3, r3
 8003c40:	3b01      	subs	r3, #1
 8003c42:	b29a      	uxth	r2, r3
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d005      	beq.n	8003c5e <I2C_ITSlaveCplt+0x162>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c56:	f043 0204 	orr.w	r2, r3, #4
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2200      	movs	r2, #0
 8003c62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d010      	beq.n	8003c96 <I2C_ITSlaveCplt+0x19a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c78:	4619      	mov	r1, r3
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f000 f8a4 	bl	8003dc8 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	2b28      	cmp	r3, #40	; 0x28
 8003c8a:	d141      	bne.n	8003d10 <I2C_ITSlaveCplt+0x214>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8003c8c:	6979      	ldr	r1, [r7, #20]
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f000 f846 	bl	8003d20 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003c94:	e03c      	b.n	8003d10 <I2C_ITSlaveCplt+0x214>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c9a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003c9e:	d014      	beq.n	8003cca <I2C_ITSlaveCplt+0x1ce>
    I2C_ITSlaveSeqCplt(hi2c);
 8003ca0:	6878      	ldr	r0, [r7, #4]
 8003ca2:	f7ff fe06 	bl	80038b2 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	4a1c      	ldr	r2, [pc, #112]	; (8003d1c <I2C_ITSlaveCplt+0x220>)
 8003caa:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2220      	movs	r2, #32
 8003cb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f7fe ff5e 	bl	8002b84 <HAL_I2C_ListenCpltCallback>
}
 8003cc8:	e022      	b.n	8003d10 <I2C_ITSlaveCplt+0x214>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	2b22      	cmp	r3, #34	; 0x22
 8003cd4:	d10e      	bne.n	8003cf4 <I2C_ITSlaveCplt+0x1f8>
    hi2c->State = HAL_I2C_STATE_READY;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2220      	movs	r2, #32
 8003cda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	f7fe ff31 	bl	8002b54 <HAL_I2C_SlaveRxCpltCallback>
}
 8003cf2:	e00d      	b.n	8003d10 <I2C_ITSlaveCplt+0x214>
    hi2c->State = HAL_I2C_STATE_READY;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2220      	movs	r2, #32
 8003cf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2200      	movs	r2, #0
 8003d06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	f7fe ff18 	bl	8002b40 <HAL_I2C_SlaveTxCpltCallback>
}
 8003d10:	bf00      	nop
 8003d12:	3718      	adds	r7, #24
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}
 8003d18:	fe00e800 	.word	0xfe00e800
 8003d1c:	ffff0000 	.word	0xffff0000

08003d20 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b082      	sub	sp, #8
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
 8003d28:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	4a25      	ldr	r2, [pc, #148]	; (8003dc4 <I2C_ITListenCplt+0xa4>)
 8003d2e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2200      	movs	r2, #0
 8003d34:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2220      	movs	r2, #32
 8003d3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2200      	movs	r2, #0
 8003d42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	f003 0304 	and.w	r3, r3, #4
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d022      	beq.n	8003d9c <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d60:	b2d2      	uxtb	r2, r2
 8003d62:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d68:	1c5a      	adds	r2, r3, #1
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d012      	beq.n	8003d9c <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d7a:	3b01      	subs	r3, #1
 8003d7c:	b29a      	uxth	r2, r3
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d86:	b29b      	uxth	r3, r3
 8003d88:	3b01      	subs	r3, #1
 8003d8a:	b29a      	uxth	r2, r3
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d94:	f043 0204 	orr.w	r2, r3, #4
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003d9c:	f248 0103 	movw	r1, #32771	; 0x8003
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	f000 fbd9 	bl	8004558 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	2210      	movs	r2, #16
 8003dac:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2200      	movs	r2, #0
 8003db2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f7fe fee4 	bl	8002b84 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8003dbc:	bf00      	nop
 8003dbe:	3708      	adds	r7, #8
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}
 8003dc4:	ffff0000 	.word	0xffff0000

08003dc8 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b084      	sub	sp, #16
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
 8003dd0:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003dd8:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	4a6d      	ldr	r2, [pc, #436]	; (8003f9c <I2C_ITError+0x1d4>)
 8003de6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2200      	movs	r2, #0
 8003dec:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	431a      	orrs	r2, r3
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8003dfa:	7bfb      	ldrb	r3, [r7, #15]
 8003dfc:	2b28      	cmp	r3, #40	; 0x28
 8003dfe:	d005      	beq.n	8003e0c <I2C_ITError+0x44>
 8003e00:	7bfb      	ldrb	r3, [r7, #15]
 8003e02:	2b29      	cmp	r3, #41	; 0x29
 8003e04:	d002      	beq.n	8003e0c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8003e06:	7bfb      	ldrb	r3, [r7, #15]
 8003e08:	2b2a      	cmp	r3, #42	; 0x2a
 8003e0a:	d10b      	bne.n	8003e24 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003e0c:	2103      	movs	r1, #3
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f000 fba2 	bl	8004558 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2228      	movs	r2, #40	; 0x28
 8003e18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	4a60      	ldr	r2, [pc, #384]	; (8003fa0 <I2C_ITError+0x1d8>)
 8003e20:	635a      	str	r2, [r3, #52]	; 0x34
 8003e22:	e030      	b.n	8003e86 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003e24:	f248 0103 	movw	r1, #32771	; 0x8003
 8003e28:	6878      	ldr	r0, [r7, #4]
 8003e2a:	f000 fb95 	bl	8004558 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f000 f8e1 	bl	8003ff6 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	2b60      	cmp	r3, #96	; 0x60
 8003e3e:	d01f      	beq.n	8003e80 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2220      	movs	r2, #32
 8003e44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	699b      	ldr	r3, [r3, #24]
 8003e4e:	f003 0320 	and.w	r3, r3, #32
 8003e52:	2b20      	cmp	r3, #32
 8003e54:	d114      	bne.n	8003e80 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	699b      	ldr	r3, [r3, #24]
 8003e5c:	f003 0310 	and.w	r3, r3, #16
 8003e60:	2b10      	cmp	r3, #16
 8003e62:	d109      	bne.n	8003e78 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	2210      	movs	r2, #16
 8003e6a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e70:	f043 0204 	orr.w	r2, r3, #4
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	2220      	movs	r2, #32
 8003e7e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2200      	movs	r2, #0
 8003e84:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e8a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d039      	beq.n	8003f08 <I2C_ITError+0x140>
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	2b11      	cmp	r3, #17
 8003e98:	d002      	beq.n	8003ea0 <I2C_ITError+0xd8>
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	2b21      	cmp	r3, #33	; 0x21
 8003e9e:	d133      	bne.n	8003f08 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003eaa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003eae:	d107      	bne.n	8003ec0 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003ebe:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f7fe f8bb 	bl	8002040 <HAL_DMA_GetState>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d017      	beq.n	8003f00 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ed4:	4a33      	ldr	r2, [pc, #204]	; (8003fa4 <I2C_ITError+0x1dc>)
 8003ed6:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2200      	movs	r2, #0
 8003edc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f7fe f86a 	bl	8001fbe <HAL_DMA_Abort_IT>
 8003eea:	4603      	mov	r3, r0
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d04d      	beq.n	8003f8c <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003efa:	4610      	mov	r0, r2
 8003efc:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003efe:	e045      	b.n	8003f8c <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	f000 f851 	bl	8003fa8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003f06:	e041      	b.n	8003f8c <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d039      	beq.n	8003f84 <I2C_ITError+0x1bc>
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	2b12      	cmp	r3, #18
 8003f14:	d002      	beq.n	8003f1c <I2C_ITError+0x154>
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	2b22      	cmp	r3, #34	; 0x22
 8003f1a:	d133      	bne.n	8003f84 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f2a:	d107      	bne.n	8003f3c <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f3a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f40:	4618      	mov	r0, r3
 8003f42:	f7fe f87d 	bl	8002040 <HAL_DMA_GetState>
 8003f46:	4603      	mov	r3, r0
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d017      	beq.n	8003f7c <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f50:	4a14      	ldr	r2, [pc, #80]	; (8003fa4 <I2C_ITError+0x1dc>)
 8003f52:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2200      	movs	r2, #0
 8003f58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f60:	4618      	mov	r0, r3
 8003f62:	f7fe f82c 	bl	8001fbe <HAL_DMA_Abort_IT>
 8003f66:	4603      	mov	r3, r0
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d011      	beq.n	8003f90 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f72:	687a      	ldr	r2, [r7, #4]
 8003f74:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003f76:	4610      	mov	r0, r2
 8003f78:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003f7a:	e009      	b.n	8003f90 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	f000 f813 	bl	8003fa8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003f82:	e005      	b.n	8003f90 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8003f84:	6878      	ldr	r0, [r7, #4]
 8003f86:	f000 f80f 	bl	8003fa8 <I2C_TreatErrorCallback>
  }
}
 8003f8a:	e002      	b.n	8003f92 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003f8c:	bf00      	nop
 8003f8e:	e000      	b.n	8003f92 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003f90:	bf00      	nop
}
 8003f92:	bf00      	nop
 8003f94:	3710      	adds	r7, #16
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}
 8003f9a:	bf00      	nop
 8003f9c:	ffff0000 	.word	0xffff0000
 8003fa0:	08002e21 	.word	0x08002e21
 8003fa4:	0800403f 	.word	0x0800403f

08003fa8 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b082      	sub	sp, #8
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fb6:	b2db      	uxtb	r3, r3
 8003fb8:	2b60      	cmp	r3, #96	; 0x60
 8003fba:	d10e      	bne.n	8003fda <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2220      	movs	r2, #32
 8003fc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f7fe fdf4 	bl	8002bc0 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003fd8:	e009      	b.n	8003fee <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	f7fe fddf 	bl	8002bac <HAL_I2C_ErrorCallback>
}
 8003fee:	bf00      	nop
 8003ff0:	3708      	adds	r7, #8
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}

08003ff6 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003ff6:	b480      	push	{r7}
 8003ff8:	b083      	sub	sp, #12
 8003ffa:	af00      	add	r7, sp, #0
 8003ffc:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	699b      	ldr	r3, [r3, #24]
 8004004:	f003 0302 	and.w	r3, r3, #2
 8004008:	2b02      	cmp	r3, #2
 800400a:	d103      	bne.n	8004014 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	2200      	movs	r2, #0
 8004012:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	699b      	ldr	r3, [r3, #24]
 800401a:	f003 0301 	and.w	r3, r3, #1
 800401e:	2b01      	cmp	r3, #1
 8004020:	d007      	beq.n	8004032 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	699a      	ldr	r2, [r3, #24]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f042 0201 	orr.w	r2, r2, #1
 8004030:	619a      	str	r2, [r3, #24]
  }
}
 8004032:	bf00      	nop
 8004034:	370c      	adds	r7, #12
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr

0800403e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800403e:	b580      	push	{r7, lr}
 8004040:	b084      	sub	sp, #16
 8004042:	af00      	add	r7, sp, #0
 8004044:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800404a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004050:	2b00      	cmp	r3, #0
 8004052:	d003      	beq.n	800405c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004058:	2200      	movs	r2, #0
 800405a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004060:	2b00      	cmp	r3, #0
 8004062:	d003      	beq.n	800406c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004068:	2200      	movs	r2, #0
 800406a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 800406c:	68f8      	ldr	r0, [r7, #12]
 800406e:	f7ff ff9b 	bl	8003fa8 <I2C_TreatErrorCallback>
}
 8004072:	bf00      	nop
 8004074:	3710      	adds	r7, #16
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}

0800407a <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800407a:	b580      	push	{r7, lr}
 800407c:	b084      	sub	sp, #16
 800407e:	af00      	add	r7, sp, #0
 8004080:	60f8      	str	r0, [r7, #12]
 8004082:	60b9      	str	r1, [r7, #8]
 8004084:	603b      	str	r3, [r7, #0]
 8004086:	4613      	mov	r3, r2
 8004088:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800408a:	e031      	b.n	80040f0 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004092:	d02d      	beq.n	80040f0 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004094:	f7fd fe06 	bl	8001ca4 <HAL_GetTick>
 8004098:	4602      	mov	r2, r0
 800409a:	69bb      	ldr	r3, [r7, #24]
 800409c:	1ad3      	subs	r3, r2, r3
 800409e:	683a      	ldr	r2, [r7, #0]
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d302      	bcc.n	80040aa <I2C_WaitOnFlagUntilTimeout+0x30>
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d122      	bne.n	80040f0 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	699a      	ldr	r2, [r3, #24]
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	4013      	ands	r3, r2
 80040b4:	68ba      	ldr	r2, [r7, #8]
 80040b6:	429a      	cmp	r2, r3
 80040b8:	bf0c      	ite	eq
 80040ba:	2301      	moveq	r3, #1
 80040bc:	2300      	movne	r3, #0
 80040be:	b2db      	uxtb	r3, r3
 80040c0:	461a      	mov	r2, r3
 80040c2:	79fb      	ldrb	r3, [r7, #7]
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d113      	bne.n	80040f0 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040cc:	f043 0220 	orr.w	r2, r3, #32
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2220      	movs	r2, #32
 80040d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2200      	movs	r2, #0
 80040e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2200      	movs	r2, #0
 80040e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	e00f      	b.n	8004110 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	699a      	ldr	r2, [r3, #24]
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	4013      	ands	r3, r2
 80040fa:	68ba      	ldr	r2, [r7, #8]
 80040fc:	429a      	cmp	r2, r3
 80040fe:	bf0c      	ite	eq
 8004100:	2301      	moveq	r3, #1
 8004102:	2300      	movne	r3, #0
 8004104:	b2db      	uxtb	r3, r3
 8004106:	461a      	mov	r2, r3
 8004108:	79fb      	ldrb	r3, [r7, #7]
 800410a:	429a      	cmp	r2, r3
 800410c:	d0be      	beq.n	800408c <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800410e:	2300      	movs	r3, #0
}
 8004110:	4618      	mov	r0, r3
 8004112:	3710      	adds	r7, #16
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}

08004118 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b084      	sub	sp, #16
 800411c:	af00      	add	r7, sp, #0
 800411e:	60f8      	str	r0, [r7, #12]
 8004120:	60b9      	str	r1, [r7, #8]
 8004122:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004124:	e033      	b.n	800418e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	68b9      	ldr	r1, [r7, #8]
 800412a:	68f8      	ldr	r0, [r7, #12]
 800412c:	f000 f87e 	bl	800422c <I2C_IsErrorOccurred>
 8004130:	4603      	mov	r3, r0
 8004132:	2b00      	cmp	r3, #0
 8004134:	d001      	beq.n	800413a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e031      	b.n	800419e <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004140:	d025      	beq.n	800418e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004142:	f7fd fdaf 	bl	8001ca4 <HAL_GetTick>
 8004146:	4602      	mov	r2, r0
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	1ad3      	subs	r3, r2, r3
 800414c:	68ba      	ldr	r2, [r7, #8]
 800414e:	429a      	cmp	r2, r3
 8004150:	d302      	bcc.n	8004158 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d11a      	bne.n	800418e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	699b      	ldr	r3, [r3, #24]
 800415e:	f003 0302 	and.w	r3, r3, #2
 8004162:	2b02      	cmp	r3, #2
 8004164:	d013      	beq.n	800418e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800416a:	f043 0220 	orr.w	r2, r3, #32
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2220      	movs	r2, #32
 8004176:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2200      	movs	r2, #0
 800417e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2200      	movs	r2, #0
 8004186:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e007      	b.n	800419e <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	699b      	ldr	r3, [r3, #24]
 8004194:	f003 0302 	and.w	r3, r3, #2
 8004198:	2b02      	cmp	r3, #2
 800419a:	d1c4      	bne.n	8004126 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800419c:	2300      	movs	r3, #0
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3710      	adds	r7, #16
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}

080041a6 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80041a6:	b580      	push	{r7, lr}
 80041a8:	b084      	sub	sp, #16
 80041aa:	af00      	add	r7, sp, #0
 80041ac:	60f8      	str	r0, [r7, #12]
 80041ae:	60b9      	str	r1, [r7, #8]
 80041b0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80041b2:	e02f      	b.n	8004214 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80041b4:	687a      	ldr	r2, [r7, #4]
 80041b6:	68b9      	ldr	r1, [r7, #8]
 80041b8:	68f8      	ldr	r0, [r7, #12]
 80041ba:	f000 f837 	bl	800422c <I2C_IsErrorOccurred>
 80041be:	4603      	mov	r3, r0
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d001      	beq.n	80041c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	e02d      	b.n	8004224 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041c8:	f7fd fd6c 	bl	8001ca4 <HAL_GetTick>
 80041cc:	4602      	mov	r2, r0
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	1ad3      	subs	r3, r2, r3
 80041d2:	68ba      	ldr	r2, [r7, #8]
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d302      	bcc.n	80041de <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d11a      	bne.n	8004214 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	699b      	ldr	r3, [r3, #24]
 80041e4:	f003 0320 	and.w	r3, r3, #32
 80041e8:	2b20      	cmp	r3, #32
 80041ea:	d013      	beq.n	8004214 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041f0:	f043 0220 	orr.w	r2, r3, #32
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2220      	movs	r2, #32
 80041fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2200      	movs	r2, #0
 8004204:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	2200      	movs	r2, #0
 800420c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	e007      	b.n	8004224 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	699b      	ldr	r3, [r3, #24]
 800421a:	f003 0320 	and.w	r3, r3, #32
 800421e:	2b20      	cmp	r3, #32
 8004220:	d1c8      	bne.n	80041b4 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004222:	2300      	movs	r3, #0
}
 8004224:	4618      	mov	r0, r3
 8004226:	3710      	adds	r7, #16
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}

0800422c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b08a      	sub	sp, #40	; 0x28
 8004230:	af00      	add	r7, sp, #0
 8004232:	60f8      	str	r0, [r7, #12]
 8004234:	60b9      	str	r1, [r7, #8]
 8004236:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004238:	2300      	movs	r3, #0
 800423a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	699b      	ldr	r3, [r3, #24]
 8004244:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004246:	2300      	movs	r3, #0
 8004248:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800424e:	69bb      	ldr	r3, [r7, #24]
 8004250:	f003 0310 	and.w	r3, r3, #16
 8004254:	2b00      	cmp	r3, #0
 8004256:	d068      	beq.n	800432a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	2210      	movs	r2, #16
 800425e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004260:	e049      	b.n	80042f6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004268:	d045      	beq.n	80042f6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800426a:	f7fd fd1b 	bl	8001ca4 <HAL_GetTick>
 800426e:	4602      	mov	r2, r0
 8004270:	69fb      	ldr	r3, [r7, #28]
 8004272:	1ad3      	subs	r3, r2, r3
 8004274:	68ba      	ldr	r2, [r7, #8]
 8004276:	429a      	cmp	r2, r3
 8004278:	d302      	bcc.n	8004280 <I2C_IsErrorOccurred+0x54>
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d13a      	bne.n	80042f6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800428a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004292:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	699b      	ldr	r3, [r3, #24]
 800429a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800429e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042a2:	d121      	bne.n	80042e8 <I2C_IsErrorOccurred+0xbc>
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80042aa:	d01d      	beq.n	80042e8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80042ac:	7cfb      	ldrb	r3, [r7, #19]
 80042ae:	2b20      	cmp	r3, #32
 80042b0:	d01a      	beq.n	80042e8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	685a      	ldr	r2, [r3, #4]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80042c0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80042c2:	f7fd fcef 	bl	8001ca4 <HAL_GetTick>
 80042c6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80042c8:	e00e      	b.n	80042e8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80042ca:	f7fd fceb 	bl	8001ca4 <HAL_GetTick>
 80042ce:	4602      	mov	r2, r0
 80042d0:	69fb      	ldr	r3, [r7, #28]
 80042d2:	1ad3      	subs	r3, r2, r3
 80042d4:	2b19      	cmp	r3, #25
 80042d6:	d907      	bls.n	80042e8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80042d8:	6a3b      	ldr	r3, [r7, #32]
 80042da:	f043 0320 	orr.w	r3, r3, #32
 80042de:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80042e6:	e006      	b.n	80042f6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	699b      	ldr	r3, [r3, #24]
 80042ee:	f003 0320 	and.w	r3, r3, #32
 80042f2:	2b20      	cmp	r3, #32
 80042f4:	d1e9      	bne.n	80042ca <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	699b      	ldr	r3, [r3, #24]
 80042fc:	f003 0320 	and.w	r3, r3, #32
 8004300:	2b20      	cmp	r3, #32
 8004302:	d003      	beq.n	800430c <I2C_IsErrorOccurred+0xe0>
 8004304:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004308:	2b00      	cmp	r3, #0
 800430a:	d0aa      	beq.n	8004262 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800430c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004310:	2b00      	cmp	r3, #0
 8004312:	d103      	bne.n	800431c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	2220      	movs	r2, #32
 800431a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800431c:	6a3b      	ldr	r3, [r7, #32]
 800431e:	f043 0304 	orr.w	r3, r3, #4
 8004322:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	699b      	ldr	r3, [r3, #24]
 8004330:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004332:	69bb      	ldr	r3, [r7, #24]
 8004334:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004338:	2b00      	cmp	r3, #0
 800433a:	d00b      	beq.n	8004354 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800433c:	6a3b      	ldr	r3, [r7, #32]
 800433e:	f043 0301 	orr.w	r3, r3, #1
 8004342:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f44f 7280 	mov.w	r2, #256	; 0x100
 800434c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004354:	69bb      	ldr	r3, [r7, #24]
 8004356:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800435a:	2b00      	cmp	r3, #0
 800435c:	d00b      	beq.n	8004376 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800435e:	6a3b      	ldr	r3, [r7, #32]
 8004360:	f043 0308 	orr.w	r3, r3, #8
 8004364:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800436e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004376:	69bb      	ldr	r3, [r7, #24]
 8004378:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800437c:	2b00      	cmp	r3, #0
 800437e:	d00b      	beq.n	8004398 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004380:	6a3b      	ldr	r3, [r7, #32]
 8004382:	f043 0302 	orr.w	r3, r3, #2
 8004386:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004390:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004398:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800439c:	2b00      	cmp	r3, #0
 800439e:	d01c      	beq.n	80043da <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80043a0:	68f8      	ldr	r0, [r7, #12]
 80043a2:	f7ff fe28 	bl	8003ff6 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	6859      	ldr	r1, [r3, #4]
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	4b0d      	ldr	r3, [pc, #52]	; (80043e8 <I2C_IsErrorOccurred+0x1bc>)
 80043b2:	400b      	ands	r3, r1
 80043b4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043ba:	6a3b      	ldr	r3, [r7, #32]
 80043bc:	431a      	orrs	r2, r3
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2220      	movs	r2, #32
 80043c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2200      	movs	r2, #0
 80043ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2200      	movs	r2, #0
 80043d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80043da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3728      	adds	r7, #40	; 0x28
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}
 80043e6:	bf00      	nop
 80043e8:	fe00e800 	.word	0xfe00e800

080043ec <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b087      	sub	sp, #28
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	60f8      	str	r0, [r7, #12]
 80043f4:	607b      	str	r3, [r7, #4]
 80043f6:	460b      	mov	r3, r1
 80043f8:	817b      	strh	r3, [r7, #10]
 80043fa:	4613      	mov	r3, r2
 80043fc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80043fe:	897b      	ldrh	r3, [r7, #10]
 8004400:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004404:	7a7b      	ldrb	r3, [r7, #9]
 8004406:	041b      	lsls	r3, r3, #16
 8004408:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800440c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004412:	6a3b      	ldr	r3, [r7, #32]
 8004414:	4313      	orrs	r3, r2
 8004416:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800441a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	685a      	ldr	r2, [r3, #4]
 8004422:	6a3b      	ldr	r3, [r7, #32]
 8004424:	0d5b      	lsrs	r3, r3, #21
 8004426:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800442a:	4b08      	ldr	r3, [pc, #32]	; (800444c <I2C_TransferConfig+0x60>)
 800442c:	430b      	orrs	r3, r1
 800442e:	43db      	mvns	r3, r3
 8004430:	ea02 0103 	and.w	r1, r2, r3
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	697a      	ldr	r2, [r7, #20]
 800443a:	430a      	orrs	r2, r1
 800443c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800443e:	bf00      	nop
 8004440:	371c      	adds	r7, #28
 8004442:	46bd      	mov	sp, r7
 8004444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004448:	4770      	bx	lr
 800444a:	bf00      	nop
 800444c:	03ff63ff 	.word	0x03ff63ff

08004450 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004450:	b480      	push	{r7}
 8004452:	b085      	sub	sp, #20
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
 8004458:	460b      	mov	r3, r1
 800445a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800445c:	2300      	movs	r3, #0
 800445e:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004464:	4a39      	ldr	r2, [pc, #228]	; (800454c <I2C_Enable_IRQ+0xfc>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d032      	beq.n	80044d0 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800446e:	4a38      	ldr	r2, [pc, #224]	; (8004550 <I2C_Enable_IRQ+0x100>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d02d      	beq.n	80044d0 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8004478:	4a36      	ldr	r2, [pc, #216]	; (8004554 <I2C_Enable_IRQ+0x104>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d028      	beq.n	80044d0 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800447e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004482:	2b00      	cmp	r3, #0
 8004484:	da03      	bge.n	800448e <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800448c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800448e:	887b      	ldrh	r3, [r7, #2]
 8004490:	f003 0301 	and.w	r3, r3, #1
 8004494:	2b00      	cmp	r3, #0
 8004496:	d003      	beq.n	80044a0 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800449e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80044a0:	887b      	ldrh	r3, [r7, #2]
 80044a2:	f003 0302 	and.w	r3, r3, #2
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d003      	beq.n	80044b2 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 80044b0:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80044b2:	887b      	ldrh	r3, [r7, #2]
 80044b4:	2b10      	cmp	r3, #16
 80044b6:	d103      	bne.n	80044c0 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80044be:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80044c0:	887b      	ldrh	r3, [r7, #2]
 80044c2:	2b20      	cmp	r3, #32
 80044c4:	d133      	bne.n	800452e <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	f043 0320 	orr.w	r3, r3, #32
 80044cc:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80044ce:	e02e      	b.n	800452e <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80044d0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	da03      	bge.n	80044e0 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80044de:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80044e0:	887b      	ldrh	r3, [r7, #2]
 80044e2:	f003 0301 	and.w	r3, r3, #1
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d003      	beq.n	80044f2 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 80044f0:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80044f2:	887b      	ldrh	r3, [r7, #2]
 80044f4:	f003 0302 	and.w	r3, r3, #2
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d003      	beq.n	8004504 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8004502:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004504:	887b      	ldrh	r3, [r7, #2]
 8004506:	2b10      	cmp	r3, #16
 8004508:	d103      	bne.n	8004512 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8004510:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004512:	887b      	ldrh	r3, [r7, #2]
 8004514:	2b20      	cmp	r3, #32
 8004516:	d103      	bne.n	8004520 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800451e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004520:	887b      	ldrh	r3, [r7, #2]
 8004522:	2b40      	cmp	r3, #64	; 0x40
 8004524:	d103      	bne.n	800452e <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800452c:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	6819      	ldr	r1, [r3, #0]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	68fa      	ldr	r2, [r7, #12]
 800453a:	430a      	orrs	r2, r1
 800453c:	601a      	str	r2, [r3, #0]
}
 800453e:	bf00      	nop
 8004540:	3714      	adds	r7, #20
 8004542:	46bd      	mov	sp, r7
 8004544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004548:	4770      	bx	lr
 800454a:	bf00      	nop
 800454c:	08003011 	.word	0x08003011
 8004550:	08003435 	.word	0x08003435
 8004554:	080031e9 	.word	0x080031e9

08004558 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004558:	b480      	push	{r7}
 800455a:	b085      	sub	sp, #20
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	460b      	mov	r3, r1
 8004562:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004564:	2300      	movs	r3, #0
 8004566:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004568:	887b      	ldrh	r3, [r7, #2]
 800456a:	f003 0301 	and.w	r3, r3, #1
 800456e:	2b00      	cmp	r3, #0
 8004570:	d00f      	beq.n	8004592 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8004578:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004580:	b2db      	uxtb	r3, r3
 8004582:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004586:	2b28      	cmp	r3, #40	; 0x28
 8004588:	d003      	beq.n	8004592 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8004590:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004592:	887b      	ldrh	r3, [r7, #2]
 8004594:	f003 0302 	and.w	r3, r3, #2
 8004598:	2b00      	cmp	r3, #0
 800459a:	d00f      	beq.n	80045bc <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80045a2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045aa:	b2db      	uxtb	r3, r3
 80045ac:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80045b0:	2b28      	cmp	r3, #40	; 0x28
 80045b2:	d003      	beq.n	80045bc <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80045ba:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80045bc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	da03      	bge.n	80045cc <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80045ca:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80045cc:	887b      	ldrh	r3, [r7, #2]
 80045ce:	2b10      	cmp	r3, #16
 80045d0:	d103      	bne.n	80045da <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80045d8:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80045da:	887b      	ldrh	r3, [r7, #2]
 80045dc:	2b20      	cmp	r3, #32
 80045de:	d103      	bne.n	80045e8 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	f043 0320 	orr.w	r3, r3, #32
 80045e6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80045e8:	887b      	ldrh	r3, [r7, #2]
 80045ea:	2b40      	cmp	r3, #64	; 0x40
 80045ec:	d103      	bne.n	80045f6 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80045f4:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	6819      	ldr	r1, [r3, #0]
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	43da      	mvns	r2, r3
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	400a      	ands	r2, r1
 8004606:	601a      	str	r2, [r3, #0]
}
 8004608:	bf00      	nop
 800460a:	3714      	adds	r7, #20
 800460c:	46bd      	mov	sp, r7
 800460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004612:	4770      	bx	lr

08004614 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004614:	b480      	push	{r7}
 8004616:	b083      	sub	sp, #12
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
 800461c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004624:	b2db      	uxtb	r3, r3
 8004626:	2b20      	cmp	r3, #32
 8004628:	d138      	bne.n	800469c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004630:	2b01      	cmp	r3, #1
 8004632:	d101      	bne.n	8004638 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004634:	2302      	movs	r3, #2
 8004636:	e032      	b.n	800469e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2201      	movs	r2, #1
 800463c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2224      	movs	r2, #36	; 0x24
 8004644:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f022 0201 	bic.w	r2, r2, #1
 8004656:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004666:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	6819      	ldr	r1, [r3, #0]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	683a      	ldr	r2, [r7, #0]
 8004674:	430a      	orrs	r2, r1
 8004676:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f042 0201 	orr.w	r2, r2, #1
 8004686:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2220      	movs	r2, #32
 800468c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2200      	movs	r2, #0
 8004694:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004698:	2300      	movs	r3, #0
 800469a:	e000      	b.n	800469e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800469c:	2302      	movs	r3, #2
  }
}
 800469e:	4618      	mov	r0, r3
 80046a0:	370c      	adds	r7, #12
 80046a2:	46bd      	mov	sp, r7
 80046a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a8:	4770      	bx	lr

080046aa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80046aa:	b480      	push	{r7}
 80046ac:	b085      	sub	sp, #20
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	6078      	str	r0, [r7, #4]
 80046b2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046ba:	b2db      	uxtb	r3, r3
 80046bc:	2b20      	cmp	r3, #32
 80046be:	d139      	bne.n	8004734 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	d101      	bne.n	80046ce <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80046ca:	2302      	movs	r3, #2
 80046cc:	e033      	b.n	8004736 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2201      	movs	r2, #1
 80046d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2224      	movs	r2, #36	; 0x24
 80046da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f022 0201 	bic.w	r2, r2, #1
 80046ec:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80046fc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	021b      	lsls	r3, r3, #8
 8004702:	68fa      	ldr	r2, [r7, #12]
 8004704:	4313      	orrs	r3, r2
 8004706:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	68fa      	ldr	r2, [r7, #12]
 800470e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f042 0201 	orr.w	r2, r2, #1
 800471e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2220      	movs	r2, #32
 8004724:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2200      	movs	r2, #0
 800472c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004730:	2300      	movs	r3, #0
 8004732:	e000      	b.n	8004736 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004734:	2302      	movs	r3, #2
  }
}
 8004736:	4618      	mov	r0, r3
 8004738:	3714      	adds	r7, #20
 800473a:	46bd      	mov	sp, r7
 800473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004740:	4770      	bx	lr
	...

08004744 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004744:	b480      	push	{r7}
 8004746:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004748:	4b04      	ldr	r3, [pc, #16]	; (800475c <HAL_PWREx_GetVoltageRange+0x18>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004750:	4618      	mov	r0, r3
 8004752:	46bd      	mov	sp, r7
 8004754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004758:	4770      	bx	lr
 800475a:	bf00      	nop
 800475c:	40007000 	.word	0x40007000

08004760 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004760:	b480      	push	{r7}
 8004762:	b085      	sub	sp, #20
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800476e:	d130      	bne.n	80047d2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004770:	4b23      	ldr	r3, [pc, #140]	; (8004800 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004778:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800477c:	d038      	beq.n	80047f0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800477e:	4b20      	ldr	r3, [pc, #128]	; (8004800 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004786:	4a1e      	ldr	r2, [pc, #120]	; (8004800 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004788:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800478c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800478e:	4b1d      	ldr	r3, [pc, #116]	; (8004804 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	2232      	movs	r2, #50	; 0x32
 8004794:	fb02 f303 	mul.w	r3, r2, r3
 8004798:	4a1b      	ldr	r2, [pc, #108]	; (8004808 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800479a:	fba2 2303 	umull	r2, r3, r2, r3
 800479e:	0c9b      	lsrs	r3, r3, #18
 80047a0:	3301      	adds	r3, #1
 80047a2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80047a4:	e002      	b.n	80047ac <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	3b01      	subs	r3, #1
 80047aa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80047ac:	4b14      	ldr	r3, [pc, #80]	; (8004800 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80047ae:	695b      	ldr	r3, [r3, #20]
 80047b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047b8:	d102      	bne.n	80047c0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d1f2      	bne.n	80047a6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80047c0:	4b0f      	ldr	r3, [pc, #60]	; (8004800 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80047c2:	695b      	ldr	r3, [r3, #20]
 80047c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047cc:	d110      	bne.n	80047f0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80047ce:	2303      	movs	r3, #3
 80047d0:	e00f      	b.n	80047f2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80047d2:	4b0b      	ldr	r3, [pc, #44]	; (8004800 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80047da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047de:	d007      	beq.n	80047f0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80047e0:	4b07      	ldr	r3, [pc, #28]	; (8004800 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80047e8:	4a05      	ldr	r2, [pc, #20]	; (8004800 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80047ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80047ee:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80047f0:	2300      	movs	r3, #0
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3714      	adds	r7, #20
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr
 80047fe:	bf00      	nop
 8004800:	40007000 	.word	0x40007000
 8004804:	20000000 	.word	0x20000000
 8004808:	431bde83 	.word	0x431bde83

0800480c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b088      	sub	sp, #32
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d101      	bne.n	800481e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e3ca      	b.n	8004fb4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800481e:	4b97      	ldr	r3, [pc, #604]	; (8004a7c <HAL_RCC_OscConfig+0x270>)
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	f003 030c 	and.w	r3, r3, #12
 8004826:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004828:	4b94      	ldr	r3, [pc, #592]	; (8004a7c <HAL_RCC_OscConfig+0x270>)
 800482a:	68db      	ldr	r3, [r3, #12]
 800482c:	f003 0303 	and.w	r3, r3, #3
 8004830:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f003 0310 	and.w	r3, r3, #16
 800483a:	2b00      	cmp	r3, #0
 800483c:	f000 80e4 	beq.w	8004a08 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004840:	69bb      	ldr	r3, [r7, #24]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d007      	beq.n	8004856 <HAL_RCC_OscConfig+0x4a>
 8004846:	69bb      	ldr	r3, [r7, #24]
 8004848:	2b0c      	cmp	r3, #12
 800484a:	f040 808b 	bne.w	8004964 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	2b01      	cmp	r3, #1
 8004852:	f040 8087 	bne.w	8004964 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004856:	4b89      	ldr	r3, [pc, #548]	; (8004a7c <HAL_RCC_OscConfig+0x270>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 0302 	and.w	r3, r3, #2
 800485e:	2b00      	cmp	r3, #0
 8004860:	d005      	beq.n	800486e <HAL_RCC_OscConfig+0x62>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	699b      	ldr	r3, [r3, #24]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d101      	bne.n	800486e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	e3a2      	b.n	8004fb4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6a1a      	ldr	r2, [r3, #32]
 8004872:	4b82      	ldr	r3, [pc, #520]	; (8004a7c <HAL_RCC_OscConfig+0x270>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f003 0308 	and.w	r3, r3, #8
 800487a:	2b00      	cmp	r3, #0
 800487c:	d004      	beq.n	8004888 <HAL_RCC_OscConfig+0x7c>
 800487e:	4b7f      	ldr	r3, [pc, #508]	; (8004a7c <HAL_RCC_OscConfig+0x270>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004886:	e005      	b.n	8004894 <HAL_RCC_OscConfig+0x88>
 8004888:	4b7c      	ldr	r3, [pc, #496]	; (8004a7c <HAL_RCC_OscConfig+0x270>)
 800488a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800488e:	091b      	lsrs	r3, r3, #4
 8004890:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004894:	4293      	cmp	r3, r2
 8004896:	d223      	bcs.n	80048e0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6a1b      	ldr	r3, [r3, #32]
 800489c:	4618      	mov	r0, r3
 800489e:	f000 fd55 	bl	800534c <RCC_SetFlashLatencyFromMSIRange>
 80048a2:	4603      	mov	r3, r0
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d001      	beq.n	80048ac <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80048a8:	2301      	movs	r3, #1
 80048aa:	e383      	b.n	8004fb4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80048ac:	4b73      	ldr	r3, [pc, #460]	; (8004a7c <HAL_RCC_OscConfig+0x270>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a72      	ldr	r2, [pc, #456]	; (8004a7c <HAL_RCC_OscConfig+0x270>)
 80048b2:	f043 0308 	orr.w	r3, r3, #8
 80048b6:	6013      	str	r3, [r2, #0]
 80048b8:	4b70      	ldr	r3, [pc, #448]	; (8004a7c <HAL_RCC_OscConfig+0x270>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6a1b      	ldr	r3, [r3, #32]
 80048c4:	496d      	ldr	r1, [pc, #436]	; (8004a7c <HAL_RCC_OscConfig+0x270>)
 80048c6:	4313      	orrs	r3, r2
 80048c8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80048ca:	4b6c      	ldr	r3, [pc, #432]	; (8004a7c <HAL_RCC_OscConfig+0x270>)
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	69db      	ldr	r3, [r3, #28]
 80048d6:	021b      	lsls	r3, r3, #8
 80048d8:	4968      	ldr	r1, [pc, #416]	; (8004a7c <HAL_RCC_OscConfig+0x270>)
 80048da:	4313      	orrs	r3, r2
 80048dc:	604b      	str	r3, [r1, #4]
 80048de:	e025      	b.n	800492c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80048e0:	4b66      	ldr	r3, [pc, #408]	; (8004a7c <HAL_RCC_OscConfig+0x270>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a65      	ldr	r2, [pc, #404]	; (8004a7c <HAL_RCC_OscConfig+0x270>)
 80048e6:	f043 0308 	orr.w	r3, r3, #8
 80048ea:	6013      	str	r3, [r2, #0]
 80048ec:	4b63      	ldr	r3, [pc, #396]	; (8004a7c <HAL_RCC_OscConfig+0x270>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6a1b      	ldr	r3, [r3, #32]
 80048f8:	4960      	ldr	r1, [pc, #384]	; (8004a7c <HAL_RCC_OscConfig+0x270>)
 80048fa:	4313      	orrs	r3, r2
 80048fc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80048fe:	4b5f      	ldr	r3, [pc, #380]	; (8004a7c <HAL_RCC_OscConfig+0x270>)
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	69db      	ldr	r3, [r3, #28]
 800490a:	021b      	lsls	r3, r3, #8
 800490c:	495b      	ldr	r1, [pc, #364]	; (8004a7c <HAL_RCC_OscConfig+0x270>)
 800490e:	4313      	orrs	r3, r2
 8004910:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004912:	69bb      	ldr	r3, [r7, #24]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d109      	bne.n	800492c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6a1b      	ldr	r3, [r3, #32]
 800491c:	4618      	mov	r0, r3
 800491e:	f000 fd15 	bl	800534c <RCC_SetFlashLatencyFromMSIRange>
 8004922:	4603      	mov	r3, r0
 8004924:	2b00      	cmp	r3, #0
 8004926:	d001      	beq.n	800492c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004928:	2301      	movs	r3, #1
 800492a:	e343      	b.n	8004fb4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800492c:	f000 fc4a 	bl	80051c4 <HAL_RCC_GetSysClockFreq>
 8004930:	4602      	mov	r2, r0
 8004932:	4b52      	ldr	r3, [pc, #328]	; (8004a7c <HAL_RCC_OscConfig+0x270>)
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	091b      	lsrs	r3, r3, #4
 8004938:	f003 030f 	and.w	r3, r3, #15
 800493c:	4950      	ldr	r1, [pc, #320]	; (8004a80 <HAL_RCC_OscConfig+0x274>)
 800493e:	5ccb      	ldrb	r3, [r1, r3]
 8004940:	f003 031f 	and.w	r3, r3, #31
 8004944:	fa22 f303 	lsr.w	r3, r2, r3
 8004948:	4a4e      	ldr	r2, [pc, #312]	; (8004a84 <HAL_RCC_OscConfig+0x278>)
 800494a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800494c:	4b4e      	ldr	r3, [pc, #312]	; (8004a88 <HAL_RCC_OscConfig+0x27c>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4618      	mov	r0, r3
 8004952:	f7fd f957 	bl	8001c04 <HAL_InitTick>
 8004956:	4603      	mov	r3, r0
 8004958:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800495a:	7bfb      	ldrb	r3, [r7, #15]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d052      	beq.n	8004a06 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004960:	7bfb      	ldrb	r3, [r7, #15]
 8004962:	e327      	b.n	8004fb4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	699b      	ldr	r3, [r3, #24]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d032      	beq.n	80049d2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800496c:	4b43      	ldr	r3, [pc, #268]	; (8004a7c <HAL_RCC_OscConfig+0x270>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a42      	ldr	r2, [pc, #264]	; (8004a7c <HAL_RCC_OscConfig+0x270>)
 8004972:	f043 0301 	orr.w	r3, r3, #1
 8004976:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004978:	f7fd f994 	bl	8001ca4 <HAL_GetTick>
 800497c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800497e:	e008      	b.n	8004992 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004980:	f7fd f990 	bl	8001ca4 <HAL_GetTick>
 8004984:	4602      	mov	r2, r0
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	1ad3      	subs	r3, r2, r3
 800498a:	2b02      	cmp	r3, #2
 800498c:	d901      	bls.n	8004992 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800498e:	2303      	movs	r3, #3
 8004990:	e310      	b.n	8004fb4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004992:	4b3a      	ldr	r3, [pc, #232]	; (8004a7c <HAL_RCC_OscConfig+0x270>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f003 0302 	and.w	r3, r3, #2
 800499a:	2b00      	cmp	r3, #0
 800499c:	d0f0      	beq.n	8004980 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800499e:	4b37      	ldr	r3, [pc, #220]	; (8004a7c <HAL_RCC_OscConfig+0x270>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a36      	ldr	r2, [pc, #216]	; (8004a7c <HAL_RCC_OscConfig+0x270>)
 80049a4:	f043 0308 	orr.w	r3, r3, #8
 80049a8:	6013      	str	r3, [r2, #0]
 80049aa:	4b34      	ldr	r3, [pc, #208]	; (8004a7c <HAL_RCC_OscConfig+0x270>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6a1b      	ldr	r3, [r3, #32]
 80049b6:	4931      	ldr	r1, [pc, #196]	; (8004a7c <HAL_RCC_OscConfig+0x270>)
 80049b8:	4313      	orrs	r3, r2
 80049ba:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80049bc:	4b2f      	ldr	r3, [pc, #188]	; (8004a7c <HAL_RCC_OscConfig+0x270>)
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	69db      	ldr	r3, [r3, #28]
 80049c8:	021b      	lsls	r3, r3, #8
 80049ca:	492c      	ldr	r1, [pc, #176]	; (8004a7c <HAL_RCC_OscConfig+0x270>)
 80049cc:	4313      	orrs	r3, r2
 80049ce:	604b      	str	r3, [r1, #4]
 80049d0:	e01a      	b.n	8004a08 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80049d2:	4b2a      	ldr	r3, [pc, #168]	; (8004a7c <HAL_RCC_OscConfig+0x270>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a29      	ldr	r2, [pc, #164]	; (8004a7c <HAL_RCC_OscConfig+0x270>)
 80049d8:	f023 0301 	bic.w	r3, r3, #1
 80049dc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80049de:	f7fd f961 	bl	8001ca4 <HAL_GetTick>
 80049e2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80049e4:	e008      	b.n	80049f8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80049e6:	f7fd f95d 	bl	8001ca4 <HAL_GetTick>
 80049ea:	4602      	mov	r2, r0
 80049ec:	693b      	ldr	r3, [r7, #16]
 80049ee:	1ad3      	subs	r3, r2, r3
 80049f0:	2b02      	cmp	r3, #2
 80049f2:	d901      	bls.n	80049f8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80049f4:	2303      	movs	r3, #3
 80049f6:	e2dd      	b.n	8004fb4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80049f8:	4b20      	ldr	r3, [pc, #128]	; (8004a7c <HAL_RCC_OscConfig+0x270>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f003 0302 	and.w	r3, r3, #2
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d1f0      	bne.n	80049e6 <HAL_RCC_OscConfig+0x1da>
 8004a04:	e000      	b.n	8004a08 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004a06:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 0301 	and.w	r3, r3, #1
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d074      	beq.n	8004afe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004a14:	69bb      	ldr	r3, [r7, #24]
 8004a16:	2b08      	cmp	r3, #8
 8004a18:	d005      	beq.n	8004a26 <HAL_RCC_OscConfig+0x21a>
 8004a1a:	69bb      	ldr	r3, [r7, #24]
 8004a1c:	2b0c      	cmp	r3, #12
 8004a1e:	d10e      	bne.n	8004a3e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	2b03      	cmp	r3, #3
 8004a24:	d10b      	bne.n	8004a3e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a26:	4b15      	ldr	r3, [pc, #84]	; (8004a7c <HAL_RCC_OscConfig+0x270>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d064      	beq.n	8004afc <HAL_RCC_OscConfig+0x2f0>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d160      	bne.n	8004afc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e2ba      	b.n	8004fb4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a46:	d106      	bne.n	8004a56 <HAL_RCC_OscConfig+0x24a>
 8004a48:	4b0c      	ldr	r3, [pc, #48]	; (8004a7c <HAL_RCC_OscConfig+0x270>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a0b      	ldr	r2, [pc, #44]	; (8004a7c <HAL_RCC_OscConfig+0x270>)
 8004a4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a52:	6013      	str	r3, [r2, #0]
 8004a54:	e026      	b.n	8004aa4 <HAL_RCC_OscConfig+0x298>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a5e:	d115      	bne.n	8004a8c <HAL_RCC_OscConfig+0x280>
 8004a60:	4b06      	ldr	r3, [pc, #24]	; (8004a7c <HAL_RCC_OscConfig+0x270>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a05      	ldr	r2, [pc, #20]	; (8004a7c <HAL_RCC_OscConfig+0x270>)
 8004a66:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a6a:	6013      	str	r3, [r2, #0]
 8004a6c:	4b03      	ldr	r3, [pc, #12]	; (8004a7c <HAL_RCC_OscConfig+0x270>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a02      	ldr	r2, [pc, #8]	; (8004a7c <HAL_RCC_OscConfig+0x270>)
 8004a72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a76:	6013      	str	r3, [r2, #0]
 8004a78:	e014      	b.n	8004aa4 <HAL_RCC_OscConfig+0x298>
 8004a7a:	bf00      	nop
 8004a7c:	40021000 	.word	0x40021000
 8004a80:	0800ab38 	.word	0x0800ab38
 8004a84:	20000000 	.word	0x20000000
 8004a88:	20000004 	.word	0x20000004
 8004a8c:	4ba0      	ldr	r3, [pc, #640]	; (8004d10 <HAL_RCC_OscConfig+0x504>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a9f      	ldr	r2, [pc, #636]	; (8004d10 <HAL_RCC_OscConfig+0x504>)
 8004a92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a96:	6013      	str	r3, [r2, #0]
 8004a98:	4b9d      	ldr	r3, [pc, #628]	; (8004d10 <HAL_RCC_OscConfig+0x504>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a9c      	ldr	r2, [pc, #624]	; (8004d10 <HAL_RCC_OscConfig+0x504>)
 8004a9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004aa2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d013      	beq.n	8004ad4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aac:	f7fd f8fa 	bl	8001ca4 <HAL_GetTick>
 8004ab0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ab2:	e008      	b.n	8004ac6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ab4:	f7fd f8f6 	bl	8001ca4 <HAL_GetTick>
 8004ab8:	4602      	mov	r2, r0
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	1ad3      	subs	r3, r2, r3
 8004abe:	2b64      	cmp	r3, #100	; 0x64
 8004ac0:	d901      	bls.n	8004ac6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004ac2:	2303      	movs	r3, #3
 8004ac4:	e276      	b.n	8004fb4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ac6:	4b92      	ldr	r3, [pc, #584]	; (8004d10 <HAL_RCC_OscConfig+0x504>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d0f0      	beq.n	8004ab4 <HAL_RCC_OscConfig+0x2a8>
 8004ad2:	e014      	b.n	8004afe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ad4:	f7fd f8e6 	bl	8001ca4 <HAL_GetTick>
 8004ad8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004ada:	e008      	b.n	8004aee <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004adc:	f7fd f8e2 	bl	8001ca4 <HAL_GetTick>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	1ad3      	subs	r3, r2, r3
 8004ae6:	2b64      	cmp	r3, #100	; 0x64
 8004ae8:	d901      	bls.n	8004aee <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004aea:	2303      	movs	r3, #3
 8004aec:	e262      	b.n	8004fb4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004aee:	4b88      	ldr	r3, [pc, #544]	; (8004d10 <HAL_RCC_OscConfig+0x504>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d1f0      	bne.n	8004adc <HAL_RCC_OscConfig+0x2d0>
 8004afa:	e000      	b.n	8004afe <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004afc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f003 0302 	and.w	r3, r3, #2
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d060      	beq.n	8004bcc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004b0a:	69bb      	ldr	r3, [r7, #24]
 8004b0c:	2b04      	cmp	r3, #4
 8004b0e:	d005      	beq.n	8004b1c <HAL_RCC_OscConfig+0x310>
 8004b10:	69bb      	ldr	r3, [r7, #24]
 8004b12:	2b0c      	cmp	r3, #12
 8004b14:	d119      	bne.n	8004b4a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	2b02      	cmp	r3, #2
 8004b1a:	d116      	bne.n	8004b4a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b1c:	4b7c      	ldr	r3, [pc, #496]	; (8004d10 <HAL_RCC_OscConfig+0x504>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d005      	beq.n	8004b34 <HAL_RCC_OscConfig+0x328>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	68db      	ldr	r3, [r3, #12]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d101      	bne.n	8004b34 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004b30:	2301      	movs	r3, #1
 8004b32:	e23f      	b.n	8004fb4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b34:	4b76      	ldr	r3, [pc, #472]	; (8004d10 <HAL_RCC_OscConfig+0x504>)
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	691b      	ldr	r3, [r3, #16]
 8004b40:	061b      	lsls	r3, r3, #24
 8004b42:	4973      	ldr	r1, [pc, #460]	; (8004d10 <HAL_RCC_OscConfig+0x504>)
 8004b44:	4313      	orrs	r3, r2
 8004b46:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b48:	e040      	b.n	8004bcc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	68db      	ldr	r3, [r3, #12]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d023      	beq.n	8004b9a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b52:	4b6f      	ldr	r3, [pc, #444]	; (8004d10 <HAL_RCC_OscConfig+0x504>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a6e      	ldr	r2, [pc, #440]	; (8004d10 <HAL_RCC_OscConfig+0x504>)
 8004b58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b5e:	f7fd f8a1 	bl	8001ca4 <HAL_GetTick>
 8004b62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b64:	e008      	b.n	8004b78 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b66:	f7fd f89d 	bl	8001ca4 <HAL_GetTick>
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	1ad3      	subs	r3, r2, r3
 8004b70:	2b02      	cmp	r3, #2
 8004b72:	d901      	bls.n	8004b78 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004b74:	2303      	movs	r3, #3
 8004b76:	e21d      	b.n	8004fb4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b78:	4b65      	ldr	r3, [pc, #404]	; (8004d10 <HAL_RCC_OscConfig+0x504>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d0f0      	beq.n	8004b66 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b84:	4b62      	ldr	r3, [pc, #392]	; (8004d10 <HAL_RCC_OscConfig+0x504>)
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	691b      	ldr	r3, [r3, #16]
 8004b90:	061b      	lsls	r3, r3, #24
 8004b92:	495f      	ldr	r1, [pc, #380]	; (8004d10 <HAL_RCC_OscConfig+0x504>)
 8004b94:	4313      	orrs	r3, r2
 8004b96:	604b      	str	r3, [r1, #4]
 8004b98:	e018      	b.n	8004bcc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b9a:	4b5d      	ldr	r3, [pc, #372]	; (8004d10 <HAL_RCC_OscConfig+0x504>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a5c      	ldr	r2, [pc, #368]	; (8004d10 <HAL_RCC_OscConfig+0x504>)
 8004ba0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ba4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ba6:	f7fd f87d 	bl	8001ca4 <HAL_GetTick>
 8004baa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004bac:	e008      	b.n	8004bc0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bae:	f7fd f879 	bl	8001ca4 <HAL_GetTick>
 8004bb2:	4602      	mov	r2, r0
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	1ad3      	subs	r3, r2, r3
 8004bb8:	2b02      	cmp	r3, #2
 8004bba:	d901      	bls.n	8004bc0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004bbc:	2303      	movs	r3, #3
 8004bbe:	e1f9      	b.n	8004fb4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004bc0:	4b53      	ldr	r3, [pc, #332]	; (8004d10 <HAL_RCC_OscConfig+0x504>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d1f0      	bne.n	8004bae <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f003 0308 	and.w	r3, r3, #8
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d03c      	beq.n	8004c52 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	695b      	ldr	r3, [r3, #20]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d01c      	beq.n	8004c1a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004be0:	4b4b      	ldr	r3, [pc, #300]	; (8004d10 <HAL_RCC_OscConfig+0x504>)
 8004be2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004be6:	4a4a      	ldr	r2, [pc, #296]	; (8004d10 <HAL_RCC_OscConfig+0x504>)
 8004be8:	f043 0301 	orr.w	r3, r3, #1
 8004bec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bf0:	f7fd f858 	bl	8001ca4 <HAL_GetTick>
 8004bf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004bf6:	e008      	b.n	8004c0a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004bf8:	f7fd f854 	bl	8001ca4 <HAL_GetTick>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	1ad3      	subs	r3, r2, r3
 8004c02:	2b02      	cmp	r3, #2
 8004c04:	d901      	bls.n	8004c0a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004c06:	2303      	movs	r3, #3
 8004c08:	e1d4      	b.n	8004fb4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004c0a:	4b41      	ldr	r3, [pc, #260]	; (8004d10 <HAL_RCC_OscConfig+0x504>)
 8004c0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c10:	f003 0302 	and.w	r3, r3, #2
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d0ef      	beq.n	8004bf8 <HAL_RCC_OscConfig+0x3ec>
 8004c18:	e01b      	b.n	8004c52 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c1a:	4b3d      	ldr	r3, [pc, #244]	; (8004d10 <HAL_RCC_OscConfig+0x504>)
 8004c1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c20:	4a3b      	ldr	r2, [pc, #236]	; (8004d10 <HAL_RCC_OscConfig+0x504>)
 8004c22:	f023 0301 	bic.w	r3, r3, #1
 8004c26:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c2a:	f7fd f83b 	bl	8001ca4 <HAL_GetTick>
 8004c2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c30:	e008      	b.n	8004c44 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c32:	f7fd f837 	bl	8001ca4 <HAL_GetTick>
 8004c36:	4602      	mov	r2, r0
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	1ad3      	subs	r3, r2, r3
 8004c3c:	2b02      	cmp	r3, #2
 8004c3e:	d901      	bls.n	8004c44 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004c40:	2303      	movs	r3, #3
 8004c42:	e1b7      	b.n	8004fb4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c44:	4b32      	ldr	r3, [pc, #200]	; (8004d10 <HAL_RCC_OscConfig+0x504>)
 8004c46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c4a:	f003 0302 	and.w	r3, r3, #2
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d1ef      	bne.n	8004c32 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f003 0304 	and.w	r3, r3, #4
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	f000 80a6 	beq.w	8004dac <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c60:	2300      	movs	r3, #0
 8004c62:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004c64:	4b2a      	ldr	r3, [pc, #168]	; (8004d10 <HAL_RCC_OscConfig+0x504>)
 8004c66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d10d      	bne.n	8004c8c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c70:	4b27      	ldr	r3, [pc, #156]	; (8004d10 <HAL_RCC_OscConfig+0x504>)
 8004c72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c74:	4a26      	ldr	r2, [pc, #152]	; (8004d10 <HAL_RCC_OscConfig+0x504>)
 8004c76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c7a:	6593      	str	r3, [r2, #88]	; 0x58
 8004c7c:	4b24      	ldr	r3, [pc, #144]	; (8004d10 <HAL_RCC_OscConfig+0x504>)
 8004c7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c84:	60bb      	str	r3, [r7, #8]
 8004c86:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c8c:	4b21      	ldr	r3, [pc, #132]	; (8004d14 <HAL_RCC_OscConfig+0x508>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d118      	bne.n	8004cca <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c98:	4b1e      	ldr	r3, [pc, #120]	; (8004d14 <HAL_RCC_OscConfig+0x508>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a1d      	ldr	r2, [pc, #116]	; (8004d14 <HAL_RCC_OscConfig+0x508>)
 8004c9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ca2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ca4:	f7fc fffe 	bl	8001ca4 <HAL_GetTick>
 8004ca8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004caa:	e008      	b.n	8004cbe <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cac:	f7fc fffa 	bl	8001ca4 <HAL_GetTick>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	1ad3      	subs	r3, r2, r3
 8004cb6:	2b02      	cmp	r3, #2
 8004cb8:	d901      	bls.n	8004cbe <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	e17a      	b.n	8004fb4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004cbe:	4b15      	ldr	r3, [pc, #84]	; (8004d14 <HAL_RCC_OscConfig+0x508>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d0f0      	beq.n	8004cac <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	2b01      	cmp	r3, #1
 8004cd0:	d108      	bne.n	8004ce4 <HAL_RCC_OscConfig+0x4d8>
 8004cd2:	4b0f      	ldr	r3, [pc, #60]	; (8004d10 <HAL_RCC_OscConfig+0x504>)
 8004cd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cd8:	4a0d      	ldr	r2, [pc, #52]	; (8004d10 <HAL_RCC_OscConfig+0x504>)
 8004cda:	f043 0301 	orr.w	r3, r3, #1
 8004cde:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004ce2:	e029      	b.n	8004d38 <HAL_RCC_OscConfig+0x52c>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	2b05      	cmp	r3, #5
 8004cea:	d115      	bne.n	8004d18 <HAL_RCC_OscConfig+0x50c>
 8004cec:	4b08      	ldr	r3, [pc, #32]	; (8004d10 <HAL_RCC_OscConfig+0x504>)
 8004cee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cf2:	4a07      	ldr	r2, [pc, #28]	; (8004d10 <HAL_RCC_OscConfig+0x504>)
 8004cf4:	f043 0304 	orr.w	r3, r3, #4
 8004cf8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004cfc:	4b04      	ldr	r3, [pc, #16]	; (8004d10 <HAL_RCC_OscConfig+0x504>)
 8004cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d02:	4a03      	ldr	r2, [pc, #12]	; (8004d10 <HAL_RCC_OscConfig+0x504>)
 8004d04:	f043 0301 	orr.w	r3, r3, #1
 8004d08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004d0c:	e014      	b.n	8004d38 <HAL_RCC_OscConfig+0x52c>
 8004d0e:	bf00      	nop
 8004d10:	40021000 	.word	0x40021000
 8004d14:	40007000 	.word	0x40007000
 8004d18:	4b9c      	ldr	r3, [pc, #624]	; (8004f8c <HAL_RCC_OscConfig+0x780>)
 8004d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d1e:	4a9b      	ldr	r2, [pc, #620]	; (8004f8c <HAL_RCC_OscConfig+0x780>)
 8004d20:	f023 0301 	bic.w	r3, r3, #1
 8004d24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004d28:	4b98      	ldr	r3, [pc, #608]	; (8004f8c <HAL_RCC_OscConfig+0x780>)
 8004d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d2e:	4a97      	ldr	r2, [pc, #604]	; (8004f8c <HAL_RCC_OscConfig+0x780>)
 8004d30:	f023 0304 	bic.w	r3, r3, #4
 8004d34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d016      	beq.n	8004d6e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d40:	f7fc ffb0 	bl	8001ca4 <HAL_GetTick>
 8004d44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d46:	e00a      	b.n	8004d5e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d48:	f7fc ffac 	bl	8001ca4 <HAL_GetTick>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	1ad3      	subs	r3, r2, r3
 8004d52:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d901      	bls.n	8004d5e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004d5a:	2303      	movs	r3, #3
 8004d5c:	e12a      	b.n	8004fb4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d5e:	4b8b      	ldr	r3, [pc, #556]	; (8004f8c <HAL_RCC_OscConfig+0x780>)
 8004d60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d64:	f003 0302 	and.w	r3, r3, #2
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d0ed      	beq.n	8004d48 <HAL_RCC_OscConfig+0x53c>
 8004d6c:	e015      	b.n	8004d9a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d6e:	f7fc ff99 	bl	8001ca4 <HAL_GetTick>
 8004d72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004d74:	e00a      	b.n	8004d8c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d76:	f7fc ff95 	bl	8001ca4 <HAL_GetTick>
 8004d7a:	4602      	mov	r2, r0
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	1ad3      	subs	r3, r2, r3
 8004d80:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d901      	bls.n	8004d8c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004d88:	2303      	movs	r3, #3
 8004d8a:	e113      	b.n	8004fb4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004d8c:	4b7f      	ldr	r3, [pc, #508]	; (8004f8c <HAL_RCC_OscConfig+0x780>)
 8004d8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d92:	f003 0302 	and.w	r3, r3, #2
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d1ed      	bne.n	8004d76 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d9a:	7ffb      	ldrb	r3, [r7, #31]
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d105      	bne.n	8004dac <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004da0:	4b7a      	ldr	r3, [pc, #488]	; (8004f8c <HAL_RCC_OscConfig+0x780>)
 8004da2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004da4:	4a79      	ldr	r2, [pc, #484]	; (8004f8c <HAL_RCC_OscConfig+0x780>)
 8004da6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004daa:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	f000 80fe 	beq.w	8004fb2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dba:	2b02      	cmp	r3, #2
 8004dbc:	f040 80d0 	bne.w	8004f60 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004dc0:	4b72      	ldr	r3, [pc, #456]	; (8004f8c <HAL_RCC_OscConfig+0x780>)
 8004dc2:	68db      	ldr	r3, [r3, #12]
 8004dc4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	f003 0203 	and.w	r2, r3, #3
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d130      	bne.n	8004e36 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dde:	3b01      	subs	r3, #1
 8004de0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004de2:	429a      	cmp	r2, r3
 8004de4:	d127      	bne.n	8004e36 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004df0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004df2:	429a      	cmp	r2, r3
 8004df4:	d11f      	bne.n	8004e36 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dfc:	687a      	ldr	r2, [r7, #4]
 8004dfe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004e00:	2a07      	cmp	r2, #7
 8004e02:	bf14      	ite	ne
 8004e04:	2201      	movne	r2, #1
 8004e06:	2200      	moveq	r2, #0
 8004e08:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d113      	bne.n	8004e36 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e18:	085b      	lsrs	r3, r3, #1
 8004e1a:	3b01      	subs	r3, #1
 8004e1c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004e1e:	429a      	cmp	r2, r3
 8004e20:	d109      	bne.n	8004e36 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e2c:	085b      	lsrs	r3, r3, #1
 8004e2e:	3b01      	subs	r3, #1
 8004e30:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e32:	429a      	cmp	r2, r3
 8004e34:	d06e      	beq.n	8004f14 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004e36:	69bb      	ldr	r3, [r7, #24]
 8004e38:	2b0c      	cmp	r3, #12
 8004e3a:	d069      	beq.n	8004f10 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004e3c:	4b53      	ldr	r3, [pc, #332]	; (8004f8c <HAL_RCC_OscConfig+0x780>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d105      	bne.n	8004e54 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004e48:	4b50      	ldr	r3, [pc, #320]	; (8004f8c <HAL_RCC_OscConfig+0x780>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d001      	beq.n	8004e58 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004e54:	2301      	movs	r3, #1
 8004e56:	e0ad      	b.n	8004fb4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004e58:	4b4c      	ldr	r3, [pc, #304]	; (8004f8c <HAL_RCC_OscConfig+0x780>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a4b      	ldr	r2, [pc, #300]	; (8004f8c <HAL_RCC_OscConfig+0x780>)
 8004e5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e62:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004e64:	f7fc ff1e 	bl	8001ca4 <HAL_GetTick>
 8004e68:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e6a:	e008      	b.n	8004e7e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e6c:	f7fc ff1a 	bl	8001ca4 <HAL_GetTick>
 8004e70:	4602      	mov	r2, r0
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	1ad3      	subs	r3, r2, r3
 8004e76:	2b02      	cmp	r3, #2
 8004e78:	d901      	bls.n	8004e7e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004e7a:	2303      	movs	r3, #3
 8004e7c:	e09a      	b.n	8004fb4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e7e:	4b43      	ldr	r3, [pc, #268]	; (8004f8c <HAL_RCC_OscConfig+0x780>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d1f0      	bne.n	8004e6c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e8a:	4b40      	ldr	r3, [pc, #256]	; (8004f8c <HAL_RCC_OscConfig+0x780>)
 8004e8c:	68da      	ldr	r2, [r3, #12]
 8004e8e:	4b40      	ldr	r3, [pc, #256]	; (8004f90 <HAL_RCC_OscConfig+0x784>)
 8004e90:	4013      	ands	r3, r2
 8004e92:	687a      	ldr	r2, [r7, #4]
 8004e94:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004e96:	687a      	ldr	r2, [r7, #4]
 8004e98:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004e9a:	3a01      	subs	r2, #1
 8004e9c:	0112      	lsls	r2, r2, #4
 8004e9e:	4311      	orrs	r1, r2
 8004ea0:	687a      	ldr	r2, [r7, #4]
 8004ea2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004ea4:	0212      	lsls	r2, r2, #8
 8004ea6:	4311      	orrs	r1, r2
 8004ea8:	687a      	ldr	r2, [r7, #4]
 8004eaa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004eac:	0852      	lsrs	r2, r2, #1
 8004eae:	3a01      	subs	r2, #1
 8004eb0:	0552      	lsls	r2, r2, #21
 8004eb2:	4311      	orrs	r1, r2
 8004eb4:	687a      	ldr	r2, [r7, #4]
 8004eb6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004eb8:	0852      	lsrs	r2, r2, #1
 8004eba:	3a01      	subs	r2, #1
 8004ebc:	0652      	lsls	r2, r2, #25
 8004ebe:	4311      	orrs	r1, r2
 8004ec0:	687a      	ldr	r2, [r7, #4]
 8004ec2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004ec4:	0912      	lsrs	r2, r2, #4
 8004ec6:	0452      	lsls	r2, r2, #17
 8004ec8:	430a      	orrs	r2, r1
 8004eca:	4930      	ldr	r1, [pc, #192]	; (8004f8c <HAL_RCC_OscConfig+0x780>)
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004ed0:	4b2e      	ldr	r3, [pc, #184]	; (8004f8c <HAL_RCC_OscConfig+0x780>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a2d      	ldr	r2, [pc, #180]	; (8004f8c <HAL_RCC_OscConfig+0x780>)
 8004ed6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004eda:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004edc:	4b2b      	ldr	r3, [pc, #172]	; (8004f8c <HAL_RCC_OscConfig+0x780>)
 8004ede:	68db      	ldr	r3, [r3, #12]
 8004ee0:	4a2a      	ldr	r2, [pc, #168]	; (8004f8c <HAL_RCC_OscConfig+0x780>)
 8004ee2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ee6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004ee8:	f7fc fedc 	bl	8001ca4 <HAL_GetTick>
 8004eec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004eee:	e008      	b.n	8004f02 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ef0:	f7fc fed8 	bl	8001ca4 <HAL_GetTick>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	1ad3      	subs	r3, r2, r3
 8004efa:	2b02      	cmp	r3, #2
 8004efc:	d901      	bls.n	8004f02 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004efe:	2303      	movs	r3, #3
 8004f00:	e058      	b.n	8004fb4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f02:	4b22      	ldr	r3, [pc, #136]	; (8004f8c <HAL_RCC_OscConfig+0x780>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d0f0      	beq.n	8004ef0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004f0e:	e050      	b.n	8004fb2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004f10:	2301      	movs	r3, #1
 8004f12:	e04f      	b.n	8004fb4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f14:	4b1d      	ldr	r3, [pc, #116]	; (8004f8c <HAL_RCC_OscConfig+0x780>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d148      	bne.n	8004fb2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004f20:	4b1a      	ldr	r3, [pc, #104]	; (8004f8c <HAL_RCC_OscConfig+0x780>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a19      	ldr	r2, [pc, #100]	; (8004f8c <HAL_RCC_OscConfig+0x780>)
 8004f26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f2a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004f2c:	4b17      	ldr	r3, [pc, #92]	; (8004f8c <HAL_RCC_OscConfig+0x780>)
 8004f2e:	68db      	ldr	r3, [r3, #12]
 8004f30:	4a16      	ldr	r2, [pc, #88]	; (8004f8c <HAL_RCC_OscConfig+0x780>)
 8004f32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f36:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004f38:	f7fc feb4 	bl	8001ca4 <HAL_GetTick>
 8004f3c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f3e:	e008      	b.n	8004f52 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f40:	f7fc feb0 	bl	8001ca4 <HAL_GetTick>
 8004f44:	4602      	mov	r2, r0
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	1ad3      	subs	r3, r2, r3
 8004f4a:	2b02      	cmp	r3, #2
 8004f4c:	d901      	bls.n	8004f52 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004f4e:	2303      	movs	r3, #3
 8004f50:	e030      	b.n	8004fb4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f52:	4b0e      	ldr	r3, [pc, #56]	; (8004f8c <HAL_RCC_OscConfig+0x780>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d0f0      	beq.n	8004f40 <HAL_RCC_OscConfig+0x734>
 8004f5e:	e028      	b.n	8004fb2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004f60:	69bb      	ldr	r3, [r7, #24]
 8004f62:	2b0c      	cmp	r3, #12
 8004f64:	d023      	beq.n	8004fae <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f66:	4b09      	ldr	r3, [pc, #36]	; (8004f8c <HAL_RCC_OscConfig+0x780>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a08      	ldr	r2, [pc, #32]	; (8004f8c <HAL_RCC_OscConfig+0x780>)
 8004f6c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f72:	f7fc fe97 	bl	8001ca4 <HAL_GetTick>
 8004f76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f78:	e00c      	b.n	8004f94 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f7a:	f7fc fe93 	bl	8001ca4 <HAL_GetTick>
 8004f7e:	4602      	mov	r2, r0
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	1ad3      	subs	r3, r2, r3
 8004f84:	2b02      	cmp	r3, #2
 8004f86:	d905      	bls.n	8004f94 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004f88:	2303      	movs	r3, #3
 8004f8a:	e013      	b.n	8004fb4 <HAL_RCC_OscConfig+0x7a8>
 8004f8c:	40021000 	.word	0x40021000
 8004f90:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f94:	4b09      	ldr	r3, [pc, #36]	; (8004fbc <HAL_RCC_OscConfig+0x7b0>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d1ec      	bne.n	8004f7a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004fa0:	4b06      	ldr	r3, [pc, #24]	; (8004fbc <HAL_RCC_OscConfig+0x7b0>)
 8004fa2:	68da      	ldr	r2, [r3, #12]
 8004fa4:	4905      	ldr	r1, [pc, #20]	; (8004fbc <HAL_RCC_OscConfig+0x7b0>)
 8004fa6:	4b06      	ldr	r3, [pc, #24]	; (8004fc0 <HAL_RCC_OscConfig+0x7b4>)
 8004fa8:	4013      	ands	r3, r2
 8004faa:	60cb      	str	r3, [r1, #12]
 8004fac:	e001      	b.n	8004fb2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	e000      	b.n	8004fb4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004fb2:	2300      	movs	r3, #0
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	3720      	adds	r7, #32
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd80      	pop	{r7, pc}
 8004fbc:	40021000 	.word	0x40021000
 8004fc0:	feeefffc 	.word	0xfeeefffc

08004fc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b084      	sub	sp, #16
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
 8004fcc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d101      	bne.n	8004fd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	e0e7      	b.n	80051a8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004fd8:	4b75      	ldr	r3, [pc, #468]	; (80051b0 <HAL_RCC_ClockConfig+0x1ec>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f003 0307 	and.w	r3, r3, #7
 8004fe0:	683a      	ldr	r2, [r7, #0]
 8004fe2:	429a      	cmp	r2, r3
 8004fe4:	d910      	bls.n	8005008 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fe6:	4b72      	ldr	r3, [pc, #456]	; (80051b0 <HAL_RCC_ClockConfig+0x1ec>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f023 0207 	bic.w	r2, r3, #7
 8004fee:	4970      	ldr	r1, [pc, #448]	; (80051b0 <HAL_RCC_ClockConfig+0x1ec>)
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ff6:	4b6e      	ldr	r3, [pc, #440]	; (80051b0 <HAL_RCC_ClockConfig+0x1ec>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f003 0307 	and.w	r3, r3, #7
 8004ffe:	683a      	ldr	r2, [r7, #0]
 8005000:	429a      	cmp	r2, r3
 8005002:	d001      	beq.n	8005008 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	e0cf      	b.n	80051a8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f003 0302 	and.w	r3, r3, #2
 8005010:	2b00      	cmp	r3, #0
 8005012:	d010      	beq.n	8005036 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	689a      	ldr	r2, [r3, #8]
 8005018:	4b66      	ldr	r3, [pc, #408]	; (80051b4 <HAL_RCC_ClockConfig+0x1f0>)
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005020:	429a      	cmp	r2, r3
 8005022:	d908      	bls.n	8005036 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005024:	4b63      	ldr	r3, [pc, #396]	; (80051b4 <HAL_RCC_ClockConfig+0x1f0>)
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	4960      	ldr	r1, [pc, #384]	; (80051b4 <HAL_RCC_ClockConfig+0x1f0>)
 8005032:	4313      	orrs	r3, r2
 8005034:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f003 0301 	and.w	r3, r3, #1
 800503e:	2b00      	cmp	r3, #0
 8005040:	d04c      	beq.n	80050dc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	2b03      	cmp	r3, #3
 8005048:	d107      	bne.n	800505a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800504a:	4b5a      	ldr	r3, [pc, #360]	; (80051b4 <HAL_RCC_ClockConfig+0x1f0>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005052:	2b00      	cmp	r3, #0
 8005054:	d121      	bne.n	800509a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	e0a6      	b.n	80051a8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	2b02      	cmp	r3, #2
 8005060:	d107      	bne.n	8005072 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005062:	4b54      	ldr	r3, [pc, #336]	; (80051b4 <HAL_RCC_ClockConfig+0x1f0>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800506a:	2b00      	cmp	r3, #0
 800506c:	d115      	bne.n	800509a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	e09a      	b.n	80051a8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d107      	bne.n	800508a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800507a:	4b4e      	ldr	r3, [pc, #312]	; (80051b4 <HAL_RCC_ClockConfig+0x1f0>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f003 0302 	and.w	r3, r3, #2
 8005082:	2b00      	cmp	r3, #0
 8005084:	d109      	bne.n	800509a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	e08e      	b.n	80051a8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800508a:	4b4a      	ldr	r3, [pc, #296]	; (80051b4 <HAL_RCC_ClockConfig+0x1f0>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005092:	2b00      	cmp	r3, #0
 8005094:	d101      	bne.n	800509a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005096:	2301      	movs	r3, #1
 8005098:	e086      	b.n	80051a8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800509a:	4b46      	ldr	r3, [pc, #280]	; (80051b4 <HAL_RCC_ClockConfig+0x1f0>)
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	f023 0203 	bic.w	r2, r3, #3
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	4943      	ldr	r1, [pc, #268]	; (80051b4 <HAL_RCC_ClockConfig+0x1f0>)
 80050a8:	4313      	orrs	r3, r2
 80050aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050ac:	f7fc fdfa 	bl	8001ca4 <HAL_GetTick>
 80050b0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050b2:	e00a      	b.n	80050ca <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050b4:	f7fc fdf6 	bl	8001ca4 <HAL_GetTick>
 80050b8:	4602      	mov	r2, r0
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	1ad3      	subs	r3, r2, r3
 80050be:	f241 3288 	movw	r2, #5000	; 0x1388
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d901      	bls.n	80050ca <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80050c6:	2303      	movs	r3, #3
 80050c8:	e06e      	b.n	80051a8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050ca:	4b3a      	ldr	r3, [pc, #232]	; (80051b4 <HAL_RCC_ClockConfig+0x1f0>)
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	f003 020c 	and.w	r2, r3, #12
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	009b      	lsls	r3, r3, #2
 80050d8:	429a      	cmp	r2, r3
 80050da:	d1eb      	bne.n	80050b4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f003 0302 	and.w	r3, r3, #2
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d010      	beq.n	800510a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	689a      	ldr	r2, [r3, #8]
 80050ec:	4b31      	ldr	r3, [pc, #196]	; (80051b4 <HAL_RCC_ClockConfig+0x1f0>)
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80050f4:	429a      	cmp	r2, r3
 80050f6:	d208      	bcs.n	800510a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050f8:	4b2e      	ldr	r3, [pc, #184]	; (80051b4 <HAL_RCC_ClockConfig+0x1f0>)
 80050fa:	689b      	ldr	r3, [r3, #8]
 80050fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	689b      	ldr	r3, [r3, #8]
 8005104:	492b      	ldr	r1, [pc, #172]	; (80051b4 <HAL_RCC_ClockConfig+0x1f0>)
 8005106:	4313      	orrs	r3, r2
 8005108:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800510a:	4b29      	ldr	r3, [pc, #164]	; (80051b0 <HAL_RCC_ClockConfig+0x1ec>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f003 0307 	and.w	r3, r3, #7
 8005112:	683a      	ldr	r2, [r7, #0]
 8005114:	429a      	cmp	r2, r3
 8005116:	d210      	bcs.n	800513a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005118:	4b25      	ldr	r3, [pc, #148]	; (80051b0 <HAL_RCC_ClockConfig+0x1ec>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f023 0207 	bic.w	r2, r3, #7
 8005120:	4923      	ldr	r1, [pc, #140]	; (80051b0 <HAL_RCC_ClockConfig+0x1ec>)
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	4313      	orrs	r3, r2
 8005126:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005128:	4b21      	ldr	r3, [pc, #132]	; (80051b0 <HAL_RCC_ClockConfig+0x1ec>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f003 0307 	and.w	r3, r3, #7
 8005130:	683a      	ldr	r2, [r7, #0]
 8005132:	429a      	cmp	r2, r3
 8005134:	d001      	beq.n	800513a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	e036      	b.n	80051a8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f003 0304 	and.w	r3, r3, #4
 8005142:	2b00      	cmp	r3, #0
 8005144:	d008      	beq.n	8005158 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005146:	4b1b      	ldr	r3, [pc, #108]	; (80051b4 <HAL_RCC_ClockConfig+0x1f0>)
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	68db      	ldr	r3, [r3, #12]
 8005152:	4918      	ldr	r1, [pc, #96]	; (80051b4 <HAL_RCC_ClockConfig+0x1f0>)
 8005154:	4313      	orrs	r3, r2
 8005156:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f003 0308 	and.w	r3, r3, #8
 8005160:	2b00      	cmp	r3, #0
 8005162:	d009      	beq.n	8005178 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005164:	4b13      	ldr	r3, [pc, #76]	; (80051b4 <HAL_RCC_ClockConfig+0x1f0>)
 8005166:	689b      	ldr	r3, [r3, #8]
 8005168:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	691b      	ldr	r3, [r3, #16]
 8005170:	00db      	lsls	r3, r3, #3
 8005172:	4910      	ldr	r1, [pc, #64]	; (80051b4 <HAL_RCC_ClockConfig+0x1f0>)
 8005174:	4313      	orrs	r3, r2
 8005176:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005178:	f000 f824 	bl	80051c4 <HAL_RCC_GetSysClockFreq>
 800517c:	4602      	mov	r2, r0
 800517e:	4b0d      	ldr	r3, [pc, #52]	; (80051b4 <HAL_RCC_ClockConfig+0x1f0>)
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	091b      	lsrs	r3, r3, #4
 8005184:	f003 030f 	and.w	r3, r3, #15
 8005188:	490b      	ldr	r1, [pc, #44]	; (80051b8 <HAL_RCC_ClockConfig+0x1f4>)
 800518a:	5ccb      	ldrb	r3, [r1, r3]
 800518c:	f003 031f 	and.w	r3, r3, #31
 8005190:	fa22 f303 	lsr.w	r3, r2, r3
 8005194:	4a09      	ldr	r2, [pc, #36]	; (80051bc <HAL_RCC_ClockConfig+0x1f8>)
 8005196:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005198:	4b09      	ldr	r3, [pc, #36]	; (80051c0 <HAL_RCC_ClockConfig+0x1fc>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4618      	mov	r0, r3
 800519e:	f7fc fd31 	bl	8001c04 <HAL_InitTick>
 80051a2:	4603      	mov	r3, r0
 80051a4:	72fb      	strb	r3, [r7, #11]

  return status;
 80051a6:	7afb      	ldrb	r3, [r7, #11]
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	3710      	adds	r7, #16
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd80      	pop	{r7, pc}
 80051b0:	40022000 	.word	0x40022000
 80051b4:	40021000 	.word	0x40021000
 80051b8:	0800ab38 	.word	0x0800ab38
 80051bc:	20000000 	.word	0x20000000
 80051c0:	20000004 	.word	0x20000004

080051c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b089      	sub	sp, #36	; 0x24
 80051c8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80051ca:	2300      	movs	r3, #0
 80051cc:	61fb      	str	r3, [r7, #28]
 80051ce:	2300      	movs	r3, #0
 80051d0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80051d2:	4b3e      	ldr	r3, [pc, #248]	; (80052cc <HAL_RCC_GetSysClockFreq+0x108>)
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	f003 030c 	and.w	r3, r3, #12
 80051da:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80051dc:	4b3b      	ldr	r3, [pc, #236]	; (80052cc <HAL_RCC_GetSysClockFreq+0x108>)
 80051de:	68db      	ldr	r3, [r3, #12]
 80051e0:	f003 0303 	and.w	r3, r3, #3
 80051e4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d005      	beq.n	80051f8 <HAL_RCC_GetSysClockFreq+0x34>
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	2b0c      	cmp	r3, #12
 80051f0:	d121      	bne.n	8005236 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	d11e      	bne.n	8005236 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80051f8:	4b34      	ldr	r3, [pc, #208]	; (80052cc <HAL_RCC_GetSysClockFreq+0x108>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f003 0308 	and.w	r3, r3, #8
 8005200:	2b00      	cmp	r3, #0
 8005202:	d107      	bne.n	8005214 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005204:	4b31      	ldr	r3, [pc, #196]	; (80052cc <HAL_RCC_GetSysClockFreq+0x108>)
 8005206:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800520a:	0a1b      	lsrs	r3, r3, #8
 800520c:	f003 030f 	and.w	r3, r3, #15
 8005210:	61fb      	str	r3, [r7, #28]
 8005212:	e005      	b.n	8005220 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005214:	4b2d      	ldr	r3, [pc, #180]	; (80052cc <HAL_RCC_GetSysClockFreq+0x108>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	091b      	lsrs	r3, r3, #4
 800521a:	f003 030f 	and.w	r3, r3, #15
 800521e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005220:	4a2b      	ldr	r2, [pc, #172]	; (80052d0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005222:	69fb      	ldr	r3, [r7, #28]
 8005224:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005228:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d10d      	bne.n	800524c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005230:	69fb      	ldr	r3, [r7, #28]
 8005232:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005234:	e00a      	b.n	800524c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	2b04      	cmp	r3, #4
 800523a:	d102      	bne.n	8005242 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800523c:	4b25      	ldr	r3, [pc, #148]	; (80052d4 <HAL_RCC_GetSysClockFreq+0x110>)
 800523e:	61bb      	str	r3, [r7, #24]
 8005240:	e004      	b.n	800524c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	2b08      	cmp	r3, #8
 8005246:	d101      	bne.n	800524c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005248:	4b23      	ldr	r3, [pc, #140]	; (80052d8 <HAL_RCC_GetSysClockFreq+0x114>)
 800524a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	2b0c      	cmp	r3, #12
 8005250:	d134      	bne.n	80052bc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005252:	4b1e      	ldr	r3, [pc, #120]	; (80052cc <HAL_RCC_GetSysClockFreq+0x108>)
 8005254:	68db      	ldr	r3, [r3, #12]
 8005256:	f003 0303 	and.w	r3, r3, #3
 800525a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	2b02      	cmp	r3, #2
 8005260:	d003      	beq.n	800526a <HAL_RCC_GetSysClockFreq+0xa6>
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	2b03      	cmp	r3, #3
 8005266:	d003      	beq.n	8005270 <HAL_RCC_GetSysClockFreq+0xac>
 8005268:	e005      	b.n	8005276 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800526a:	4b1a      	ldr	r3, [pc, #104]	; (80052d4 <HAL_RCC_GetSysClockFreq+0x110>)
 800526c:	617b      	str	r3, [r7, #20]
      break;
 800526e:	e005      	b.n	800527c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005270:	4b19      	ldr	r3, [pc, #100]	; (80052d8 <HAL_RCC_GetSysClockFreq+0x114>)
 8005272:	617b      	str	r3, [r7, #20]
      break;
 8005274:	e002      	b.n	800527c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005276:	69fb      	ldr	r3, [r7, #28]
 8005278:	617b      	str	r3, [r7, #20]
      break;
 800527a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800527c:	4b13      	ldr	r3, [pc, #76]	; (80052cc <HAL_RCC_GetSysClockFreq+0x108>)
 800527e:	68db      	ldr	r3, [r3, #12]
 8005280:	091b      	lsrs	r3, r3, #4
 8005282:	f003 0307 	and.w	r3, r3, #7
 8005286:	3301      	adds	r3, #1
 8005288:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800528a:	4b10      	ldr	r3, [pc, #64]	; (80052cc <HAL_RCC_GetSysClockFreq+0x108>)
 800528c:	68db      	ldr	r3, [r3, #12]
 800528e:	0a1b      	lsrs	r3, r3, #8
 8005290:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005294:	697a      	ldr	r2, [r7, #20]
 8005296:	fb03 f202 	mul.w	r2, r3, r2
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	fbb2 f3f3 	udiv	r3, r2, r3
 80052a0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80052a2:	4b0a      	ldr	r3, [pc, #40]	; (80052cc <HAL_RCC_GetSysClockFreq+0x108>)
 80052a4:	68db      	ldr	r3, [r3, #12]
 80052a6:	0e5b      	lsrs	r3, r3, #25
 80052a8:	f003 0303 	and.w	r3, r3, #3
 80052ac:	3301      	adds	r3, #1
 80052ae:	005b      	lsls	r3, r3, #1
 80052b0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80052b2:	697a      	ldr	r2, [r7, #20]
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80052ba:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80052bc:	69bb      	ldr	r3, [r7, #24]
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3724      	adds	r7, #36	; 0x24
 80052c2:	46bd      	mov	sp, r7
 80052c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c8:	4770      	bx	lr
 80052ca:	bf00      	nop
 80052cc:	40021000 	.word	0x40021000
 80052d0:	0800ab50 	.word	0x0800ab50
 80052d4:	00f42400 	.word	0x00f42400
 80052d8:	007a1200 	.word	0x007a1200

080052dc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052dc:	b480      	push	{r7}
 80052de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80052e0:	4b03      	ldr	r3, [pc, #12]	; (80052f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80052e2:	681b      	ldr	r3, [r3, #0]
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	46bd      	mov	sp, r7
 80052e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ec:	4770      	bx	lr
 80052ee:	bf00      	nop
 80052f0:	20000000 	.word	0x20000000

080052f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80052f8:	f7ff fff0 	bl	80052dc <HAL_RCC_GetHCLKFreq>
 80052fc:	4602      	mov	r2, r0
 80052fe:	4b06      	ldr	r3, [pc, #24]	; (8005318 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005300:	689b      	ldr	r3, [r3, #8]
 8005302:	0a1b      	lsrs	r3, r3, #8
 8005304:	f003 0307 	and.w	r3, r3, #7
 8005308:	4904      	ldr	r1, [pc, #16]	; (800531c <HAL_RCC_GetPCLK1Freq+0x28>)
 800530a:	5ccb      	ldrb	r3, [r1, r3]
 800530c:	f003 031f 	and.w	r3, r3, #31
 8005310:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005314:	4618      	mov	r0, r3
 8005316:	bd80      	pop	{r7, pc}
 8005318:	40021000 	.word	0x40021000
 800531c:	0800ab48 	.word	0x0800ab48

08005320 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005324:	f7ff ffda 	bl	80052dc <HAL_RCC_GetHCLKFreq>
 8005328:	4602      	mov	r2, r0
 800532a:	4b06      	ldr	r3, [pc, #24]	; (8005344 <HAL_RCC_GetPCLK2Freq+0x24>)
 800532c:	689b      	ldr	r3, [r3, #8]
 800532e:	0adb      	lsrs	r3, r3, #11
 8005330:	f003 0307 	and.w	r3, r3, #7
 8005334:	4904      	ldr	r1, [pc, #16]	; (8005348 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005336:	5ccb      	ldrb	r3, [r1, r3]
 8005338:	f003 031f 	and.w	r3, r3, #31
 800533c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005340:	4618      	mov	r0, r3
 8005342:	bd80      	pop	{r7, pc}
 8005344:	40021000 	.word	0x40021000
 8005348:	0800ab48 	.word	0x0800ab48

0800534c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b086      	sub	sp, #24
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005354:	2300      	movs	r3, #0
 8005356:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005358:	4b2a      	ldr	r3, [pc, #168]	; (8005404 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800535a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800535c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005360:	2b00      	cmp	r3, #0
 8005362:	d003      	beq.n	800536c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005364:	f7ff f9ee 	bl	8004744 <HAL_PWREx_GetVoltageRange>
 8005368:	6178      	str	r0, [r7, #20]
 800536a:	e014      	b.n	8005396 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800536c:	4b25      	ldr	r3, [pc, #148]	; (8005404 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800536e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005370:	4a24      	ldr	r2, [pc, #144]	; (8005404 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005372:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005376:	6593      	str	r3, [r2, #88]	; 0x58
 8005378:	4b22      	ldr	r3, [pc, #136]	; (8005404 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800537a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800537c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005380:	60fb      	str	r3, [r7, #12]
 8005382:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005384:	f7ff f9de 	bl	8004744 <HAL_PWREx_GetVoltageRange>
 8005388:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800538a:	4b1e      	ldr	r3, [pc, #120]	; (8005404 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800538c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800538e:	4a1d      	ldr	r2, [pc, #116]	; (8005404 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005390:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005394:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800539c:	d10b      	bne.n	80053b6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2b80      	cmp	r3, #128	; 0x80
 80053a2:	d919      	bls.n	80053d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2ba0      	cmp	r3, #160	; 0xa0
 80053a8:	d902      	bls.n	80053b0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80053aa:	2302      	movs	r3, #2
 80053ac:	613b      	str	r3, [r7, #16]
 80053ae:	e013      	b.n	80053d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80053b0:	2301      	movs	r3, #1
 80053b2:	613b      	str	r3, [r7, #16]
 80053b4:	e010      	b.n	80053d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2b80      	cmp	r3, #128	; 0x80
 80053ba:	d902      	bls.n	80053c2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80053bc:	2303      	movs	r3, #3
 80053be:	613b      	str	r3, [r7, #16]
 80053c0:	e00a      	b.n	80053d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2b80      	cmp	r3, #128	; 0x80
 80053c6:	d102      	bne.n	80053ce <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80053c8:	2302      	movs	r3, #2
 80053ca:	613b      	str	r3, [r7, #16]
 80053cc:	e004      	b.n	80053d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2b70      	cmp	r3, #112	; 0x70
 80053d2:	d101      	bne.n	80053d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80053d4:	2301      	movs	r3, #1
 80053d6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80053d8:	4b0b      	ldr	r3, [pc, #44]	; (8005408 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f023 0207 	bic.w	r2, r3, #7
 80053e0:	4909      	ldr	r1, [pc, #36]	; (8005408 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	4313      	orrs	r3, r2
 80053e6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80053e8:	4b07      	ldr	r3, [pc, #28]	; (8005408 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f003 0307 	and.w	r3, r3, #7
 80053f0:	693a      	ldr	r2, [r7, #16]
 80053f2:	429a      	cmp	r2, r3
 80053f4:	d001      	beq.n	80053fa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80053f6:	2301      	movs	r3, #1
 80053f8:	e000      	b.n	80053fc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80053fa:	2300      	movs	r3, #0
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	3718      	adds	r7, #24
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}
 8005404:	40021000 	.word	0x40021000
 8005408:	40022000 	.word	0x40022000

0800540c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b086      	sub	sp, #24
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005414:	2300      	movs	r3, #0
 8005416:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005418:	2300      	movs	r3, #0
 800541a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005424:	2b00      	cmp	r3, #0
 8005426:	d041      	beq.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800542c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005430:	d02a      	beq.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005432:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005436:	d824      	bhi.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005438:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800543c:	d008      	beq.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800543e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005442:	d81e      	bhi.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005444:	2b00      	cmp	r3, #0
 8005446:	d00a      	beq.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005448:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800544c:	d010      	beq.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800544e:	e018      	b.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005450:	4b86      	ldr	r3, [pc, #536]	; (800566c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005452:	68db      	ldr	r3, [r3, #12]
 8005454:	4a85      	ldr	r2, [pc, #532]	; (800566c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005456:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800545a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800545c:	e015      	b.n	800548a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	3304      	adds	r3, #4
 8005462:	2100      	movs	r1, #0
 8005464:	4618      	mov	r0, r3
 8005466:	f000 fabb 	bl	80059e0 <RCCEx_PLLSAI1_Config>
 800546a:	4603      	mov	r3, r0
 800546c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800546e:	e00c      	b.n	800548a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	3320      	adds	r3, #32
 8005474:	2100      	movs	r1, #0
 8005476:	4618      	mov	r0, r3
 8005478:	f000 fba6 	bl	8005bc8 <RCCEx_PLLSAI2_Config>
 800547c:	4603      	mov	r3, r0
 800547e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005480:	e003      	b.n	800548a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005482:	2301      	movs	r3, #1
 8005484:	74fb      	strb	r3, [r7, #19]
      break;
 8005486:	e000      	b.n	800548a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005488:	bf00      	nop
    }

    if(ret == HAL_OK)
 800548a:	7cfb      	ldrb	r3, [r7, #19]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d10b      	bne.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005490:	4b76      	ldr	r3, [pc, #472]	; (800566c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005492:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005496:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800549e:	4973      	ldr	r1, [pc, #460]	; (800566c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054a0:	4313      	orrs	r3, r2
 80054a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80054a6:	e001      	b.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054a8:	7cfb      	ldrb	r3, [r7, #19]
 80054aa:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d041      	beq.n	800553c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80054bc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80054c0:	d02a      	beq.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80054c2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80054c6:	d824      	bhi.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80054c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80054cc:	d008      	beq.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80054ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80054d2:	d81e      	bhi.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d00a      	beq.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80054d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80054dc:	d010      	beq.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80054de:	e018      	b.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80054e0:	4b62      	ldr	r3, [pc, #392]	; (800566c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054e2:	68db      	ldr	r3, [r3, #12]
 80054e4:	4a61      	ldr	r2, [pc, #388]	; (800566c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054ea:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80054ec:	e015      	b.n	800551a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	3304      	adds	r3, #4
 80054f2:	2100      	movs	r1, #0
 80054f4:	4618      	mov	r0, r3
 80054f6:	f000 fa73 	bl	80059e0 <RCCEx_PLLSAI1_Config>
 80054fa:	4603      	mov	r3, r0
 80054fc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80054fe:	e00c      	b.n	800551a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	3320      	adds	r3, #32
 8005504:	2100      	movs	r1, #0
 8005506:	4618      	mov	r0, r3
 8005508:	f000 fb5e 	bl	8005bc8 <RCCEx_PLLSAI2_Config>
 800550c:	4603      	mov	r3, r0
 800550e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005510:	e003      	b.n	800551a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	74fb      	strb	r3, [r7, #19]
      break;
 8005516:	e000      	b.n	800551a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005518:	bf00      	nop
    }

    if(ret == HAL_OK)
 800551a:	7cfb      	ldrb	r3, [r7, #19]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d10b      	bne.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005520:	4b52      	ldr	r3, [pc, #328]	; (800566c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005522:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005526:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800552e:	494f      	ldr	r1, [pc, #316]	; (800566c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005530:	4313      	orrs	r3, r2
 8005532:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005536:	e001      	b.n	800553c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005538:	7cfb      	ldrb	r3, [r7, #19]
 800553a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005544:	2b00      	cmp	r3, #0
 8005546:	f000 80a0 	beq.w	800568a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800554a:	2300      	movs	r3, #0
 800554c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800554e:	4b47      	ldr	r3, [pc, #284]	; (800566c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005550:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005552:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005556:	2b00      	cmp	r3, #0
 8005558:	d101      	bne.n	800555e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800555a:	2301      	movs	r3, #1
 800555c:	e000      	b.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800555e:	2300      	movs	r3, #0
 8005560:	2b00      	cmp	r3, #0
 8005562:	d00d      	beq.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005564:	4b41      	ldr	r3, [pc, #260]	; (800566c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005566:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005568:	4a40      	ldr	r2, [pc, #256]	; (800566c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800556a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800556e:	6593      	str	r3, [r2, #88]	; 0x58
 8005570:	4b3e      	ldr	r3, [pc, #248]	; (800566c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005572:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005574:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005578:	60bb      	str	r3, [r7, #8]
 800557a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800557c:	2301      	movs	r3, #1
 800557e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005580:	4b3b      	ldr	r3, [pc, #236]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a3a      	ldr	r2, [pc, #232]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005586:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800558a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800558c:	f7fc fb8a 	bl	8001ca4 <HAL_GetTick>
 8005590:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005592:	e009      	b.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005594:	f7fc fb86 	bl	8001ca4 <HAL_GetTick>
 8005598:	4602      	mov	r2, r0
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	1ad3      	subs	r3, r2, r3
 800559e:	2b02      	cmp	r3, #2
 80055a0:	d902      	bls.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80055a2:	2303      	movs	r3, #3
 80055a4:	74fb      	strb	r3, [r7, #19]
        break;
 80055a6:	e005      	b.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80055a8:	4b31      	ldr	r3, [pc, #196]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d0ef      	beq.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80055b4:	7cfb      	ldrb	r3, [r7, #19]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d15c      	bne.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80055ba:	4b2c      	ldr	r3, [pc, #176]	; (800566c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055c4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d01f      	beq.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x200>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055d2:	697a      	ldr	r2, [r7, #20]
 80055d4:	429a      	cmp	r2, r3
 80055d6:	d019      	beq.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80055d8:	4b24      	ldr	r3, [pc, #144]	; (800566c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055e2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80055e4:	4b21      	ldr	r3, [pc, #132]	; (800566c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055ea:	4a20      	ldr	r2, [pc, #128]	; (800566c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80055f4:	4b1d      	ldr	r3, [pc, #116]	; (800566c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055fa:	4a1c      	ldr	r2, [pc, #112]	; (800566c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005600:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005604:	4a19      	ldr	r2, [pc, #100]	; (800566c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	f003 0301 	and.w	r3, r3, #1
 8005612:	2b00      	cmp	r3, #0
 8005614:	d016      	beq.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005616:	f7fc fb45 	bl	8001ca4 <HAL_GetTick>
 800561a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800561c:	e00b      	b.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800561e:	f7fc fb41 	bl	8001ca4 <HAL_GetTick>
 8005622:	4602      	mov	r2, r0
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	1ad3      	subs	r3, r2, r3
 8005628:	f241 3288 	movw	r2, #5000	; 0x1388
 800562c:	4293      	cmp	r3, r2
 800562e:	d902      	bls.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005630:	2303      	movs	r3, #3
 8005632:	74fb      	strb	r3, [r7, #19]
            break;
 8005634:	e006      	b.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005636:	4b0d      	ldr	r3, [pc, #52]	; (800566c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005638:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800563c:	f003 0302 	and.w	r3, r3, #2
 8005640:	2b00      	cmp	r3, #0
 8005642:	d0ec      	beq.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005644:	7cfb      	ldrb	r3, [r7, #19]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d10c      	bne.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800564a:	4b08      	ldr	r3, [pc, #32]	; (800566c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800564c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005650:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800565a:	4904      	ldr	r1, [pc, #16]	; (800566c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800565c:	4313      	orrs	r3, r2
 800565e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005662:	e009      	b.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005664:	7cfb      	ldrb	r3, [r7, #19]
 8005666:	74bb      	strb	r3, [r7, #18]
 8005668:	e006      	b.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800566a:	bf00      	nop
 800566c:	40021000 	.word	0x40021000
 8005670:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005674:	7cfb      	ldrb	r3, [r7, #19]
 8005676:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005678:	7c7b      	ldrb	r3, [r7, #17]
 800567a:	2b01      	cmp	r3, #1
 800567c:	d105      	bne.n	800568a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800567e:	4b9e      	ldr	r3, [pc, #632]	; (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005680:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005682:	4a9d      	ldr	r2, [pc, #628]	; (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005684:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005688:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f003 0301 	and.w	r3, r3, #1
 8005692:	2b00      	cmp	r3, #0
 8005694:	d00a      	beq.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005696:	4b98      	ldr	r3, [pc, #608]	; (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005698:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800569c:	f023 0203 	bic.w	r2, r3, #3
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056a4:	4994      	ldr	r1, [pc, #592]	; (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056a6:	4313      	orrs	r3, r2
 80056a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f003 0302 	and.w	r3, r3, #2
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d00a      	beq.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80056b8:	4b8f      	ldr	r3, [pc, #572]	; (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056be:	f023 020c 	bic.w	r2, r3, #12
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056c6:	498c      	ldr	r1, [pc, #560]	; (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056c8:	4313      	orrs	r3, r2
 80056ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f003 0304 	and.w	r3, r3, #4
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d00a      	beq.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80056da:	4b87      	ldr	r3, [pc, #540]	; (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056e0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056e8:	4983      	ldr	r1, [pc, #524]	; (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056ea:	4313      	orrs	r3, r2
 80056ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f003 0308 	and.w	r3, r3, #8
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d00a      	beq.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80056fc:	4b7e      	ldr	r3, [pc, #504]	; (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005702:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800570a:	497b      	ldr	r1, [pc, #492]	; (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800570c:	4313      	orrs	r3, r2
 800570e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f003 0310 	and.w	r3, r3, #16
 800571a:	2b00      	cmp	r3, #0
 800571c:	d00a      	beq.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800571e:	4b76      	ldr	r3, [pc, #472]	; (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005720:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005724:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800572c:	4972      	ldr	r1, [pc, #456]	; (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800572e:	4313      	orrs	r3, r2
 8005730:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f003 0320 	and.w	r3, r3, #32
 800573c:	2b00      	cmp	r3, #0
 800573e:	d00a      	beq.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005740:	4b6d      	ldr	r3, [pc, #436]	; (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005742:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005746:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800574e:	496a      	ldr	r1, [pc, #424]	; (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005750:	4313      	orrs	r3, r2
 8005752:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800575e:	2b00      	cmp	r3, #0
 8005760:	d00a      	beq.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005762:	4b65      	ldr	r3, [pc, #404]	; (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005764:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005768:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005770:	4961      	ldr	r1, [pc, #388]	; (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005772:	4313      	orrs	r3, r2
 8005774:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005780:	2b00      	cmp	r3, #0
 8005782:	d00a      	beq.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005784:	4b5c      	ldr	r3, [pc, #368]	; (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005786:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800578a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005792:	4959      	ldr	r1, [pc, #356]	; (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005794:	4313      	orrs	r3, r2
 8005796:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d00a      	beq.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80057a6:	4b54      	ldr	r3, [pc, #336]	; (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057ac:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057b4:	4950      	ldr	r1, [pc, #320]	; (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057b6:	4313      	orrs	r3, r2
 80057b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d00a      	beq.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80057c8:	4b4b      	ldr	r3, [pc, #300]	; (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057ce:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057d6:	4948      	ldr	r1, [pc, #288]	; (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057d8:	4313      	orrs	r3, r2
 80057da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d00a      	beq.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80057ea:	4b43      	ldr	r3, [pc, #268]	; (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057f8:	493f      	ldr	r1, [pc, #252]	; (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057fa:	4313      	orrs	r3, r2
 80057fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005808:	2b00      	cmp	r3, #0
 800580a:	d028      	beq.n	800585e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800580c:	4b3a      	ldr	r3, [pc, #232]	; (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800580e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005812:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800581a:	4937      	ldr	r1, [pc, #220]	; (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800581c:	4313      	orrs	r3, r2
 800581e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005826:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800582a:	d106      	bne.n	800583a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800582c:	4b32      	ldr	r3, [pc, #200]	; (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800582e:	68db      	ldr	r3, [r3, #12]
 8005830:	4a31      	ldr	r2, [pc, #196]	; (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005832:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005836:	60d3      	str	r3, [r2, #12]
 8005838:	e011      	b.n	800585e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800583e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005842:	d10c      	bne.n	800585e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	3304      	adds	r3, #4
 8005848:	2101      	movs	r1, #1
 800584a:	4618      	mov	r0, r3
 800584c:	f000 f8c8 	bl	80059e0 <RCCEx_PLLSAI1_Config>
 8005850:	4603      	mov	r3, r0
 8005852:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005854:	7cfb      	ldrb	r3, [r7, #19]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d001      	beq.n	800585e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800585a:	7cfb      	ldrb	r3, [r7, #19]
 800585c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005866:	2b00      	cmp	r3, #0
 8005868:	d028      	beq.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800586a:	4b23      	ldr	r3, [pc, #140]	; (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800586c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005870:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005878:	491f      	ldr	r1, [pc, #124]	; (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800587a:	4313      	orrs	r3, r2
 800587c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005884:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005888:	d106      	bne.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800588a:	4b1b      	ldr	r3, [pc, #108]	; (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800588c:	68db      	ldr	r3, [r3, #12]
 800588e:	4a1a      	ldr	r2, [pc, #104]	; (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005890:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005894:	60d3      	str	r3, [r2, #12]
 8005896:	e011      	b.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800589c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80058a0:	d10c      	bne.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	3304      	adds	r3, #4
 80058a6:	2101      	movs	r1, #1
 80058a8:	4618      	mov	r0, r3
 80058aa:	f000 f899 	bl	80059e0 <RCCEx_PLLSAI1_Config>
 80058ae:	4603      	mov	r3, r0
 80058b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80058b2:	7cfb      	ldrb	r3, [r7, #19]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d001      	beq.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80058b8:	7cfb      	ldrb	r3, [r7, #19]
 80058ba:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d02b      	beq.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80058c8:	4b0b      	ldr	r3, [pc, #44]	; (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058ce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058d6:	4908      	ldr	r1, [pc, #32]	; (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058d8:	4313      	orrs	r3, r2
 80058da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80058e6:	d109      	bne.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80058e8:	4b03      	ldr	r3, [pc, #12]	; (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058ea:	68db      	ldr	r3, [r3, #12]
 80058ec:	4a02      	ldr	r2, [pc, #8]	; (80058f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80058f2:	60d3      	str	r3, [r2, #12]
 80058f4:	e014      	b.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80058f6:	bf00      	nop
 80058f8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005900:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005904:	d10c      	bne.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	3304      	adds	r3, #4
 800590a:	2101      	movs	r1, #1
 800590c:	4618      	mov	r0, r3
 800590e:	f000 f867 	bl	80059e0 <RCCEx_PLLSAI1_Config>
 8005912:	4603      	mov	r3, r0
 8005914:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005916:	7cfb      	ldrb	r3, [r7, #19]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d001      	beq.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800591c:	7cfb      	ldrb	r3, [r7, #19]
 800591e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005928:	2b00      	cmp	r3, #0
 800592a:	d02f      	beq.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800592c:	4b2b      	ldr	r3, [pc, #172]	; (80059dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800592e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005932:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800593a:	4928      	ldr	r1, [pc, #160]	; (80059dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800593c:	4313      	orrs	r3, r2
 800593e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005946:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800594a:	d10d      	bne.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	3304      	adds	r3, #4
 8005950:	2102      	movs	r1, #2
 8005952:	4618      	mov	r0, r3
 8005954:	f000 f844 	bl	80059e0 <RCCEx_PLLSAI1_Config>
 8005958:	4603      	mov	r3, r0
 800595a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800595c:	7cfb      	ldrb	r3, [r7, #19]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d014      	beq.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005962:	7cfb      	ldrb	r3, [r7, #19]
 8005964:	74bb      	strb	r3, [r7, #18]
 8005966:	e011      	b.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800596c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005970:	d10c      	bne.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	3320      	adds	r3, #32
 8005976:	2102      	movs	r1, #2
 8005978:	4618      	mov	r0, r3
 800597a:	f000 f925 	bl	8005bc8 <RCCEx_PLLSAI2_Config>
 800597e:	4603      	mov	r3, r0
 8005980:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005982:	7cfb      	ldrb	r3, [r7, #19]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d001      	beq.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005988:	7cfb      	ldrb	r3, [r7, #19]
 800598a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005994:	2b00      	cmp	r3, #0
 8005996:	d00a      	beq.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005998:	4b10      	ldr	r3, [pc, #64]	; (80059dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800599a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800599e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80059a6:	490d      	ldr	r1, [pc, #52]	; (80059dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80059a8:	4313      	orrs	r3, r2
 80059aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d00b      	beq.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80059ba:	4b08      	ldr	r3, [pc, #32]	; (80059dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80059bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059c0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80059ca:	4904      	ldr	r1, [pc, #16]	; (80059dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80059cc:	4313      	orrs	r3, r2
 80059ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80059d2:	7cbb      	ldrb	r3, [r7, #18]
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	3718      	adds	r7, #24
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}
 80059dc:	40021000 	.word	0x40021000

080059e0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b084      	sub	sp, #16
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
 80059e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80059ea:	2300      	movs	r3, #0
 80059ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80059ee:	4b75      	ldr	r3, [pc, #468]	; (8005bc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80059f0:	68db      	ldr	r3, [r3, #12]
 80059f2:	f003 0303 	and.w	r3, r3, #3
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d018      	beq.n	8005a2c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80059fa:	4b72      	ldr	r3, [pc, #456]	; (8005bc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80059fc:	68db      	ldr	r3, [r3, #12]
 80059fe:	f003 0203 	and.w	r2, r3, #3
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	429a      	cmp	r2, r3
 8005a08:	d10d      	bne.n	8005a26 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
       ||
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d009      	beq.n	8005a26 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005a12:	4b6c      	ldr	r3, [pc, #432]	; (8005bc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a14:	68db      	ldr	r3, [r3, #12]
 8005a16:	091b      	lsrs	r3, r3, #4
 8005a18:	f003 0307 	and.w	r3, r3, #7
 8005a1c:	1c5a      	adds	r2, r3, #1
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	685b      	ldr	r3, [r3, #4]
       ||
 8005a22:	429a      	cmp	r2, r3
 8005a24:	d047      	beq.n	8005ab6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005a26:	2301      	movs	r3, #1
 8005a28:	73fb      	strb	r3, [r7, #15]
 8005a2a:	e044      	b.n	8005ab6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	2b03      	cmp	r3, #3
 8005a32:	d018      	beq.n	8005a66 <RCCEx_PLLSAI1_Config+0x86>
 8005a34:	2b03      	cmp	r3, #3
 8005a36:	d825      	bhi.n	8005a84 <RCCEx_PLLSAI1_Config+0xa4>
 8005a38:	2b01      	cmp	r3, #1
 8005a3a:	d002      	beq.n	8005a42 <RCCEx_PLLSAI1_Config+0x62>
 8005a3c:	2b02      	cmp	r3, #2
 8005a3e:	d009      	beq.n	8005a54 <RCCEx_PLLSAI1_Config+0x74>
 8005a40:	e020      	b.n	8005a84 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005a42:	4b60      	ldr	r3, [pc, #384]	; (8005bc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f003 0302 	and.w	r3, r3, #2
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d11d      	bne.n	8005a8a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a52:	e01a      	b.n	8005a8a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005a54:	4b5b      	ldr	r3, [pc, #364]	; (8005bc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d116      	bne.n	8005a8e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005a60:	2301      	movs	r3, #1
 8005a62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a64:	e013      	b.n	8005a8e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005a66:	4b57      	ldr	r3, [pc, #348]	; (8005bc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d10f      	bne.n	8005a92 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005a72:	4b54      	ldr	r3, [pc, #336]	; (8005bc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d109      	bne.n	8005a92 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005a82:	e006      	b.n	8005a92 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005a84:	2301      	movs	r3, #1
 8005a86:	73fb      	strb	r3, [r7, #15]
      break;
 8005a88:	e004      	b.n	8005a94 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005a8a:	bf00      	nop
 8005a8c:	e002      	b.n	8005a94 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005a8e:	bf00      	nop
 8005a90:	e000      	b.n	8005a94 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005a92:	bf00      	nop
    }

    if(status == HAL_OK)
 8005a94:	7bfb      	ldrb	r3, [r7, #15]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d10d      	bne.n	8005ab6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005a9a:	4b4a      	ldr	r3, [pc, #296]	; (8005bc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a9c:	68db      	ldr	r3, [r3, #12]
 8005a9e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6819      	ldr	r1, [r3, #0]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	3b01      	subs	r3, #1
 8005aac:	011b      	lsls	r3, r3, #4
 8005aae:	430b      	orrs	r3, r1
 8005ab0:	4944      	ldr	r1, [pc, #272]	; (8005bc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005ab6:	7bfb      	ldrb	r3, [r7, #15]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d17d      	bne.n	8005bb8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005abc:	4b41      	ldr	r3, [pc, #260]	; (8005bc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a40      	ldr	r2, [pc, #256]	; (8005bc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ac2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005ac6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ac8:	f7fc f8ec 	bl	8001ca4 <HAL_GetTick>
 8005acc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005ace:	e009      	b.n	8005ae4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005ad0:	f7fc f8e8 	bl	8001ca4 <HAL_GetTick>
 8005ad4:	4602      	mov	r2, r0
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	1ad3      	subs	r3, r2, r3
 8005ada:	2b02      	cmp	r3, #2
 8005adc:	d902      	bls.n	8005ae4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005ade:	2303      	movs	r3, #3
 8005ae0:	73fb      	strb	r3, [r7, #15]
        break;
 8005ae2:	e005      	b.n	8005af0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005ae4:	4b37      	ldr	r3, [pc, #220]	; (8005bc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d1ef      	bne.n	8005ad0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005af0:	7bfb      	ldrb	r3, [r7, #15]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d160      	bne.n	8005bb8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d111      	bne.n	8005b20 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005afc:	4b31      	ldr	r3, [pc, #196]	; (8005bc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005afe:	691b      	ldr	r3, [r3, #16]
 8005b00:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005b04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b08:	687a      	ldr	r2, [r7, #4]
 8005b0a:	6892      	ldr	r2, [r2, #8]
 8005b0c:	0211      	lsls	r1, r2, #8
 8005b0e:	687a      	ldr	r2, [r7, #4]
 8005b10:	68d2      	ldr	r2, [r2, #12]
 8005b12:	0912      	lsrs	r2, r2, #4
 8005b14:	0452      	lsls	r2, r2, #17
 8005b16:	430a      	orrs	r2, r1
 8005b18:	492a      	ldr	r1, [pc, #168]	; (8005bc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	610b      	str	r3, [r1, #16]
 8005b1e:	e027      	b.n	8005b70 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	2b01      	cmp	r3, #1
 8005b24:	d112      	bne.n	8005b4c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005b26:	4b27      	ldr	r3, [pc, #156]	; (8005bc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b28:	691b      	ldr	r3, [r3, #16]
 8005b2a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005b2e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005b32:	687a      	ldr	r2, [r7, #4]
 8005b34:	6892      	ldr	r2, [r2, #8]
 8005b36:	0211      	lsls	r1, r2, #8
 8005b38:	687a      	ldr	r2, [r7, #4]
 8005b3a:	6912      	ldr	r2, [r2, #16]
 8005b3c:	0852      	lsrs	r2, r2, #1
 8005b3e:	3a01      	subs	r2, #1
 8005b40:	0552      	lsls	r2, r2, #21
 8005b42:	430a      	orrs	r2, r1
 8005b44:	491f      	ldr	r1, [pc, #124]	; (8005bc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b46:	4313      	orrs	r3, r2
 8005b48:	610b      	str	r3, [r1, #16]
 8005b4a:	e011      	b.n	8005b70 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005b4c:	4b1d      	ldr	r3, [pc, #116]	; (8005bc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b4e:	691b      	ldr	r3, [r3, #16]
 8005b50:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005b54:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005b58:	687a      	ldr	r2, [r7, #4]
 8005b5a:	6892      	ldr	r2, [r2, #8]
 8005b5c:	0211      	lsls	r1, r2, #8
 8005b5e:	687a      	ldr	r2, [r7, #4]
 8005b60:	6952      	ldr	r2, [r2, #20]
 8005b62:	0852      	lsrs	r2, r2, #1
 8005b64:	3a01      	subs	r2, #1
 8005b66:	0652      	lsls	r2, r2, #25
 8005b68:	430a      	orrs	r2, r1
 8005b6a:	4916      	ldr	r1, [pc, #88]	; (8005bc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005b70:	4b14      	ldr	r3, [pc, #80]	; (8005bc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a13      	ldr	r2, [pc, #76]	; (8005bc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b76:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005b7a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b7c:	f7fc f892 	bl	8001ca4 <HAL_GetTick>
 8005b80:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005b82:	e009      	b.n	8005b98 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005b84:	f7fc f88e 	bl	8001ca4 <HAL_GetTick>
 8005b88:	4602      	mov	r2, r0
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	1ad3      	subs	r3, r2, r3
 8005b8e:	2b02      	cmp	r3, #2
 8005b90:	d902      	bls.n	8005b98 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005b92:	2303      	movs	r3, #3
 8005b94:	73fb      	strb	r3, [r7, #15]
          break;
 8005b96:	e005      	b.n	8005ba4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005b98:	4b0a      	ldr	r3, [pc, #40]	; (8005bc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d0ef      	beq.n	8005b84 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005ba4:	7bfb      	ldrb	r3, [r7, #15]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d106      	bne.n	8005bb8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005baa:	4b06      	ldr	r3, [pc, #24]	; (8005bc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005bac:	691a      	ldr	r2, [r3, #16]
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	699b      	ldr	r3, [r3, #24]
 8005bb2:	4904      	ldr	r1, [pc, #16]	; (8005bc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	3710      	adds	r7, #16
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd80      	pop	{r7, pc}
 8005bc2:	bf00      	nop
 8005bc4:	40021000 	.word	0x40021000

08005bc8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b084      	sub	sp, #16
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
 8005bd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005bd6:	4b6a      	ldr	r3, [pc, #424]	; (8005d80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005bd8:	68db      	ldr	r3, [r3, #12]
 8005bda:	f003 0303 	and.w	r3, r3, #3
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d018      	beq.n	8005c14 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005be2:	4b67      	ldr	r3, [pc, #412]	; (8005d80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005be4:	68db      	ldr	r3, [r3, #12]
 8005be6:	f003 0203 	and.w	r2, r3, #3
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	429a      	cmp	r2, r3
 8005bf0:	d10d      	bne.n	8005c0e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
       ||
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d009      	beq.n	8005c0e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005bfa:	4b61      	ldr	r3, [pc, #388]	; (8005d80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005bfc:	68db      	ldr	r3, [r3, #12]
 8005bfe:	091b      	lsrs	r3, r3, #4
 8005c00:	f003 0307 	and.w	r3, r3, #7
 8005c04:	1c5a      	adds	r2, r3, #1
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	685b      	ldr	r3, [r3, #4]
       ||
 8005c0a:	429a      	cmp	r2, r3
 8005c0c:	d047      	beq.n	8005c9e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	73fb      	strb	r3, [r7, #15]
 8005c12:	e044      	b.n	8005c9e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	2b03      	cmp	r3, #3
 8005c1a:	d018      	beq.n	8005c4e <RCCEx_PLLSAI2_Config+0x86>
 8005c1c:	2b03      	cmp	r3, #3
 8005c1e:	d825      	bhi.n	8005c6c <RCCEx_PLLSAI2_Config+0xa4>
 8005c20:	2b01      	cmp	r3, #1
 8005c22:	d002      	beq.n	8005c2a <RCCEx_PLLSAI2_Config+0x62>
 8005c24:	2b02      	cmp	r3, #2
 8005c26:	d009      	beq.n	8005c3c <RCCEx_PLLSAI2_Config+0x74>
 8005c28:	e020      	b.n	8005c6c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005c2a:	4b55      	ldr	r3, [pc, #340]	; (8005d80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f003 0302 	and.w	r3, r3, #2
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d11d      	bne.n	8005c72 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
 8005c38:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c3a:	e01a      	b.n	8005c72 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005c3c:	4b50      	ldr	r3, [pc, #320]	; (8005d80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d116      	bne.n	8005c76 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005c48:	2301      	movs	r3, #1
 8005c4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c4c:	e013      	b.n	8005c76 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005c4e:	4b4c      	ldr	r3, [pc, #304]	; (8005d80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d10f      	bne.n	8005c7a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005c5a:	4b49      	ldr	r3, [pc, #292]	; (8005d80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d109      	bne.n	8005c7a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005c66:	2301      	movs	r3, #1
 8005c68:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005c6a:	e006      	b.n	8005c7a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	73fb      	strb	r3, [r7, #15]
      break;
 8005c70:	e004      	b.n	8005c7c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005c72:	bf00      	nop
 8005c74:	e002      	b.n	8005c7c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005c76:	bf00      	nop
 8005c78:	e000      	b.n	8005c7c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005c7a:	bf00      	nop
    }

    if(status == HAL_OK)
 8005c7c:	7bfb      	ldrb	r3, [r7, #15]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d10d      	bne.n	8005c9e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005c82:	4b3f      	ldr	r3, [pc, #252]	; (8005d80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c84:	68db      	ldr	r3, [r3, #12]
 8005c86:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6819      	ldr	r1, [r3, #0]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	3b01      	subs	r3, #1
 8005c94:	011b      	lsls	r3, r3, #4
 8005c96:	430b      	orrs	r3, r1
 8005c98:	4939      	ldr	r1, [pc, #228]	; (8005d80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005c9e:	7bfb      	ldrb	r3, [r7, #15]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d167      	bne.n	8005d74 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005ca4:	4b36      	ldr	r3, [pc, #216]	; (8005d80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a35      	ldr	r2, [pc, #212]	; (8005d80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005caa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005cae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005cb0:	f7fb fff8 	bl	8001ca4 <HAL_GetTick>
 8005cb4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005cb6:	e009      	b.n	8005ccc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005cb8:	f7fb fff4 	bl	8001ca4 <HAL_GetTick>
 8005cbc:	4602      	mov	r2, r0
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	1ad3      	subs	r3, r2, r3
 8005cc2:	2b02      	cmp	r3, #2
 8005cc4:	d902      	bls.n	8005ccc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005cc6:	2303      	movs	r3, #3
 8005cc8:	73fb      	strb	r3, [r7, #15]
        break;
 8005cca:	e005      	b.n	8005cd8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005ccc:	4b2c      	ldr	r3, [pc, #176]	; (8005d80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d1ef      	bne.n	8005cb8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005cd8:	7bfb      	ldrb	r3, [r7, #15]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d14a      	bne.n	8005d74 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d111      	bne.n	8005d08 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005ce4:	4b26      	ldr	r3, [pc, #152]	; (8005d80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ce6:	695b      	ldr	r3, [r3, #20]
 8005ce8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005cec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cf0:	687a      	ldr	r2, [r7, #4]
 8005cf2:	6892      	ldr	r2, [r2, #8]
 8005cf4:	0211      	lsls	r1, r2, #8
 8005cf6:	687a      	ldr	r2, [r7, #4]
 8005cf8:	68d2      	ldr	r2, [r2, #12]
 8005cfa:	0912      	lsrs	r2, r2, #4
 8005cfc:	0452      	lsls	r2, r2, #17
 8005cfe:	430a      	orrs	r2, r1
 8005d00:	491f      	ldr	r1, [pc, #124]	; (8005d80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d02:	4313      	orrs	r3, r2
 8005d04:	614b      	str	r3, [r1, #20]
 8005d06:	e011      	b.n	8005d2c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005d08:	4b1d      	ldr	r3, [pc, #116]	; (8005d80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d0a:	695b      	ldr	r3, [r3, #20]
 8005d0c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005d10:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005d14:	687a      	ldr	r2, [r7, #4]
 8005d16:	6892      	ldr	r2, [r2, #8]
 8005d18:	0211      	lsls	r1, r2, #8
 8005d1a:	687a      	ldr	r2, [r7, #4]
 8005d1c:	6912      	ldr	r2, [r2, #16]
 8005d1e:	0852      	lsrs	r2, r2, #1
 8005d20:	3a01      	subs	r2, #1
 8005d22:	0652      	lsls	r2, r2, #25
 8005d24:	430a      	orrs	r2, r1
 8005d26:	4916      	ldr	r1, [pc, #88]	; (8005d80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005d2c:	4b14      	ldr	r3, [pc, #80]	; (8005d80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a13      	ldr	r2, [pc, #76]	; (8005d80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d36:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d38:	f7fb ffb4 	bl	8001ca4 <HAL_GetTick>
 8005d3c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005d3e:	e009      	b.n	8005d54 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005d40:	f7fb ffb0 	bl	8001ca4 <HAL_GetTick>
 8005d44:	4602      	mov	r2, r0
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	1ad3      	subs	r3, r2, r3
 8005d4a:	2b02      	cmp	r3, #2
 8005d4c:	d902      	bls.n	8005d54 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005d4e:	2303      	movs	r3, #3
 8005d50:	73fb      	strb	r3, [r7, #15]
          break;
 8005d52:	e005      	b.n	8005d60 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005d54:	4b0a      	ldr	r3, [pc, #40]	; (8005d80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d0ef      	beq.n	8005d40 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005d60:	7bfb      	ldrb	r3, [r7, #15]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d106      	bne.n	8005d74 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005d66:	4b06      	ldr	r3, [pc, #24]	; (8005d80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d68:	695a      	ldr	r2, [r3, #20]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	695b      	ldr	r3, [r3, #20]
 8005d6e:	4904      	ldr	r1, [pc, #16]	; (8005d80 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d70:	4313      	orrs	r3, r2
 8005d72:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005d74:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	3710      	adds	r7, #16
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}
 8005d7e:	bf00      	nop
 8005d80:	40021000 	.word	0x40021000

08005d84 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b085      	sub	sp, #20
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d92:	b2db      	uxtb	r3, r3
 8005d94:	2b01      	cmp	r3, #1
 8005d96:	d001      	beq.n	8005d9c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005d98:	2301      	movs	r3, #1
 8005d9a:	e04f      	b.n	8005e3c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2202      	movs	r2, #2
 8005da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	68da      	ldr	r2, [r3, #12]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f042 0201 	orr.w	r2, r2, #1
 8005db2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a23      	ldr	r2, [pc, #140]	; (8005e48 <HAL_TIM_Base_Start_IT+0xc4>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d01d      	beq.n	8005dfa <HAL_TIM_Base_Start_IT+0x76>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dc6:	d018      	beq.n	8005dfa <HAL_TIM_Base_Start_IT+0x76>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a1f      	ldr	r2, [pc, #124]	; (8005e4c <HAL_TIM_Base_Start_IT+0xc8>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d013      	beq.n	8005dfa <HAL_TIM_Base_Start_IT+0x76>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a1e      	ldr	r2, [pc, #120]	; (8005e50 <HAL_TIM_Base_Start_IT+0xcc>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d00e      	beq.n	8005dfa <HAL_TIM_Base_Start_IT+0x76>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a1c      	ldr	r2, [pc, #112]	; (8005e54 <HAL_TIM_Base_Start_IT+0xd0>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d009      	beq.n	8005dfa <HAL_TIM_Base_Start_IT+0x76>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a1b      	ldr	r2, [pc, #108]	; (8005e58 <HAL_TIM_Base_Start_IT+0xd4>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d004      	beq.n	8005dfa <HAL_TIM_Base_Start_IT+0x76>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a19      	ldr	r2, [pc, #100]	; (8005e5c <HAL_TIM_Base_Start_IT+0xd8>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d115      	bne.n	8005e26 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	689a      	ldr	r2, [r3, #8]
 8005e00:	4b17      	ldr	r3, [pc, #92]	; (8005e60 <HAL_TIM_Base_Start_IT+0xdc>)
 8005e02:	4013      	ands	r3, r2
 8005e04:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2b06      	cmp	r3, #6
 8005e0a:	d015      	beq.n	8005e38 <HAL_TIM_Base_Start_IT+0xb4>
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e12:	d011      	beq.n	8005e38 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	681a      	ldr	r2, [r3, #0]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f042 0201 	orr.w	r2, r2, #1
 8005e22:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e24:	e008      	b.n	8005e38 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	681a      	ldr	r2, [r3, #0]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f042 0201 	orr.w	r2, r2, #1
 8005e34:	601a      	str	r2, [r3, #0]
 8005e36:	e000      	b.n	8005e3a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e38:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005e3a:	2300      	movs	r3, #0
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	3714      	adds	r7, #20
 8005e40:	46bd      	mov	sp, r7
 8005e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e46:	4770      	bx	lr
 8005e48:	40012c00 	.word	0x40012c00
 8005e4c:	40000400 	.word	0x40000400
 8005e50:	40000800 	.word	0x40000800
 8005e54:	40000c00 	.word	0x40000c00
 8005e58:	40013400 	.word	0x40013400
 8005e5c:	40014000 	.word	0x40014000
 8005e60:	00010007 	.word	0x00010007

08005e64 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b082      	sub	sp, #8
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d101      	bne.n	8005e76 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005e72:	2301      	movs	r3, #1
 8005e74:	e049      	b.n	8005f0a <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e7c:	b2db      	uxtb	r3, r3
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d106      	bne.n	8005e90 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2200      	movs	r2, #0
 8005e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f7fb fcb2 	bl	80017f4 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2202      	movs	r2, #2
 8005e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681a      	ldr	r2, [r3, #0]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	3304      	adds	r3, #4
 8005ea0:	4619      	mov	r1, r3
 8005ea2:	4610      	mov	r0, r2
 8005ea4:	f000 f9da 	bl	800625c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2201      	movs	r2, #1
 8005eac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2201      	movs	r2, #1
 8005ebc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2201      	movs	r2, #1
 8005ecc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2201      	movs	r2, #1
 8005edc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2201      	movs	r2, #1
 8005eec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2201      	movs	r2, #1
 8005ef4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2201      	movs	r2, #1
 8005efc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2201      	movs	r2, #1
 8005f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f08:	2300      	movs	r3, #0
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3708      	adds	r7, #8
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}

08005f12 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005f12:	b580      	push	{r7, lr}
 8005f14:	b084      	sub	sp, #16
 8005f16:	af00      	add	r7, sp, #0
 8005f18:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	68db      	ldr	r3, [r3, #12]
 8005f20:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	691b      	ldr	r3, [r3, #16]
 8005f28:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	f003 0302 	and.w	r3, r3, #2
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d020      	beq.n	8005f76 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	f003 0302 	and.w	r3, r3, #2
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d01b      	beq.n	8005f76 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f06f 0202 	mvn.w	r2, #2
 8005f46:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	699b      	ldr	r3, [r3, #24]
 8005f54:	f003 0303 	and.w	r3, r3, #3
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d003      	beq.n	8005f64 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	f000 f95f 	bl	8006220 <HAL_TIM_IC_CaptureCallback>
 8005f62:	e005      	b.n	8005f70 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f64:	6878      	ldr	r0, [r7, #4]
 8005f66:	f000 f951 	bl	800620c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f000 f962 	bl	8006234 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2200      	movs	r2, #0
 8005f74:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	f003 0304 	and.w	r3, r3, #4
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d020      	beq.n	8005fc2 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	f003 0304 	and.w	r3, r3, #4
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d01b      	beq.n	8005fc2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f06f 0204 	mvn.w	r2, #4
 8005f92:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2202      	movs	r2, #2
 8005f98:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	699b      	ldr	r3, [r3, #24]
 8005fa0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d003      	beq.n	8005fb0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	f000 f939 	bl	8006220 <HAL_TIM_IC_CaptureCallback>
 8005fae:	e005      	b.n	8005fbc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	f000 f92b 	bl	800620c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f000 f93c 	bl	8006234 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	f003 0308 	and.w	r3, r3, #8
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d020      	beq.n	800600e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	f003 0308 	and.w	r3, r3, #8
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d01b      	beq.n	800600e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f06f 0208 	mvn.w	r2, #8
 8005fde:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2204      	movs	r2, #4
 8005fe4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	69db      	ldr	r3, [r3, #28]
 8005fec:	f003 0303 	and.w	r3, r3, #3
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d003      	beq.n	8005ffc <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ff4:	6878      	ldr	r0, [r7, #4]
 8005ff6:	f000 f913 	bl	8006220 <HAL_TIM_IC_CaptureCallback>
 8005ffa:	e005      	b.n	8006008 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	f000 f905 	bl	800620c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f000 f916 	bl	8006234 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2200      	movs	r2, #0
 800600c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	f003 0310 	and.w	r3, r3, #16
 8006014:	2b00      	cmp	r3, #0
 8006016:	d020      	beq.n	800605a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	f003 0310 	and.w	r3, r3, #16
 800601e:	2b00      	cmp	r3, #0
 8006020:	d01b      	beq.n	800605a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f06f 0210 	mvn.w	r2, #16
 800602a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2208      	movs	r2, #8
 8006030:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	69db      	ldr	r3, [r3, #28]
 8006038:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800603c:	2b00      	cmp	r3, #0
 800603e:	d003      	beq.n	8006048 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006040:	6878      	ldr	r0, [r7, #4]
 8006042:	f000 f8ed 	bl	8006220 <HAL_TIM_IC_CaptureCallback>
 8006046:	e005      	b.n	8006054 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f000 f8df 	bl	800620c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f000 f8f0 	bl	8006234 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2200      	movs	r2, #0
 8006058:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	f003 0301 	and.w	r3, r3, #1
 8006060:	2b00      	cmp	r3, #0
 8006062:	d00c      	beq.n	800607e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	f003 0301 	and.w	r3, r3, #1
 800606a:	2b00      	cmp	r3, #0
 800606c:	d007      	beq.n	800607e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f06f 0201 	mvn.w	r2, #1
 8006076:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	f7fa ff63 	bl	8000f44 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006084:	2b00      	cmp	r3, #0
 8006086:	d00c      	beq.n	80060a2 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800608e:	2b00      	cmp	r3, #0
 8006090:	d007      	beq.n	80060a2 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800609a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	f000 fcdf 	bl	8006a60 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d00c      	beq.n	80060c6 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d007      	beq.n	80060c6 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80060be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80060c0:	6878      	ldr	r0, [r7, #4]
 80060c2:	f000 fcd7 	bl	8006a74 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d00c      	beq.n	80060ea <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d007      	beq.n	80060ea <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80060e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	f000 f8af 	bl	8006248 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	f003 0320 	and.w	r3, r3, #32
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d00c      	beq.n	800610e <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	f003 0320 	and.w	r3, r3, #32
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d007      	beq.n	800610e <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f06f 0220 	mvn.w	r2, #32
 8006106:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	f000 fc9f 	bl	8006a4c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800610e:	bf00      	nop
 8006110:	3710      	adds	r7, #16
 8006112:	46bd      	mov	sp, r7
 8006114:	bd80      	pop	{r7, pc}
	...

08006118 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b086      	sub	sp, #24
 800611c:	af00      	add	r7, sp, #0
 800611e:	60f8      	str	r0, [r7, #12]
 8006120:	60b9      	str	r1, [r7, #8]
 8006122:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006124:	2300      	movs	r3, #0
 8006126:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800612e:	2b01      	cmp	r3, #1
 8006130:	d101      	bne.n	8006136 <HAL_TIM_OC_ConfigChannel+0x1e>
 8006132:	2302      	movs	r3, #2
 8006134:	e066      	b.n	8006204 <HAL_TIM_OC_ConfigChannel+0xec>
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	2201      	movs	r2, #1
 800613a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2b14      	cmp	r3, #20
 8006142:	d857      	bhi.n	80061f4 <HAL_TIM_OC_ConfigChannel+0xdc>
 8006144:	a201      	add	r2, pc, #4	; (adr r2, 800614c <HAL_TIM_OC_ConfigChannel+0x34>)
 8006146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800614a:	bf00      	nop
 800614c:	080061a1 	.word	0x080061a1
 8006150:	080061f5 	.word	0x080061f5
 8006154:	080061f5 	.word	0x080061f5
 8006158:	080061f5 	.word	0x080061f5
 800615c:	080061af 	.word	0x080061af
 8006160:	080061f5 	.word	0x080061f5
 8006164:	080061f5 	.word	0x080061f5
 8006168:	080061f5 	.word	0x080061f5
 800616c:	080061bd 	.word	0x080061bd
 8006170:	080061f5 	.word	0x080061f5
 8006174:	080061f5 	.word	0x080061f5
 8006178:	080061f5 	.word	0x080061f5
 800617c:	080061cb 	.word	0x080061cb
 8006180:	080061f5 	.word	0x080061f5
 8006184:	080061f5 	.word	0x080061f5
 8006188:	080061f5 	.word	0x080061f5
 800618c:	080061d9 	.word	0x080061d9
 8006190:	080061f5 	.word	0x080061f5
 8006194:	080061f5 	.word	0x080061f5
 8006198:	080061f5 	.word	0x080061f5
 800619c:	080061e7 	.word	0x080061e7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	68b9      	ldr	r1, [r7, #8]
 80061a6:	4618      	mov	r0, r3
 80061a8:	f000 f8f2 	bl	8006390 <TIM_OC1_SetConfig>
      break;
 80061ac:	e025      	b.n	80061fa <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	68b9      	ldr	r1, [r7, #8]
 80061b4:	4618      	mov	r0, r3
 80061b6:	f000 f97b 	bl	80064b0 <TIM_OC2_SetConfig>
      break;
 80061ba:	e01e      	b.n	80061fa <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	68b9      	ldr	r1, [r7, #8]
 80061c2:	4618      	mov	r0, r3
 80061c4:	f000 f9fe 	bl	80065c4 <TIM_OC3_SetConfig>
      break;
 80061c8:	e017      	b.n	80061fa <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	68b9      	ldr	r1, [r7, #8]
 80061d0:	4618      	mov	r0, r3
 80061d2:	f000 fa7f 	bl	80066d4 <TIM_OC4_SetConfig>
      break;
 80061d6:	e010      	b.n	80061fa <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	68b9      	ldr	r1, [r7, #8]
 80061de:	4618      	mov	r0, r3
 80061e0:	f000 fae2 	bl	80067a8 <TIM_OC5_SetConfig>
      break;
 80061e4:	e009      	b.n	80061fa <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	68b9      	ldr	r1, [r7, #8]
 80061ec:	4618      	mov	r0, r3
 80061ee:	f000 fb3f 	bl	8006870 <TIM_OC6_SetConfig>
      break;
 80061f2:	e002      	b.n	80061fa <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 80061f4:	2301      	movs	r3, #1
 80061f6:	75fb      	strb	r3, [r7, #23]
      break;
 80061f8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2200      	movs	r2, #0
 80061fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006202:	7dfb      	ldrb	r3, [r7, #23]
}
 8006204:	4618      	mov	r0, r3
 8006206:	3718      	adds	r7, #24
 8006208:	46bd      	mov	sp, r7
 800620a:	bd80      	pop	{r7, pc}

0800620c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800620c:	b480      	push	{r7}
 800620e:	b083      	sub	sp, #12
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006214:	bf00      	nop
 8006216:	370c      	adds	r7, #12
 8006218:	46bd      	mov	sp, r7
 800621a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621e:	4770      	bx	lr

08006220 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006220:	b480      	push	{r7}
 8006222:	b083      	sub	sp, #12
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006228:	bf00      	nop
 800622a:	370c      	adds	r7, #12
 800622c:	46bd      	mov	sp, r7
 800622e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006232:	4770      	bx	lr

08006234 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006234:	b480      	push	{r7}
 8006236:	b083      	sub	sp, #12
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800623c:	bf00      	nop
 800623e:	370c      	adds	r7, #12
 8006240:	46bd      	mov	sp, r7
 8006242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006246:	4770      	bx	lr

08006248 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006248:	b480      	push	{r7}
 800624a:	b083      	sub	sp, #12
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006250:	bf00      	nop
 8006252:	370c      	adds	r7, #12
 8006254:	46bd      	mov	sp, r7
 8006256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625a:	4770      	bx	lr

0800625c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800625c:	b480      	push	{r7}
 800625e:	b085      	sub	sp, #20
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
 8006264:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	4a40      	ldr	r2, [pc, #256]	; (8006370 <TIM_Base_SetConfig+0x114>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d013      	beq.n	800629c <TIM_Base_SetConfig+0x40>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800627a:	d00f      	beq.n	800629c <TIM_Base_SetConfig+0x40>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	4a3d      	ldr	r2, [pc, #244]	; (8006374 <TIM_Base_SetConfig+0x118>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d00b      	beq.n	800629c <TIM_Base_SetConfig+0x40>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	4a3c      	ldr	r2, [pc, #240]	; (8006378 <TIM_Base_SetConfig+0x11c>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d007      	beq.n	800629c <TIM_Base_SetConfig+0x40>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	4a3b      	ldr	r2, [pc, #236]	; (800637c <TIM_Base_SetConfig+0x120>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d003      	beq.n	800629c <TIM_Base_SetConfig+0x40>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	4a3a      	ldr	r2, [pc, #232]	; (8006380 <TIM_Base_SetConfig+0x124>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d108      	bne.n	80062ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	68fa      	ldr	r2, [r7, #12]
 80062aa:	4313      	orrs	r3, r2
 80062ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	4a2f      	ldr	r2, [pc, #188]	; (8006370 <TIM_Base_SetConfig+0x114>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d01f      	beq.n	80062f6 <TIM_Base_SetConfig+0x9a>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062bc:	d01b      	beq.n	80062f6 <TIM_Base_SetConfig+0x9a>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	4a2c      	ldr	r2, [pc, #176]	; (8006374 <TIM_Base_SetConfig+0x118>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d017      	beq.n	80062f6 <TIM_Base_SetConfig+0x9a>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	4a2b      	ldr	r2, [pc, #172]	; (8006378 <TIM_Base_SetConfig+0x11c>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d013      	beq.n	80062f6 <TIM_Base_SetConfig+0x9a>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	4a2a      	ldr	r2, [pc, #168]	; (800637c <TIM_Base_SetConfig+0x120>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d00f      	beq.n	80062f6 <TIM_Base_SetConfig+0x9a>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	4a29      	ldr	r2, [pc, #164]	; (8006380 <TIM_Base_SetConfig+0x124>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d00b      	beq.n	80062f6 <TIM_Base_SetConfig+0x9a>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	4a28      	ldr	r2, [pc, #160]	; (8006384 <TIM_Base_SetConfig+0x128>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d007      	beq.n	80062f6 <TIM_Base_SetConfig+0x9a>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	4a27      	ldr	r2, [pc, #156]	; (8006388 <TIM_Base_SetConfig+0x12c>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d003      	beq.n	80062f6 <TIM_Base_SetConfig+0x9a>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	4a26      	ldr	r2, [pc, #152]	; (800638c <TIM_Base_SetConfig+0x130>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d108      	bne.n	8006308 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	68db      	ldr	r3, [r3, #12]
 8006302:	68fa      	ldr	r2, [r7, #12]
 8006304:	4313      	orrs	r3, r2
 8006306:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	695b      	ldr	r3, [r3, #20]
 8006312:	4313      	orrs	r3, r2
 8006314:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	68fa      	ldr	r2, [r7, #12]
 800631a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	689a      	ldr	r2, [r3, #8]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	681a      	ldr	r2, [r3, #0]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	4a10      	ldr	r2, [pc, #64]	; (8006370 <TIM_Base_SetConfig+0x114>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d00f      	beq.n	8006354 <TIM_Base_SetConfig+0xf8>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	4a12      	ldr	r2, [pc, #72]	; (8006380 <TIM_Base_SetConfig+0x124>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d00b      	beq.n	8006354 <TIM_Base_SetConfig+0xf8>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	4a11      	ldr	r2, [pc, #68]	; (8006384 <TIM_Base_SetConfig+0x128>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d007      	beq.n	8006354 <TIM_Base_SetConfig+0xf8>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	4a10      	ldr	r2, [pc, #64]	; (8006388 <TIM_Base_SetConfig+0x12c>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d003      	beq.n	8006354 <TIM_Base_SetConfig+0xf8>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	4a0f      	ldr	r2, [pc, #60]	; (800638c <TIM_Base_SetConfig+0x130>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d103      	bne.n	800635c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	691a      	ldr	r2, [r3, #16]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2201      	movs	r2, #1
 8006360:	615a      	str	r2, [r3, #20]
}
 8006362:	bf00      	nop
 8006364:	3714      	adds	r7, #20
 8006366:	46bd      	mov	sp, r7
 8006368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636c:	4770      	bx	lr
 800636e:	bf00      	nop
 8006370:	40012c00 	.word	0x40012c00
 8006374:	40000400 	.word	0x40000400
 8006378:	40000800 	.word	0x40000800
 800637c:	40000c00 	.word	0x40000c00
 8006380:	40013400 	.word	0x40013400
 8006384:	40014000 	.word	0x40014000
 8006388:	40014400 	.word	0x40014400
 800638c:	40014800 	.word	0x40014800

08006390 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006390:	b480      	push	{r7}
 8006392:	b087      	sub	sp, #28
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
 8006398:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6a1b      	ldr	r3, [r3, #32]
 800639e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6a1b      	ldr	r3, [r3, #32]
 80063a4:	f023 0201 	bic.w	r2, r3, #1
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	685b      	ldr	r3, [r3, #4]
 80063b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	699b      	ldr	r3, [r3, #24]
 80063b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	f023 0303 	bic.w	r3, r3, #3
 80063ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	68fa      	ldr	r2, [r7, #12]
 80063d2:	4313      	orrs	r3, r2
 80063d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	f023 0302 	bic.w	r3, r3, #2
 80063dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	689b      	ldr	r3, [r3, #8]
 80063e2:	697a      	ldr	r2, [r7, #20]
 80063e4:	4313      	orrs	r3, r2
 80063e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	4a2c      	ldr	r2, [pc, #176]	; (800649c <TIM_OC1_SetConfig+0x10c>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d00f      	beq.n	8006410 <TIM_OC1_SetConfig+0x80>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	4a2b      	ldr	r2, [pc, #172]	; (80064a0 <TIM_OC1_SetConfig+0x110>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d00b      	beq.n	8006410 <TIM_OC1_SetConfig+0x80>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	4a2a      	ldr	r2, [pc, #168]	; (80064a4 <TIM_OC1_SetConfig+0x114>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d007      	beq.n	8006410 <TIM_OC1_SetConfig+0x80>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	4a29      	ldr	r2, [pc, #164]	; (80064a8 <TIM_OC1_SetConfig+0x118>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d003      	beq.n	8006410 <TIM_OC1_SetConfig+0x80>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	4a28      	ldr	r2, [pc, #160]	; (80064ac <TIM_OC1_SetConfig+0x11c>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d10c      	bne.n	800642a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006410:	697b      	ldr	r3, [r7, #20]
 8006412:	f023 0308 	bic.w	r3, r3, #8
 8006416:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	68db      	ldr	r3, [r3, #12]
 800641c:	697a      	ldr	r2, [r7, #20]
 800641e:	4313      	orrs	r3, r2
 8006420:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	f023 0304 	bic.w	r3, r3, #4
 8006428:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	4a1b      	ldr	r2, [pc, #108]	; (800649c <TIM_OC1_SetConfig+0x10c>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d00f      	beq.n	8006452 <TIM_OC1_SetConfig+0xc2>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	4a1a      	ldr	r2, [pc, #104]	; (80064a0 <TIM_OC1_SetConfig+0x110>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d00b      	beq.n	8006452 <TIM_OC1_SetConfig+0xc2>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	4a19      	ldr	r2, [pc, #100]	; (80064a4 <TIM_OC1_SetConfig+0x114>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d007      	beq.n	8006452 <TIM_OC1_SetConfig+0xc2>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	4a18      	ldr	r2, [pc, #96]	; (80064a8 <TIM_OC1_SetConfig+0x118>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d003      	beq.n	8006452 <TIM_OC1_SetConfig+0xc2>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	4a17      	ldr	r2, [pc, #92]	; (80064ac <TIM_OC1_SetConfig+0x11c>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d111      	bne.n	8006476 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006452:	693b      	ldr	r3, [r7, #16]
 8006454:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006458:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006460:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	695b      	ldr	r3, [r3, #20]
 8006466:	693a      	ldr	r2, [r7, #16]
 8006468:	4313      	orrs	r3, r2
 800646a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	699b      	ldr	r3, [r3, #24]
 8006470:	693a      	ldr	r2, [r7, #16]
 8006472:	4313      	orrs	r3, r2
 8006474:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	693a      	ldr	r2, [r7, #16]
 800647a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	68fa      	ldr	r2, [r7, #12]
 8006480:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	685a      	ldr	r2, [r3, #4]
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	697a      	ldr	r2, [r7, #20]
 800648e:	621a      	str	r2, [r3, #32]
}
 8006490:	bf00      	nop
 8006492:	371c      	adds	r7, #28
 8006494:	46bd      	mov	sp, r7
 8006496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649a:	4770      	bx	lr
 800649c:	40012c00 	.word	0x40012c00
 80064a0:	40013400 	.word	0x40013400
 80064a4:	40014000 	.word	0x40014000
 80064a8:	40014400 	.word	0x40014400
 80064ac:	40014800 	.word	0x40014800

080064b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80064b0:	b480      	push	{r7}
 80064b2:	b087      	sub	sp, #28
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
 80064b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6a1b      	ldr	r3, [r3, #32]
 80064be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6a1b      	ldr	r3, [r3, #32]
 80064c4:	f023 0210 	bic.w	r2, r3, #16
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	699b      	ldr	r3, [r3, #24]
 80064d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80064de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	021b      	lsls	r3, r3, #8
 80064f2:	68fa      	ldr	r2, [r7, #12]
 80064f4:	4313      	orrs	r3, r2
 80064f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80064f8:	697b      	ldr	r3, [r7, #20]
 80064fa:	f023 0320 	bic.w	r3, r3, #32
 80064fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	689b      	ldr	r3, [r3, #8]
 8006504:	011b      	lsls	r3, r3, #4
 8006506:	697a      	ldr	r2, [r7, #20]
 8006508:	4313      	orrs	r3, r2
 800650a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	4a28      	ldr	r2, [pc, #160]	; (80065b0 <TIM_OC2_SetConfig+0x100>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d003      	beq.n	800651c <TIM_OC2_SetConfig+0x6c>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	4a27      	ldr	r2, [pc, #156]	; (80065b4 <TIM_OC2_SetConfig+0x104>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d10d      	bne.n	8006538 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006522:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	68db      	ldr	r3, [r3, #12]
 8006528:	011b      	lsls	r3, r3, #4
 800652a:	697a      	ldr	r2, [r7, #20]
 800652c:	4313      	orrs	r3, r2
 800652e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006536:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	4a1d      	ldr	r2, [pc, #116]	; (80065b0 <TIM_OC2_SetConfig+0x100>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d00f      	beq.n	8006560 <TIM_OC2_SetConfig+0xb0>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	4a1c      	ldr	r2, [pc, #112]	; (80065b4 <TIM_OC2_SetConfig+0x104>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d00b      	beq.n	8006560 <TIM_OC2_SetConfig+0xb0>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	4a1b      	ldr	r2, [pc, #108]	; (80065b8 <TIM_OC2_SetConfig+0x108>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d007      	beq.n	8006560 <TIM_OC2_SetConfig+0xb0>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	4a1a      	ldr	r2, [pc, #104]	; (80065bc <TIM_OC2_SetConfig+0x10c>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d003      	beq.n	8006560 <TIM_OC2_SetConfig+0xb0>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	4a19      	ldr	r2, [pc, #100]	; (80065c0 <TIM_OC2_SetConfig+0x110>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d113      	bne.n	8006588 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006566:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006568:	693b      	ldr	r3, [r7, #16]
 800656a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800656e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	695b      	ldr	r3, [r3, #20]
 8006574:	009b      	lsls	r3, r3, #2
 8006576:	693a      	ldr	r2, [r7, #16]
 8006578:	4313      	orrs	r3, r2
 800657a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	699b      	ldr	r3, [r3, #24]
 8006580:	009b      	lsls	r3, r3, #2
 8006582:	693a      	ldr	r2, [r7, #16]
 8006584:	4313      	orrs	r3, r2
 8006586:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	693a      	ldr	r2, [r7, #16]
 800658c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	68fa      	ldr	r2, [r7, #12]
 8006592:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	685a      	ldr	r2, [r3, #4]
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	697a      	ldr	r2, [r7, #20]
 80065a0:	621a      	str	r2, [r3, #32]
}
 80065a2:	bf00      	nop
 80065a4:	371c      	adds	r7, #28
 80065a6:	46bd      	mov	sp, r7
 80065a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ac:	4770      	bx	lr
 80065ae:	bf00      	nop
 80065b0:	40012c00 	.word	0x40012c00
 80065b4:	40013400 	.word	0x40013400
 80065b8:	40014000 	.word	0x40014000
 80065bc:	40014400 	.word	0x40014400
 80065c0:	40014800 	.word	0x40014800

080065c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80065c4:	b480      	push	{r7}
 80065c6:	b087      	sub	sp, #28
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
 80065cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6a1b      	ldr	r3, [r3, #32]
 80065d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6a1b      	ldr	r3, [r3, #32]
 80065d8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	685b      	ldr	r3, [r3, #4]
 80065e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	69db      	ldr	r3, [r3, #28]
 80065ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80065f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	f023 0303 	bic.w	r3, r3, #3
 80065fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	68fa      	ldr	r2, [r7, #12]
 8006606:	4313      	orrs	r3, r2
 8006608:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800660a:	697b      	ldr	r3, [r7, #20]
 800660c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006610:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	689b      	ldr	r3, [r3, #8]
 8006616:	021b      	lsls	r3, r3, #8
 8006618:	697a      	ldr	r2, [r7, #20]
 800661a:	4313      	orrs	r3, r2
 800661c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	4a27      	ldr	r2, [pc, #156]	; (80066c0 <TIM_OC3_SetConfig+0xfc>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d003      	beq.n	800662e <TIM_OC3_SetConfig+0x6a>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	4a26      	ldr	r2, [pc, #152]	; (80066c4 <TIM_OC3_SetConfig+0x100>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d10d      	bne.n	800664a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006634:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	68db      	ldr	r3, [r3, #12]
 800663a:	021b      	lsls	r3, r3, #8
 800663c:	697a      	ldr	r2, [r7, #20]
 800663e:	4313      	orrs	r3, r2
 8006640:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006648:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	4a1c      	ldr	r2, [pc, #112]	; (80066c0 <TIM_OC3_SetConfig+0xfc>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d00f      	beq.n	8006672 <TIM_OC3_SetConfig+0xae>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	4a1b      	ldr	r2, [pc, #108]	; (80066c4 <TIM_OC3_SetConfig+0x100>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d00b      	beq.n	8006672 <TIM_OC3_SetConfig+0xae>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	4a1a      	ldr	r2, [pc, #104]	; (80066c8 <TIM_OC3_SetConfig+0x104>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d007      	beq.n	8006672 <TIM_OC3_SetConfig+0xae>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	4a19      	ldr	r2, [pc, #100]	; (80066cc <TIM_OC3_SetConfig+0x108>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d003      	beq.n	8006672 <TIM_OC3_SetConfig+0xae>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	4a18      	ldr	r2, [pc, #96]	; (80066d0 <TIM_OC3_SetConfig+0x10c>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d113      	bne.n	800669a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006678:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800667a:	693b      	ldr	r3, [r7, #16]
 800667c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006680:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	695b      	ldr	r3, [r3, #20]
 8006686:	011b      	lsls	r3, r3, #4
 8006688:	693a      	ldr	r2, [r7, #16]
 800668a:	4313      	orrs	r3, r2
 800668c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	699b      	ldr	r3, [r3, #24]
 8006692:	011b      	lsls	r3, r3, #4
 8006694:	693a      	ldr	r2, [r7, #16]
 8006696:	4313      	orrs	r3, r2
 8006698:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	693a      	ldr	r2, [r7, #16]
 800669e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	68fa      	ldr	r2, [r7, #12]
 80066a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	685a      	ldr	r2, [r3, #4]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	697a      	ldr	r2, [r7, #20]
 80066b2:	621a      	str	r2, [r3, #32]
}
 80066b4:	bf00      	nop
 80066b6:	371c      	adds	r7, #28
 80066b8:	46bd      	mov	sp, r7
 80066ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066be:	4770      	bx	lr
 80066c0:	40012c00 	.word	0x40012c00
 80066c4:	40013400 	.word	0x40013400
 80066c8:	40014000 	.word	0x40014000
 80066cc:	40014400 	.word	0x40014400
 80066d0:	40014800 	.word	0x40014800

080066d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80066d4:	b480      	push	{r7}
 80066d6:	b087      	sub	sp, #28
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
 80066dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6a1b      	ldr	r3, [r3, #32]
 80066e2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6a1b      	ldr	r3, [r3, #32]
 80066e8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	685b      	ldr	r3, [r3, #4]
 80066f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	69db      	ldr	r3, [r3, #28]
 80066fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006702:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006706:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800670e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	021b      	lsls	r3, r3, #8
 8006716:	68fa      	ldr	r2, [r7, #12]
 8006718:	4313      	orrs	r3, r2
 800671a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800671c:	693b      	ldr	r3, [r7, #16]
 800671e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006722:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	689b      	ldr	r3, [r3, #8]
 8006728:	031b      	lsls	r3, r3, #12
 800672a:	693a      	ldr	r2, [r7, #16]
 800672c:	4313      	orrs	r3, r2
 800672e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	4a18      	ldr	r2, [pc, #96]	; (8006794 <TIM_OC4_SetConfig+0xc0>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d00f      	beq.n	8006758 <TIM_OC4_SetConfig+0x84>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	4a17      	ldr	r2, [pc, #92]	; (8006798 <TIM_OC4_SetConfig+0xc4>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d00b      	beq.n	8006758 <TIM_OC4_SetConfig+0x84>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	4a16      	ldr	r2, [pc, #88]	; (800679c <TIM_OC4_SetConfig+0xc8>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d007      	beq.n	8006758 <TIM_OC4_SetConfig+0x84>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	4a15      	ldr	r2, [pc, #84]	; (80067a0 <TIM_OC4_SetConfig+0xcc>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d003      	beq.n	8006758 <TIM_OC4_SetConfig+0x84>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	4a14      	ldr	r2, [pc, #80]	; (80067a4 <TIM_OC4_SetConfig+0xd0>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d109      	bne.n	800676c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800675e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	695b      	ldr	r3, [r3, #20]
 8006764:	019b      	lsls	r3, r3, #6
 8006766:	697a      	ldr	r2, [r7, #20]
 8006768:	4313      	orrs	r3, r2
 800676a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	697a      	ldr	r2, [r7, #20]
 8006770:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	68fa      	ldr	r2, [r7, #12]
 8006776:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	685a      	ldr	r2, [r3, #4]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	693a      	ldr	r2, [r7, #16]
 8006784:	621a      	str	r2, [r3, #32]
}
 8006786:	bf00      	nop
 8006788:	371c      	adds	r7, #28
 800678a:	46bd      	mov	sp, r7
 800678c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006790:	4770      	bx	lr
 8006792:	bf00      	nop
 8006794:	40012c00 	.word	0x40012c00
 8006798:	40013400 	.word	0x40013400
 800679c:	40014000 	.word	0x40014000
 80067a0:	40014400 	.word	0x40014400
 80067a4:	40014800 	.word	0x40014800

080067a8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b087      	sub	sp, #28
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
 80067b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6a1b      	ldr	r3, [r3, #32]
 80067b6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6a1b      	ldr	r3, [r3, #32]
 80067bc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	685b      	ldr	r3, [r3, #4]
 80067c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80067d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	68fa      	ldr	r2, [r7, #12]
 80067e2:	4313      	orrs	r3, r2
 80067e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80067ec:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	689b      	ldr	r3, [r3, #8]
 80067f2:	041b      	lsls	r3, r3, #16
 80067f4:	693a      	ldr	r2, [r7, #16]
 80067f6:	4313      	orrs	r3, r2
 80067f8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	4a17      	ldr	r2, [pc, #92]	; (800685c <TIM_OC5_SetConfig+0xb4>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d00f      	beq.n	8006822 <TIM_OC5_SetConfig+0x7a>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	4a16      	ldr	r2, [pc, #88]	; (8006860 <TIM_OC5_SetConfig+0xb8>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d00b      	beq.n	8006822 <TIM_OC5_SetConfig+0x7a>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	4a15      	ldr	r2, [pc, #84]	; (8006864 <TIM_OC5_SetConfig+0xbc>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d007      	beq.n	8006822 <TIM_OC5_SetConfig+0x7a>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	4a14      	ldr	r2, [pc, #80]	; (8006868 <TIM_OC5_SetConfig+0xc0>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d003      	beq.n	8006822 <TIM_OC5_SetConfig+0x7a>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	4a13      	ldr	r2, [pc, #76]	; (800686c <TIM_OC5_SetConfig+0xc4>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d109      	bne.n	8006836 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006828:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	695b      	ldr	r3, [r3, #20]
 800682e:	021b      	lsls	r3, r3, #8
 8006830:	697a      	ldr	r2, [r7, #20]
 8006832:	4313      	orrs	r3, r2
 8006834:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	697a      	ldr	r2, [r7, #20]
 800683a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	68fa      	ldr	r2, [r7, #12]
 8006840:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	685a      	ldr	r2, [r3, #4]
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	693a      	ldr	r2, [r7, #16]
 800684e:	621a      	str	r2, [r3, #32]
}
 8006850:	bf00      	nop
 8006852:	371c      	adds	r7, #28
 8006854:	46bd      	mov	sp, r7
 8006856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685a:	4770      	bx	lr
 800685c:	40012c00 	.word	0x40012c00
 8006860:	40013400 	.word	0x40013400
 8006864:	40014000 	.word	0x40014000
 8006868:	40014400 	.word	0x40014400
 800686c:	40014800 	.word	0x40014800

08006870 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006870:	b480      	push	{r7}
 8006872:	b087      	sub	sp, #28
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
 8006878:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6a1b      	ldr	r3, [r3, #32]
 800687e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6a1b      	ldr	r3, [r3, #32]
 8006884:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	685b      	ldr	r3, [r3, #4]
 8006890:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006896:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800689e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	021b      	lsls	r3, r3, #8
 80068aa:	68fa      	ldr	r2, [r7, #12]
 80068ac:	4313      	orrs	r3, r2
 80068ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80068b0:	693b      	ldr	r3, [r7, #16]
 80068b2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80068b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	689b      	ldr	r3, [r3, #8]
 80068bc:	051b      	lsls	r3, r3, #20
 80068be:	693a      	ldr	r2, [r7, #16]
 80068c0:	4313      	orrs	r3, r2
 80068c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	4a18      	ldr	r2, [pc, #96]	; (8006928 <TIM_OC6_SetConfig+0xb8>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d00f      	beq.n	80068ec <TIM_OC6_SetConfig+0x7c>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	4a17      	ldr	r2, [pc, #92]	; (800692c <TIM_OC6_SetConfig+0xbc>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d00b      	beq.n	80068ec <TIM_OC6_SetConfig+0x7c>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	4a16      	ldr	r2, [pc, #88]	; (8006930 <TIM_OC6_SetConfig+0xc0>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d007      	beq.n	80068ec <TIM_OC6_SetConfig+0x7c>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	4a15      	ldr	r2, [pc, #84]	; (8006934 <TIM_OC6_SetConfig+0xc4>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d003      	beq.n	80068ec <TIM_OC6_SetConfig+0x7c>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	4a14      	ldr	r2, [pc, #80]	; (8006938 <TIM_OC6_SetConfig+0xc8>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d109      	bne.n	8006900 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80068ec:	697b      	ldr	r3, [r7, #20]
 80068ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80068f2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	695b      	ldr	r3, [r3, #20]
 80068f8:	029b      	lsls	r3, r3, #10
 80068fa:	697a      	ldr	r2, [r7, #20]
 80068fc:	4313      	orrs	r3, r2
 80068fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	697a      	ldr	r2, [r7, #20]
 8006904:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	68fa      	ldr	r2, [r7, #12]
 800690a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	685a      	ldr	r2, [r3, #4]
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	693a      	ldr	r2, [r7, #16]
 8006918:	621a      	str	r2, [r3, #32]
}
 800691a:	bf00      	nop
 800691c:	371c      	adds	r7, #28
 800691e:	46bd      	mov	sp, r7
 8006920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006924:	4770      	bx	lr
 8006926:	bf00      	nop
 8006928:	40012c00 	.word	0x40012c00
 800692c:	40013400 	.word	0x40013400
 8006930:	40014000 	.word	0x40014000
 8006934:	40014400 	.word	0x40014400
 8006938:	40014800 	.word	0x40014800

0800693c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800693c:	b480      	push	{r7}
 800693e:	b085      	sub	sp, #20
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
 8006944:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800694c:	2b01      	cmp	r3, #1
 800694e:	d101      	bne.n	8006954 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006950:	2302      	movs	r3, #2
 8006952:	e068      	b.n	8006a26 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2201      	movs	r2, #1
 8006958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2202      	movs	r2, #2
 8006960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	685b      	ldr	r3, [r3, #4]
 800696a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	689b      	ldr	r3, [r3, #8]
 8006972:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4a2e      	ldr	r2, [pc, #184]	; (8006a34 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d004      	beq.n	8006988 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	4a2d      	ldr	r2, [pc, #180]	; (8006a38 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006984:	4293      	cmp	r3, r2
 8006986:	d108      	bne.n	800699a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800698e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	68fa      	ldr	r2, [r7, #12]
 8006996:	4313      	orrs	r3, r2
 8006998:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069a0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	68fa      	ldr	r2, [r7, #12]
 80069a8:	4313      	orrs	r3, r2
 80069aa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	68fa      	ldr	r2, [r7, #12]
 80069b2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a1e      	ldr	r2, [pc, #120]	; (8006a34 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d01d      	beq.n	80069fa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069c6:	d018      	beq.n	80069fa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a1b      	ldr	r2, [pc, #108]	; (8006a3c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d013      	beq.n	80069fa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4a1a      	ldr	r2, [pc, #104]	; (8006a40 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d00e      	beq.n	80069fa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a18      	ldr	r2, [pc, #96]	; (8006a44 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d009      	beq.n	80069fa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4a13      	ldr	r2, [pc, #76]	; (8006a38 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d004      	beq.n	80069fa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4a14      	ldr	r2, [pc, #80]	; (8006a48 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d10c      	bne.n	8006a14 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a00:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	689b      	ldr	r3, [r3, #8]
 8006a06:	68ba      	ldr	r2, [r7, #8]
 8006a08:	4313      	orrs	r3, r2
 8006a0a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	68ba      	ldr	r2, [r7, #8]
 8006a12:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2201      	movs	r2, #1
 8006a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006a24:	2300      	movs	r3, #0
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	3714      	adds	r7, #20
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a30:	4770      	bx	lr
 8006a32:	bf00      	nop
 8006a34:	40012c00 	.word	0x40012c00
 8006a38:	40013400 	.word	0x40013400
 8006a3c:	40000400 	.word	0x40000400
 8006a40:	40000800 	.word	0x40000800
 8006a44:	40000c00 	.word	0x40000c00
 8006a48:	40014000 	.word	0x40014000

08006a4c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b083      	sub	sp, #12
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006a54:	bf00      	nop
 8006a56:	370c      	adds	r7, #12
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5e:	4770      	bx	lr

08006a60 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006a60:	b480      	push	{r7}
 8006a62:	b083      	sub	sp, #12
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006a68:	bf00      	nop
 8006a6a:	370c      	adds	r7, #12
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a72:	4770      	bx	lr

08006a74 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006a74:	b480      	push	{r7}
 8006a76:	b083      	sub	sp, #12
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006a7c:	bf00      	nop
 8006a7e:	370c      	adds	r7, #12
 8006a80:	46bd      	mov	sp, r7
 8006a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a86:	4770      	bx	lr

08006a88 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b082      	sub	sp, #8
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d101      	bne.n	8006a9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a96:	2301      	movs	r3, #1
 8006a98:	e040      	b.n	8006b1c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d106      	bne.n	8006ab0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f7fa fec8 	bl	8001840 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2224      	movs	r2, #36	; 0x24
 8006ab4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	681a      	ldr	r2, [r3, #0]
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f022 0201 	bic.w	r2, r2, #1
 8006ac4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d002      	beq.n	8006ad4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f000 fe48 	bl	8007764 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	f000 fb8d 	bl	80071f4 <UART_SetConfig>
 8006ada:	4603      	mov	r3, r0
 8006adc:	2b01      	cmp	r3, #1
 8006ade:	d101      	bne.n	8006ae4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	e01b      	b.n	8006b1c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	685a      	ldr	r2, [r3, #4]
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006af2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	689a      	ldr	r2, [r3, #8]
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006b02:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	681a      	ldr	r2, [r3, #0]
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f042 0201 	orr.w	r2, r2, #1
 8006b12:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006b14:	6878      	ldr	r0, [r7, #4]
 8006b16:	f000 fec7 	bl	80078a8 <UART_CheckIdleState>
 8006b1a:	4603      	mov	r3, r0
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	3708      	adds	r7, #8
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bd80      	pop	{r7, pc}

08006b24 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006b24:	b480      	push	{r7}
 8006b26:	b08b      	sub	sp, #44	; 0x2c
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	60f8      	str	r0, [r7, #12]
 8006b2c:	60b9      	str	r1, [r7, #8]
 8006b2e:	4613      	mov	r3, r2
 8006b30:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b36:	2b20      	cmp	r3, #32
 8006b38:	d147      	bne.n	8006bca <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d002      	beq.n	8006b46 <HAL_UART_Transmit_IT+0x22>
 8006b40:	88fb      	ldrh	r3, [r7, #6]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d101      	bne.n	8006b4a <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8006b46:	2301      	movs	r3, #1
 8006b48:	e040      	b.n	8006bcc <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	68ba      	ldr	r2, [r7, #8]
 8006b4e:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	88fa      	ldrh	r2, [r7, #6]
 8006b54:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	88fa      	ldrh	r2, [r7, #6]
 8006b5c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	2200      	movs	r2, #0
 8006b64:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	2200      	movs	r2, #0
 8006b6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	2221      	movs	r2, #33	; 0x21
 8006b72:	67da      	str	r2, [r3, #124]	; 0x7c
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	689b      	ldr	r3, [r3, #8]
 8006b78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b7c:	d107      	bne.n	8006b8e <HAL_UART_Transmit_IT+0x6a>
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	691b      	ldr	r3, [r3, #16]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d103      	bne.n	8006b8e <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	4a13      	ldr	r2, [pc, #76]	; (8006bd8 <HAL_UART_Transmit_IT+0xb4>)
 8006b8a:	66da      	str	r2, [r3, #108]	; 0x6c
 8006b8c:	e002      	b.n	8006b94 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	4a12      	ldr	r2, [pc, #72]	; (8006bdc <HAL_UART_Transmit_IT+0xb8>)
 8006b92:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	e853 3f00 	ldrex	r3, [r3]
 8006ba0:	613b      	str	r3, [r7, #16]
   return(result);
 8006ba2:	693b      	ldr	r3, [r7, #16]
 8006ba4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ba8:	627b      	str	r3, [r7, #36]	; 0x24
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	461a      	mov	r2, r3
 8006bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb2:	623b      	str	r3, [r7, #32]
 8006bb4:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bb6:	69f9      	ldr	r1, [r7, #28]
 8006bb8:	6a3a      	ldr	r2, [r7, #32]
 8006bba:	e841 2300 	strex	r3, r2, [r1]
 8006bbe:	61bb      	str	r3, [r7, #24]
   return(result);
 8006bc0:	69bb      	ldr	r3, [r7, #24]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d1e6      	bne.n	8006b94 <HAL_UART_Transmit_IT+0x70>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	e000      	b.n	8006bcc <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8006bca:	2302      	movs	r3, #2
  }
}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	372c      	adds	r7, #44	; 0x2c
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd6:	4770      	bx	lr
 8006bd8:	08007c73 	.word	0x08007c73
 8006bdc:	08007bbb 	.word	0x08007bbb

08006be0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b0ba      	sub	sp, #232	; 0xe8
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	69db      	ldr	r3, [r3, #28]
 8006bee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	689b      	ldr	r3, [r3, #8]
 8006c02:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006c06:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006c0a:	f640 030f 	movw	r3, #2063	; 0x80f
 8006c0e:	4013      	ands	r3, r2
 8006c10:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006c14:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d115      	bne.n	8006c48 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006c1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c20:	f003 0320 	and.w	r3, r3, #32
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d00f      	beq.n	8006c48 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006c28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c2c:	f003 0320 	and.w	r3, r3, #32
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d009      	beq.n	8006c48 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	f000 82ae 	beq.w	800719a <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	4798      	blx	r3
      }
      return;
 8006c46:	e2a8      	b.n	800719a <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8006c48:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	f000 8117 	beq.w	8006e80 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006c52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c56:	f003 0301 	and.w	r3, r3, #1
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d106      	bne.n	8006c6c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006c5e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006c62:	4b85      	ldr	r3, [pc, #532]	; (8006e78 <HAL_UART_IRQHandler+0x298>)
 8006c64:	4013      	ands	r3, r2
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	f000 810a 	beq.w	8006e80 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006c6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c70:	f003 0301 	and.w	r3, r3, #1
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d011      	beq.n	8006c9c <HAL_UART_IRQHandler+0xbc>
 8006c78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d00b      	beq.n	8006c9c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	2201      	movs	r2, #1
 8006c8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c92:	f043 0201 	orr.w	r2, r3, #1
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006c9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ca0:	f003 0302 	and.w	r3, r3, #2
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d011      	beq.n	8006ccc <HAL_UART_IRQHandler+0xec>
 8006ca8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006cac:	f003 0301 	and.w	r3, r3, #1
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d00b      	beq.n	8006ccc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	2202      	movs	r2, #2
 8006cba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006cc2:	f043 0204 	orr.w	r2, r3, #4
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006ccc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cd0:	f003 0304 	and.w	r3, r3, #4
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d011      	beq.n	8006cfc <HAL_UART_IRQHandler+0x11c>
 8006cd8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006cdc:	f003 0301 	and.w	r3, r3, #1
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d00b      	beq.n	8006cfc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	2204      	movs	r2, #4
 8006cea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006cf2:	f043 0202 	orr.w	r2, r3, #2
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006cfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d00:	f003 0308 	and.w	r3, r3, #8
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d017      	beq.n	8006d38 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006d08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d0c:	f003 0320 	and.w	r3, r3, #32
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d105      	bne.n	8006d20 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006d14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d18:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d00b      	beq.n	8006d38 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	2208      	movs	r2, #8
 8006d26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d2e:	f043 0208 	orr.w	r2, r3, #8
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006d38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d012      	beq.n	8006d6a <HAL_UART_IRQHandler+0x18a>
 8006d44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d48:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d00c      	beq.n	8006d6a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006d58:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d60:	f043 0220 	orr.w	r2, r3, #32
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	f000 8214 	beq.w	800719e <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006d76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d7a:	f003 0320 	and.w	r3, r3, #32
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d00d      	beq.n	8006d9e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006d82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d86:	f003 0320 	and.w	r3, r3, #32
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d007      	beq.n	8006d9e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d003      	beq.n	8006d9e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006da4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	689b      	ldr	r3, [r3, #8]
 8006dae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006db2:	2b40      	cmp	r3, #64	; 0x40
 8006db4:	d005      	beq.n	8006dc2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006db6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006dba:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d04f      	beq.n	8006e62 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f000 fe7f 	bl	8007ac6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	689b      	ldr	r3, [r3, #8]
 8006dce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dd2:	2b40      	cmp	r3, #64	; 0x40
 8006dd4:	d141      	bne.n	8006e5a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	3308      	adds	r3, #8
 8006ddc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006de0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006de4:	e853 3f00 	ldrex	r3, [r3]
 8006de8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006dec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006df0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006df4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	3308      	adds	r3, #8
 8006dfe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006e02:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006e06:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e0a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006e0e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006e12:	e841 2300 	strex	r3, r2, [r1]
 8006e16:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006e1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d1d9      	bne.n	8006dd6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d013      	beq.n	8006e52 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e2e:	4a13      	ldr	r2, [pc, #76]	; (8006e7c <HAL_UART_IRQHandler+0x29c>)
 8006e30:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e36:	4618      	mov	r0, r3
 8006e38:	f7fb f8c1 	bl	8001fbe <HAL_DMA_Abort_IT>
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d017      	beq.n	8006e72 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e48:	687a      	ldr	r2, [r7, #4]
 8006e4a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006e4c:	4610      	mov	r0, r2
 8006e4e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e50:	e00f      	b.n	8006e72 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f000 f9b8 	bl	80071c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e58:	e00b      	b.n	8006e72 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f000 f9b4 	bl	80071c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e60:	e007      	b.n	8006e72 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f000 f9b0 	bl	80071c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8006e70:	e195      	b.n	800719e <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e72:	bf00      	nop
    return;
 8006e74:	e193      	b.n	800719e <HAL_UART_IRQHandler+0x5be>
 8006e76:	bf00      	nop
 8006e78:	04000120 	.word	0x04000120
 8006e7c:	08007b8f 	.word	0x08007b8f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e84:	2b01      	cmp	r3, #1
 8006e86:	f040 814e 	bne.w	8007126 <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006e8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e8e:	f003 0310 	and.w	r3, r3, #16
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	f000 8147 	beq.w	8007126 <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006e98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e9c:	f003 0310 	and.w	r3, r3, #16
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	f000 8140 	beq.w	8007126 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	2210      	movs	r2, #16
 8006eac:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	689b      	ldr	r3, [r3, #8]
 8006eb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006eb8:	2b40      	cmp	r3, #64	; 0x40
 8006eba:	f040 80b8 	bne.w	800702e <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	685b      	ldr	r3, [r3, #4]
 8006ec6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006eca:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	f000 8167 	beq.w	80071a2 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006eda:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006ede:	429a      	cmp	r2, r3
 8006ee0:	f080 815f 	bcs.w	80071a2 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006eea:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f003 0320 	and.w	r3, r3, #32
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	f040 8086 	bne.w	800700c <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f08:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006f0c:	e853 3f00 	ldrex	r3, [r3]
 8006f10:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006f14:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006f18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f1c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	461a      	mov	r2, r3
 8006f26:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006f2a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006f2e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f32:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006f36:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006f3a:	e841 2300 	strex	r3, r2, [r1]
 8006f3e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006f42:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d1da      	bne.n	8006f00 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	3308      	adds	r3, #8
 8006f50:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f54:	e853 3f00 	ldrex	r3, [r3]
 8006f58:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006f5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006f5c:	f023 0301 	bic.w	r3, r3, #1
 8006f60:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	3308      	adds	r3, #8
 8006f6a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006f6e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006f72:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f74:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006f76:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006f7a:	e841 2300 	strex	r3, r2, [r1]
 8006f7e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006f80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d1e1      	bne.n	8006f4a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	3308      	adds	r3, #8
 8006f8c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006f90:	e853 3f00 	ldrex	r3, [r3]
 8006f94:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006f96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f9c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	3308      	adds	r3, #8
 8006fa6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006faa:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006fac:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fae:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006fb0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006fb2:	e841 2300 	strex	r3, r2, [r1]
 8006fb6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006fb8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d1e3      	bne.n	8006f86 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2220      	movs	r2, #32
 8006fc2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fd4:	e853 3f00 	ldrex	r3, [r3]
 8006fd8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006fda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006fdc:	f023 0310 	bic.w	r3, r3, #16
 8006fe0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	461a      	mov	r2, r3
 8006fea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006fee:	65bb      	str	r3, [r7, #88]	; 0x58
 8006ff0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ff2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006ff4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006ff6:	e841 2300 	strex	r3, r2, [r1]
 8006ffa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006ffc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d1e4      	bne.n	8006fcc <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007006:	4618      	mov	r0, r3
 8007008:	f7fa ff9b 	bl	8001f42 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2202      	movs	r2, #2
 8007010:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800701e:	b29b      	uxth	r3, r3
 8007020:	1ad3      	subs	r3, r2, r3
 8007022:	b29b      	uxth	r3, r3
 8007024:	4619      	mov	r1, r3
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f000 f8d8 	bl	80071dc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800702c:	e0b9      	b.n	80071a2 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800703a:	b29b      	uxth	r3, r3
 800703c:	1ad3      	subs	r3, r2, r3
 800703e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007048:	b29b      	uxth	r3, r3
 800704a:	2b00      	cmp	r3, #0
 800704c:	f000 80ab 	beq.w	80071a6 <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8007050:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007054:	2b00      	cmp	r3, #0
 8007056:	f000 80a6 	beq.w	80071a6 <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007062:	e853 3f00 	ldrex	r3, [r3]
 8007066:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007068:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800706a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800706e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	461a      	mov	r2, r3
 8007078:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800707c:	647b      	str	r3, [r7, #68]	; 0x44
 800707e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007080:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007082:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007084:	e841 2300 	strex	r3, r2, [r1]
 8007088:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800708a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800708c:	2b00      	cmp	r3, #0
 800708e:	d1e4      	bne.n	800705a <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	3308      	adds	r3, #8
 8007096:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800709a:	e853 3f00 	ldrex	r3, [r3]
 800709e:	623b      	str	r3, [r7, #32]
   return(result);
 80070a0:	6a3b      	ldr	r3, [r7, #32]
 80070a2:	f023 0301 	bic.w	r3, r3, #1
 80070a6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	3308      	adds	r3, #8
 80070b0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80070b4:	633a      	str	r2, [r7, #48]	; 0x30
 80070b6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070b8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80070ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80070bc:	e841 2300 	strex	r3, r2, [r1]
 80070c0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80070c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d1e3      	bne.n	8007090 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2220      	movs	r2, #32
 80070cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2200      	movs	r2, #0
 80070d4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2200      	movs	r2, #0
 80070da:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070e2:	693b      	ldr	r3, [r7, #16]
 80070e4:	e853 3f00 	ldrex	r3, [r3]
 80070e8:	60fb      	str	r3, [r7, #12]
   return(result);
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	f023 0310 	bic.w	r3, r3, #16
 80070f0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	461a      	mov	r2, r3
 80070fa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80070fe:	61fb      	str	r3, [r7, #28]
 8007100:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007102:	69b9      	ldr	r1, [r7, #24]
 8007104:	69fa      	ldr	r2, [r7, #28]
 8007106:	e841 2300 	strex	r3, r2, [r1]
 800710a:	617b      	str	r3, [r7, #20]
   return(result);
 800710c:	697b      	ldr	r3, [r7, #20]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d1e4      	bne.n	80070dc <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2202      	movs	r2, #2
 8007116:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007118:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800711c:	4619      	mov	r1, r3
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f000 f85c 	bl	80071dc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007124:	e03f      	b.n	80071a6 <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007126:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800712a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800712e:	2b00      	cmp	r3, #0
 8007130:	d00e      	beq.n	8007150 <HAL_UART_IRQHandler+0x570>
 8007132:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007136:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800713a:	2b00      	cmp	r3, #0
 800713c:	d008      	beq.n	8007150 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007146:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	f000 fe1c 	bl	8007d86 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800714e:	e02d      	b.n	80071ac <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007150:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007154:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007158:	2b00      	cmp	r3, #0
 800715a:	d00e      	beq.n	800717a <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800715c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007160:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007164:	2b00      	cmp	r3, #0
 8007166:	d008      	beq.n	800717a <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800716c:	2b00      	cmp	r3, #0
 800716e:	d01c      	beq.n	80071aa <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007174:	6878      	ldr	r0, [r7, #4]
 8007176:	4798      	blx	r3
    }
    return;
 8007178:	e017      	b.n	80071aa <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800717a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800717e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007182:	2b00      	cmp	r3, #0
 8007184:	d012      	beq.n	80071ac <HAL_UART_IRQHandler+0x5cc>
 8007186:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800718a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800718e:	2b00      	cmp	r3, #0
 8007190:	d00c      	beq.n	80071ac <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	f000 fdcd 	bl	8007d32 <UART_EndTransmit_IT>
    return;
 8007198:	e008      	b.n	80071ac <HAL_UART_IRQHandler+0x5cc>
      return;
 800719a:	bf00      	nop
 800719c:	e006      	b.n	80071ac <HAL_UART_IRQHandler+0x5cc>
    return;
 800719e:	bf00      	nop
 80071a0:	e004      	b.n	80071ac <HAL_UART_IRQHandler+0x5cc>
      return;
 80071a2:	bf00      	nop
 80071a4:	e002      	b.n	80071ac <HAL_UART_IRQHandler+0x5cc>
      return;
 80071a6:	bf00      	nop
 80071a8:	e000      	b.n	80071ac <HAL_UART_IRQHandler+0x5cc>
    return;
 80071aa:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80071ac:	37e8      	adds	r7, #232	; 0xe8
 80071ae:	46bd      	mov	sp, r7
 80071b0:	bd80      	pop	{r7, pc}
 80071b2:	bf00      	nop

080071b4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80071b4:	b480      	push	{r7}
 80071b6:	b083      	sub	sp, #12
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80071bc:	bf00      	nop
 80071be:	370c      	adds	r7, #12
 80071c0:	46bd      	mov	sp, r7
 80071c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c6:	4770      	bx	lr

080071c8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80071c8:	b480      	push	{r7}
 80071ca:	b083      	sub	sp, #12
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80071d0:	bf00      	nop
 80071d2:	370c      	adds	r7, #12
 80071d4:	46bd      	mov	sp, r7
 80071d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071da:	4770      	bx	lr

080071dc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80071dc:	b480      	push	{r7}
 80071de:	b083      	sub	sp, #12
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
 80071e4:	460b      	mov	r3, r1
 80071e6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80071e8:	bf00      	nop
 80071ea:	370c      	adds	r7, #12
 80071ec:	46bd      	mov	sp, r7
 80071ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f2:	4770      	bx	lr

080071f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80071f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80071f8:	b08a      	sub	sp, #40	; 0x28
 80071fa:	af00      	add	r7, sp, #0
 80071fc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80071fe:	2300      	movs	r3, #0
 8007200:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	689a      	ldr	r2, [r3, #8]
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	691b      	ldr	r3, [r3, #16]
 800720c:	431a      	orrs	r2, r3
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	695b      	ldr	r3, [r3, #20]
 8007212:	431a      	orrs	r2, r3
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	69db      	ldr	r3, [r3, #28]
 8007218:	4313      	orrs	r3, r2
 800721a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	681a      	ldr	r2, [r3, #0]
 8007222:	4ba4      	ldr	r3, [pc, #656]	; (80074b4 <UART_SetConfig+0x2c0>)
 8007224:	4013      	ands	r3, r2
 8007226:	68fa      	ldr	r2, [r7, #12]
 8007228:	6812      	ldr	r2, [r2, #0]
 800722a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800722c:	430b      	orrs	r3, r1
 800722e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	685b      	ldr	r3, [r3, #4]
 8007236:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	68da      	ldr	r2, [r3, #12]
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	430a      	orrs	r2, r1
 8007244:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	699b      	ldr	r3, [r3, #24]
 800724a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	4a99      	ldr	r2, [pc, #612]	; (80074b8 <UART_SetConfig+0x2c4>)
 8007252:	4293      	cmp	r3, r2
 8007254:	d004      	beq.n	8007260 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	6a1b      	ldr	r3, [r3, #32]
 800725a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800725c:	4313      	orrs	r3, r2
 800725e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	689b      	ldr	r3, [r3, #8]
 8007266:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007270:	430a      	orrs	r2, r1
 8007272:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4a90      	ldr	r2, [pc, #576]	; (80074bc <UART_SetConfig+0x2c8>)
 800727a:	4293      	cmp	r3, r2
 800727c:	d126      	bne.n	80072cc <UART_SetConfig+0xd8>
 800727e:	4b90      	ldr	r3, [pc, #576]	; (80074c0 <UART_SetConfig+0x2cc>)
 8007280:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007284:	f003 0303 	and.w	r3, r3, #3
 8007288:	2b03      	cmp	r3, #3
 800728a:	d81b      	bhi.n	80072c4 <UART_SetConfig+0xd0>
 800728c:	a201      	add	r2, pc, #4	; (adr r2, 8007294 <UART_SetConfig+0xa0>)
 800728e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007292:	bf00      	nop
 8007294:	080072a5 	.word	0x080072a5
 8007298:	080072b5 	.word	0x080072b5
 800729c:	080072ad 	.word	0x080072ad
 80072a0:	080072bd 	.word	0x080072bd
 80072a4:	2301      	movs	r3, #1
 80072a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80072aa:	e116      	b.n	80074da <UART_SetConfig+0x2e6>
 80072ac:	2302      	movs	r3, #2
 80072ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80072b2:	e112      	b.n	80074da <UART_SetConfig+0x2e6>
 80072b4:	2304      	movs	r3, #4
 80072b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80072ba:	e10e      	b.n	80074da <UART_SetConfig+0x2e6>
 80072bc:	2308      	movs	r3, #8
 80072be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80072c2:	e10a      	b.n	80074da <UART_SetConfig+0x2e6>
 80072c4:	2310      	movs	r3, #16
 80072c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80072ca:	e106      	b.n	80074da <UART_SetConfig+0x2e6>
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	4a7c      	ldr	r2, [pc, #496]	; (80074c4 <UART_SetConfig+0x2d0>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d138      	bne.n	8007348 <UART_SetConfig+0x154>
 80072d6:	4b7a      	ldr	r3, [pc, #488]	; (80074c0 <UART_SetConfig+0x2cc>)
 80072d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072dc:	f003 030c 	and.w	r3, r3, #12
 80072e0:	2b0c      	cmp	r3, #12
 80072e2:	d82d      	bhi.n	8007340 <UART_SetConfig+0x14c>
 80072e4:	a201      	add	r2, pc, #4	; (adr r2, 80072ec <UART_SetConfig+0xf8>)
 80072e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072ea:	bf00      	nop
 80072ec:	08007321 	.word	0x08007321
 80072f0:	08007341 	.word	0x08007341
 80072f4:	08007341 	.word	0x08007341
 80072f8:	08007341 	.word	0x08007341
 80072fc:	08007331 	.word	0x08007331
 8007300:	08007341 	.word	0x08007341
 8007304:	08007341 	.word	0x08007341
 8007308:	08007341 	.word	0x08007341
 800730c:	08007329 	.word	0x08007329
 8007310:	08007341 	.word	0x08007341
 8007314:	08007341 	.word	0x08007341
 8007318:	08007341 	.word	0x08007341
 800731c:	08007339 	.word	0x08007339
 8007320:	2300      	movs	r3, #0
 8007322:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007326:	e0d8      	b.n	80074da <UART_SetConfig+0x2e6>
 8007328:	2302      	movs	r3, #2
 800732a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800732e:	e0d4      	b.n	80074da <UART_SetConfig+0x2e6>
 8007330:	2304      	movs	r3, #4
 8007332:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007336:	e0d0      	b.n	80074da <UART_SetConfig+0x2e6>
 8007338:	2308      	movs	r3, #8
 800733a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800733e:	e0cc      	b.n	80074da <UART_SetConfig+0x2e6>
 8007340:	2310      	movs	r3, #16
 8007342:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007346:	e0c8      	b.n	80074da <UART_SetConfig+0x2e6>
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	4a5e      	ldr	r2, [pc, #376]	; (80074c8 <UART_SetConfig+0x2d4>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d125      	bne.n	800739e <UART_SetConfig+0x1aa>
 8007352:	4b5b      	ldr	r3, [pc, #364]	; (80074c0 <UART_SetConfig+0x2cc>)
 8007354:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007358:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800735c:	2b30      	cmp	r3, #48	; 0x30
 800735e:	d016      	beq.n	800738e <UART_SetConfig+0x19a>
 8007360:	2b30      	cmp	r3, #48	; 0x30
 8007362:	d818      	bhi.n	8007396 <UART_SetConfig+0x1a2>
 8007364:	2b20      	cmp	r3, #32
 8007366:	d00a      	beq.n	800737e <UART_SetConfig+0x18a>
 8007368:	2b20      	cmp	r3, #32
 800736a:	d814      	bhi.n	8007396 <UART_SetConfig+0x1a2>
 800736c:	2b00      	cmp	r3, #0
 800736e:	d002      	beq.n	8007376 <UART_SetConfig+0x182>
 8007370:	2b10      	cmp	r3, #16
 8007372:	d008      	beq.n	8007386 <UART_SetConfig+0x192>
 8007374:	e00f      	b.n	8007396 <UART_SetConfig+0x1a2>
 8007376:	2300      	movs	r3, #0
 8007378:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800737c:	e0ad      	b.n	80074da <UART_SetConfig+0x2e6>
 800737e:	2302      	movs	r3, #2
 8007380:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007384:	e0a9      	b.n	80074da <UART_SetConfig+0x2e6>
 8007386:	2304      	movs	r3, #4
 8007388:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800738c:	e0a5      	b.n	80074da <UART_SetConfig+0x2e6>
 800738e:	2308      	movs	r3, #8
 8007390:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007394:	e0a1      	b.n	80074da <UART_SetConfig+0x2e6>
 8007396:	2310      	movs	r3, #16
 8007398:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800739c:	e09d      	b.n	80074da <UART_SetConfig+0x2e6>
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	4a4a      	ldr	r2, [pc, #296]	; (80074cc <UART_SetConfig+0x2d8>)
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d125      	bne.n	80073f4 <UART_SetConfig+0x200>
 80073a8:	4b45      	ldr	r3, [pc, #276]	; (80074c0 <UART_SetConfig+0x2cc>)
 80073aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073ae:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80073b2:	2bc0      	cmp	r3, #192	; 0xc0
 80073b4:	d016      	beq.n	80073e4 <UART_SetConfig+0x1f0>
 80073b6:	2bc0      	cmp	r3, #192	; 0xc0
 80073b8:	d818      	bhi.n	80073ec <UART_SetConfig+0x1f8>
 80073ba:	2b80      	cmp	r3, #128	; 0x80
 80073bc:	d00a      	beq.n	80073d4 <UART_SetConfig+0x1e0>
 80073be:	2b80      	cmp	r3, #128	; 0x80
 80073c0:	d814      	bhi.n	80073ec <UART_SetConfig+0x1f8>
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d002      	beq.n	80073cc <UART_SetConfig+0x1d8>
 80073c6:	2b40      	cmp	r3, #64	; 0x40
 80073c8:	d008      	beq.n	80073dc <UART_SetConfig+0x1e8>
 80073ca:	e00f      	b.n	80073ec <UART_SetConfig+0x1f8>
 80073cc:	2300      	movs	r3, #0
 80073ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80073d2:	e082      	b.n	80074da <UART_SetConfig+0x2e6>
 80073d4:	2302      	movs	r3, #2
 80073d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80073da:	e07e      	b.n	80074da <UART_SetConfig+0x2e6>
 80073dc:	2304      	movs	r3, #4
 80073de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80073e2:	e07a      	b.n	80074da <UART_SetConfig+0x2e6>
 80073e4:	2308      	movs	r3, #8
 80073e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80073ea:	e076      	b.n	80074da <UART_SetConfig+0x2e6>
 80073ec:	2310      	movs	r3, #16
 80073ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80073f2:	e072      	b.n	80074da <UART_SetConfig+0x2e6>
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	4a35      	ldr	r2, [pc, #212]	; (80074d0 <UART_SetConfig+0x2dc>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d12a      	bne.n	8007454 <UART_SetConfig+0x260>
 80073fe:	4b30      	ldr	r3, [pc, #192]	; (80074c0 <UART_SetConfig+0x2cc>)
 8007400:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007404:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007408:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800740c:	d01a      	beq.n	8007444 <UART_SetConfig+0x250>
 800740e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007412:	d81b      	bhi.n	800744c <UART_SetConfig+0x258>
 8007414:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007418:	d00c      	beq.n	8007434 <UART_SetConfig+0x240>
 800741a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800741e:	d815      	bhi.n	800744c <UART_SetConfig+0x258>
 8007420:	2b00      	cmp	r3, #0
 8007422:	d003      	beq.n	800742c <UART_SetConfig+0x238>
 8007424:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007428:	d008      	beq.n	800743c <UART_SetConfig+0x248>
 800742a:	e00f      	b.n	800744c <UART_SetConfig+0x258>
 800742c:	2300      	movs	r3, #0
 800742e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007432:	e052      	b.n	80074da <UART_SetConfig+0x2e6>
 8007434:	2302      	movs	r3, #2
 8007436:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800743a:	e04e      	b.n	80074da <UART_SetConfig+0x2e6>
 800743c:	2304      	movs	r3, #4
 800743e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007442:	e04a      	b.n	80074da <UART_SetConfig+0x2e6>
 8007444:	2308      	movs	r3, #8
 8007446:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800744a:	e046      	b.n	80074da <UART_SetConfig+0x2e6>
 800744c:	2310      	movs	r3, #16
 800744e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007452:	e042      	b.n	80074da <UART_SetConfig+0x2e6>
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	4a17      	ldr	r2, [pc, #92]	; (80074b8 <UART_SetConfig+0x2c4>)
 800745a:	4293      	cmp	r3, r2
 800745c:	d13a      	bne.n	80074d4 <UART_SetConfig+0x2e0>
 800745e:	4b18      	ldr	r3, [pc, #96]	; (80074c0 <UART_SetConfig+0x2cc>)
 8007460:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007464:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007468:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800746c:	d01a      	beq.n	80074a4 <UART_SetConfig+0x2b0>
 800746e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007472:	d81b      	bhi.n	80074ac <UART_SetConfig+0x2b8>
 8007474:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007478:	d00c      	beq.n	8007494 <UART_SetConfig+0x2a0>
 800747a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800747e:	d815      	bhi.n	80074ac <UART_SetConfig+0x2b8>
 8007480:	2b00      	cmp	r3, #0
 8007482:	d003      	beq.n	800748c <UART_SetConfig+0x298>
 8007484:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007488:	d008      	beq.n	800749c <UART_SetConfig+0x2a8>
 800748a:	e00f      	b.n	80074ac <UART_SetConfig+0x2b8>
 800748c:	2300      	movs	r3, #0
 800748e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007492:	e022      	b.n	80074da <UART_SetConfig+0x2e6>
 8007494:	2302      	movs	r3, #2
 8007496:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800749a:	e01e      	b.n	80074da <UART_SetConfig+0x2e6>
 800749c:	2304      	movs	r3, #4
 800749e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80074a2:	e01a      	b.n	80074da <UART_SetConfig+0x2e6>
 80074a4:	2308      	movs	r3, #8
 80074a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80074aa:	e016      	b.n	80074da <UART_SetConfig+0x2e6>
 80074ac:	2310      	movs	r3, #16
 80074ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80074b2:	e012      	b.n	80074da <UART_SetConfig+0x2e6>
 80074b4:	efff69f3 	.word	0xefff69f3
 80074b8:	40008000 	.word	0x40008000
 80074bc:	40013800 	.word	0x40013800
 80074c0:	40021000 	.word	0x40021000
 80074c4:	40004400 	.word	0x40004400
 80074c8:	40004800 	.word	0x40004800
 80074cc:	40004c00 	.word	0x40004c00
 80074d0:	40005000 	.word	0x40005000
 80074d4:	2310      	movs	r3, #16
 80074d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	4a9f      	ldr	r2, [pc, #636]	; (800775c <UART_SetConfig+0x568>)
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d17a      	bne.n	80075da <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80074e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80074e8:	2b08      	cmp	r3, #8
 80074ea:	d824      	bhi.n	8007536 <UART_SetConfig+0x342>
 80074ec:	a201      	add	r2, pc, #4	; (adr r2, 80074f4 <UART_SetConfig+0x300>)
 80074ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074f2:	bf00      	nop
 80074f4:	08007519 	.word	0x08007519
 80074f8:	08007537 	.word	0x08007537
 80074fc:	08007521 	.word	0x08007521
 8007500:	08007537 	.word	0x08007537
 8007504:	08007527 	.word	0x08007527
 8007508:	08007537 	.word	0x08007537
 800750c:	08007537 	.word	0x08007537
 8007510:	08007537 	.word	0x08007537
 8007514:	0800752f 	.word	0x0800752f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007518:	f7fd feec 	bl	80052f4 <HAL_RCC_GetPCLK1Freq>
 800751c:	61f8      	str	r0, [r7, #28]
        break;
 800751e:	e010      	b.n	8007542 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007520:	4b8f      	ldr	r3, [pc, #572]	; (8007760 <UART_SetConfig+0x56c>)
 8007522:	61fb      	str	r3, [r7, #28]
        break;
 8007524:	e00d      	b.n	8007542 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007526:	f7fd fe4d 	bl	80051c4 <HAL_RCC_GetSysClockFreq>
 800752a:	61f8      	str	r0, [r7, #28]
        break;
 800752c:	e009      	b.n	8007542 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800752e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007532:	61fb      	str	r3, [r7, #28]
        break;
 8007534:	e005      	b.n	8007542 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8007536:	2300      	movs	r3, #0
 8007538:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800753a:	2301      	movs	r3, #1
 800753c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007540:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007542:	69fb      	ldr	r3, [r7, #28]
 8007544:	2b00      	cmp	r3, #0
 8007546:	f000 80fb 	beq.w	8007740 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	685a      	ldr	r2, [r3, #4]
 800754e:	4613      	mov	r3, r2
 8007550:	005b      	lsls	r3, r3, #1
 8007552:	4413      	add	r3, r2
 8007554:	69fa      	ldr	r2, [r7, #28]
 8007556:	429a      	cmp	r2, r3
 8007558:	d305      	bcc.n	8007566 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	685b      	ldr	r3, [r3, #4]
 800755e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007560:	69fa      	ldr	r2, [r7, #28]
 8007562:	429a      	cmp	r2, r3
 8007564:	d903      	bls.n	800756e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8007566:	2301      	movs	r3, #1
 8007568:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800756c:	e0e8      	b.n	8007740 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800756e:	69fb      	ldr	r3, [r7, #28]
 8007570:	2200      	movs	r2, #0
 8007572:	461c      	mov	r4, r3
 8007574:	4615      	mov	r5, r2
 8007576:	f04f 0200 	mov.w	r2, #0
 800757a:	f04f 0300 	mov.w	r3, #0
 800757e:	022b      	lsls	r3, r5, #8
 8007580:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007584:	0222      	lsls	r2, r4, #8
 8007586:	68f9      	ldr	r1, [r7, #12]
 8007588:	6849      	ldr	r1, [r1, #4]
 800758a:	0849      	lsrs	r1, r1, #1
 800758c:	2000      	movs	r0, #0
 800758e:	4688      	mov	r8, r1
 8007590:	4681      	mov	r9, r0
 8007592:	eb12 0a08 	adds.w	sl, r2, r8
 8007596:	eb43 0b09 	adc.w	fp, r3, r9
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	685b      	ldr	r3, [r3, #4]
 800759e:	2200      	movs	r2, #0
 80075a0:	603b      	str	r3, [r7, #0]
 80075a2:	607a      	str	r2, [r7, #4]
 80075a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075a8:	4650      	mov	r0, sl
 80075aa:	4659      	mov	r1, fp
 80075ac:	f7f9 fb4c 	bl	8000c48 <__aeabi_uldivmod>
 80075b0:	4602      	mov	r2, r0
 80075b2:	460b      	mov	r3, r1
 80075b4:	4613      	mov	r3, r2
 80075b6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80075b8:	69bb      	ldr	r3, [r7, #24]
 80075ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80075be:	d308      	bcc.n	80075d2 <UART_SetConfig+0x3de>
 80075c0:	69bb      	ldr	r3, [r7, #24]
 80075c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80075c6:	d204      	bcs.n	80075d2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	69ba      	ldr	r2, [r7, #24]
 80075ce:	60da      	str	r2, [r3, #12]
 80075d0:	e0b6      	b.n	8007740 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80075d2:	2301      	movs	r3, #1
 80075d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80075d8:	e0b2      	b.n	8007740 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	69db      	ldr	r3, [r3, #28]
 80075de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075e2:	d15e      	bne.n	80076a2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80075e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80075e8:	2b08      	cmp	r3, #8
 80075ea:	d828      	bhi.n	800763e <UART_SetConfig+0x44a>
 80075ec:	a201      	add	r2, pc, #4	; (adr r2, 80075f4 <UART_SetConfig+0x400>)
 80075ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075f2:	bf00      	nop
 80075f4:	08007619 	.word	0x08007619
 80075f8:	08007621 	.word	0x08007621
 80075fc:	08007629 	.word	0x08007629
 8007600:	0800763f 	.word	0x0800763f
 8007604:	0800762f 	.word	0x0800762f
 8007608:	0800763f 	.word	0x0800763f
 800760c:	0800763f 	.word	0x0800763f
 8007610:	0800763f 	.word	0x0800763f
 8007614:	08007637 	.word	0x08007637
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007618:	f7fd fe6c 	bl	80052f4 <HAL_RCC_GetPCLK1Freq>
 800761c:	61f8      	str	r0, [r7, #28]
        break;
 800761e:	e014      	b.n	800764a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007620:	f7fd fe7e 	bl	8005320 <HAL_RCC_GetPCLK2Freq>
 8007624:	61f8      	str	r0, [r7, #28]
        break;
 8007626:	e010      	b.n	800764a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007628:	4b4d      	ldr	r3, [pc, #308]	; (8007760 <UART_SetConfig+0x56c>)
 800762a:	61fb      	str	r3, [r7, #28]
        break;
 800762c:	e00d      	b.n	800764a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800762e:	f7fd fdc9 	bl	80051c4 <HAL_RCC_GetSysClockFreq>
 8007632:	61f8      	str	r0, [r7, #28]
        break;
 8007634:	e009      	b.n	800764a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007636:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800763a:	61fb      	str	r3, [r7, #28]
        break;
 800763c:	e005      	b.n	800764a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800763e:	2300      	movs	r3, #0
 8007640:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007642:	2301      	movs	r3, #1
 8007644:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007648:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800764a:	69fb      	ldr	r3, [r7, #28]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d077      	beq.n	8007740 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007650:	69fb      	ldr	r3, [r7, #28]
 8007652:	005a      	lsls	r2, r3, #1
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	685b      	ldr	r3, [r3, #4]
 8007658:	085b      	lsrs	r3, r3, #1
 800765a:	441a      	add	r2, r3
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	685b      	ldr	r3, [r3, #4]
 8007660:	fbb2 f3f3 	udiv	r3, r2, r3
 8007664:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007666:	69bb      	ldr	r3, [r7, #24]
 8007668:	2b0f      	cmp	r3, #15
 800766a:	d916      	bls.n	800769a <UART_SetConfig+0x4a6>
 800766c:	69bb      	ldr	r3, [r7, #24]
 800766e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007672:	d212      	bcs.n	800769a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007674:	69bb      	ldr	r3, [r7, #24]
 8007676:	b29b      	uxth	r3, r3
 8007678:	f023 030f 	bic.w	r3, r3, #15
 800767c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800767e:	69bb      	ldr	r3, [r7, #24]
 8007680:	085b      	lsrs	r3, r3, #1
 8007682:	b29b      	uxth	r3, r3
 8007684:	f003 0307 	and.w	r3, r3, #7
 8007688:	b29a      	uxth	r2, r3
 800768a:	8afb      	ldrh	r3, [r7, #22]
 800768c:	4313      	orrs	r3, r2
 800768e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	8afa      	ldrh	r2, [r7, #22]
 8007696:	60da      	str	r2, [r3, #12]
 8007698:	e052      	b.n	8007740 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800769a:	2301      	movs	r3, #1
 800769c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80076a0:	e04e      	b.n	8007740 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80076a2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80076a6:	2b08      	cmp	r3, #8
 80076a8:	d827      	bhi.n	80076fa <UART_SetConfig+0x506>
 80076aa:	a201      	add	r2, pc, #4	; (adr r2, 80076b0 <UART_SetConfig+0x4bc>)
 80076ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076b0:	080076d5 	.word	0x080076d5
 80076b4:	080076dd 	.word	0x080076dd
 80076b8:	080076e5 	.word	0x080076e5
 80076bc:	080076fb 	.word	0x080076fb
 80076c0:	080076eb 	.word	0x080076eb
 80076c4:	080076fb 	.word	0x080076fb
 80076c8:	080076fb 	.word	0x080076fb
 80076cc:	080076fb 	.word	0x080076fb
 80076d0:	080076f3 	.word	0x080076f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80076d4:	f7fd fe0e 	bl	80052f4 <HAL_RCC_GetPCLK1Freq>
 80076d8:	61f8      	str	r0, [r7, #28]
        break;
 80076da:	e014      	b.n	8007706 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80076dc:	f7fd fe20 	bl	8005320 <HAL_RCC_GetPCLK2Freq>
 80076e0:	61f8      	str	r0, [r7, #28]
        break;
 80076e2:	e010      	b.n	8007706 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80076e4:	4b1e      	ldr	r3, [pc, #120]	; (8007760 <UART_SetConfig+0x56c>)
 80076e6:	61fb      	str	r3, [r7, #28]
        break;
 80076e8:	e00d      	b.n	8007706 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80076ea:	f7fd fd6b 	bl	80051c4 <HAL_RCC_GetSysClockFreq>
 80076ee:	61f8      	str	r0, [r7, #28]
        break;
 80076f0:	e009      	b.n	8007706 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80076f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80076f6:	61fb      	str	r3, [r7, #28]
        break;
 80076f8:	e005      	b.n	8007706 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80076fa:	2300      	movs	r3, #0
 80076fc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80076fe:	2301      	movs	r3, #1
 8007700:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007704:	bf00      	nop
    }

    if (pclk != 0U)
 8007706:	69fb      	ldr	r3, [r7, #28]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d019      	beq.n	8007740 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	685b      	ldr	r3, [r3, #4]
 8007710:	085a      	lsrs	r2, r3, #1
 8007712:	69fb      	ldr	r3, [r7, #28]
 8007714:	441a      	add	r2, r3
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	685b      	ldr	r3, [r3, #4]
 800771a:	fbb2 f3f3 	udiv	r3, r2, r3
 800771e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007720:	69bb      	ldr	r3, [r7, #24]
 8007722:	2b0f      	cmp	r3, #15
 8007724:	d909      	bls.n	800773a <UART_SetConfig+0x546>
 8007726:	69bb      	ldr	r3, [r7, #24]
 8007728:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800772c:	d205      	bcs.n	800773a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800772e:	69bb      	ldr	r3, [r7, #24]
 8007730:	b29a      	uxth	r2, r3
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	60da      	str	r2, [r3, #12]
 8007738:	e002      	b.n	8007740 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800773a:	2301      	movs	r3, #1
 800773c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	2200      	movs	r2, #0
 8007744:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	2200      	movs	r2, #0
 800774a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800774c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8007750:	4618      	mov	r0, r3
 8007752:	3728      	adds	r7, #40	; 0x28
 8007754:	46bd      	mov	sp, r7
 8007756:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800775a:	bf00      	nop
 800775c:	40008000 	.word	0x40008000
 8007760:	00f42400 	.word	0x00f42400

08007764 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007764:	b480      	push	{r7}
 8007766:	b083      	sub	sp, #12
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007770:	f003 0308 	and.w	r3, r3, #8
 8007774:	2b00      	cmp	r3, #0
 8007776:	d00a      	beq.n	800778e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	685b      	ldr	r3, [r3, #4]
 800777e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	430a      	orrs	r2, r1
 800778c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007792:	f003 0301 	and.w	r3, r3, #1
 8007796:	2b00      	cmp	r3, #0
 8007798:	d00a      	beq.n	80077b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	685b      	ldr	r3, [r3, #4]
 80077a0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	430a      	orrs	r2, r1
 80077ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077b4:	f003 0302 	and.w	r3, r3, #2
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d00a      	beq.n	80077d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	685b      	ldr	r3, [r3, #4]
 80077c2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	430a      	orrs	r2, r1
 80077d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077d6:	f003 0304 	and.w	r3, r3, #4
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d00a      	beq.n	80077f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	685b      	ldr	r3, [r3, #4]
 80077e4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	430a      	orrs	r2, r1
 80077f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077f8:	f003 0310 	and.w	r3, r3, #16
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d00a      	beq.n	8007816 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	689b      	ldr	r3, [r3, #8]
 8007806:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	430a      	orrs	r2, r1
 8007814:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800781a:	f003 0320 	and.w	r3, r3, #32
 800781e:	2b00      	cmp	r3, #0
 8007820:	d00a      	beq.n	8007838 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	689b      	ldr	r3, [r3, #8]
 8007828:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	430a      	orrs	r2, r1
 8007836:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800783c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007840:	2b00      	cmp	r3, #0
 8007842:	d01a      	beq.n	800787a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	685b      	ldr	r3, [r3, #4]
 800784a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	430a      	orrs	r2, r1
 8007858:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800785e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007862:	d10a      	bne.n	800787a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	685b      	ldr	r3, [r3, #4]
 800786a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	430a      	orrs	r2, r1
 8007878:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800787e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007882:	2b00      	cmp	r3, #0
 8007884:	d00a      	beq.n	800789c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	685b      	ldr	r3, [r3, #4]
 800788c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	430a      	orrs	r2, r1
 800789a:	605a      	str	r2, [r3, #4]
  }
}
 800789c:	bf00      	nop
 800789e:	370c      	adds	r7, #12
 80078a0:	46bd      	mov	sp, r7
 80078a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a6:	4770      	bx	lr

080078a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b098      	sub	sp, #96	; 0x60
 80078ac:	af02      	add	r7, sp, #8
 80078ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2200      	movs	r2, #0
 80078b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80078b8:	f7fa f9f4 	bl	8001ca4 <HAL_GetTick>
 80078bc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f003 0308 	and.w	r3, r3, #8
 80078c8:	2b08      	cmp	r3, #8
 80078ca:	d12e      	bne.n	800792a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80078cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80078d0:	9300      	str	r3, [sp, #0]
 80078d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80078d4:	2200      	movs	r2, #0
 80078d6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	f000 f88c 	bl	80079f8 <UART_WaitOnFlagUntilTimeout>
 80078e0:	4603      	mov	r3, r0
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d021      	beq.n	800792a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078ee:	e853 3f00 	ldrex	r3, [r3]
 80078f2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80078f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80078fa:	653b      	str	r3, [r7, #80]	; 0x50
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	461a      	mov	r2, r3
 8007902:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007904:	647b      	str	r3, [r7, #68]	; 0x44
 8007906:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007908:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800790a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800790c:	e841 2300 	strex	r3, r2, [r1]
 8007910:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007912:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007914:	2b00      	cmp	r3, #0
 8007916:	d1e6      	bne.n	80078e6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2220      	movs	r2, #32
 800791c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2200      	movs	r2, #0
 8007922:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007926:	2303      	movs	r3, #3
 8007928:	e062      	b.n	80079f0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f003 0304 	and.w	r3, r3, #4
 8007934:	2b04      	cmp	r3, #4
 8007936:	d149      	bne.n	80079cc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007938:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800793c:	9300      	str	r3, [sp, #0]
 800793e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007940:	2200      	movs	r2, #0
 8007942:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f000 f856 	bl	80079f8 <UART_WaitOnFlagUntilTimeout>
 800794c:	4603      	mov	r3, r0
 800794e:	2b00      	cmp	r3, #0
 8007950:	d03c      	beq.n	80079cc <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800795a:	e853 3f00 	ldrex	r3, [r3]
 800795e:	623b      	str	r3, [r7, #32]
   return(result);
 8007960:	6a3b      	ldr	r3, [r7, #32]
 8007962:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007966:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	461a      	mov	r2, r3
 800796e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007970:	633b      	str	r3, [r7, #48]	; 0x30
 8007972:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007974:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007976:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007978:	e841 2300 	strex	r3, r2, [r1]
 800797c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800797e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007980:	2b00      	cmp	r3, #0
 8007982:	d1e6      	bne.n	8007952 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	3308      	adds	r3, #8
 800798a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800798c:	693b      	ldr	r3, [r7, #16]
 800798e:	e853 3f00 	ldrex	r3, [r3]
 8007992:	60fb      	str	r3, [r7, #12]
   return(result);
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	f023 0301 	bic.w	r3, r3, #1
 800799a:	64bb      	str	r3, [r7, #72]	; 0x48
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	3308      	adds	r3, #8
 80079a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80079a4:	61fa      	str	r2, [r7, #28]
 80079a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079a8:	69b9      	ldr	r1, [r7, #24]
 80079aa:	69fa      	ldr	r2, [r7, #28]
 80079ac:	e841 2300 	strex	r3, r2, [r1]
 80079b0:	617b      	str	r3, [r7, #20]
   return(result);
 80079b2:	697b      	ldr	r3, [r7, #20]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d1e5      	bne.n	8007984 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2220      	movs	r2, #32
 80079bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2200      	movs	r2, #0
 80079c4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80079c8:	2303      	movs	r3, #3
 80079ca:	e011      	b.n	80079f0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2220      	movs	r2, #32
 80079d0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2220      	movs	r2, #32
 80079d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2200      	movs	r2, #0
 80079de:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2200      	movs	r2, #0
 80079e4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2200      	movs	r2, #0
 80079ea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80079ee:	2300      	movs	r3, #0
}
 80079f0:	4618      	mov	r0, r3
 80079f2:	3758      	adds	r7, #88	; 0x58
 80079f4:	46bd      	mov	sp, r7
 80079f6:	bd80      	pop	{r7, pc}

080079f8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b084      	sub	sp, #16
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	60f8      	str	r0, [r7, #12]
 8007a00:	60b9      	str	r1, [r7, #8]
 8007a02:	603b      	str	r3, [r7, #0]
 8007a04:	4613      	mov	r3, r2
 8007a06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a08:	e049      	b.n	8007a9e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a0a:	69bb      	ldr	r3, [r7, #24]
 8007a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a10:	d045      	beq.n	8007a9e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a12:	f7fa f947 	bl	8001ca4 <HAL_GetTick>
 8007a16:	4602      	mov	r2, r0
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	1ad3      	subs	r3, r2, r3
 8007a1c:	69ba      	ldr	r2, [r7, #24]
 8007a1e:	429a      	cmp	r2, r3
 8007a20:	d302      	bcc.n	8007a28 <UART_WaitOnFlagUntilTimeout+0x30>
 8007a22:	69bb      	ldr	r3, [r7, #24]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d101      	bne.n	8007a2c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007a28:	2303      	movs	r3, #3
 8007a2a:	e048      	b.n	8007abe <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f003 0304 	and.w	r3, r3, #4
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d031      	beq.n	8007a9e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	69db      	ldr	r3, [r3, #28]
 8007a40:	f003 0308 	and.w	r3, r3, #8
 8007a44:	2b08      	cmp	r3, #8
 8007a46:	d110      	bne.n	8007a6a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	2208      	movs	r2, #8
 8007a4e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007a50:	68f8      	ldr	r0, [r7, #12]
 8007a52:	f000 f838 	bl	8007ac6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	2208      	movs	r2, #8
 8007a5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	2200      	movs	r2, #0
 8007a62:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8007a66:	2301      	movs	r3, #1
 8007a68:	e029      	b.n	8007abe <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	69db      	ldr	r3, [r3, #28]
 8007a70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a78:	d111      	bne.n	8007a9e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007a82:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007a84:	68f8      	ldr	r0, [r7, #12]
 8007a86:	f000 f81e 	bl	8007ac6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	2220      	movs	r2, #32
 8007a8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	2200      	movs	r2, #0
 8007a96:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007a9a:	2303      	movs	r3, #3
 8007a9c:	e00f      	b.n	8007abe <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	69da      	ldr	r2, [r3, #28]
 8007aa4:	68bb      	ldr	r3, [r7, #8]
 8007aa6:	4013      	ands	r3, r2
 8007aa8:	68ba      	ldr	r2, [r7, #8]
 8007aaa:	429a      	cmp	r2, r3
 8007aac:	bf0c      	ite	eq
 8007aae:	2301      	moveq	r3, #1
 8007ab0:	2300      	movne	r3, #0
 8007ab2:	b2db      	uxtb	r3, r3
 8007ab4:	461a      	mov	r2, r3
 8007ab6:	79fb      	ldrb	r3, [r7, #7]
 8007ab8:	429a      	cmp	r2, r3
 8007aba:	d0a6      	beq.n	8007a0a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007abc:	2300      	movs	r3, #0
}
 8007abe:	4618      	mov	r0, r3
 8007ac0:	3710      	adds	r7, #16
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bd80      	pop	{r7, pc}

08007ac6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007ac6:	b480      	push	{r7}
 8007ac8:	b095      	sub	sp, #84	; 0x54
 8007aca:	af00      	add	r7, sp, #0
 8007acc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ad4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ad6:	e853 3f00 	ldrex	r3, [r3]
 8007ada:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ade:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007ae2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	461a      	mov	r2, r3
 8007aea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007aec:	643b      	str	r3, [r7, #64]	; 0x40
 8007aee:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007af0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007af2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007af4:	e841 2300 	strex	r3, r2, [r1]
 8007af8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d1e6      	bne.n	8007ace <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	3308      	adds	r3, #8
 8007b06:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b08:	6a3b      	ldr	r3, [r7, #32]
 8007b0a:	e853 3f00 	ldrex	r3, [r3]
 8007b0e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007b10:	69fb      	ldr	r3, [r7, #28]
 8007b12:	f023 0301 	bic.w	r3, r3, #1
 8007b16:	64bb      	str	r3, [r7, #72]	; 0x48
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	3308      	adds	r3, #8
 8007b1e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007b20:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007b22:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007b26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b28:	e841 2300 	strex	r3, r2, [r1]
 8007b2c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d1e5      	bne.n	8007b00 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b38:	2b01      	cmp	r3, #1
 8007b3a:	d118      	bne.n	8007b6e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	e853 3f00 	ldrex	r3, [r3]
 8007b48:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b4a:	68bb      	ldr	r3, [r7, #8]
 8007b4c:	f023 0310 	bic.w	r3, r3, #16
 8007b50:	647b      	str	r3, [r7, #68]	; 0x44
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	461a      	mov	r2, r3
 8007b58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b5a:	61bb      	str	r3, [r7, #24]
 8007b5c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b5e:	6979      	ldr	r1, [r7, #20]
 8007b60:	69ba      	ldr	r2, [r7, #24]
 8007b62:	e841 2300 	strex	r3, r2, [r1]
 8007b66:	613b      	str	r3, [r7, #16]
   return(result);
 8007b68:	693b      	ldr	r3, [r7, #16]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d1e6      	bne.n	8007b3c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2220      	movs	r2, #32
 8007b72:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2200      	movs	r2, #0
 8007b7a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2200      	movs	r2, #0
 8007b80:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007b82:	bf00      	nop
 8007b84:	3754      	adds	r7, #84	; 0x54
 8007b86:	46bd      	mov	sp, r7
 8007b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8c:	4770      	bx	lr

08007b8e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007b8e:	b580      	push	{r7, lr}
 8007b90:	b084      	sub	sp, #16
 8007b92:	af00      	add	r7, sp, #0
 8007b94:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b9a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007bac:	68f8      	ldr	r0, [r7, #12]
 8007bae:	f7ff fb0b 	bl	80071c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007bb2:	bf00      	nop
 8007bb4:	3710      	adds	r7, #16
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	bd80      	pop	{r7, pc}

08007bba <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007bba:	b480      	push	{r7}
 8007bbc:	b08f      	sub	sp, #60	; 0x3c
 8007bbe:	af00      	add	r7, sp, #0
 8007bc0:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007bc6:	2b21      	cmp	r3, #33	; 0x21
 8007bc8:	d14d      	bne.n	8007c66 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007bd0:	b29b      	uxth	r3, r3
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d132      	bne.n	8007c3c <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bdc:	6a3b      	ldr	r3, [r7, #32]
 8007bde:	e853 3f00 	ldrex	r3, [r3]
 8007be2:	61fb      	str	r3, [r7, #28]
   return(result);
 8007be4:	69fb      	ldr	r3, [r7, #28]
 8007be6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007bea:	637b      	str	r3, [r7, #52]	; 0x34
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	461a      	mov	r2, r3
 8007bf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007bf6:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bf8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007bfa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007bfc:	e841 2300 	strex	r3, r2, [r1]
 8007c00:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d1e6      	bne.n	8007bd6 <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	e853 3f00 	ldrex	r3, [r3]
 8007c14:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c16:	68bb      	ldr	r3, [r7, #8]
 8007c18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c1c:	633b      	str	r3, [r7, #48]	; 0x30
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	461a      	mov	r2, r3
 8007c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c26:	61bb      	str	r3, [r7, #24]
 8007c28:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c2a:	6979      	ldr	r1, [r7, #20]
 8007c2c:	69ba      	ldr	r2, [r7, #24]
 8007c2e:	e841 2300 	strex	r3, r2, [r1]
 8007c32:	613b      	str	r3, [r7, #16]
   return(result);
 8007c34:	693b      	ldr	r3, [r7, #16]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d1e6      	bne.n	8007c08 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8007c3a:	e014      	b.n	8007c66 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c40:	781a      	ldrb	r2, [r3, #0]
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	b292      	uxth	r2, r2
 8007c48:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c4e:	1c5a      	adds	r2, r3, #1
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007c5a:	b29b      	uxth	r3, r3
 8007c5c:	3b01      	subs	r3, #1
 8007c5e:	b29a      	uxth	r2, r3
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8007c66:	bf00      	nop
 8007c68:	373c      	adds	r7, #60	; 0x3c
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c70:	4770      	bx	lr

08007c72 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007c72:	b480      	push	{r7}
 8007c74:	b091      	sub	sp, #68	; 0x44
 8007c76:	af00      	add	r7, sp, #0
 8007c78:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c7e:	2b21      	cmp	r3, #33	; 0x21
 8007c80:	d151      	bne.n	8007d26 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007c88:	b29b      	uxth	r3, r3
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d132      	bne.n	8007cf4 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c96:	e853 3f00 	ldrex	r3, [r3]
 8007c9a:	623b      	str	r3, [r7, #32]
   return(result);
 8007c9c:	6a3b      	ldr	r3, [r7, #32]
 8007c9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ca2:	63bb      	str	r3, [r7, #56]	; 0x38
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	461a      	mov	r2, r3
 8007caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cac:	633b      	str	r3, [r7, #48]	; 0x30
 8007cae:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cb0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007cb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007cb4:	e841 2300 	strex	r3, r2, [r1]
 8007cb8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d1e6      	bne.n	8007c8e <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cc6:	693b      	ldr	r3, [r7, #16]
 8007cc8:	e853 3f00 	ldrex	r3, [r3]
 8007ccc:	60fb      	str	r3, [r7, #12]
   return(result);
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007cd4:	637b      	str	r3, [r7, #52]	; 0x34
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	461a      	mov	r2, r3
 8007cdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cde:	61fb      	str	r3, [r7, #28]
 8007ce0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ce2:	69b9      	ldr	r1, [r7, #24]
 8007ce4:	69fa      	ldr	r2, [r7, #28]
 8007ce6:	e841 2300 	strex	r3, r2, [r1]
 8007cea:	617b      	str	r3, [r7, #20]
   return(result);
 8007cec:	697b      	ldr	r3, [r7, #20]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d1e6      	bne.n	8007cc0 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8007cf2:	e018      	b.n	8007d26 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007cf8:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8007cfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cfc:	881a      	ldrh	r2, [r3, #0]
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007d06:	b292      	uxth	r2, r2
 8007d08:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d0e:	1c9a      	adds	r2, r3, #2
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007d1a:	b29b      	uxth	r3, r3
 8007d1c:	3b01      	subs	r3, #1
 8007d1e:	b29a      	uxth	r2, r3
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8007d26:	bf00      	nop
 8007d28:	3744      	adds	r7, #68	; 0x44
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d30:	4770      	bx	lr

08007d32 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007d32:	b580      	push	{r7, lr}
 8007d34:	b088      	sub	sp, #32
 8007d36:	af00      	add	r7, sp, #0
 8007d38:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	e853 3f00 	ldrex	r3, [r3]
 8007d46:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d4e:	61fb      	str	r3, [r7, #28]
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	461a      	mov	r2, r3
 8007d56:	69fb      	ldr	r3, [r7, #28]
 8007d58:	61bb      	str	r3, [r7, #24]
 8007d5a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d5c:	6979      	ldr	r1, [r7, #20]
 8007d5e:	69ba      	ldr	r2, [r7, #24]
 8007d60:	e841 2300 	strex	r3, r2, [r1]
 8007d64:	613b      	str	r3, [r7, #16]
   return(result);
 8007d66:	693b      	ldr	r3, [r7, #16]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d1e6      	bne.n	8007d3a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2220      	movs	r2, #32
 8007d70:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2200      	movs	r2, #0
 8007d76:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007d78:	6878      	ldr	r0, [r7, #4]
 8007d7a:	f7ff fa1b 	bl	80071b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007d7e:	bf00      	nop
 8007d80:	3720      	adds	r7, #32
 8007d82:	46bd      	mov	sp, r7
 8007d84:	bd80      	pop	{r7, pc}

08007d86 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007d86:	b480      	push	{r7}
 8007d88:	b083      	sub	sp, #12
 8007d8a:	af00      	add	r7, sp, #0
 8007d8c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007d8e:	bf00      	nop
 8007d90:	370c      	adds	r7, #12
 8007d92:	46bd      	mov	sp, r7
 8007d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d98:	4770      	bx	lr

08007d9a <__cvt>:
 8007d9a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007d9e:	ec55 4b10 	vmov	r4, r5, d0
 8007da2:	2d00      	cmp	r5, #0
 8007da4:	460e      	mov	r6, r1
 8007da6:	4619      	mov	r1, r3
 8007da8:	462b      	mov	r3, r5
 8007daa:	bfbb      	ittet	lt
 8007dac:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007db0:	461d      	movlt	r5, r3
 8007db2:	2300      	movge	r3, #0
 8007db4:	232d      	movlt	r3, #45	; 0x2d
 8007db6:	700b      	strb	r3, [r1, #0]
 8007db8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007dba:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007dbe:	4691      	mov	r9, r2
 8007dc0:	f023 0820 	bic.w	r8, r3, #32
 8007dc4:	bfbc      	itt	lt
 8007dc6:	4622      	movlt	r2, r4
 8007dc8:	4614      	movlt	r4, r2
 8007dca:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007dce:	d005      	beq.n	8007ddc <__cvt+0x42>
 8007dd0:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007dd4:	d100      	bne.n	8007dd8 <__cvt+0x3e>
 8007dd6:	3601      	adds	r6, #1
 8007dd8:	2102      	movs	r1, #2
 8007dda:	e000      	b.n	8007dde <__cvt+0x44>
 8007ddc:	2103      	movs	r1, #3
 8007dde:	ab03      	add	r3, sp, #12
 8007de0:	9301      	str	r3, [sp, #4]
 8007de2:	ab02      	add	r3, sp, #8
 8007de4:	9300      	str	r3, [sp, #0]
 8007de6:	ec45 4b10 	vmov	d0, r4, r5
 8007dea:	4653      	mov	r3, sl
 8007dec:	4632      	mov	r2, r6
 8007dee:	f000 fe7f 	bl	8008af0 <_dtoa_r>
 8007df2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007df6:	4607      	mov	r7, r0
 8007df8:	d102      	bne.n	8007e00 <__cvt+0x66>
 8007dfa:	f019 0f01 	tst.w	r9, #1
 8007dfe:	d022      	beq.n	8007e46 <__cvt+0xac>
 8007e00:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007e04:	eb07 0906 	add.w	r9, r7, r6
 8007e08:	d110      	bne.n	8007e2c <__cvt+0x92>
 8007e0a:	783b      	ldrb	r3, [r7, #0]
 8007e0c:	2b30      	cmp	r3, #48	; 0x30
 8007e0e:	d10a      	bne.n	8007e26 <__cvt+0x8c>
 8007e10:	2200      	movs	r2, #0
 8007e12:	2300      	movs	r3, #0
 8007e14:	4620      	mov	r0, r4
 8007e16:	4629      	mov	r1, r5
 8007e18:	f7f8 fe56 	bl	8000ac8 <__aeabi_dcmpeq>
 8007e1c:	b918      	cbnz	r0, 8007e26 <__cvt+0x8c>
 8007e1e:	f1c6 0601 	rsb	r6, r6, #1
 8007e22:	f8ca 6000 	str.w	r6, [sl]
 8007e26:	f8da 3000 	ldr.w	r3, [sl]
 8007e2a:	4499      	add	r9, r3
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	2300      	movs	r3, #0
 8007e30:	4620      	mov	r0, r4
 8007e32:	4629      	mov	r1, r5
 8007e34:	f7f8 fe48 	bl	8000ac8 <__aeabi_dcmpeq>
 8007e38:	b108      	cbz	r0, 8007e3e <__cvt+0xa4>
 8007e3a:	f8cd 900c 	str.w	r9, [sp, #12]
 8007e3e:	2230      	movs	r2, #48	; 0x30
 8007e40:	9b03      	ldr	r3, [sp, #12]
 8007e42:	454b      	cmp	r3, r9
 8007e44:	d307      	bcc.n	8007e56 <__cvt+0xbc>
 8007e46:	9b03      	ldr	r3, [sp, #12]
 8007e48:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007e4a:	1bdb      	subs	r3, r3, r7
 8007e4c:	4638      	mov	r0, r7
 8007e4e:	6013      	str	r3, [r2, #0]
 8007e50:	b004      	add	sp, #16
 8007e52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e56:	1c59      	adds	r1, r3, #1
 8007e58:	9103      	str	r1, [sp, #12]
 8007e5a:	701a      	strb	r2, [r3, #0]
 8007e5c:	e7f0      	b.n	8007e40 <__cvt+0xa6>

08007e5e <__exponent>:
 8007e5e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007e60:	4603      	mov	r3, r0
 8007e62:	2900      	cmp	r1, #0
 8007e64:	bfb8      	it	lt
 8007e66:	4249      	neglt	r1, r1
 8007e68:	f803 2b02 	strb.w	r2, [r3], #2
 8007e6c:	bfb4      	ite	lt
 8007e6e:	222d      	movlt	r2, #45	; 0x2d
 8007e70:	222b      	movge	r2, #43	; 0x2b
 8007e72:	2909      	cmp	r1, #9
 8007e74:	7042      	strb	r2, [r0, #1]
 8007e76:	dd2a      	ble.n	8007ece <__exponent+0x70>
 8007e78:	f10d 0207 	add.w	r2, sp, #7
 8007e7c:	4617      	mov	r7, r2
 8007e7e:	260a      	movs	r6, #10
 8007e80:	4694      	mov	ip, r2
 8007e82:	fb91 f5f6 	sdiv	r5, r1, r6
 8007e86:	fb06 1415 	mls	r4, r6, r5, r1
 8007e8a:	3430      	adds	r4, #48	; 0x30
 8007e8c:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8007e90:	460c      	mov	r4, r1
 8007e92:	2c63      	cmp	r4, #99	; 0x63
 8007e94:	f102 32ff 	add.w	r2, r2, #4294967295
 8007e98:	4629      	mov	r1, r5
 8007e9a:	dcf1      	bgt.n	8007e80 <__exponent+0x22>
 8007e9c:	3130      	adds	r1, #48	; 0x30
 8007e9e:	f1ac 0402 	sub.w	r4, ip, #2
 8007ea2:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007ea6:	1c41      	adds	r1, r0, #1
 8007ea8:	4622      	mov	r2, r4
 8007eaa:	42ba      	cmp	r2, r7
 8007eac:	d30a      	bcc.n	8007ec4 <__exponent+0x66>
 8007eae:	f10d 0209 	add.w	r2, sp, #9
 8007eb2:	eba2 020c 	sub.w	r2, r2, ip
 8007eb6:	42bc      	cmp	r4, r7
 8007eb8:	bf88      	it	hi
 8007eba:	2200      	movhi	r2, #0
 8007ebc:	4413      	add	r3, r2
 8007ebe:	1a18      	subs	r0, r3, r0
 8007ec0:	b003      	add	sp, #12
 8007ec2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ec4:	f812 5b01 	ldrb.w	r5, [r2], #1
 8007ec8:	f801 5f01 	strb.w	r5, [r1, #1]!
 8007ecc:	e7ed      	b.n	8007eaa <__exponent+0x4c>
 8007ece:	2330      	movs	r3, #48	; 0x30
 8007ed0:	3130      	adds	r1, #48	; 0x30
 8007ed2:	7083      	strb	r3, [r0, #2]
 8007ed4:	70c1      	strb	r1, [r0, #3]
 8007ed6:	1d03      	adds	r3, r0, #4
 8007ed8:	e7f1      	b.n	8007ebe <__exponent+0x60>
	...

08007edc <_printf_float>:
 8007edc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ee0:	ed2d 8b02 	vpush	{d8}
 8007ee4:	b08d      	sub	sp, #52	; 0x34
 8007ee6:	460c      	mov	r4, r1
 8007ee8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007eec:	4616      	mov	r6, r2
 8007eee:	461f      	mov	r7, r3
 8007ef0:	4605      	mov	r5, r0
 8007ef2:	f000 fcfb 	bl	80088ec <_localeconv_r>
 8007ef6:	f8d0 a000 	ldr.w	sl, [r0]
 8007efa:	4650      	mov	r0, sl
 8007efc:	f7f8 f9b8 	bl	8000270 <strlen>
 8007f00:	2300      	movs	r3, #0
 8007f02:	930a      	str	r3, [sp, #40]	; 0x28
 8007f04:	6823      	ldr	r3, [r4, #0]
 8007f06:	9305      	str	r3, [sp, #20]
 8007f08:	f8d8 3000 	ldr.w	r3, [r8]
 8007f0c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007f10:	3307      	adds	r3, #7
 8007f12:	f023 0307 	bic.w	r3, r3, #7
 8007f16:	f103 0208 	add.w	r2, r3, #8
 8007f1a:	f8c8 2000 	str.w	r2, [r8]
 8007f1e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007f22:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007f26:	9307      	str	r3, [sp, #28]
 8007f28:	f8cd 8018 	str.w	r8, [sp, #24]
 8007f2c:	ee08 0a10 	vmov	s16, r0
 8007f30:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8007f34:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007f38:	4b9e      	ldr	r3, [pc, #632]	; (80081b4 <_printf_float+0x2d8>)
 8007f3a:	f04f 32ff 	mov.w	r2, #4294967295
 8007f3e:	f7f8 fdf5 	bl	8000b2c <__aeabi_dcmpun>
 8007f42:	bb88      	cbnz	r0, 8007fa8 <_printf_float+0xcc>
 8007f44:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007f48:	4b9a      	ldr	r3, [pc, #616]	; (80081b4 <_printf_float+0x2d8>)
 8007f4a:	f04f 32ff 	mov.w	r2, #4294967295
 8007f4e:	f7f8 fdcf 	bl	8000af0 <__aeabi_dcmple>
 8007f52:	bb48      	cbnz	r0, 8007fa8 <_printf_float+0xcc>
 8007f54:	2200      	movs	r2, #0
 8007f56:	2300      	movs	r3, #0
 8007f58:	4640      	mov	r0, r8
 8007f5a:	4649      	mov	r1, r9
 8007f5c:	f7f8 fdbe 	bl	8000adc <__aeabi_dcmplt>
 8007f60:	b110      	cbz	r0, 8007f68 <_printf_float+0x8c>
 8007f62:	232d      	movs	r3, #45	; 0x2d
 8007f64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f68:	4a93      	ldr	r2, [pc, #588]	; (80081b8 <_printf_float+0x2dc>)
 8007f6a:	4b94      	ldr	r3, [pc, #592]	; (80081bc <_printf_float+0x2e0>)
 8007f6c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007f70:	bf94      	ite	ls
 8007f72:	4690      	movls	r8, r2
 8007f74:	4698      	movhi	r8, r3
 8007f76:	2303      	movs	r3, #3
 8007f78:	6123      	str	r3, [r4, #16]
 8007f7a:	9b05      	ldr	r3, [sp, #20]
 8007f7c:	f023 0304 	bic.w	r3, r3, #4
 8007f80:	6023      	str	r3, [r4, #0]
 8007f82:	f04f 0900 	mov.w	r9, #0
 8007f86:	9700      	str	r7, [sp, #0]
 8007f88:	4633      	mov	r3, r6
 8007f8a:	aa0b      	add	r2, sp, #44	; 0x2c
 8007f8c:	4621      	mov	r1, r4
 8007f8e:	4628      	mov	r0, r5
 8007f90:	f000 f9da 	bl	8008348 <_printf_common>
 8007f94:	3001      	adds	r0, #1
 8007f96:	f040 8090 	bne.w	80080ba <_printf_float+0x1de>
 8007f9a:	f04f 30ff 	mov.w	r0, #4294967295
 8007f9e:	b00d      	add	sp, #52	; 0x34
 8007fa0:	ecbd 8b02 	vpop	{d8}
 8007fa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fa8:	4642      	mov	r2, r8
 8007faa:	464b      	mov	r3, r9
 8007fac:	4640      	mov	r0, r8
 8007fae:	4649      	mov	r1, r9
 8007fb0:	f7f8 fdbc 	bl	8000b2c <__aeabi_dcmpun>
 8007fb4:	b140      	cbz	r0, 8007fc8 <_printf_float+0xec>
 8007fb6:	464b      	mov	r3, r9
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	bfbc      	itt	lt
 8007fbc:	232d      	movlt	r3, #45	; 0x2d
 8007fbe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007fc2:	4a7f      	ldr	r2, [pc, #508]	; (80081c0 <_printf_float+0x2e4>)
 8007fc4:	4b7f      	ldr	r3, [pc, #508]	; (80081c4 <_printf_float+0x2e8>)
 8007fc6:	e7d1      	b.n	8007f6c <_printf_float+0x90>
 8007fc8:	6863      	ldr	r3, [r4, #4]
 8007fca:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007fce:	9206      	str	r2, [sp, #24]
 8007fd0:	1c5a      	adds	r2, r3, #1
 8007fd2:	d13f      	bne.n	8008054 <_printf_float+0x178>
 8007fd4:	2306      	movs	r3, #6
 8007fd6:	6063      	str	r3, [r4, #4]
 8007fd8:	9b05      	ldr	r3, [sp, #20]
 8007fda:	6861      	ldr	r1, [r4, #4]
 8007fdc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	9303      	str	r3, [sp, #12]
 8007fe4:	ab0a      	add	r3, sp, #40	; 0x28
 8007fe6:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007fea:	ab09      	add	r3, sp, #36	; 0x24
 8007fec:	ec49 8b10 	vmov	d0, r8, r9
 8007ff0:	9300      	str	r3, [sp, #0]
 8007ff2:	6022      	str	r2, [r4, #0]
 8007ff4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007ff8:	4628      	mov	r0, r5
 8007ffa:	f7ff fece 	bl	8007d9a <__cvt>
 8007ffe:	9b06      	ldr	r3, [sp, #24]
 8008000:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008002:	2b47      	cmp	r3, #71	; 0x47
 8008004:	4680      	mov	r8, r0
 8008006:	d108      	bne.n	800801a <_printf_float+0x13e>
 8008008:	1cc8      	adds	r0, r1, #3
 800800a:	db02      	blt.n	8008012 <_printf_float+0x136>
 800800c:	6863      	ldr	r3, [r4, #4]
 800800e:	4299      	cmp	r1, r3
 8008010:	dd41      	ble.n	8008096 <_printf_float+0x1ba>
 8008012:	f1ab 0302 	sub.w	r3, fp, #2
 8008016:	fa5f fb83 	uxtb.w	fp, r3
 800801a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800801e:	d820      	bhi.n	8008062 <_printf_float+0x186>
 8008020:	3901      	subs	r1, #1
 8008022:	465a      	mov	r2, fp
 8008024:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008028:	9109      	str	r1, [sp, #36]	; 0x24
 800802a:	f7ff ff18 	bl	8007e5e <__exponent>
 800802e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008030:	1813      	adds	r3, r2, r0
 8008032:	2a01      	cmp	r2, #1
 8008034:	4681      	mov	r9, r0
 8008036:	6123      	str	r3, [r4, #16]
 8008038:	dc02      	bgt.n	8008040 <_printf_float+0x164>
 800803a:	6822      	ldr	r2, [r4, #0]
 800803c:	07d2      	lsls	r2, r2, #31
 800803e:	d501      	bpl.n	8008044 <_printf_float+0x168>
 8008040:	3301      	adds	r3, #1
 8008042:	6123      	str	r3, [r4, #16]
 8008044:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008048:	2b00      	cmp	r3, #0
 800804a:	d09c      	beq.n	8007f86 <_printf_float+0xaa>
 800804c:	232d      	movs	r3, #45	; 0x2d
 800804e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008052:	e798      	b.n	8007f86 <_printf_float+0xaa>
 8008054:	9a06      	ldr	r2, [sp, #24]
 8008056:	2a47      	cmp	r2, #71	; 0x47
 8008058:	d1be      	bne.n	8007fd8 <_printf_float+0xfc>
 800805a:	2b00      	cmp	r3, #0
 800805c:	d1bc      	bne.n	8007fd8 <_printf_float+0xfc>
 800805e:	2301      	movs	r3, #1
 8008060:	e7b9      	b.n	8007fd6 <_printf_float+0xfa>
 8008062:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008066:	d118      	bne.n	800809a <_printf_float+0x1be>
 8008068:	2900      	cmp	r1, #0
 800806a:	6863      	ldr	r3, [r4, #4]
 800806c:	dd0b      	ble.n	8008086 <_printf_float+0x1aa>
 800806e:	6121      	str	r1, [r4, #16]
 8008070:	b913      	cbnz	r3, 8008078 <_printf_float+0x19c>
 8008072:	6822      	ldr	r2, [r4, #0]
 8008074:	07d0      	lsls	r0, r2, #31
 8008076:	d502      	bpl.n	800807e <_printf_float+0x1a2>
 8008078:	3301      	adds	r3, #1
 800807a:	440b      	add	r3, r1
 800807c:	6123      	str	r3, [r4, #16]
 800807e:	65a1      	str	r1, [r4, #88]	; 0x58
 8008080:	f04f 0900 	mov.w	r9, #0
 8008084:	e7de      	b.n	8008044 <_printf_float+0x168>
 8008086:	b913      	cbnz	r3, 800808e <_printf_float+0x1b2>
 8008088:	6822      	ldr	r2, [r4, #0]
 800808a:	07d2      	lsls	r2, r2, #31
 800808c:	d501      	bpl.n	8008092 <_printf_float+0x1b6>
 800808e:	3302      	adds	r3, #2
 8008090:	e7f4      	b.n	800807c <_printf_float+0x1a0>
 8008092:	2301      	movs	r3, #1
 8008094:	e7f2      	b.n	800807c <_printf_float+0x1a0>
 8008096:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800809a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800809c:	4299      	cmp	r1, r3
 800809e:	db05      	blt.n	80080ac <_printf_float+0x1d0>
 80080a0:	6823      	ldr	r3, [r4, #0]
 80080a2:	6121      	str	r1, [r4, #16]
 80080a4:	07d8      	lsls	r0, r3, #31
 80080a6:	d5ea      	bpl.n	800807e <_printf_float+0x1a2>
 80080a8:	1c4b      	adds	r3, r1, #1
 80080aa:	e7e7      	b.n	800807c <_printf_float+0x1a0>
 80080ac:	2900      	cmp	r1, #0
 80080ae:	bfd4      	ite	le
 80080b0:	f1c1 0202 	rsble	r2, r1, #2
 80080b4:	2201      	movgt	r2, #1
 80080b6:	4413      	add	r3, r2
 80080b8:	e7e0      	b.n	800807c <_printf_float+0x1a0>
 80080ba:	6823      	ldr	r3, [r4, #0]
 80080bc:	055a      	lsls	r2, r3, #21
 80080be:	d407      	bmi.n	80080d0 <_printf_float+0x1f4>
 80080c0:	6923      	ldr	r3, [r4, #16]
 80080c2:	4642      	mov	r2, r8
 80080c4:	4631      	mov	r1, r6
 80080c6:	4628      	mov	r0, r5
 80080c8:	47b8      	blx	r7
 80080ca:	3001      	adds	r0, #1
 80080cc:	d12c      	bne.n	8008128 <_printf_float+0x24c>
 80080ce:	e764      	b.n	8007f9a <_printf_float+0xbe>
 80080d0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80080d4:	f240 80e0 	bls.w	8008298 <_printf_float+0x3bc>
 80080d8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80080dc:	2200      	movs	r2, #0
 80080de:	2300      	movs	r3, #0
 80080e0:	f7f8 fcf2 	bl	8000ac8 <__aeabi_dcmpeq>
 80080e4:	2800      	cmp	r0, #0
 80080e6:	d034      	beq.n	8008152 <_printf_float+0x276>
 80080e8:	4a37      	ldr	r2, [pc, #220]	; (80081c8 <_printf_float+0x2ec>)
 80080ea:	2301      	movs	r3, #1
 80080ec:	4631      	mov	r1, r6
 80080ee:	4628      	mov	r0, r5
 80080f0:	47b8      	blx	r7
 80080f2:	3001      	adds	r0, #1
 80080f4:	f43f af51 	beq.w	8007f9a <_printf_float+0xbe>
 80080f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80080fc:	429a      	cmp	r2, r3
 80080fe:	db02      	blt.n	8008106 <_printf_float+0x22a>
 8008100:	6823      	ldr	r3, [r4, #0]
 8008102:	07d8      	lsls	r0, r3, #31
 8008104:	d510      	bpl.n	8008128 <_printf_float+0x24c>
 8008106:	ee18 3a10 	vmov	r3, s16
 800810a:	4652      	mov	r2, sl
 800810c:	4631      	mov	r1, r6
 800810e:	4628      	mov	r0, r5
 8008110:	47b8      	blx	r7
 8008112:	3001      	adds	r0, #1
 8008114:	f43f af41 	beq.w	8007f9a <_printf_float+0xbe>
 8008118:	f04f 0800 	mov.w	r8, #0
 800811c:	f104 091a 	add.w	r9, r4, #26
 8008120:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008122:	3b01      	subs	r3, #1
 8008124:	4543      	cmp	r3, r8
 8008126:	dc09      	bgt.n	800813c <_printf_float+0x260>
 8008128:	6823      	ldr	r3, [r4, #0]
 800812a:	079b      	lsls	r3, r3, #30
 800812c:	f100 8107 	bmi.w	800833e <_printf_float+0x462>
 8008130:	68e0      	ldr	r0, [r4, #12]
 8008132:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008134:	4298      	cmp	r0, r3
 8008136:	bfb8      	it	lt
 8008138:	4618      	movlt	r0, r3
 800813a:	e730      	b.n	8007f9e <_printf_float+0xc2>
 800813c:	2301      	movs	r3, #1
 800813e:	464a      	mov	r2, r9
 8008140:	4631      	mov	r1, r6
 8008142:	4628      	mov	r0, r5
 8008144:	47b8      	blx	r7
 8008146:	3001      	adds	r0, #1
 8008148:	f43f af27 	beq.w	8007f9a <_printf_float+0xbe>
 800814c:	f108 0801 	add.w	r8, r8, #1
 8008150:	e7e6      	b.n	8008120 <_printf_float+0x244>
 8008152:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008154:	2b00      	cmp	r3, #0
 8008156:	dc39      	bgt.n	80081cc <_printf_float+0x2f0>
 8008158:	4a1b      	ldr	r2, [pc, #108]	; (80081c8 <_printf_float+0x2ec>)
 800815a:	2301      	movs	r3, #1
 800815c:	4631      	mov	r1, r6
 800815e:	4628      	mov	r0, r5
 8008160:	47b8      	blx	r7
 8008162:	3001      	adds	r0, #1
 8008164:	f43f af19 	beq.w	8007f9a <_printf_float+0xbe>
 8008168:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800816c:	4313      	orrs	r3, r2
 800816e:	d102      	bne.n	8008176 <_printf_float+0x29a>
 8008170:	6823      	ldr	r3, [r4, #0]
 8008172:	07d9      	lsls	r1, r3, #31
 8008174:	d5d8      	bpl.n	8008128 <_printf_float+0x24c>
 8008176:	ee18 3a10 	vmov	r3, s16
 800817a:	4652      	mov	r2, sl
 800817c:	4631      	mov	r1, r6
 800817e:	4628      	mov	r0, r5
 8008180:	47b8      	blx	r7
 8008182:	3001      	adds	r0, #1
 8008184:	f43f af09 	beq.w	8007f9a <_printf_float+0xbe>
 8008188:	f04f 0900 	mov.w	r9, #0
 800818c:	f104 0a1a 	add.w	sl, r4, #26
 8008190:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008192:	425b      	negs	r3, r3
 8008194:	454b      	cmp	r3, r9
 8008196:	dc01      	bgt.n	800819c <_printf_float+0x2c0>
 8008198:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800819a:	e792      	b.n	80080c2 <_printf_float+0x1e6>
 800819c:	2301      	movs	r3, #1
 800819e:	4652      	mov	r2, sl
 80081a0:	4631      	mov	r1, r6
 80081a2:	4628      	mov	r0, r5
 80081a4:	47b8      	blx	r7
 80081a6:	3001      	adds	r0, #1
 80081a8:	f43f aef7 	beq.w	8007f9a <_printf_float+0xbe>
 80081ac:	f109 0901 	add.w	r9, r9, #1
 80081b0:	e7ee      	b.n	8008190 <_printf_float+0x2b4>
 80081b2:	bf00      	nop
 80081b4:	7fefffff 	.word	0x7fefffff
 80081b8:	0800ab80 	.word	0x0800ab80
 80081bc:	0800ab84 	.word	0x0800ab84
 80081c0:	0800ab88 	.word	0x0800ab88
 80081c4:	0800ab8c 	.word	0x0800ab8c
 80081c8:	0800ab90 	.word	0x0800ab90
 80081cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80081ce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80081d0:	429a      	cmp	r2, r3
 80081d2:	bfa8      	it	ge
 80081d4:	461a      	movge	r2, r3
 80081d6:	2a00      	cmp	r2, #0
 80081d8:	4691      	mov	r9, r2
 80081da:	dc37      	bgt.n	800824c <_printf_float+0x370>
 80081dc:	f04f 0b00 	mov.w	fp, #0
 80081e0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80081e4:	f104 021a 	add.w	r2, r4, #26
 80081e8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80081ea:	9305      	str	r3, [sp, #20]
 80081ec:	eba3 0309 	sub.w	r3, r3, r9
 80081f0:	455b      	cmp	r3, fp
 80081f2:	dc33      	bgt.n	800825c <_printf_float+0x380>
 80081f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80081f8:	429a      	cmp	r2, r3
 80081fa:	db3b      	blt.n	8008274 <_printf_float+0x398>
 80081fc:	6823      	ldr	r3, [r4, #0]
 80081fe:	07da      	lsls	r2, r3, #31
 8008200:	d438      	bmi.n	8008274 <_printf_float+0x398>
 8008202:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008206:	eba2 0903 	sub.w	r9, r2, r3
 800820a:	9b05      	ldr	r3, [sp, #20]
 800820c:	1ad2      	subs	r2, r2, r3
 800820e:	4591      	cmp	r9, r2
 8008210:	bfa8      	it	ge
 8008212:	4691      	movge	r9, r2
 8008214:	f1b9 0f00 	cmp.w	r9, #0
 8008218:	dc35      	bgt.n	8008286 <_printf_float+0x3aa>
 800821a:	f04f 0800 	mov.w	r8, #0
 800821e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008222:	f104 0a1a 	add.w	sl, r4, #26
 8008226:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800822a:	1a9b      	subs	r3, r3, r2
 800822c:	eba3 0309 	sub.w	r3, r3, r9
 8008230:	4543      	cmp	r3, r8
 8008232:	f77f af79 	ble.w	8008128 <_printf_float+0x24c>
 8008236:	2301      	movs	r3, #1
 8008238:	4652      	mov	r2, sl
 800823a:	4631      	mov	r1, r6
 800823c:	4628      	mov	r0, r5
 800823e:	47b8      	blx	r7
 8008240:	3001      	adds	r0, #1
 8008242:	f43f aeaa 	beq.w	8007f9a <_printf_float+0xbe>
 8008246:	f108 0801 	add.w	r8, r8, #1
 800824a:	e7ec      	b.n	8008226 <_printf_float+0x34a>
 800824c:	4613      	mov	r3, r2
 800824e:	4631      	mov	r1, r6
 8008250:	4642      	mov	r2, r8
 8008252:	4628      	mov	r0, r5
 8008254:	47b8      	blx	r7
 8008256:	3001      	adds	r0, #1
 8008258:	d1c0      	bne.n	80081dc <_printf_float+0x300>
 800825a:	e69e      	b.n	8007f9a <_printf_float+0xbe>
 800825c:	2301      	movs	r3, #1
 800825e:	4631      	mov	r1, r6
 8008260:	4628      	mov	r0, r5
 8008262:	9205      	str	r2, [sp, #20]
 8008264:	47b8      	blx	r7
 8008266:	3001      	adds	r0, #1
 8008268:	f43f ae97 	beq.w	8007f9a <_printf_float+0xbe>
 800826c:	9a05      	ldr	r2, [sp, #20]
 800826e:	f10b 0b01 	add.w	fp, fp, #1
 8008272:	e7b9      	b.n	80081e8 <_printf_float+0x30c>
 8008274:	ee18 3a10 	vmov	r3, s16
 8008278:	4652      	mov	r2, sl
 800827a:	4631      	mov	r1, r6
 800827c:	4628      	mov	r0, r5
 800827e:	47b8      	blx	r7
 8008280:	3001      	adds	r0, #1
 8008282:	d1be      	bne.n	8008202 <_printf_float+0x326>
 8008284:	e689      	b.n	8007f9a <_printf_float+0xbe>
 8008286:	9a05      	ldr	r2, [sp, #20]
 8008288:	464b      	mov	r3, r9
 800828a:	4442      	add	r2, r8
 800828c:	4631      	mov	r1, r6
 800828e:	4628      	mov	r0, r5
 8008290:	47b8      	blx	r7
 8008292:	3001      	adds	r0, #1
 8008294:	d1c1      	bne.n	800821a <_printf_float+0x33e>
 8008296:	e680      	b.n	8007f9a <_printf_float+0xbe>
 8008298:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800829a:	2a01      	cmp	r2, #1
 800829c:	dc01      	bgt.n	80082a2 <_printf_float+0x3c6>
 800829e:	07db      	lsls	r3, r3, #31
 80082a0:	d53a      	bpl.n	8008318 <_printf_float+0x43c>
 80082a2:	2301      	movs	r3, #1
 80082a4:	4642      	mov	r2, r8
 80082a6:	4631      	mov	r1, r6
 80082a8:	4628      	mov	r0, r5
 80082aa:	47b8      	blx	r7
 80082ac:	3001      	adds	r0, #1
 80082ae:	f43f ae74 	beq.w	8007f9a <_printf_float+0xbe>
 80082b2:	ee18 3a10 	vmov	r3, s16
 80082b6:	4652      	mov	r2, sl
 80082b8:	4631      	mov	r1, r6
 80082ba:	4628      	mov	r0, r5
 80082bc:	47b8      	blx	r7
 80082be:	3001      	adds	r0, #1
 80082c0:	f43f ae6b 	beq.w	8007f9a <_printf_float+0xbe>
 80082c4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80082c8:	2200      	movs	r2, #0
 80082ca:	2300      	movs	r3, #0
 80082cc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80082d0:	f7f8 fbfa 	bl	8000ac8 <__aeabi_dcmpeq>
 80082d4:	b9d8      	cbnz	r0, 800830e <_printf_float+0x432>
 80082d6:	f10a 33ff 	add.w	r3, sl, #4294967295
 80082da:	f108 0201 	add.w	r2, r8, #1
 80082de:	4631      	mov	r1, r6
 80082e0:	4628      	mov	r0, r5
 80082e2:	47b8      	blx	r7
 80082e4:	3001      	adds	r0, #1
 80082e6:	d10e      	bne.n	8008306 <_printf_float+0x42a>
 80082e8:	e657      	b.n	8007f9a <_printf_float+0xbe>
 80082ea:	2301      	movs	r3, #1
 80082ec:	4652      	mov	r2, sl
 80082ee:	4631      	mov	r1, r6
 80082f0:	4628      	mov	r0, r5
 80082f2:	47b8      	blx	r7
 80082f4:	3001      	adds	r0, #1
 80082f6:	f43f ae50 	beq.w	8007f9a <_printf_float+0xbe>
 80082fa:	f108 0801 	add.w	r8, r8, #1
 80082fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008300:	3b01      	subs	r3, #1
 8008302:	4543      	cmp	r3, r8
 8008304:	dcf1      	bgt.n	80082ea <_printf_float+0x40e>
 8008306:	464b      	mov	r3, r9
 8008308:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800830c:	e6da      	b.n	80080c4 <_printf_float+0x1e8>
 800830e:	f04f 0800 	mov.w	r8, #0
 8008312:	f104 0a1a 	add.w	sl, r4, #26
 8008316:	e7f2      	b.n	80082fe <_printf_float+0x422>
 8008318:	2301      	movs	r3, #1
 800831a:	4642      	mov	r2, r8
 800831c:	e7df      	b.n	80082de <_printf_float+0x402>
 800831e:	2301      	movs	r3, #1
 8008320:	464a      	mov	r2, r9
 8008322:	4631      	mov	r1, r6
 8008324:	4628      	mov	r0, r5
 8008326:	47b8      	blx	r7
 8008328:	3001      	adds	r0, #1
 800832a:	f43f ae36 	beq.w	8007f9a <_printf_float+0xbe>
 800832e:	f108 0801 	add.w	r8, r8, #1
 8008332:	68e3      	ldr	r3, [r4, #12]
 8008334:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008336:	1a5b      	subs	r3, r3, r1
 8008338:	4543      	cmp	r3, r8
 800833a:	dcf0      	bgt.n	800831e <_printf_float+0x442>
 800833c:	e6f8      	b.n	8008130 <_printf_float+0x254>
 800833e:	f04f 0800 	mov.w	r8, #0
 8008342:	f104 0919 	add.w	r9, r4, #25
 8008346:	e7f4      	b.n	8008332 <_printf_float+0x456>

08008348 <_printf_common>:
 8008348:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800834c:	4616      	mov	r6, r2
 800834e:	4699      	mov	r9, r3
 8008350:	688a      	ldr	r2, [r1, #8]
 8008352:	690b      	ldr	r3, [r1, #16]
 8008354:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008358:	4293      	cmp	r3, r2
 800835a:	bfb8      	it	lt
 800835c:	4613      	movlt	r3, r2
 800835e:	6033      	str	r3, [r6, #0]
 8008360:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008364:	4607      	mov	r7, r0
 8008366:	460c      	mov	r4, r1
 8008368:	b10a      	cbz	r2, 800836e <_printf_common+0x26>
 800836a:	3301      	adds	r3, #1
 800836c:	6033      	str	r3, [r6, #0]
 800836e:	6823      	ldr	r3, [r4, #0]
 8008370:	0699      	lsls	r1, r3, #26
 8008372:	bf42      	ittt	mi
 8008374:	6833      	ldrmi	r3, [r6, #0]
 8008376:	3302      	addmi	r3, #2
 8008378:	6033      	strmi	r3, [r6, #0]
 800837a:	6825      	ldr	r5, [r4, #0]
 800837c:	f015 0506 	ands.w	r5, r5, #6
 8008380:	d106      	bne.n	8008390 <_printf_common+0x48>
 8008382:	f104 0a19 	add.w	sl, r4, #25
 8008386:	68e3      	ldr	r3, [r4, #12]
 8008388:	6832      	ldr	r2, [r6, #0]
 800838a:	1a9b      	subs	r3, r3, r2
 800838c:	42ab      	cmp	r3, r5
 800838e:	dc26      	bgt.n	80083de <_printf_common+0x96>
 8008390:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008394:	1e13      	subs	r3, r2, #0
 8008396:	6822      	ldr	r2, [r4, #0]
 8008398:	bf18      	it	ne
 800839a:	2301      	movne	r3, #1
 800839c:	0692      	lsls	r2, r2, #26
 800839e:	d42b      	bmi.n	80083f8 <_printf_common+0xb0>
 80083a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80083a4:	4649      	mov	r1, r9
 80083a6:	4638      	mov	r0, r7
 80083a8:	47c0      	blx	r8
 80083aa:	3001      	adds	r0, #1
 80083ac:	d01e      	beq.n	80083ec <_printf_common+0xa4>
 80083ae:	6823      	ldr	r3, [r4, #0]
 80083b0:	6922      	ldr	r2, [r4, #16]
 80083b2:	f003 0306 	and.w	r3, r3, #6
 80083b6:	2b04      	cmp	r3, #4
 80083b8:	bf02      	ittt	eq
 80083ba:	68e5      	ldreq	r5, [r4, #12]
 80083bc:	6833      	ldreq	r3, [r6, #0]
 80083be:	1aed      	subeq	r5, r5, r3
 80083c0:	68a3      	ldr	r3, [r4, #8]
 80083c2:	bf0c      	ite	eq
 80083c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80083c8:	2500      	movne	r5, #0
 80083ca:	4293      	cmp	r3, r2
 80083cc:	bfc4      	itt	gt
 80083ce:	1a9b      	subgt	r3, r3, r2
 80083d0:	18ed      	addgt	r5, r5, r3
 80083d2:	2600      	movs	r6, #0
 80083d4:	341a      	adds	r4, #26
 80083d6:	42b5      	cmp	r5, r6
 80083d8:	d11a      	bne.n	8008410 <_printf_common+0xc8>
 80083da:	2000      	movs	r0, #0
 80083dc:	e008      	b.n	80083f0 <_printf_common+0xa8>
 80083de:	2301      	movs	r3, #1
 80083e0:	4652      	mov	r2, sl
 80083e2:	4649      	mov	r1, r9
 80083e4:	4638      	mov	r0, r7
 80083e6:	47c0      	blx	r8
 80083e8:	3001      	adds	r0, #1
 80083ea:	d103      	bne.n	80083f4 <_printf_common+0xac>
 80083ec:	f04f 30ff 	mov.w	r0, #4294967295
 80083f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083f4:	3501      	adds	r5, #1
 80083f6:	e7c6      	b.n	8008386 <_printf_common+0x3e>
 80083f8:	18e1      	adds	r1, r4, r3
 80083fa:	1c5a      	adds	r2, r3, #1
 80083fc:	2030      	movs	r0, #48	; 0x30
 80083fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008402:	4422      	add	r2, r4
 8008404:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008408:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800840c:	3302      	adds	r3, #2
 800840e:	e7c7      	b.n	80083a0 <_printf_common+0x58>
 8008410:	2301      	movs	r3, #1
 8008412:	4622      	mov	r2, r4
 8008414:	4649      	mov	r1, r9
 8008416:	4638      	mov	r0, r7
 8008418:	47c0      	blx	r8
 800841a:	3001      	adds	r0, #1
 800841c:	d0e6      	beq.n	80083ec <_printf_common+0xa4>
 800841e:	3601      	adds	r6, #1
 8008420:	e7d9      	b.n	80083d6 <_printf_common+0x8e>
	...

08008424 <_printf_i>:
 8008424:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008428:	7e0f      	ldrb	r7, [r1, #24]
 800842a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800842c:	2f78      	cmp	r7, #120	; 0x78
 800842e:	4691      	mov	r9, r2
 8008430:	4680      	mov	r8, r0
 8008432:	460c      	mov	r4, r1
 8008434:	469a      	mov	sl, r3
 8008436:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800843a:	d807      	bhi.n	800844c <_printf_i+0x28>
 800843c:	2f62      	cmp	r7, #98	; 0x62
 800843e:	d80a      	bhi.n	8008456 <_printf_i+0x32>
 8008440:	2f00      	cmp	r7, #0
 8008442:	f000 80d4 	beq.w	80085ee <_printf_i+0x1ca>
 8008446:	2f58      	cmp	r7, #88	; 0x58
 8008448:	f000 80c0 	beq.w	80085cc <_printf_i+0x1a8>
 800844c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008450:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008454:	e03a      	b.n	80084cc <_printf_i+0xa8>
 8008456:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800845a:	2b15      	cmp	r3, #21
 800845c:	d8f6      	bhi.n	800844c <_printf_i+0x28>
 800845e:	a101      	add	r1, pc, #4	; (adr r1, 8008464 <_printf_i+0x40>)
 8008460:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008464:	080084bd 	.word	0x080084bd
 8008468:	080084d1 	.word	0x080084d1
 800846c:	0800844d 	.word	0x0800844d
 8008470:	0800844d 	.word	0x0800844d
 8008474:	0800844d 	.word	0x0800844d
 8008478:	0800844d 	.word	0x0800844d
 800847c:	080084d1 	.word	0x080084d1
 8008480:	0800844d 	.word	0x0800844d
 8008484:	0800844d 	.word	0x0800844d
 8008488:	0800844d 	.word	0x0800844d
 800848c:	0800844d 	.word	0x0800844d
 8008490:	080085d5 	.word	0x080085d5
 8008494:	080084fd 	.word	0x080084fd
 8008498:	0800858f 	.word	0x0800858f
 800849c:	0800844d 	.word	0x0800844d
 80084a0:	0800844d 	.word	0x0800844d
 80084a4:	080085f7 	.word	0x080085f7
 80084a8:	0800844d 	.word	0x0800844d
 80084ac:	080084fd 	.word	0x080084fd
 80084b0:	0800844d 	.word	0x0800844d
 80084b4:	0800844d 	.word	0x0800844d
 80084b8:	08008597 	.word	0x08008597
 80084bc:	682b      	ldr	r3, [r5, #0]
 80084be:	1d1a      	adds	r2, r3, #4
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	602a      	str	r2, [r5, #0]
 80084c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80084c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80084cc:	2301      	movs	r3, #1
 80084ce:	e09f      	b.n	8008610 <_printf_i+0x1ec>
 80084d0:	6820      	ldr	r0, [r4, #0]
 80084d2:	682b      	ldr	r3, [r5, #0]
 80084d4:	0607      	lsls	r7, r0, #24
 80084d6:	f103 0104 	add.w	r1, r3, #4
 80084da:	6029      	str	r1, [r5, #0]
 80084dc:	d501      	bpl.n	80084e2 <_printf_i+0xbe>
 80084de:	681e      	ldr	r6, [r3, #0]
 80084e0:	e003      	b.n	80084ea <_printf_i+0xc6>
 80084e2:	0646      	lsls	r6, r0, #25
 80084e4:	d5fb      	bpl.n	80084de <_printf_i+0xba>
 80084e6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80084ea:	2e00      	cmp	r6, #0
 80084ec:	da03      	bge.n	80084f6 <_printf_i+0xd2>
 80084ee:	232d      	movs	r3, #45	; 0x2d
 80084f0:	4276      	negs	r6, r6
 80084f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80084f6:	485a      	ldr	r0, [pc, #360]	; (8008660 <_printf_i+0x23c>)
 80084f8:	230a      	movs	r3, #10
 80084fa:	e012      	b.n	8008522 <_printf_i+0xfe>
 80084fc:	682b      	ldr	r3, [r5, #0]
 80084fe:	6820      	ldr	r0, [r4, #0]
 8008500:	1d19      	adds	r1, r3, #4
 8008502:	6029      	str	r1, [r5, #0]
 8008504:	0605      	lsls	r5, r0, #24
 8008506:	d501      	bpl.n	800850c <_printf_i+0xe8>
 8008508:	681e      	ldr	r6, [r3, #0]
 800850a:	e002      	b.n	8008512 <_printf_i+0xee>
 800850c:	0641      	lsls	r1, r0, #25
 800850e:	d5fb      	bpl.n	8008508 <_printf_i+0xe4>
 8008510:	881e      	ldrh	r6, [r3, #0]
 8008512:	4853      	ldr	r0, [pc, #332]	; (8008660 <_printf_i+0x23c>)
 8008514:	2f6f      	cmp	r7, #111	; 0x6f
 8008516:	bf0c      	ite	eq
 8008518:	2308      	moveq	r3, #8
 800851a:	230a      	movne	r3, #10
 800851c:	2100      	movs	r1, #0
 800851e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008522:	6865      	ldr	r5, [r4, #4]
 8008524:	60a5      	str	r5, [r4, #8]
 8008526:	2d00      	cmp	r5, #0
 8008528:	bfa2      	ittt	ge
 800852a:	6821      	ldrge	r1, [r4, #0]
 800852c:	f021 0104 	bicge.w	r1, r1, #4
 8008530:	6021      	strge	r1, [r4, #0]
 8008532:	b90e      	cbnz	r6, 8008538 <_printf_i+0x114>
 8008534:	2d00      	cmp	r5, #0
 8008536:	d04b      	beq.n	80085d0 <_printf_i+0x1ac>
 8008538:	4615      	mov	r5, r2
 800853a:	fbb6 f1f3 	udiv	r1, r6, r3
 800853e:	fb03 6711 	mls	r7, r3, r1, r6
 8008542:	5dc7      	ldrb	r7, [r0, r7]
 8008544:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008548:	4637      	mov	r7, r6
 800854a:	42bb      	cmp	r3, r7
 800854c:	460e      	mov	r6, r1
 800854e:	d9f4      	bls.n	800853a <_printf_i+0x116>
 8008550:	2b08      	cmp	r3, #8
 8008552:	d10b      	bne.n	800856c <_printf_i+0x148>
 8008554:	6823      	ldr	r3, [r4, #0]
 8008556:	07de      	lsls	r6, r3, #31
 8008558:	d508      	bpl.n	800856c <_printf_i+0x148>
 800855a:	6923      	ldr	r3, [r4, #16]
 800855c:	6861      	ldr	r1, [r4, #4]
 800855e:	4299      	cmp	r1, r3
 8008560:	bfde      	ittt	le
 8008562:	2330      	movle	r3, #48	; 0x30
 8008564:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008568:	f105 35ff 	addle.w	r5, r5, #4294967295
 800856c:	1b52      	subs	r2, r2, r5
 800856e:	6122      	str	r2, [r4, #16]
 8008570:	f8cd a000 	str.w	sl, [sp]
 8008574:	464b      	mov	r3, r9
 8008576:	aa03      	add	r2, sp, #12
 8008578:	4621      	mov	r1, r4
 800857a:	4640      	mov	r0, r8
 800857c:	f7ff fee4 	bl	8008348 <_printf_common>
 8008580:	3001      	adds	r0, #1
 8008582:	d14a      	bne.n	800861a <_printf_i+0x1f6>
 8008584:	f04f 30ff 	mov.w	r0, #4294967295
 8008588:	b004      	add	sp, #16
 800858a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800858e:	6823      	ldr	r3, [r4, #0]
 8008590:	f043 0320 	orr.w	r3, r3, #32
 8008594:	6023      	str	r3, [r4, #0]
 8008596:	4833      	ldr	r0, [pc, #204]	; (8008664 <_printf_i+0x240>)
 8008598:	2778      	movs	r7, #120	; 0x78
 800859a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800859e:	6823      	ldr	r3, [r4, #0]
 80085a0:	6829      	ldr	r1, [r5, #0]
 80085a2:	061f      	lsls	r7, r3, #24
 80085a4:	f851 6b04 	ldr.w	r6, [r1], #4
 80085a8:	d402      	bmi.n	80085b0 <_printf_i+0x18c>
 80085aa:	065f      	lsls	r7, r3, #25
 80085ac:	bf48      	it	mi
 80085ae:	b2b6      	uxthmi	r6, r6
 80085b0:	07df      	lsls	r7, r3, #31
 80085b2:	bf48      	it	mi
 80085b4:	f043 0320 	orrmi.w	r3, r3, #32
 80085b8:	6029      	str	r1, [r5, #0]
 80085ba:	bf48      	it	mi
 80085bc:	6023      	strmi	r3, [r4, #0]
 80085be:	b91e      	cbnz	r6, 80085c8 <_printf_i+0x1a4>
 80085c0:	6823      	ldr	r3, [r4, #0]
 80085c2:	f023 0320 	bic.w	r3, r3, #32
 80085c6:	6023      	str	r3, [r4, #0]
 80085c8:	2310      	movs	r3, #16
 80085ca:	e7a7      	b.n	800851c <_printf_i+0xf8>
 80085cc:	4824      	ldr	r0, [pc, #144]	; (8008660 <_printf_i+0x23c>)
 80085ce:	e7e4      	b.n	800859a <_printf_i+0x176>
 80085d0:	4615      	mov	r5, r2
 80085d2:	e7bd      	b.n	8008550 <_printf_i+0x12c>
 80085d4:	682b      	ldr	r3, [r5, #0]
 80085d6:	6826      	ldr	r6, [r4, #0]
 80085d8:	6961      	ldr	r1, [r4, #20]
 80085da:	1d18      	adds	r0, r3, #4
 80085dc:	6028      	str	r0, [r5, #0]
 80085de:	0635      	lsls	r5, r6, #24
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	d501      	bpl.n	80085e8 <_printf_i+0x1c4>
 80085e4:	6019      	str	r1, [r3, #0]
 80085e6:	e002      	b.n	80085ee <_printf_i+0x1ca>
 80085e8:	0670      	lsls	r0, r6, #25
 80085ea:	d5fb      	bpl.n	80085e4 <_printf_i+0x1c0>
 80085ec:	8019      	strh	r1, [r3, #0]
 80085ee:	2300      	movs	r3, #0
 80085f0:	6123      	str	r3, [r4, #16]
 80085f2:	4615      	mov	r5, r2
 80085f4:	e7bc      	b.n	8008570 <_printf_i+0x14c>
 80085f6:	682b      	ldr	r3, [r5, #0]
 80085f8:	1d1a      	adds	r2, r3, #4
 80085fa:	602a      	str	r2, [r5, #0]
 80085fc:	681d      	ldr	r5, [r3, #0]
 80085fe:	6862      	ldr	r2, [r4, #4]
 8008600:	2100      	movs	r1, #0
 8008602:	4628      	mov	r0, r5
 8008604:	f7f7 fde4 	bl	80001d0 <memchr>
 8008608:	b108      	cbz	r0, 800860e <_printf_i+0x1ea>
 800860a:	1b40      	subs	r0, r0, r5
 800860c:	6060      	str	r0, [r4, #4]
 800860e:	6863      	ldr	r3, [r4, #4]
 8008610:	6123      	str	r3, [r4, #16]
 8008612:	2300      	movs	r3, #0
 8008614:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008618:	e7aa      	b.n	8008570 <_printf_i+0x14c>
 800861a:	6923      	ldr	r3, [r4, #16]
 800861c:	462a      	mov	r2, r5
 800861e:	4649      	mov	r1, r9
 8008620:	4640      	mov	r0, r8
 8008622:	47d0      	blx	sl
 8008624:	3001      	adds	r0, #1
 8008626:	d0ad      	beq.n	8008584 <_printf_i+0x160>
 8008628:	6823      	ldr	r3, [r4, #0]
 800862a:	079b      	lsls	r3, r3, #30
 800862c:	d413      	bmi.n	8008656 <_printf_i+0x232>
 800862e:	68e0      	ldr	r0, [r4, #12]
 8008630:	9b03      	ldr	r3, [sp, #12]
 8008632:	4298      	cmp	r0, r3
 8008634:	bfb8      	it	lt
 8008636:	4618      	movlt	r0, r3
 8008638:	e7a6      	b.n	8008588 <_printf_i+0x164>
 800863a:	2301      	movs	r3, #1
 800863c:	4632      	mov	r2, r6
 800863e:	4649      	mov	r1, r9
 8008640:	4640      	mov	r0, r8
 8008642:	47d0      	blx	sl
 8008644:	3001      	adds	r0, #1
 8008646:	d09d      	beq.n	8008584 <_printf_i+0x160>
 8008648:	3501      	adds	r5, #1
 800864a:	68e3      	ldr	r3, [r4, #12]
 800864c:	9903      	ldr	r1, [sp, #12]
 800864e:	1a5b      	subs	r3, r3, r1
 8008650:	42ab      	cmp	r3, r5
 8008652:	dcf2      	bgt.n	800863a <_printf_i+0x216>
 8008654:	e7eb      	b.n	800862e <_printf_i+0x20a>
 8008656:	2500      	movs	r5, #0
 8008658:	f104 0619 	add.w	r6, r4, #25
 800865c:	e7f5      	b.n	800864a <_printf_i+0x226>
 800865e:	bf00      	nop
 8008660:	0800ab92 	.word	0x0800ab92
 8008664:	0800aba3 	.word	0x0800aba3

08008668 <std>:
 8008668:	2300      	movs	r3, #0
 800866a:	b510      	push	{r4, lr}
 800866c:	4604      	mov	r4, r0
 800866e:	e9c0 3300 	strd	r3, r3, [r0]
 8008672:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008676:	6083      	str	r3, [r0, #8]
 8008678:	8181      	strh	r1, [r0, #12]
 800867a:	6643      	str	r3, [r0, #100]	; 0x64
 800867c:	81c2      	strh	r2, [r0, #14]
 800867e:	6183      	str	r3, [r0, #24]
 8008680:	4619      	mov	r1, r3
 8008682:	2208      	movs	r2, #8
 8008684:	305c      	adds	r0, #92	; 0x5c
 8008686:	f000 f928 	bl	80088da <memset>
 800868a:	4b0d      	ldr	r3, [pc, #52]	; (80086c0 <std+0x58>)
 800868c:	6263      	str	r3, [r4, #36]	; 0x24
 800868e:	4b0d      	ldr	r3, [pc, #52]	; (80086c4 <std+0x5c>)
 8008690:	62a3      	str	r3, [r4, #40]	; 0x28
 8008692:	4b0d      	ldr	r3, [pc, #52]	; (80086c8 <std+0x60>)
 8008694:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008696:	4b0d      	ldr	r3, [pc, #52]	; (80086cc <std+0x64>)
 8008698:	6323      	str	r3, [r4, #48]	; 0x30
 800869a:	4b0d      	ldr	r3, [pc, #52]	; (80086d0 <std+0x68>)
 800869c:	6224      	str	r4, [r4, #32]
 800869e:	429c      	cmp	r4, r3
 80086a0:	d006      	beq.n	80086b0 <std+0x48>
 80086a2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80086a6:	4294      	cmp	r4, r2
 80086a8:	d002      	beq.n	80086b0 <std+0x48>
 80086aa:	33d0      	adds	r3, #208	; 0xd0
 80086ac:	429c      	cmp	r4, r3
 80086ae:	d105      	bne.n	80086bc <std+0x54>
 80086b0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80086b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80086b8:	f000 b98c 	b.w	80089d4 <__retarget_lock_init_recursive>
 80086bc:	bd10      	pop	{r4, pc}
 80086be:	bf00      	nop
 80086c0:	08008855 	.word	0x08008855
 80086c4:	08008877 	.word	0x08008877
 80086c8:	080088af 	.word	0x080088af
 80086cc:	080088d3 	.word	0x080088d3
 80086d0:	200003dc 	.word	0x200003dc

080086d4 <stdio_exit_handler>:
 80086d4:	4a02      	ldr	r2, [pc, #8]	; (80086e0 <stdio_exit_handler+0xc>)
 80086d6:	4903      	ldr	r1, [pc, #12]	; (80086e4 <stdio_exit_handler+0x10>)
 80086d8:	4803      	ldr	r0, [pc, #12]	; (80086e8 <stdio_exit_handler+0x14>)
 80086da:	f000 b869 	b.w	80087b0 <_fwalk_sglue>
 80086de:	bf00      	nop
 80086e0:	2000000c 	.word	0x2000000c
 80086e4:	0800a389 	.word	0x0800a389
 80086e8:	20000018 	.word	0x20000018

080086ec <cleanup_stdio>:
 80086ec:	6841      	ldr	r1, [r0, #4]
 80086ee:	4b0c      	ldr	r3, [pc, #48]	; (8008720 <cleanup_stdio+0x34>)
 80086f0:	4299      	cmp	r1, r3
 80086f2:	b510      	push	{r4, lr}
 80086f4:	4604      	mov	r4, r0
 80086f6:	d001      	beq.n	80086fc <cleanup_stdio+0x10>
 80086f8:	f001 fe46 	bl	800a388 <_fflush_r>
 80086fc:	68a1      	ldr	r1, [r4, #8]
 80086fe:	4b09      	ldr	r3, [pc, #36]	; (8008724 <cleanup_stdio+0x38>)
 8008700:	4299      	cmp	r1, r3
 8008702:	d002      	beq.n	800870a <cleanup_stdio+0x1e>
 8008704:	4620      	mov	r0, r4
 8008706:	f001 fe3f 	bl	800a388 <_fflush_r>
 800870a:	68e1      	ldr	r1, [r4, #12]
 800870c:	4b06      	ldr	r3, [pc, #24]	; (8008728 <cleanup_stdio+0x3c>)
 800870e:	4299      	cmp	r1, r3
 8008710:	d004      	beq.n	800871c <cleanup_stdio+0x30>
 8008712:	4620      	mov	r0, r4
 8008714:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008718:	f001 be36 	b.w	800a388 <_fflush_r>
 800871c:	bd10      	pop	{r4, pc}
 800871e:	bf00      	nop
 8008720:	200003dc 	.word	0x200003dc
 8008724:	20000444 	.word	0x20000444
 8008728:	200004ac 	.word	0x200004ac

0800872c <global_stdio_init.part.0>:
 800872c:	b510      	push	{r4, lr}
 800872e:	4b0b      	ldr	r3, [pc, #44]	; (800875c <global_stdio_init.part.0+0x30>)
 8008730:	4c0b      	ldr	r4, [pc, #44]	; (8008760 <global_stdio_init.part.0+0x34>)
 8008732:	4a0c      	ldr	r2, [pc, #48]	; (8008764 <global_stdio_init.part.0+0x38>)
 8008734:	601a      	str	r2, [r3, #0]
 8008736:	4620      	mov	r0, r4
 8008738:	2200      	movs	r2, #0
 800873a:	2104      	movs	r1, #4
 800873c:	f7ff ff94 	bl	8008668 <std>
 8008740:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008744:	2201      	movs	r2, #1
 8008746:	2109      	movs	r1, #9
 8008748:	f7ff ff8e 	bl	8008668 <std>
 800874c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008750:	2202      	movs	r2, #2
 8008752:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008756:	2112      	movs	r1, #18
 8008758:	f7ff bf86 	b.w	8008668 <std>
 800875c:	20000514 	.word	0x20000514
 8008760:	200003dc 	.word	0x200003dc
 8008764:	080086d5 	.word	0x080086d5

08008768 <__sfp_lock_acquire>:
 8008768:	4801      	ldr	r0, [pc, #4]	; (8008770 <__sfp_lock_acquire+0x8>)
 800876a:	f000 b934 	b.w	80089d6 <__retarget_lock_acquire_recursive>
 800876e:	bf00      	nop
 8008770:	2000051d 	.word	0x2000051d

08008774 <__sfp_lock_release>:
 8008774:	4801      	ldr	r0, [pc, #4]	; (800877c <__sfp_lock_release+0x8>)
 8008776:	f000 b92f 	b.w	80089d8 <__retarget_lock_release_recursive>
 800877a:	bf00      	nop
 800877c:	2000051d 	.word	0x2000051d

08008780 <__sinit>:
 8008780:	b510      	push	{r4, lr}
 8008782:	4604      	mov	r4, r0
 8008784:	f7ff fff0 	bl	8008768 <__sfp_lock_acquire>
 8008788:	6a23      	ldr	r3, [r4, #32]
 800878a:	b11b      	cbz	r3, 8008794 <__sinit+0x14>
 800878c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008790:	f7ff bff0 	b.w	8008774 <__sfp_lock_release>
 8008794:	4b04      	ldr	r3, [pc, #16]	; (80087a8 <__sinit+0x28>)
 8008796:	6223      	str	r3, [r4, #32]
 8008798:	4b04      	ldr	r3, [pc, #16]	; (80087ac <__sinit+0x2c>)
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d1f5      	bne.n	800878c <__sinit+0xc>
 80087a0:	f7ff ffc4 	bl	800872c <global_stdio_init.part.0>
 80087a4:	e7f2      	b.n	800878c <__sinit+0xc>
 80087a6:	bf00      	nop
 80087a8:	080086ed 	.word	0x080086ed
 80087ac:	20000514 	.word	0x20000514

080087b0 <_fwalk_sglue>:
 80087b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80087b4:	4607      	mov	r7, r0
 80087b6:	4688      	mov	r8, r1
 80087b8:	4614      	mov	r4, r2
 80087ba:	2600      	movs	r6, #0
 80087bc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80087c0:	f1b9 0901 	subs.w	r9, r9, #1
 80087c4:	d505      	bpl.n	80087d2 <_fwalk_sglue+0x22>
 80087c6:	6824      	ldr	r4, [r4, #0]
 80087c8:	2c00      	cmp	r4, #0
 80087ca:	d1f7      	bne.n	80087bc <_fwalk_sglue+0xc>
 80087cc:	4630      	mov	r0, r6
 80087ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80087d2:	89ab      	ldrh	r3, [r5, #12]
 80087d4:	2b01      	cmp	r3, #1
 80087d6:	d907      	bls.n	80087e8 <_fwalk_sglue+0x38>
 80087d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80087dc:	3301      	adds	r3, #1
 80087de:	d003      	beq.n	80087e8 <_fwalk_sglue+0x38>
 80087e0:	4629      	mov	r1, r5
 80087e2:	4638      	mov	r0, r7
 80087e4:	47c0      	blx	r8
 80087e6:	4306      	orrs	r6, r0
 80087e8:	3568      	adds	r5, #104	; 0x68
 80087ea:	e7e9      	b.n	80087c0 <_fwalk_sglue+0x10>

080087ec <sniprintf>:
 80087ec:	b40c      	push	{r2, r3}
 80087ee:	b530      	push	{r4, r5, lr}
 80087f0:	4b17      	ldr	r3, [pc, #92]	; (8008850 <sniprintf+0x64>)
 80087f2:	1e0c      	subs	r4, r1, #0
 80087f4:	681d      	ldr	r5, [r3, #0]
 80087f6:	b09d      	sub	sp, #116	; 0x74
 80087f8:	da08      	bge.n	800880c <sniprintf+0x20>
 80087fa:	238b      	movs	r3, #139	; 0x8b
 80087fc:	602b      	str	r3, [r5, #0]
 80087fe:	f04f 30ff 	mov.w	r0, #4294967295
 8008802:	b01d      	add	sp, #116	; 0x74
 8008804:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008808:	b002      	add	sp, #8
 800880a:	4770      	bx	lr
 800880c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008810:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008814:	bf14      	ite	ne
 8008816:	f104 33ff 	addne.w	r3, r4, #4294967295
 800881a:	4623      	moveq	r3, r4
 800881c:	9304      	str	r3, [sp, #16]
 800881e:	9307      	str	r3, [sp, #28]
 8008820:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008824:	9002      	str	r0, [sp, #8]
 8008826:	9006      	str	r0, [sp, #24]
 8008828:	f8ad 3016 	strh.w	r3, [sp, #22]
 800882c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800882e:	ab21      	add	r3, sp, #132	; 0x84
 8008830:	a902      	add	r1, sp, #8
 8008832:	4628      	mov	r0, r5
 8008834:	9301      	str	r3, [sp, #4]
 8008836:	f001 fc23 	bl	800a080 <_svfiprintf_r>
 800883a:	1c43      	adds	r3, r0, #1
 800883c:	bfbc      	itt	lt
 800883e:	238b      	movlt	r3, #139	; 0x8b
 8008840:	602b      	strlt	r3, [r5, #0]
 8008842:	2c00      	cmp	r4, #0
 8008844:	d0dd      	beq.n	8008802 <sniprintf+0x16>
 8008846:	9b02      	ldr	r3, [sp, #8]
 8008848:	2200      	movs	r2, #0
 800884a:	701a      	strb	r2, [r3, #0]
 800884c:	e7d9      	b.n	8008802 <sniprintf+0x16>
 800884e:	bf00      	nop
 8008850:	20000064 	.word	0x20000064

08008854 <__sread>:
 8008854:	b510      	push	{r4, lr}
 8008856:	460c      	mov	r4, r1
 8008858:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800885c:	f000 f86c 	bl	8008938 <_read_r>
 8008860:	2800      	cmp	r0, #0
 8008862:	bfab      	itete	ge
 8008864:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008866:	89a3      	ldrhlt	r3, [r4, #12]
 8008868:	181b      	addge	r3, r3, r0
 800886a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800886e:	bfac      	ite	ge
 8008870:	6563      	strge	r3, [r4, #84]	; 0x54
 8008872:	81a3      	strhlt	r3, [r4, #12]
 8008874:	bd10      	pop	{r4, pc}

08008876 <__swrite>:
 8008876:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800887a:	461f      	mov	r7, r3
 800887c:	898b      	ldrh	r3, [r1, #12]
 800887e:	05db      	lsls	r3, r3, #23
 8008880:	4605      	mov	r5, r0
 8008882:	460c      	mov	r4, r1
 8008884:	4616      	mov	r6, r2
 8008886:	d505      	bpl.n	8008894 <__swrite+0x1e>
 8008888:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800888c:	2302      	movs	r3, #2
 800888e:	2200      	movs	r2, #0
 8008890:	f000 f840 	bl	8008914 <_lseek_r>
 8008894:	89a3      	ldrh	r3, [r4, #12]
 8008896:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800889a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800889e:	81a3      	strh	r3, [r4, #12]
 80088a0:	4632      	mov	r2, r6
 80088a2:	463b      	mov	r3, r7
 80088a4:	4628      	mov	r0, r5
 80088a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80088aa:	f000 b857 	b.w	800895c <_write_r>

080088ae <__sseek>:
 80088ae:	b510      	push	{r4, lr}
 80088b0:	460c      	mov	r4, r1
 80088b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088b6:	f000 f82d 	bl	8008914 <_lseek_r>
 80088ba:	1c43      	adds	r3, r0, #1
 80088bc:	89a3      	ldrh	r3, [r4, #12]
 80088be:	bf15      	itete	ne
 80088c0:	6560      	strne	r0, [r4, #84]	; 0x54
 80088c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80088c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80088ca:	81a3      	strheq	r3, [r4, #12]
 80088cc:	bf18      	it	ne
 80088ce:	81a3      	strhne	r3, [r4, #12]
 80088d0:	bd10      	pop	{r4, pc}

080088d2 <__sclose>:
 80088d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088d6:	f000 b80d 	b.w	80088f4 <_close_r>

080088da <memset>:
 80088da:	4402      	add	r2, r0
 80088dc:	4603      	mov	r3, r0
 80088de:	4293      	cmp	r3, r2
 80088e0:	d100      	bne.n	80088e4 <memset+0xa>
 80088e2:	4770      	bx	lr
 80088e4:	f803 1b01 	strb.w	r1, [r3], #1
 80088e8:	e7f9      	b.n	80088de <memset+0x4>
	...

080088ec <_localeconv_r>:
 80088ec:	4800      	ldr	r0, [pc, #0]	; (80088f0 <_localeconv_r+0x4>)
 80088ee:	4770      	bx	lr
 80088f0:	20000158 	.word	0x20000158

080088f4 <_close_r>:
 80088f4:	b538      	push	{r3, r4, r5, lr}
 80088f6:	4d06      	ldr	r5, [pc, #24]	; (8008910 <_close_r+0x1c>)
 80088f8:	2300      	movs	r3, #0
 80088fa:	4604      	mov	r4, r0
 80088fc:	4608      	mov	r0, r1
 80088fe:	602b      	str	r3, [r5, #0]
 8008900:	f7f9 f8b9 	bl	8001a76 <_close>
 8008904:	1c43      	adds	r3, r0, #1
 8008906:	d102      	bne.n	800890e <_close_r+0x1a>
 8008908:	682b      	ldr	r3, [r5, #0]
 800890a:	b103      	cbz	r3, 800890e <_close_r+0x1a>
 800890c:	6023      	str	r3, [r4, #0]
 800890e:	bd38      	pop	{r3, r4, r5, pc}
 8008910:	20000518 	.word	0x20000518

08008914 <_lseek_r>:
 8008914:	b538      	push	{r3, r4, r5, lr}
 8008916:	4d07      	ldr	r5, [pc, #28]	; (8008934 <_lseek_r+0x20>)
 8008918:	4604      	mov	r4, r0
 800891a:	4608      	mov	r0, r1
 800891c:	4611      	mov	r1, r2
 800891e:	2200      	movs	r2, #0
 8008920:	602a      	str	r2, [r5, #0]
 8008922:	461a      	mov	r2, r3
 8008924:	f7f9 f8ce 	bl	8001ac4 <_lseek>
 8008928:	1c43      	adds	r3, r0, #1
 800892a:	d102      	bne.n	8008932 <_lseek_r+0x1e>
 800892c:	682b      	ldr	r3, [r5, #0]
 800892e:	b103      	cbz	r3, 8008932 <_lseek_r+0x1e>
 8008930:	6023      	str	r3, [r4, #0]
 8008932:	bd38      	pop	{r3, r4, r5, pc}
 8008934:	20000518 	.word	0x20000518

08008938 <_read_r>:
 8008938:	b538      	push	{r3, r4, r5, lr}
 800893a:	4d07      	ldr	r5, [pc, #28]	; (8008958 <_read_r+0x20>)
 800893c:	4604      	mov	r4, r0
 800893e:	4608      	mov	r0, r1
 8008940:	4611      	mov	r1, r2
 8008942:	2200      	movs	r2, #0
 8008944:	602a      	str	r2, [r5, #0]
 8008946:	461a      	mov	r2, r3
 8008948:	f7f9 f85c 	bl	8001a04 <_read>
 800894c:	1c43      	adds	r3, r0, #1
 800894e:	d102      	bne.n	8008956 <_read_r+0x1e>
 8008950:	682b      	ldr	r3, [r5, #0]
 8008952:	b103      	cbz	r3, 8008956 <_read_r+0x1e>
 8008954:	6023      	str	r3, [r4, #0]
 8008956:	bd38      	pop	{r3, r4, r5, pc}
 8008958:	20000518 	.word	0x20000518

0800895c <_write_r>:
 800895c:	b538      	push	{r3, r4, r5, lr}
 800895e:	4d07      	ldr	r5, [pc, #28]	; (800897c <_write_r+0x20>)
 8008960:	4604      	mov	r4, r0
 8008962:	4608      	mov	r0, r1
 8008964:	4611      	mov	r1, r2
 8008966:	2200      	movs	r2, #0
 8008968:	602a      	str	r2, [r5, #0]
 800896a:	461a      	mov	r2, r3
 800896c:	f7f9 f867 	bl	8001a3e <_write>
 8008970:	1c43      	adds	r3, r0, #1
 8008972:	d102      	bne.n	800897a <_write_r+0x1e>
 8008974:	682b      	ldr	r3, [r5, #0]
 8008976:	b103      	cbz	r3, 800897a <_write_r+0x1e>
 8008978:	6023      	str	r3, [r4, #0]
 800897a:	bd38      	pop	{r3, r4, r5, pc}
 800897c:	20000518 	.word	0x20000518

08008980 <__errno>:
 8008980:	4b01      	ldr	r3, [pc, #4]	; (8008988 <__errno+0x8>)
 8008982:	6818      	ldr	r0, [r3, #0]
 8008984:	4770      	bx	lr
 8008986:	bf00      	nop
 8008988:	20000064 	.word	0x20000064

0800898c <__libc_init_array>:
 800898c:	b570      	push	{r4, r5, r6, lr}
 800898e:	4d0d      	ldr	r5, [pc, #52]	; (80089c4 <__libc_init_array+0x38>)
 8008990:	4c0d      	ldr	r4, [pc, #52]	; (80089c8 <__libc_init_array+0x3c>)
 8008992:	1b64      	subs	r4, r4, r5
 8008994:	10a4      	asrs	r4, r4, #2
 8008996:	2600      	movs	r6, #0
 8008998:	42a6      	cmp	r6, r4
 800899a:	d109      	bne.n	80089b0 <__libc_init_array+0x24>
 800899c:	4d0b      	ldr	r5, [pc, #44]	; (80089cc <__libc_init_array+0x40>)
 800899e:	4c0c      	ldr	r4, [pc, #48]	; (80089d0 <__libc_init_array+0x44>)
 80089a0:	f002 f896 	bl	800aad0 <_init>
 80089a4:	1b64      	subs	r4, r4, r5
 80089a6:	10a4      	asrs	r4, r4, #2
 80089a8:	2600      	movs	r6, #0
 80089aa:	42a6      	cmp	r6, r4
 80089ac:	d105      	bne.n	80089ba <__libc_init_array+0x2e>
 80089ae:	bd70      	pop	{r4, r5, r6, pc}
 80089b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80089b4:	4798      	blx	r3
 80089b6:	3601      	adds	r6, #1
 80089b8:	e7ee      	b.n	8008998 <__libc_init_array+0xc>
 80089ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80089be:	4798      	blx	r3
 80089c0:	3601      	adds	r6, #1
 80089c2:	e7f2      	b.n	80089aa <__libc_init_array+0x1e>
 80089c4:	0800aefc 	.word	0x0800aefc
 80089c8:	0800aefc 	.word	0x0800aefc
 80089cc:	0800aefc 	.word	0x0800aefc
 80089d0:	0800af00 	.word	0x0800af00

080089d4 <__retarget_lock_init_recursive>:
 80089d4:	4770      	bx	lr

080089d6 <__retarget_lock_acquire_recursive>:
 80089d6:	4770      	bx	lr

080089d8 <__retarget_lock_release_recursive>:
 80089d8:	4770      	bx	lr

080089da <quorem>:
 80089da:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089de:	6903      	ldr	r3, [r0, #16]
 80089e0:	690c      	ldr	r4, [r1, #16]
 80089e2:	42a3      	cmp	r3, r4
 80089e4:	4607      	mov	r7, r0
 80089e6:	db7e      	blt.n	8008ae6 <quorem+0x10c>
 80089e8:	3c01      	subs	r4, #1
 80089ea:	f101 0814 	add.w	r8, r1, #20
 80089ee:	f100 0514 	add.w	r5, r0, #20
 80089f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80089f6:	9301      	str	r3, [sp, #4]
 80089f8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80089fc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008a00:	3301      	adds	r3, #1
 8008a02:	429a      	cmp	r2, r3
 8008a04:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008a08:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008a0c:	fbb2 f6f3 	udiv	r6, r2, r3
 8008a10:	d331      	bcc.n	8008a76 <quorem+0x9c>
 8008a12:	f04f 0e00 	mov.w	lr, #0
 8008a16:	4640      	mov	r0, r8
 8008a18:	46ac      	mov	ip, r5
 8008a1a:	46f2      	mov	sl, lr
 8008a1c:	f850 2b04 	ldr.w	r2, [r0], #4
 8008a20:	b293      	uxth	r3, r2
 8008a22:	fb06 e303 	mla	r3, r6, r3, lr
 8008a26:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008a2a:	0c1a      	lsrs	r2, r3, #16
 8008a2c:	b29b      	uxth	r3, r3
 8008a2e:	ebaa 0303 	sub.w	r3, sl, r3
 8008a32:	f8dc a000 	ldr.w	sl, [ip]
 8008a36:	fa13 f38a 	uxtah	r3, r3, sl
 8008a3a:	fb06 220e 	mla	r2, r6, lr, r2
 8008a3e:	9300      	str	r3, [sp, #0]
 8008a40:	9b00      	ldr	r3, [sp, #0]
 8008a42:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008a46:	b292      	uxth	r2, r2
 8008a48:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008a4c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008a50:	f8bd 3000 	ldrh.w	r3, [sp]
 8008a54:	4581      	cmp	r9, r0
 8008a56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008a5a:	f84c 3b04 	str.w	r3, [ip], #4
 8008a5e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008a62:	d2db      	bcs.n	8008a1c <quorem+0x42>
 8008a64:	f855 300b 	ldr.w	r3, [r5, fp]
 8008a68:	b92b      	cbnz	r3, 8008a76 <quorem+0x9c>
 8008a6a:	9b01      	ldr	r3, [sp, #4]
 8008a6c:	3b04      	subs	r3, #4
 8008a6e:	429d      	cmp	r5, r3
 8008a70:	461a      	mov	r2, r3
 8008a72:	d32c      	bcc.n	8008ace <quorem+0xf4>
 8008a74:	613c      	str	r4, [r7, #16]
 8008a76:	4638      	mov	r0, r7
 8008a78:	f001 f9a8 	bl	8009dcc <__mcmp>
 8008a7c:	2800      	cmp	r0, #0
 8008a7e:	db22      	blt.n	8008ac6 <quorem+0xec>
 8008a80:	3601      	adds	r6, #1
 8008a82:	4629      	mov	r1, r5
 8008a84:	2000      	movs	r0, #0
 8008a86:	f858 2b04 	ldr.w	r2, [r8], #4
 8008a8a:	f8d1 c000 	ldr.w	ip, [r1]
 8008a8e:	b293      	uxth	r3, r2
 8008a90:	1ac3      	subs	r3, r0, r3
 8008a92:	0c12      	lsrs	r2, r2, #16
 8008a94:	fa13 f38c 	uxtah	r3, r3, ip
 8008a98:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8008a9c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008aa0:	b29b      	uxth	r3, r3
 8008aa2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008aa6:	45c1      	cmp	r9, r8
 8008aa8:	f841 3b04 	str.w	r3, [r1], #4
 8008aac:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008ab0:	d2e9      	bcs.n	8008a86 <quorem+0xac>
 8008ab2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008ab6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008aba:	b922      	cbnz	r2, 8008ac6 <quorem+0xec>
 8008abc:	3b04      	subs	r3, #4
 8008abe:	429d      	cmp	r5, r3
 8008ac0:	461a      	mov	r2, r3
 8008ac2:	d30a      	bcc.n	8008ada <quorem+0x100>
 8008ac4:	613c      	str	r4, [r7, #16]
 8008ac6:	4630      	mov	r0, r6
 8008ac8:	b003      	add	sp, #12
 8008aca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ace:	6812      	ldr	r2, [r2, #0]
 8008ad0:	3b04      	subs	r3, #4
 8008ad2:	2a00      	cmp	r2, #0
 8008ad4:	d1ce      	bne.n	8008a74 <quorem+0x9a>
 8008ad6:	3c01      	subs	r4, #1
 8008ad8:	e7c9      	b.n	8008a6e <quorem+0x94>
 8008ada:	6812      	ldr	r2, [r2, #0]
 8008adc:	3b04      	subs	r3, #4
 8008ade:	2a00      	cmp	r2, #0
 8008ae0:	d1f0      	bne.n	8008ac4 <quorem+0xea>
 8008ae2:	3c01      	subs	r4, #1
 8008ae4:	e7eb      	b.n	8008abe <quorem+0xe4>
 8008ae6:	2000      	movs	r0, #0
 8008ae8:	e7ee      	b.n	8008ac8 <quorem+0xee>
 8008aea:	0000      	movs	r0, r0
 8008aec:	0000      	movs	r0, r0
	...

08008af0 <_dtoa_r>:
 8008af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008af4:	ed2d 8b04 	vpush	{d8-d9}
 8008af8:	69c5      	ldr	r5, [r0, #28]
 8008afa:	b093      	sub	sp, #76	; 0x4c
 8008afc:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008b00:	ec57 6b10 	vmov	r6, r7, d0
 8008b04:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008b08:	9107      	str	r1, [sp, #28]
 8008b0a:	4604      	mov	r4, r0
 8008b0c:	920a      	str	r2, [sp, #40]	; 0x28
 8008b0e:	930d      	str	r3, [sp, #52]	; 0x34
 8008b10:	b975      	cbnz	r5, 8008b30 <_dtoa_r+0x40>
 8008b12:	2010      	movs	r0, #16
 8008b14:	f000 fe2a 	bl	800976c <malloc>
 8008b18:	4602      	mov	r2, r0
 8008b1a:	61e0      	str	r0, [r4, #28]
 8008b1c:	b920      	cbnz	r0, 8008b28 <_dtoa_r+0x38>
 8008b1e:	4bae      	ldr	r3, [pc, #696]	; (8008dd8 <_dtoa_r+0x2e8>)
 8008b20:	21ef      	movs	r1, #239	; 0xef
 8008b22:	48ae      	ldr	r0, [pc, #696]	; (8008ddc <_dtoa_r+0x2ec>)
 8008b24:	f001 fc90 	bl	800a448 <__assert_func>
 8008b28:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008b2c:	6005      	str	r5, [r0, #0]
 8008b2e:	60c5      	str	r5, [r0, #12]
 8008b30:	69e3      	ldr	r3, [r4, #28]
 8008b32:	6819      	ldr	r1, [r3, #0]
 8008b34:	b151      	cbz	r1, 8008b4c <_dtoa_r+0x5c>
 8008b36:	685a      	ldr	r2, [r3, #4]
 8008b38:	604a      	str	r2, [r1, #4]
 8008b3a:	2301      	movs	r3, #1
 8008b3c:	4093      	lsls	r3, r2
 8008b3e:	608b      	str	r3, [r1, #8]
 8008b40:	4620      	mov	r0, r4
 8008b42:	f000 ff07 	bl	8009954 <_Bfree>
 8008b46:	69e3      	ldr	r3, [r4, #28]
 8008b48:	2200      	movs	r2, #0
 8008b4a:	601a      	str	r2, [r3, #0]
 8008b4c:	1e3b      	subs	r3, r7, #0
 8008b4e:	bfbb      	ittet	lt
 8008b50:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008b54:	9303      	strlt	r3, [sp, #12]
 8008b56:	2300      	movge	r3, #0
 8008b58:	2201      	movlt	r2, #1
 8008b5a:	bfac      	ite	ge
 8008b5c:	f8c8 3000 	strge.w	r3, [r8]
 8008b60:	f8c8 2000 	strlt.w	r2, [r8]
 8008b64:	4b9e      	ldr	r3, [pc, #632]	; (8008de0 <_dtoa_r+0x2f0>)
 8008b66:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008b6a:	ea33 0308 	bics.w	r3, r3, r8
 8008b6e:	d11b      	bne.n	8008ba8 <_dtoa_r+0xb8>
 8008b70:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008b72:	f242 730f 	movw	r3, #9999	; 0x270f
 8008b76:	6013      	str	r3, [r2, #0]
 8008b78:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8008b7c:	4333      	orrs	r3, r6
 8008b7e:	f000 8593 	beq.w	80096a8 <_dtoa_r+0xbb8>
 8008b82:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008b84:	b963      	cbnz	r3, 8008ba0 <_dtoa_r+0xb0>
 8008b86:	4b97      	ldr	r3, [pc, #604]	; (8008de4 <_dtoa_r+0x2f4>)
 8008b88:	e027      	b.n	8008bda <_dtoa_r+0xea>
 8008b8a:	4b97      	ldr	r3, [pc, #604]	; (8008de8 <_dtoa_r+0x2f8>)
 8008b8c:	9300      	str	r3, [sp, #0]
 8008b8e:	3308      	adds	r3, #8
 8008b90:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008b92:	6013      	str	r3, [r2, #0]
 8008b94:	9800      	ldr	r0, [sp, #0]
 8008b96:	b013      	add	sp, #76	; 0x4c
 8008b98:	ecbd 8b04 	vpop	{d8-d9}
 8008b9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ba0:	4b90      	ldr	r3, [pc, #576]	; (8008de4 <_dtoa_r+0x2f4>)
 8008ba2:	9300      	str	r3, [sp, #0]
 8008ba4:	3303      	adds	r3, #3
 8008ba6:	e7f3      	b.n	8008b90 <_dtoa_r+0xa0>
 8008ba8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008bac:	2200      	movs	r2, #0
 8008bae:	ec51 0b17 	vmov	r0, r1, d7
 8008bb2:	eeb0 8a47 	vmov.f32	s16, s14
 8008bb6:	eef0 8a67 	vmov.f32	s17, s15
 8008bba:	2300      	movs	r3, #0
 8008bbc:	f7f7 ff84 	bl	8000ac8 <__aeabi_dcmpeq>
 8008bc0:	4681      	mov	r9, r0
 8008bc2:	b160      	cbz	r0, 8008bde <_dtoa_r+0xee>
 8008bc4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008bc6:	2301      	movs	r3, #1
 8008bc8:	6013      	str	r3, [r2, #0]
 8008bca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	f000 8568 	beq.w	80096a2 <_dtoa_r+0xbb2>
 8008bd2:	4b86      	ldr	r3, [pc, #536]	; (8008dec <_dtoa_r+0x2fc>)
 8008bd4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008bd6:	6013      	str	r3, [r2, #0]
 8008bd8:	3b01      	subs	r3, #1
 8008bda:	9300      	str	r3, [sp, #0]
 8008bdc:	e7da      	b.n	8008b94 <_dtoa_r+0xa4>
 8008bde:	aa10      	add	r2, sp, #64	; 0x40
 8008be0:	a911      	add	r1, sp, #68	; 0x44
 8008be2:	4620      	mov	r0, r4
 8008be4:	eeb0 0a48 	vmov.f32	s0, s16
 8008be8:	eef0 0a68 	vmov.f32	s1, s17
 8008bec:	f001 f994 	bl	8009f18 <__d2b>
 8008bf0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008bf4:	4682      	mov	sl, r0
 8008bf6:	2d00      	cmp	r5, #0
 8008bf8:	d07f      	beq.n	8008cfa <_dtoa_r+0x20a>
 8008bfa:	ee18 3a90 	vmov	r3, s17
 8008bfe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008c02:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8008c06:	ec51 0b18 	vmov	r0, r1, d8
 8008c0a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008c0e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008c12:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8008c16:	4619      	mov	r1, r3
 8008c18:	2200      	movs	r2, #0
 8008c1a:	4b75      	ldr	r3, [pc, #468]	; (8008df0 <_dtoa_r+0x300>)
 8008c1c:	f7f7 fb34 	bl	8000288 <__aeabi_dsub>
 8008c20:	a367      	add	r3, pc, #412	; (adr r3, 8008dc0 <_dtoa_r+0x2d0>)
 8008c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c26:	f7f7 fce7 	bl	80005f8 <__aeabi_dmul>
 8008c2a:	a367      	add	r3, pc, #412	; (adr r3, 8008dc8 <_dtoa_r+0x2d8>)
 8008c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c30:	f7f7 fb2c 	bl	800028c <__adddf3>
 8008c34:	4606      	mov	r6, r0
 8008c36:	4628      	mov	r0, r5
 8008c38:	460f      	mov	r7, r1
 8008c3a:	f7f7 fc73 	bl	8000524 <__aeabi_i2d>
 8008c3e:	a364      	add	r3, pc, #400	; (adr r3, 8008dd0 <_dtoa_r+0x2e0>)
 8008c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c44:	f7f7 fcd8 	bl	80005f8 <__aeabi_dmul>
 8008c48:	4602      	mov	r2, r0
 8008c4a:	460b      	mov	r3, r1
 8008c4c:	4630      	mov	r0, r6
 8008c4e:	4639      	mov	r1, r7
 8008c50:	f7f7 fb1c 	bl	800028c <__adddf3>
 8008c54:	4606      	mov	r6, r0
 8008c56:	460f      	mov	r7, r1
 8008c58:	f7f7 ff7e 	bl	8000b58 <__aeabi_d2iz>
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	4683      	mov	fp, r0
 8008c60:	2300      	movs	r3, #0
 8008c62:	4630      	mov	r0, r6
 8008c64:	4639      	mov	r1, r7
 8008c66:	f7f7 ff39 	bl	8000adc <__aeabi_dcmplt>
 8008c6a:	b148      	cbz	r0, 8008c80 <_dtoa_r+0x190>
 8008c6c:	4658      	mov	r0, fp
 8008c6e:	f7f7 fc59 	bl	8000524 <__aeabi_i2d>
 8008c72:	4632      	mov	r2, r6
 8008c74:	463b      	mov	r3, r7
 8008c76:	f7f7 ff27 	bl	8000ac8 <__aeabi_dcmpeq>
 8008c7a:	b908      	cbnz	r0, 8008c80 <_dtoa_r+0x190>
 8008c7c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008c80:	f1bb 0f16 	cmp.w	fp, #22
 8008c84:	d857      	bhi.n	8008d36 <_dtoa_r+0x246>
 8008c86:	4b5b      	ldr	r3, [pc, #364]	; (8008df4 <_dtoa_r+0x304>)
 8008c88:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c90:	ec51 0b18 	vmov	r0, r1, d8
 8008c94:	f7f7 ff22 	bl	8000adc <__aeabi_dcmplt>
 8008c98:	2800      	cmp	r0, #0
 8008c9a:	d04e      	beq.n	8008d3a <_dtoa_r+0x24a>
 8008c9c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	930c      	str	r3, [sp, #48]	; 0x30
 8008ca4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008ca6:	1b5b      	subs	r3, r3, r5
 8008ca8:	1e5a      	subs	r2, r3, #1
 8008caa:	bf45      	ittet	mi
 8008cac:	f1c3 0301 	rsbmi	r3, r3, #1
 8008cb0:	9305      	strmi	r3, [sp, #20]
 8008cb2:	2300      	movpl	r3, #0
 8008cb4:	2300      	movmi	r3, #0
 8008cb6:	9206      	str	r2, [sp, #24]
 8008cb8:	bf54      	ite	pl
 8008cba:	9305      	strpl	r3, [sp, #20]
 8008cbc:	9306      	strmi	r3, [sp, #24]
 8008cbe:	f1bb 0f00 	cmp.w	fp, #0
 8008cc2:	db3c      	blt.n	8008d3e <_dtoa_r+0x24e>
 8008cc4:	9b06      	ldr	r3, [sp, #24]
 8008cc6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8008cca:	445b      	add	r3, fp
 8008ccc:	9306      	str	r3, [sp, #24]
 8008cce:	2300      	movs	r3, #0
 8008cd0:	9308      	str	r3, [sp, #32]
 8008cd2:	9b07      	ldr	r3, [sp, #28]
 8008cd4:	2b09      	cmp	r3, #9
 8008cd6:	d868      	bhi.n	8008daa <_dtoa_r+0x2ba>
 8008cd8:	2b05      	cmp	r3, #5
 8008cda:	bfc4      	itt	gt
 8008cdc:	3b04      	subgt	r3, #4
 8008cde:	9307      	strgt	r3, [sp, #28]
 8008ce0:	9b07      	ldr	r3, [sp, #28]
 8008ce2:	f1a3 0302 	sub.w	r3, r3, #2
 8008ce6:	bfcc      	ite	gt
 8008ce8:	2500      	movgt	r5, #0
 8008cea:	2501      	movle	r5, #1
 8008cec:	2b03      	cmp	r3, #3
 8008cee:	f200 8085 	bhi.w	8008dfc <_dtoa_r+0x30c>
 8008cf2:	e8df f003 	tbb	[pc, r3]
 8008cf6:	3b2e      	.short	0x3b2e
 8008cf8:	5839      	.short	0x5839
 8008cfa:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008cfe:	441d      	add	r5, r3
 8008d00:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008d04:	2b20      	cmp	r3, #32
 8008d06:	bfc1      	itttt	gt
 8008d08:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008d0c:	fa08 f803 	lslgt.w	r8, r8, r3
 8008d10:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8008d14:	fa26 f303 	lsrgt.w	r3, r6, r3
 8008d18:	bfd6      	itet	le
 8008d1a:	f1c3 0320 	rsble	r3, r3, #32
 8008d1e:	ea48 0003 	orrgt.w	r0, r8, r3
 8008d22:	fa06 f003 	lslle.w	r0, r6, r3
 8008d26:	f7f7 fbed 	bl	8000504 <__aeabi_ui2d>
 8008d2a:	2201      	movs	r2, #1
 8008d2c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8008d30:	3d01      	subs	r5, #1
 8008d32:	920e      	str	r2, [sp, #56]	; 0x38
 8008d34:	e76f      	b.n	8008c16 <_dtoa_r+0x126>
 8008d36:	2301      	movs	r3, #1
 8008d38:	e7b3      	b.n	8008ca2 <_dtoa_r+0x1b2>
 8008d3a:	900c      	str	r0, [sp, #48]	; 0x30
 8008d3c:	e7b2      	b.n	8008ca4 <_dtoa_r+0x1b4>
 8008d3e:	9b05      	ldr	r3, [sp, #20]
 8008d40:	eba3 030b 	sub.w	r3, r3, fp
 8008d44:	9305      	str	r3, [sp, #20]
 8008d46:	f1cb 0300 	rsb	r3, fp, #0
 8008d4a:	9308      	str	r3, [sp, #32]
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008d50:	e7bf      	b.n	8008cd2 <_dtoa_r+0x1e2>
 8008d52:	2300      	movs	r3, #0
 8008d54:	9309      	str	r3, [sp, #36]	; 0x24
 8008d56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	dc52      	bgt.n	8008e02 <_dtoa_r+0x312>
 8008d5c:	2301      	movs	r3, #1
 8008d5e:	9301      	str	r3, [sp, #4]
 8008d60:	9304      	str	r3, [sp, #16]
 8008d62:	461a      	mov	r2, r3
 8008d64:	920a      	str	r2, [sp, #40]	; 0x28
 8008d66:	e00b      	b.n	8008d80 <_dtoa_r+0x290>
 8008d68:	2301      	movs	r3, #1
 8008d6a:	e7f3      	b.n	8008d54 <_dtoa_r+0x264>
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	9309      	str	r3, [sp, #36]	; 0x24
 8008d70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d72:	445b      	add	r3, fp
 8008d74:	9301      	str	r3, [sp, #4]
 8008d76:	3301      	adds	r3, #1
 8008d78:	2b01      	cmp	r3, #1
 8008d7a:	9304      	str	r3, [sp, #16]
 8008d7c:	bfb8      	it	lt
 8008d7e:	2301      	movlt	r3, #1
 8008d80:	69e0      	ldr	r0, [r4, #28]
 8008d82:	2100      	movs	r1, #0
 8008d84:	2204      	movs	r2, #4
 8008d86:	f102 0614 	add.w	r6, r2, #20
 8008d8a:	429e      	cmp	r6, r3
 8008d8c:	d93d      	bls.n	8008e0a <_dtoa_r+0x31a>
 8008d8e:	6041      	str	r1, [r0, #4]
 8008d90:	4620      	mov	r0, r4
 8008d92:	f000 fd9f 	bl	80098d4 <_Balloc>
 8008d96:	9000      	str	r0, [sp, #0]
 8008d98:	2800      	cmp	r0, #0
 8008d9a:	d139      	bne.n	8008e10 <_dtoa_r+0x320>
 8008d9c:	4b16      	ldr	r3, [pc, #88]	; (8008df8 <_dtoa_r+0x308>)
 8008d9e:	4602      	mov	r2, r0
 8008da0:	f240 11af 	movw	r1, #431	; 0x1af
 8008da4:	e6bd      	b.n	8008b22 <_dtoa_r+0x32>
 8008da6:	2301      	movs	r3, #1
 8008da8:	e7e1      	b.n	8008d6e <_dtoa_r+0x27e>
 8008daa:	2501      	movs	r5, #1
 8008dac:	2300      	movs	r3, #0
 8008dae:	9307      	str	r3, [sp, #28]
 8008db0:	9509      	str	r5, [sp, #36]	; 0x24
 8008db2:	f04f 33ff 	mov.w	r3, #4294967295
 8008db6:	9301      	str	r3, [sp, #4]
 8008db8:	9304      	str	r3, [sp, #16]
 8008dba:	2200      	movs	r2, #0
 8008dbc:	2312      	movs	r3, #18
 8008dbe:	e7d1      	b.n	8008d64 <_dtoa_r+0x274>
 8008dc0:	636f4361 	.word	0x636f4361
 8008dc4:	3fd287a7 	.word	0x3fd287a7
 8008dc8:	8b60c8b3 	.word	0x8b60c8b3
 8008dcc:	3fc68a28 	.word	0x3fc68a28
 8008dd0:	509f79fb 	.word	0x509f79fb
 8008dd4:	3fd34413 	.word	0x3fd34413
 8008dd8:	0800abc1 	.word	0x0800abc1
 8008ddc:	0800abd8 	.word	0x0800abd8
 8008de0:	7ff00000 	.word	0x7ff00000
 8008de4:	0800abbd 	.word	0x0800abbd
 8008de8:	0800abb4 	.word	0x0800abb4
 8008dec:	0800ab91 	.word	0x0800ab91
 8008df0:	3ff80000 	.word	0x3ff80000
 8008df4:	0800acc8 	.word	0x0800acc8
 8008df8:	0800ac30 	.word	0x0800ac30
 8008dfc:	2301      	movs	r3, #1
 8008dfe:	9309      	str	r3, [sp, #36]	; 0x24
 8008e00:	e7d7      	b.n	8008db2 <_dtoa_r+0x2c2>
 8008e02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e04:	9301      	str	r3, [sp, #4]
 8008e06:	9304      	str	r3, [sp, #16]
 8008e08:	e7ba      	b.n	8008d80 <_dtoa_r+0x290>
 8008e0a:	3101      	adds	r1, #1
 8008e0c:	0052      	lsls	r2, r2, #1
 8008e0e:	e7ba      	b.n	8008d86 <_dtoa_r+0x296>
 8008e10:	69e3      	ldr	r3, [r4, #28]
 8008e12:	9a00      	ldr	r2, [sp, #0]
 8008e14:	601a      	str	r2, [r3, #0]
 8008e16:	9b04      	ldr	r3, [sp, #16]
 8008e18:	2b0e      	cmp	r3, #14
 8008e1a:	f200 80a8 	bhi.w	8008f6e <_dtoa_r+0x47e>
 8008e1e:	2d00      	cmp	r5, #0
 8008e20:	f000 80a5 	beq.w	8008f6e <_dtoa_r+0x47e>
 8008e24:	f1bb 0f00 	cmp.w	fp, #0
 8008e28:	dd38      	ble.n	8008e9c <_dtoa_r+0x3ac>
 8008e2a:	4bc0      	ldr	r3, [pc, #768]	; (800912c <_dtoa_r+0x63c>)
 8008e2c:	f00b 020f 	and.w	r2, fp, #15
 8008e30:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008e34:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008e38:	e9d3 6700 	ldrd	r6, r7, [r3]
 8008e3c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8008e40:	d019      	beq.n	8008e76 <_dtoa_r+0x386>
 8008e42:	4bbb      	ldr	r3, [pc, #748]	; (8009130 <_dtoa_r+0x640>)
 8008e44:	ec51 0b18 	vmov	r0, r1, d8
 8008e48:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008e4c:	f7f7 fcfe 	bl	800084c <__aeabi_ddiv>
 8008e50:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e54:	f008 080f 	and.w	r8, r8, #15
 8008e58:	2503      	movs	r5, #3
 8008e5a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8009130 <_dtoa_r+0x640>
 8008e5e:	f1b8 0f00 	cmp.w	r8, #0
 8008e62:	d10a      	bne.n	8008e7a <_dtoa_r+0x38a>
 8008e64:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e68:	4632      	mov	r2, r6
 8008e6a:	463b      	mov	r3, r7
 8008e6c:	f7f7 fcee 	bl	800084c <__aeabi_ddiv>
 8008e70:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e74:	e02b      	b.n	8008ece <_dtoa_r+0x3de>
 8008e76:	2502      	movs	r5, #2
 8008e78:	e7ef      	b.n	8008e5a <_dtoa_r+0x36a>
 8008e7a:	f018 0f01 	tst.w	r8, #1
 8008e7e:	d008      	beq.n	8008e92 <_dtoa_r+0x3a2>
 8008e80:	4630      	mov	r0, r6
 8008e82:	4639      	mov	r1, r7
 8008e84:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008e88:	f7f7 fbb6 	bl	80005f8 <__aeabi_dmul>
 8008e8c:	3501      	adds	r5, #1
 8008e8e:	4606      	mov	r6, r0
 8008e90:	460f      	mov	r7, r1
 8008e92:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008e96:	f109 0908 	add.w	r9, r9, #8
 8008e9a:	e7e0      	b.n	8008e5e <_dtoa_r+0x36e>
 8008e9c:	f000 809f 	beq.w	8008fde <_dtoa_r+0x4ee>
 8008ea0:	f1cb 0600 	rsb	r6, fp, #0
 8008ea4:	4ba1      	ldr	r3, [pc, #644]	; (800912c <_dtoa_r+0x63c>)
 8008ea6:	4fa2      	ldr	r7, [pc, #648]	; (8009130 <_dtoa_r+0x640>)
 8008ea8:	f006 020f 	and.w	r2, r6, #15
 8008eac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eb4:	ec51 0b18 	vmov	r0, r1, d8
 8008eb8:	f7f7 fb9e 	bl	80005f8 <__aeabi_dmul>
 8008ebc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008ec0:	1136      	asrs	r6, r6, #4
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	2502      	movs	r5, #2
 8008ec6:	2e00      	cmp	r6, #0
 8008ec8:	d17e      	bne.n	8008fc8 <_dtoa_r+0x4d8>
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d1d0      	bne.n	8008e70 <_dtoa_r+0x380>
 8008ece:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008ed0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	f000 8084 	beq.w	8008fe2 <_dtoa_r+0x4f2>
 8008eda:	4b96      	ldr	r3, [pc, #600]	; (8009134 <_dtoa_r+0x644>)
 8008edc:	2200      	movs	r2, #0
 8008ede:	4640      	mov	r0, r8
 8008ee0:	4649      	mov	r1, r9
 8008ee2:	f7f7 fdfb 	bl	8000adc <__aeabi_dcmplt>
 8008ee6:	2800      	cmp	r0, #0
 8008ee8:	d07b      	beq.n	8008fe2 <_dtoa_r+0x4f2>
 8008eea:	9b04      	ldr	r3, [sp, #16]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d078      	beq.n	8008fe2 <_dtoa_r+0x4f2>
 8008ef0:	9b01      	ldr	r3, [sp, #4]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	dd39      	ble.n	8008f6a <_dtoa_r+0x47a>
 8008ef6:	4b90      	ldr	r3, [pc, #576]	; (8009138 <_dtoa_r+0x648>)
 8008ef8:	2200      	movs	r2, #0
 8008efa:	4640      	mov	r0, r8
 8008efc:	4649      	mov	r1, r9
 8008efe:	f7f7 fb7b 	bl	80005f8 <__aeabi_dmul>
 8008f02:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008f06:	9e01      	ldr	r6, [sp, #4]
 8008f08:	f10b 37ff 	add.w	r7, fp, #4294967295
 8008f0c:	3501      	adds	r5, #1
 8008f0e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008f12:	4628      	mov	r0, r5
 8008f14:	f7f7 fb06 	bl	8000524 <__aeabi_i2d>
 8008f18:	4642      	mov	r2, r8
 8008f1a:	464b      	mov	r3, r9
 8008f1c:	f7f7 fb6c 	bl	80005f8 <__aeabi_dmul>
 8008f20:	4b86      	ldr	r3, [pc, #536]	; (800913c <_dtoa_r+0x64c>)
 8008f22:	2200      	movs	r2, #0
 8008f24:	f7f7 f9b2 	bl	800028c <__adddf3>
 8008f28:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008f2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008f30:	9303      	str	r3, [sp, #12]
 8008f32:	2e00      	cmp	r6, #0
 8008f34:	d158      	bne.n	8008fe8 <_dtoa_r+0x4f8>
 8008f36:	4b82      	ldr	r3, [pc, #520]	; (8009140 <_dtoa_r+0x650>)
 8008f38:	2200      	movs	r2, #0
 8008f3a:	4640      	mov	r0, r8
 8008f3c:	4649      	mov	r1, r9
 8008f3e:	f7f7 f9a3 	bl	8000288 <__aeabi_dsub>
 8008f42:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008f46:	4680      	mov	r8, r0
 8008f48:	4689      	mov	r9, r1
 8008f4a:	f7f7 fde5 	bl	8000b18 <__aeabi_dcmpgt>
 8008f4e:	2800      	cmp	r0, #0
 8008f50:	f040 8296 	bne.w	8009480 <_dtoa_r+0x990>
 8008f54:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008f58:	4640      	mov	r0, r8
 8008f5a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008f5e:	4649      	mov	r1, r9
 8008f60:	f7f7 fdbc 	bl	8000adc <__aeabi_dcmplt>
 8008f64:	2800      	cmp	r0, #0
 8008f66:	f040 8289 	bne.w	800947c <_dtoa_r+0x98c>
 8008f6a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8008f6e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	f2c0 814e 	blt.w	8009212 <_dtoa_r+0x722>
 8008f76:	f1bb 0f0e 	cmp.w	fp, #14
 8008f7a:	f300 814a 	bgt.w	8009212 <_dtoa_r+0x722>
 8008f7e:	4b6b      	ldr	r3, [pc, #428]	; (800912c <_dtoa_r+0x63c>)
 8008f80:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008f84:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008f88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	f280 80dc 	bge.w	8009148 <_dtoa_r+0x658>
 8008f90:	9b04      	ldr	r3, [sp, #16]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	f300 80d8 	bgt.w	8009148 <_dtoa_r+0x658>
 8008f98:	f040 826f 	bne.w	800947a <_dtoa_r+0x98a>
 8008f9c:	4b68      	ldr	r3, [pc, #416]	; (8009140 <_dtoa_r+0x650>)
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	4640      	mov	r0, r8
 8008fa2:	4649      	mov	r1, r9
 8008fa4:	f7f7 fb28 	bl	80005f8 <__aeabi_dmul>
 8008fa8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008fac:	f7f7 fdaa 	bl	8000b04 <__aeabi_dcmpge>
 8008fb0:	9e04      	ldr	r6, [sp, #16]
 8008fb2:	4637      	mov	r7, r6
 8008fb4:	2800      	cmp	r0, #0
 8008fb6:	f040 8245 	bne.w	8009444 <_dtoa_r+0x954>
 8008fba:	9d00      	ldr	r5, [sp, #0]
 8008fbc:	2331      	movs	r3, #49	; 0x31
 8008fbe:	f805 3b01 	strb.w	r3, [r5], #1
 8008fc2:	f10b 0b01 	add.w	fp, fp, #1
 8008fc6:	e241      	b.n	800944c <_dtoa_r+0x95c>
 8008fc8:	07f2      	lsls	r2, r6, #31
 8008fca:	d505      	bpl.n	8008fd8 <_dtoa_r+0x4e8>
 8008fcc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008fd0:	f7f7 fb12 	bl	80005f8 <__aeabi_dmul>
 8008fd4:	3501      	adds	r5, #1
 8008fd6:	2301      	movs	r3, #1
 8008fd8:	1076      	asrs	r6, r6, #1
 8008fda:	3708      	adds	r7, #8
 8008fdc:	e773      	b.n	8008ec6 <_dtoa_r+0x3d6>
 8008fde:	2502      	movs	r5, #2
 8008fe0:	e775      	b.n	8008ece <_dtoa_r+0x3de>
 8008fe2:	9e04      	ldr	r6, [sp, #16]
 8008fe4:	465f      	mov	r7, fp
 8008fe6:	e792      	b.n	8008f0e <_dtoa_r+0x41e>
 8008fe8:	9900      	ldr	r1, [sp, #0]
 8008fea:	4b50      	ldr	r3, [pc, #320]	; (800912c <_dtoa_r+0x63c>)
 8008fec:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008ff0:	4431      	add	r1, r6
 8008ff2:	9102      	str	r1, [sp, #8]
 8008ff4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008ff6:	eeb0 9a47 	vmov.f32	s18, s14
 8008ffa:	eef0 9a67 	vmov.f32	s19, s15
 8008ffe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009002:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009006:	2900      	cmp	r1, #0
 8009008:	d044      	beq.n	8009094 <_dtoa_r+0x5a4>
 800900a:	494e      	ldr	r1, [pc, #312]	; (8009144 <_dtoa_r+0x654>)
 800900c:	2000      	movs	r0, #0
 800900e:	f7f7 fc1d 	bl	800084c <__aeabi_ddiv>
 8009012:	ec53 2b19 	vmov	r2, r3, d9
 8009016:	f7f7 f937 	bl	8000288 <__aeabi_dsub>
 800901a:	9d00      	ldr	r5, [sp, #0]
 800901c:	ec41 0b19 	vmov	d9, r0, r1
 8009020:	4649      	mov	r1, r9
 8009022:	4640      	mov	r0, r8
 8009024:	f7f7 fd98 	bl	8000b58 <__aeabi_d2iz>
 8009028:	4606      	mov	r6, r0
 800902a:	f7f7 fa7b 	bl	8000524 <__aeabi_i2d>
 800902e:	4602      	mov	r2, r0
 8009030:	460b      	mov	r3, r1
 8009032:	4640      	mov	r0, r8
 8009034:	4649      	mov	r1, r9
 8009036:	f7f7 f927 	bl	8000288 <__aeabi_dsub>
 800903a:	3630      	adds	r6, #48	; 0x30
 800903c:	f805 6b01 	strb.w	r6, [r5], #1
 8009040:	ec53 2b19 	vmov	r2, r3, d9
 8009044:	4680      	mov	r8, r0
 8009046:	4689      	mov	r9, r1
 8009048:	f7f7 fd48 	bl	8000adc <__aeabi_dcmplt>
 800904c:	2800      	cmp	r0, #0
 800904e:	d164      	bne.n	800911a <_dtoa_r+0x62a>
 8009050:	4642      	mov	r2, r8
 8009052:	464b      	mov	r3, r9
 8009054:	4937      	ldr	r1, [pc, #220]	; (8009134 <_dtoa_r+0x644>)
 8009056:	2000      	movs	r0, #0
 8009058:	f7f7 f916 	bl	8000288 <__aeabi_dsub>
 800905c:	ec53 2b19 	vmov	r2, r3, d9
 8009060:	f7f7 fd3c 	bl	8000adc <__aeabi_dcmplt>
 8009064:	2800      	cmp	r0, #0
 8009066:	f040 80b6 	bne.w	80091d6 <_dtoa_r+0x6e6>
 800906a:	9b02      	ldr	r3, [sp, #8]
 800906c:	429d      	cmp	r5, r3
 800906e:	f43f af7c 	beq.w	8008f6a <_dtoa_r+0x47a>
 8009072:	4b31      	ldr	r3, [pc, #196]	; (8009138 <_dtoa_r+0x648>)
 8009074:	ec51 0b19 	vmov	r0, r1, d9
 8009078:	2200      	movs	r2, #0
 800907a:	f7f7 fabd 	bl	80005f8 <__aeabi_dmul>
 800907e:	4b2e      	ldr	r3, [pc, #184]	; (8009138 <_dtoa_r+0x648>)
 8009080:	ec41 0b19 	vmov	d9, r0, r1
 8009084:	2200      	movs	r2, #0
 8009086:	4640      	mov	r0, r8
 8009088:	4649      	mov	r1, r9
 800908a:	f7f7 fab5 	bl	80005f8 <__aeabi_dmul>
 800908e:	4680      	mov	r8, r0
 8009090:	4689      	mov	r9, r1
 8009092:	e7c5      	b.n	8009020 <_dtoa_r+0x530>
 8009094:	ec51 0b17 	vmov	r0, r1, d7
 8009098:	f7f7 faae 	bl	80005f8 <__aeabi_dmul>
 800909c:	9b02      	ldr	r3, [sp, #8]
 800909e:	9d00      	ldr	r5, [sp, #0]
 80090a0:	930f      	str	r3, [sp, #60]	; 0x3c
 80090a2:	ec41 0b19 	vmov	d9, r0, r1
 80090a6:	4649      	mov	r1, r9
 80090a8:	4640      	mov	r0, r8
 80090aa:	f7f7 fd55 	bl	8000b58 <__aeabi_d2iz>
 80090ae:	4606      	mov	r6, r0
 80090b0:	f7f7 fa38 	bl	8000524 <__aeabi_i2d>
 80090b4:	3630      	adds	r6, #48	; 0x30
 80090b6:	4602      	mov	r2, r0
 80090b8:	460b      	mov	r3, r1
 80090ba:	4640      	mov	r0, r8
 80090bc:	4649      	mov	r1, r9
 80090be:	f7f7 f8e3 	bl	8000288 <__aeabi_dsub>
 80090c2:	f805 6b01 	strb.w	r6, [r5], #1
 80090c6:	9b02      	ldr	r3, [sp, #8]
 80090c8:	429d      	cmp	r5, r3
 80090ca:	4680      	mov	r8, r0
 80090cc:	4689      	mov	r9, r1
 80090ce:	f04f 0200 	mov.w	r2, #0
 80090d2:	d124      	bne.n	800911e <_dtoa_r+0x62e>
 80090d4:	4b1b      	ldr	r3, [pc, #108]	; (8009144 <_dtoa_r+0x654>)
 80090d6:	ec51 0b19 	vmov	r0, r1, d9
 80090da:	f7f7 f8d7 	bl	800028c <__adddf3>
 80090de:	4602      	mov	r2, r0
 80090e0:	460b      	mov	r3, r1
 80090e2:	4640      	mov	r0, r8
 80090e4:	4649      	mov	r1, r9
 80090e6:	f7f7 fd17 	bl	8000b18 <__aeabi_dcmpgt>
 80090ea:	2800      	cmp	r0, #0
 80090ec:	d173      	bne.n	80091d6 <_dtoa_r+0x6e6>
 80090ee:	ec53 2b19 	vmov	r2, r3, d9
 80090f2:	4914      	ldr	r1, [pc, #80]	; (8009144 <_dtoa_r+0x654>)
 80090f4:	2000      	movs	r0, #0
 80090f6:	f7f7 f8c7 	bl	8000288 <__aeabi_dsub>
 80090fa:	4602      	mov	r2, r0
 80090fc:	460b      	mov	r3, r1
 80090fe:	4640      	mov	r0, r8
 8009100:	4649      	mov	r1, r9
 8009102:	f7f7 fceb 	bl	8000adc <__aeabi_dcmplt>
 8009106:	2800      	cmp	r0, #0
 8009108:	f43f af2f 	beq.w	8008f6a <_dtoa_r+0x47a>
 800910c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800910e:	1e6b      	subs	r3, r5, #1
 8009110:	930f      	str	r3, [sp, #60]	; 0x3c
 8009112:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009116:	2b30      	cmp	r3, #48	; 0x30
 8009118:	d0f8      	beq.n	800910c <_dtoa_r+0x61c>
 800911a:	46bb      	mov	fp, r7
 800911c:	e04a      	b.n	80091b4 <_dtoa_r+0x6c4>
 800911e:	4b06      	ldr	r3, [pc, #24]	; (8009138 <_dtoa_r+0x648>)
 8009120:	f7f7 fa6a 	bl	80005f8 <__aeabi_dmul>
 8009124:	4680      	mov	r8, r0
 8009126:	4689      	mov	r9, r1
 8009128:	e7bd      	b.n	80090a6 <_dtoa_r+0x5b6>
 800912a:	bf00      	nop
 800912c:	0800acc8 	.word	0x0800acc8
 8009130:	0800aca0 	.word	0x0800aca0
 8009134:	3ff00000 	.word	0x3ff00000
 8009138:	40240000 	.word	0x40240000
 800913c:	401c0000 	.word	0x401c0000
 8009140:	40140000 	.word	0x40140000
 8009144:	3fe00000 	.word	0x3fe00000
 8009148:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800914c:	9d00      	ldr	r5, [sp, #0]
 800914e:	4642      	mov	r2, r8
 8009150:	464b      	mov	r3, r9
 8009152:	4630      	mov	r0, r6
 8009154:	4639      	mov	r1, r7
 8009156:	f7f7 fb79 	bl	800084c <__aeabi_ddiv>
 800915a:	f7f7 fcfd 	bl	8000b58 <__aeabi_d2iz>
 800915e:	9001      	str	r0, [sp, #4]
 8009160:	f7f7 f9e0 	bl	8000524 <__aeabi_i2d>
 8009164:	4642      	mov	r2, r8
 8009166:	464b      	mov	r3, r9
 8009168:	f7f7 fa46 	bl	80005f8 <__aeabi_dmul>
 800916c:	4602      	mov	r2, r0
 800916e:	460b      	mov	r3, r1
 8009170:	4630      	mov	r0, r6
 8009172:	4639      	mov	r1, r7
 8009174:	f7f7 f888 	bl	8000288 <__aeabi_dsub>
 8009178:	9e01      	ldr	r6, [sp, #4]
 800917a:	9f04      	ldr	r7, [sp, #16]
 800917c:	3630      	adds	r6, #48	; 0x30
 800917e:	f805 6b01 	strb.w	r6, [r5], #1
 8009182:	9e00      	ldr	r6, [sp, #0]
 8009184:	1bae      	subs	r6, r5, r6
 8009186:	42b7      	cmp	r7, r6
 8009188:	4602      	mov	r2, r0
 800918a:	460b      	mov	r3, r1
 800918c:	d134      	bne.n	80091f8 <_dtoa_r+0x708>
 800918e:	f7f7 f87d 	bl	800028c <__adddf3>
 8009192:	4642      	mov	r2, r8
 8009194:	464b      	mov	r3, r9
 8009196:	4606      	mov	r6, r0
 8009198:	460f      	mov	r7, r1
 800919a:	f7f7 fcbd 	bl	8000b18 <__aeabi_dcmpgt>
 800919e:	b9c8      	cbnz	r0, 80091d4 <_dtoa_r+0x6e4>
 80091a0:	4642      	mov	r2, r8
 80091a2:	464b      	mov	r3, r9
 80091a4:	4630      	mov	r0, r6
 80091a6:	4639      	mov	r1, r7
 80091a8:	f7f7 fc8e 	bl	8000ac8 <__aeabi_dcmpeq>
 80091ac:	b110      	cbz	r0, 80091b4 <_dtoa_r+0x6c4>
 80091ae:	9b01      	ldr	r3, [sp, #4]
 80091b0:	07db      	lsls	r3, r3, #31
 80091b2:	d40f      	bmi.n	80091d4 <_dtoa_r+0x6e4>
 80091b4:	4651      	mov	r1, sl
 80091b6:	4620      	mov	r0, r4
 80091b8:	f000 fbcc 	bl	8009954 <_Bfree>
 80091bc:	2300      	movs	r3, #0
 80091be:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80091c0:	702b      	strb	r3, [r5, #0]
 80091c2:	f10b 0301 	add.w	r3, fp, #1
 80091c6:	6013      	str	r3, [r2, #0]
 80091c8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	f43f ace2 	beq.w	8008b94 <_dtoa_r+0xa4>
 80091d0:	601d      	str	r5, [r3, #0]
 80091d2:	e4df      	b.n	8008b94 <_dtoa_r+0xa4>
 80091d4:	465f      	mov	r7, fp
 80091d6:	462b      	mov	r3, r5
 80091d8:	461d      	mov	r5, r3
 80091da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80091de:	2a39      	cmp	r2, #57	; 0x39
 80091e0:	d106      	bne.n	80091f0 <_dtoa_r+0x700>
 80091e2:	9a00      	ldr	r2, [sp, #0]
 80091e4:	429a      	cmp	r2, r3
 80091e6:	d1f7      	bne.n	80091d8 <_dtoa_r+0x6e8>
 80091e8:	9900      	ldr	r1, [sp, #0]
 80091ea:	2230      	movs	r2, #48	; 0x30
 80091ec:	3701      	adds	r7, #1
 80091ee:	700a      	strb	r2, [r1, #0]
 80091f0:	781a      	ldrb	r2, [r3, #0]
 80091f2:	3201      	adds	r2, #1
 80091f4:	701a      	strb	r2, [r3, #0]
 80091f6:	e790      	b.n	800911a <_dtoa_r+0x62a>
 80091f8:	4ba3      	ldr	r3, [pc, #652]	; (8009488 <_dtoa_r+0x998>)
 80091fa:	2200      	movs	r2, #0
 80091fc:	f7f7 f9fc 	bl	80005f8 <__aeabi_dmul>
 8009200:	2200      	movs	r2, #0
 8009202:	2300      	movs	r3, #0
 8009204:	4606      	mov	r6, r0
 8009206:	460f      	mov	r7, r1
 8009208:	f7f7 fc5e 	bl	8000ac8 <__aeabi_dcmpeq>
 800920c:	2800      	cmp	r0, #0
 800920e:	d09e      	beq.n	800914e <_dtoa_r+0x65e>
 8009210:	e7d0      	b.n	80091b4 <_dtoa_r+0x6c4>
 8009212:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009214:	2a00      	cmp	r2, #0
 8009216:	f000 80ca 	beq.w	80093ae <_dtoa_r+0x8be>
 800921a:	9a07      	ldr	r2, [sp, #28]
 800921c:	2a01      	cmp	r2, #1
 800921e:	f300 80ad 	bgt.w	800937c <_dtoa_r+0x88c>
 8009222:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009224:	2a00      	cmp	r2, #0
 8009226:	f000 80a5 	beq.w	8009374 <_dtoa_r+0x884>
 800922a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800922e:	9e08      	ldr	r6, [sp, #32]
 8009230:	9d05      	ldr	r5, [sp, #20]
 8009232:	9a05      	ldr	r2, [sp, #20]
 8009234:	441a      	add	r2, r3
 8009236:	9205      	str	r2, [sp, #20]
 8009238:	9a06      	ldr	r2, [sp, #24]
 800923a:	2101      	movs	r1, #1
 800923c:	441a      	add	r2, r3
 800923e:	4620      	mov	r0, r4
 8009240:	9206      	str	r2, [sp, #24]
 8009242:	f000 fc3d 	bl	8009ac0 <__i2b>
 8009246:	4607      	mov	r7, r0
 8009248:	b165      	cbz	r5, 8009264 <_dtoa_r+0x774>
 800924a:	9b06      	ldr	r3, [sp, #24]
 800924c:	2b00      	cmp	r3, #0
 800924e:	dd09      	ble.n	8009264 <_dtoa_r+0x774>
 8009250:	42ab      	cmp	r3, r5
 8009252:	9a05      	ldr	r2, [sp, #20]
 8009254:	bfa8      	it	ge
 8009256:	462b      	movge	r3, r5
 8009258:	1ad2      	subs	r2, r2, r3
 800925a:	9205      	str	r2, [sp, #20]
 800925c:	9a06      	ldr	r2, [sp, #24]
 800925e:	1aed      	subs	r5, r5, r3
 8009260:	1ad3      	subs	r3, r2, r3
 8009262:	9306      	str	r3, [sp, #24]
 8009264:	9b08      	ldr	r3, [sp, #32]
 8009266:	b1f3      	cbz	r3, 80092a6 <_dtoa_r+0x7b6>
 8009268:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800926a:	2b00      	cmp	r3, #0
 800926c:	f000 80a3 	beq.w	80093b6 <_dtoa_r+0x8c6>
 8009270:	2e00      	cmp	r6, #0
 8009272:	dd10      	ble.n	8009296 <_dtoa_r+0x7a6>
 8009274:	4639      	mov	r1, r7
 8009276:	4632      	mov	r2, r6
 8009278:	4620      	mov	r0, r4
 800927a:	f000 fce1 	bl	8009c40 <__pow5mult>
 800927e:	4652      	mov	r2, sl
 8009280:	4601      	mov	r1, r0
 8009282:	4607      	mov	r7, r0
 8009284:	4620      	mov	r0, r4
 8009286:	f000 fc31 	bl	8009aec <__multiply>
 800928a:	4651      	mov	r1, sl
 800928c:	4680      	mov	r8, r0
 800928e:	4620      	mov	r0, r4
 8009290:	f000 fb60 	bl	8009954 <_Bfree>
 8009294:	46c2      	mov	sl, r8
 8009296:	9b08      	ldr	r3, [sp, #32]
 8009298:	1b9a      	subs	r2, r3, r6
 800929a:	d004      	beq.n	80092a6 <_dtoa_r+0x7b6>
 800929c:	4651      	mov	r1, sl
 800929e:	4620      	mov	r0, r4
 80092a0:	f000 fcce 	bl	8009c40 <__pow5mult>
 80092a4:	4682      	mov	sl, r0
 80092a6:	2101      	movs	r1, #1
 80092a8:	4620      	mov	r0, r4
 80092aa:	f000 fc09 	bl	8009ac0 <__i2b>
 80092ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	4606      	mov	r6, r0
 80092b4:	f340 8081 	ble.w	80093ba <_dtoa_r+0x8ca>
 80092b8:	461a      	mov	r2, r3
 80092ba:	4601      	mov	r1, r0
 80092bc:	4620      	mov	r0, r4
 80092be:	f000 fcbf 	bl	8009c40 <__pow5mult>
 80092c2:	9b07      	ldr	r3, [sp, #28]
 80092c4:	2b01      	cmp	r3, #1
 80092c6:	4606      	mov	r6, r0
 80092c8:	dd7a      	ble.n	80093c0 <_dtoa_r+0x8d0>
 80092ca:	f04f 0800 	mov.w	r8, #0
 80092ce:	6933      	ldr	r3, [r6, #16]
 80092d0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80092d4:	6918      	ldr	r0, [r3, #16]
 80092d6:	f000 fba5 	bl	8009a24 <__hi0bits>
 80092da:	f1c0 0020 	rsb	r0, r0, #32
 80092de:	9b06      	ldr	r3, [sp, #24]
 80092e0:	4418      	add	r0, r3
 80092e2:	f010 001f 	ands.w	r0, r0, #31
 80092e6:	f000 8094 	beq.w	8009412 <_dtoa_r+0x922>
 80092ea:	f1c0 0320 	rsb	r3, r0, #32
 80092ee:	2b04      	cmp	r3, #4
 80092f0:	f340 8085 	ble.w	80093fe <_dtoa_r+0x90e>
 80092f4:	9b05      	ldr	r3, [sp, #20]
 80092f6:	f1c0 001c 	rsb	r0, r0, #28
 80092fa:	4403      	add	r3, r0
 80092fc:	9305      	str	r3, [sp, #20]
 80092fe:	9b06      	ldr	r3, [sp, #24]
 8009300:	4403      	add	r3, r0
 8009302:	4405      	add	r5, r0
 8009304:	9306      	str	r3, [sp, #24]
 8009306:	9b05      	ldr	r3, [sp, #20]
 8009308:	2b00      	cmp	r3, #0
 800930a:	dd05      	ble.n	8009318 <_dtoa_r+0x828>
 800930c:	4651      	mov	r1, sl
 800930e:	461a      	mov	r2, r3
 8009310:	4620      	mov	r0, r4
 8009312:	f000 fcef 	bl	8009cf4 <__lshift>
 8009316:	4682      	mov	sl, r0
 8009318:	9b06      	ldr	r3, [sp, #24]
 800931a:	2b00      	cmp	r3, #0
 800931c:	dd05      	ble.n	800932a <_dtoa_r+0x83a>
 800931e:	4631      	mov	r1, r6
 8009320:	461a      	mov	r2, r3
 8009322:	4620      	mov	r0, r4
 8009324:	f000 fce6 	bl	8009cf4 <__lshift>
 8009328:	4606      	mov	r6, r0
 800932a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800932c:	2b00      	cmp	r3, #0
 800932e:	d072      	beq.n	8009416 <_dtoa_r+0x926>
 8009330:	4631      	mov	r1, r6
 8009332:	4650      	mov	r0, sl
 8009334:	f000 fd4a 	bl	8009dcc <__mcmp>
 8009338:	2800      	cmp	r0, #0
 800933a:	da6c      	bge.n	8009416 <_dtoa_r+0x926>
 800933c:	2300      	movs	r3, #0
 800933e:	4651      	mov	r1, sl
 8009340:	220a      	movs	r2, #10
 8009342:	4620      	mov	r0, r4
 8009344:	f000 fb28 	bl	8009998 <__multadd>
 8009348:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800934a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800934e:	4682      	mov	sl, r0
 8009350:	2b00      	cmp	r3, #0
 8009352:	f000 81b0 	beq.w	80096b6 <_dtoa_r+0xbc6>
 8009356:	2300      	movs	r3, #0
 8009358:	4639      	mov	r1, r7
 800935a:	220a      	movs	r2, #10
 800935c:	4620      	mov	r0, r4
 800935e:	f000 fb1b 	bl	8009998 <__multadd>
 8009362:	9b01      	ldr	r3, [sp, #4]
 8009364:	2b00      	cmp	r3, #0
 8009366:	4607      	mov	r7, r0
 8009368:	f300 8096 	bgt.w	8009498 <_dtoa_r+0x9a8>
 800936c:	9b07      	ldr	r3, [sp, #28]
 800936e:	2b02      	cmp	r3, #2
 8009370:	dc59      	bgt.n	8009426 <_dtoa_r+0x936>
 8009372:	e091      	b.n	8009498 <_dtoa_r+0x9a8>
 8009374:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009376:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800937a:	e758      	b.n	800922e <_dtoa_r+0x73e>
 800937c:	9b04      	ldr	r3, [sp, #16]
 800937e:	1e5e      	subs	r6, r3, #1
 8009380:	9b08      	ldr	r3, [sp, #32]
 8009382:	42b3      	cmp	r3, r6
 8009384:	bfbf      	itttt	lt
 8009386:	9b08      	ldrlt	r3, [sp, #32]
 8009388:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800938a:	9608      	strlt	r6, [sp, #32]
 800938c:	1af3      	sublt	r3, r6, r3
 800938e:	bfb4      	ite	lt
 8009390:	18d2      	addlt	r2, r2, r3
 8009392:	1b9e      	subge	r6, r3, r6
 8009394:	9b04      	ldr	r3, [sp, #16]
 8009396:	bfbc      	itt	lt
 8009398:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800939a:	2600      	movlt	r6, #0
 800939c:	2b00      	cmp	r3, #0
 800939e:	bfb7      	itett	lt
 80093a0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80093a4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80093a8:	1a9d      	sublt	r5, r3, r2
 80093aa:	2300      	movlt	r3, #0
 80093ac:	e741      	b.n	8009232 <_dtoa_r+0x742>
 80093ae:	9e08      	ldr	r6, [sp, #32]
 80093b0:	9d05      	ldr	r5, [sp, #20]
 80093b2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80093b4:	e748      	b.n	8009248 <_dtoa_r+0x758>
 80093b6:	9a08      	ldr	r2, [sp, #32]
 80093b8:	e770      	b.n	800929c <_dtoa_r+0x7ac>
 80093ba:	9b07      	ldr	r3, [sp, #28]
 80093bc:	2b01      	cmp	r3, #1
 80093be:	dc19      	bgt.n	80093f4 <_dtoa_r+0x904>
 80093c0:	9b02      	ldr	r3, [sp, #8]
 80093c2:	b9bb      	cbnz	r3, 80093f4 <_dtoa_r+0x904>
 80093c4:	9b03      	ldr	r3, [sp, #12]
 80093c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80093ca:	b99b      	cbnz	r3, 80093f4 <_dtoa_r+0x904>
 80093cc:	9b03      	ldr	r3, [sp, #12]
 80093ce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80093d2:	0d1b      	lsrs	r3, r3, #20
 80093d4:	051b      	lsls	r3, r3, #20
 80093d6:	b183      	cbz	r3, 80093fa <_dtoa_r+0x90a>
 80093d8:	9b05      	ldr	r3, [sp, #20]
 80093da:	3301      	adds	r3, #1
 80093dc:	9305      	str	r3, [sp, #20]
 80093de:	9b06      	ldr	r3, [sp, #24]
 80093e0:	3301      	adds	r3, #1
 80093e2:	9306      	str	r3, [sp, #24]
 80093e4:	f04f 0801 	mov.w	r8, #1
 80093e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	f47f af6f 	bne.w	80092ce <_dtoa_r+0x7de>
 80093f0:	2001      	movs	r0, #1
 80093f2:	e774      	b.n	80092de <_dtoa_r+0x7ee>
 80093f4:	f04f 0800 	mov.w	r8, #0
 80093f8:	e7f6      	b.n	80093e8 <_dtoa_r+0x8f8>
 80093fa:	4698      	mov	r8, r3
 80093fc:	e7f4      	b.n	80093e8 <_dtoa_r+0x8f8>
 80093fe:	d082      	beq.n	8009306 <_dtoa_r+0x816>
 8009400:	9a05      	ldr	r2, [sp, #20]
 8009402:	331c      	adds	r3, #28
 8009404:	441a      	add	r2, r3
 8009406:	9205      	str	r2, [sp, #20]
 8009408:	9a06      	ldr	r2, [sp, #24]
 800940a:	441a      	add	r2, r3
 800940c:	441d      	add	r5, r3
 800940e:	9206      	str	r2, [sp, #24]
 8009410:	e779      	b.n	8009306 <_dtoa_r+0x816>
 8009412:	4603      	mov	r3, r0
 8009414:	e7f4      	b.n	8009400 <_dtoa_r+0x910>
 8009416:	9b04      	ldr	r3, [sp, #16]
 8009418:	2b00      	cmp	r3, #0
 800941a:	dc37      	bgt.n	800948c <_dtoa_r+0x99c>
 800941c:	9b07      	ldr	r3, [sp, #28]
 800941e:	2b02      	cmp	r3, #2
 8009420:	dd34      	ble.n	800948c <_dtoa_r+0x99c>
 8009422:	9b04      	ldr	r3, [sp, #16]
 8009424:	9301      	str	r3, [sp, #4]
 8009426:	9b01      	ldr	r3, [sp, #4]
 8009428:	b963      	cbnz	r3, 8009444 <_dtoa_r+0x954>
 800942a:	4631      	mov	r1, r6
 800942c:	2205      	movs	r2, #5
 800942e:	4620      	mov	r0, r4
 8009430:	f000 fab2 	bl	8009998 <__multadd>
 8009434:	4601      	mov	r1, r0
 8009436:	4606      	mov	r6, r0
 8009438:	4650      	mov	r0, sl
 800943a:	f000 fcc7 	bl	8009dcc <__mcmp>
 800943e:	2800      	cmp	r0, #0
 8009440:	f73f adbb 	bgt.w	8008fba <_dtoa_r+0x4ca>
 8009444:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009446:	9d00      	ldr	r5, [sp, #0]
 8009448:	ea6f 0b03 	mvn.w	fp, r3
 800944c:	f04f 0800 	mov.w	r8, #0
 8009450:	4631      	mov	r1, r6
 8009452:	4620      	mov	r0, r4
 8009454:	f000 fa7e 	bl	8009954 <_Bfree>
 8009458:	2f00      	cmp	r7, #0
 800945a:	f43f aeab 	beq.w	80091b4 <_dtoa_r+0x6c4>
 800945e:	f1b8 0f00 	cmp.w	r8, #0
 8009462:	d005      	beq.n	8009470 <_dtoa_r+0x980>
 8009464:	45b8      	cmp	r8, r7
 8009466:	d003      	beq.n	8009470 <_dtoa_r+0x980>
 8009468:	4641      	mov	r1, r8
 800946a:	4620      	mov	r0, r4
 800946c:	f000 fa72 	bl	8009954 <_Bfree>
 8009470:	4639      	mov	r1, r7
 8009472:	4620      	mov	r0, r4
 8009474:	f000 fa6e 	bl	8009954 <_Bfree>
 8009478:	e69c      	b.n	80091b4 <_dtoa_r+0x6c4>
 800947a:	2600      	movs	r6, #0
 800947c:	4637      	mov	r7, r6
 800947e:	e7e1      	b.n	8009444 <_dtoa_r+0x954>
 8009480:	46bb      	mov	fp, r7
 8009482:	4637      	mov	r7, r6
 8009484:	e599      	b.n	8008fba <_dtoa_r+0x4ca>
 8009486:	bf00      	nop
 8009488:	40240000 	.word	0x40240000
 800948c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800948e:	2b00      	cmp	r3, #0
 8009490:	f000 80c8 	beq.w	8009624 <_dtoa_r+0xb34>
 8009494:	9b04      	ldr	r3, [sp, #16]
 8009496:	9301      	str	r3, [sp, #4]
 8009498:	2d00      	cmp	r5, #0
 800949a:	dd05      	ble.n	80094a8 <_dtoa_r+0x9b8>
 800949c:	4639      	mov	r1, r7
 800949e:	462a      	mov	r2, r5
 80094a0:	4620      	mov	r0, r4
 80094a2:	f000 fc27 	bl	8009cf4 <__lshift>
 80094a6:	4607      	mov	r7, r0
 80094a8:	f1b8 0f00 	cmp.w	r8, #0
 80094ac:	d05b      	beq.n	8009566 <_dtoa_r+0xa76>
 80094ae:	6879      	ldr	r1, [r7, #4]
 80094b0:	4620      	mov	r0, r4
 80094b2:	f000 fa0f 	bl	80098d4 <_Balloc>
 80094b6:	4605      	mov	r5, r0
 80094b8:	b928      	cbnz	r0, 80094c6 <_dtoa_r+0x9d6>
 80094ba:	4b83      	ldr	r3, [pc, #524]	; (80096c8 <_dtoa_r+0xbd8>)
 80094bc:	4602      	mov	r2, r0
 80094be:	f240 21ef 	movw	r1, #751	; 0x2ef
 80094c2:	f7ff bb2e 	b.w	8008b22 <_dtoa_r+0x32>
 80094c6:	693a      	ldr	r2, [r7, #16]
 80094c8:	3202      	adds	r2, #2
 80094ca:	0092      	lsls	r2, r2, #2
 80094cc:	f107 010c 	add.w	r1, r7, #12
 80094d0:	300c      	adds	r0, #12
 80094d2:	f000 ffab 	bl	800a42c <memcpy>
 80094d6:	2201      	movs	r2, #1
 80094d8:	4629      	mov	r1, r5
 80094da:	4620      	mov	r0, r4
 80094dc:	f000 fc0a 	bl	8009cf4 <__lshift>
 80094e0:	9b00      	ldr	r3, [sp, #0]
 80094e2:	3301      	adds	r3, #1
 80094e4:	9304      	str	r3, [sp, #16]
 80094e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80094ea:	4413      	add	r3, r2
 80094ec:	9308      	str	r3, [sp, #32]
 80094ee:	9b02      	ldr	r3, [sp, #8]
 80094f0:	f003 0301 	and.w	r3, r3, #1
 80094f4:	46b8      	mov	r8, r7
 80094f6:	9306      	str	r3, [sp, #24]
 80094f8:	4607      	mov	r7, r0
 80094fa:	9b04      	ldr	r3, [sp, #16]
 80094fc:	4631      	mov	r1, r6
 80094fe:	3b01      	subs	r3, #1
 8009500:	4650      	mov	r0, sl
 8009502:	9301      	str	r3, [sp, #4]
 8009504:	f7ff fa69 	bl	80089da <quorem>
 8009508:	4641      	mov	r1, r8
 800950a:	9002      	str	r0, [sp, #8]
 800950c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009510:	4650      	mov	r0, sl
 8009512:	f000 fc5b 	bl	8009dcc <__mcmp>
 8009516:	463a      	mov	r2, r7
 8009518:	9005      	str	r0, [sp, #20]
 800951a:	4631      	mov	r1, r6
 800951c:	4620      	mov	r0, r4
 800951e:	f000 fc71 	bl	8009e04 <__mdiff>
 8009522:	68c2      	ldr	r2, [r0, #12]
 8009524:	4605      	mov	r5, r0
 8009526:	bb02      	cbnz	r2, 800956a <_dtoa_r+0xa7a>
 8009528:	4601      	mov	r1, r0
 800952a:	4650      	mov	r0, sl
 800952c:	f000 fc4e 	bl	8009dcc <__mcmp>
 8009530:	4602      	mov	r2, r0
 8009532:	4629      	mov	r1, r5
 8009534:	4620      	mov	r0, r4
 8009536:	9209      	str	r2, [sp, #36]	; 0x24
 8009538:	f000 fa0c 	bl	8009954 <_Bfree>
 800953c:	9b07      	ldr	r3, [sp, #28]
 800953e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009540:	9d04      	ldr	r5, [sp, #16]
 8009542:	ea43 0102 	orr.w	r1, r3, r2
 8009546:	9b06      	ldr	r3, [sp, #24]
 8009548:	4319      	orrs	r1, r3
 800954a:	d110      	bne.n	800956e <_dtoa_r+0xa7e>
 800954c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009550:	d029      	beq.n	80095a6 <_dtoa_r+0xab6>
 8009552:	9b05      	ldr	r3, [sp, #20]
 8009554:	2b00      	cmp	r3, #0
 8009556:	dd02      	ble.n	800955e <_dtoa_r+0xa6e>
 8009558:	9b02      	ldr	r3, [sp, #8]
 800955a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800955e:	9b01      	ldr	r3, [sp, #4]
 8009560:	f883 9000 	strb.w	r9, [r3]
 8009564:	e774      	b.n	8009450 <_dtoa_r+0x960>
 8009566:	4638      	mov	r0, r7
 8009568:	e7ba      	b.n	80094e0 <_dtoa_r+0x9f0>
 800956a:	2201      	movs	r2, #1
 800956c:	e7e1      	b.n	8009532 <_dtoa_r+0xa42>
 800956e:	9b05      	ldr	r3, [sp, #20]
 8009570:	2b00      	cmp	r3, #0
 8009572:	db04      	blt.n	800957e <_dtoa_r+0xa8e>
 8009574:	9907      	ldr	r1, [sp, #28]
 8009576:	430b      	orrs	r3, r1
 8009578:	9906      	ldr	r1, [sp, #24]
 800957a:	430b      	orrs	r3, r1
 800957c:	d120      	bne.n	80095c0 <_dtoa_r+0xad0>
 800957e:	2a00      	cmp	r2, #0
 8009580:	dded      	ble.n	800955e <_dtoa_r+0xa6e>
 8009582:	4651      	mov	r1, sl
 8009584:	2201      	movs	r2, #1
 8009586:	4620      	mov	r0, r4
 8009588:	f000 fbb4 	bl	8009cf4 <__lshift>
 800958c:	4631      	mov	r1, r6
 800958e:	4682      	mov	sl, r0
 8009590:	f000 fc1c 	bl	8009dcc <__mcmp>
 8009594:	2800      	cmp	r0, #0
 8009596:	dc03      	bgt.n	80095a0 <_dtoa_r+0xab0>
 8009598:	d1e1      	bne.n	800955e <_dtoa_r+0xa6e>
 800959a:	f019 0f01 	tst.w	r9, #1
 800959e:	d0de      	beq.n	800955e <_dtoa_r+0xa6e>
 80095a0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80095a4:	d1d8      	bne.n	8009558 <_dtoa_r+0xa68>
 80095a6:	9a01      	ldr	r2, [sp, #4]
 80095a8:	2339      	movs	r3, #57	; 0x39
 80095aa:	7013      	strb	r3, [r2, #0]
 80095ac:	462b      	mov	r3, r5
 80095ae:	461d      	mov	r5, r3
 80095b0:	3b01      	subs	r3, #1
 80095b2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80095b6:	2a39      	cmp	r2, #57	; 0x39
 80095b8:	d06c      	beq.n	8009694 <_dtoa_r+0xba4>
 80095ba:	3201      	adds	r2, #1
 80095bc:	701a      	strb	r2, [r3, #0]
 80095be:	e747      	b.n	8009450 <_dtoa_r+0x960>
 80095c0:	2a00      	cmp	r2, #0
 80095c2:	dd07      	ble.n	80095d4 <_dtoa_r+0xae4>
 80095c4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80095c8:	d0ed      	beq.n	80095a6 <_dtoa_r+0xab6>
 80095ca:	9a01      	ldr	r2, [sp, #4]
 80095cc:	f109 0301 	add.w	r3, r9, #1
 80095d0:	7013      	strb	r3, [r2, #0]
 80095d2:	e73d      	b.n	8009450 <_dtoa_r+0x960>
 80095d4:	9b04      	ldr	r3, [sp, #16]
 80095d6:	9a08      	ldr	r2, [sp, #32]
 80095d8:	f803 9c01 	strb.w	r9, [r3, #-1]
 80095dc:	4293      	cmp	r3, r2
 80095de:	d043      	beq.n	8009668 <_dtoa_r+0xb78>
 80095e0:	4651      	mov	r1, sl
 80095e2:	2300      	movs	r3, #0
 80095e4:	220a      	movs	r2, #10
 80095e6:	4620      	mov	r0, r4
 80095e8:	f000 f9d6 	bl	8009998 <__multadd>
 80095ec:	45b8      	cmp	r8, r7
 80095ee:	4682      	mov	sl, r0
 80095f0:	f04f 0300 	mov.w	r3, #0
 80095f4:	f04f 020a 	mov.w	r2, #10
 80095f8:	4641      	mov	r1, r8
 80095fa:	4620      	mov	r0, r4
 80095fc:	d107      	bne.n	800960e <_dtoa_r+0xb1e>
 80095fe:	f000 f9cb 	bl	8009998 <__multadd>
 8009602:	4680      	mov	r8, r0
 8009604:	4607      	mov	r7, r0
 8009606:	9b04      	ldr	r3, [sp, #16]
 8009608:	3301      	adds	r3, #1
 800960a:	9304      	str	r3, [sp, #16]
 800960c:	e775      	b.n	80094fa <_dtoa_r+0xa0a>
 800960e:	f000 f9c3 	bl	8009998 <__multadd>
 8009612:	4639      	mov	r1, r7
 8009614:	4680      	mov	r8, r0
 8009616:	2300      	movs	r3, #0
 8009618:	220a      	movs	r2, #10
 800961a:	4620      	mov	r0, r4
 800961c:	f000 f9bc 	bl	8009998 <__multadd>
 8009620:	4607      	mov	r7, r0
 8009622:	e7f0      	b.n	8009606 <_dtoa_r+0xb16>
 8009624:	9b04      	ldr	r3, [sp, #16]
 8009626:	9301      	str	r3, [sp, #4]
 8009628:	9d00      	ldr	r5, [sp, #0]
 800962a:	4631      	mov	r1, r6
 800962c:	4650      	mov	r0, sl
 800962e:	f7ff f9d4 	bl	80089da <quorem>
 8009632:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009636:	9b00      	ldr	r3, [sp, #0]
 8009638:	f805 9b01 	strb.w	r9, [r5], #1
 800963c:	1aea      	subs	r2, r5, r3
 800963e:	9b01      	ldr	r3, [sp, #4]
 8009640:	4293      	cmp	r3, r2
 8009642:	dd07      	ble.n	8009654 <_dtoa_r+0xb64>
 8009644:	4651      	mov	r1, sl
 8009646:	2300      	movs	r3, #0
 8009648:	220a      	movs	r2, #10
 800964a:	4620      	mov	r0, r4
 800964c:	f000 f9a4 	bl	8009998 <__multadd>
 8009650:	4682      	mov	sl, r0
 8009652:	e7ea      	b.n	800962a <_dtoa_r+0xb3a>
 8009654:	9b01      	ldr	r3, [sp, #4]
 8009656:	2b00      	cmp	r3, #0
 8009658:	bfc8      	it	gt
 800965a:	461d      	movgt	r5, r3
 800965c:	9b00      	ldr	r3, [sp, #0]
 800965e:	bfd8      	it	le
 8009660:	2501      	movle	r5, #1
 8009662:	441d      	add	r5, r3
 8009664:	f04f 0800 	mov.w	r8, #0
 8009668:	4651      	mov	r1, sl
 800966a:	2201      	movs	r2, #1
 800966c:	4620      	mov	r0, r4
 800966e:	f000 fb41 	bl	8009cf4 <__lshift>
 8009672:	4631      	mov	r1, r6
 8009674:	4682      	mov	sl, r0
 8009676:	f000 fba9 	bl	8009dcc <__mcmp>
 800967a:	2800      	cmp	r0, #0
 800967c:	dc96      	bgt.n	80095ac <_dtoa_r+0xabc>
 800967e:	d102      	bne.n	8009686 <_dtoa_r+0xb96>
 8009680:	f019 0f01 	tst.w	r9, #1
 8009684:	d192      	bne.n	80095ac <_dtoa_r+0xabc>
 8009686:	462b      	mov	r3, r5
 8009688:	461d      	mov	r5, r3
 800968a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800968e:	2a30      	cmp	r2, #48	; 0x30
 8009690:	d0fa      	beq.n	8009688 <_dtoa_r+0xb98>
 8009692:	e6dd      	b.n	8009450 <_dtoa_r+0x960>
 8009694:	9a00      	ldr	r2, [sp, #0]
 8009696:	429a      	cmp	r2, r3
 8009698:	d189      	bne.n	80095ae <_dtoa_r+0xabe>
 800969a:	f10b 0b01 	add.w	fp, fp, #1
 800969e:	2331      	movs	r3, #49	; 0x31
 80096a0:	e796      	b.n	80095d0 <_dtoa_r+0xae0>
 80096a2:	4b0a      	ldr	r3, [pc, #40]	; (80096cc <_dtoa_r+0xbdc>)
 80096a4:	f7ff ba99 	b.w	8008bda <_dtoa_r+0xea>
 80096a8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	f47f aa6d 	bne.w	8008b8a <_dtoa_r+0x9a>
 80096b0:	4b07      	ldr	r3, [pc, #28]	; (80096d0 <_dtoa_r+0xbe0>)
 80096b2:	f7ff ba92 	b.w	8008bda <_dtoa_r+0xea>
 80096b6:	9b01      	ldr	r3, [sp, #4]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	dcb5      	bgt.n	8009628 <_dtoa_r+0xb38>
 80096bc:	9b07      	ldr	r3, [sp, #28]
 80096be:	2b02      	cmp	r3, #2
 80096c0:	f73f aeb1 	bgt.w	8009426 <_dtoa_r+0x936>
 80096c4:	e7b0      	b.n	8009628 <_dtoa_r+0xb38>
 80096c6:	bf00      	nop
 80096c8:	0800ac30 	.word	0x0800ac30
 80096cc:	0800ab90 	.word	0x0800ab90
 80096d0:	0800abb4 	.word	0x0800abb4

080096d4 <_free_r>:
 80096d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80096d6:	2900      	cmp	r1, #0
 80096d8:	d044      	beq.n	8009764 <_free_r+0x90>
 80096da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80096de:	9001      	str	r0, [sp, #4]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	f1a1 0404 	sub.w	r4, r1, #4
 80096e6:	bfb8      	it	lt
 80096e8:	18e4      	addlt	r4, r4, r3
 80096ea:	f000 f8e7 	bl	80098bc <__malloc_lock>
 80096ee:	4a1e      	ldr	r2, [pc, #120]	; (8009768 <_free_r+0x94>)
 80096f0:	9801      	ldr	r0, [sp, #4]
 80096f2:	6813      	ldr	r3, [r2, #0]
 80096f4:	b933      	cbnz	r3, 8009704 <_free_r+0x30>
 80096f6:	6063      	str	r3, [r4, #4]
 80096f8:	6014      	str	r4, [r2, #0]
 80096fa:	b003      	add	sp, #12
 80096fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009700:	f000 b8e2 	b.w	80098c8 <__malloc_unlock>
 8009704:	42a3      	cmp	r3, r4
 8009706:	d908      	bls.n	800971a <_free_r+0x46>
 8009708:	6825      	ldr	r5, [r4, #0]
 800970a:	1961      	adds	r1, r4, r5
 800970c:	428b      	cmp	r3, r1
 800970e:	bf01      	itttt	eq
 8009710:	6819      	ldreq	r1, [r3, #0]
 8009712:	685b      	ldreq	r3, [r3, #4]
 8009714:	1949      	addeq	r1, r1, r5
 8009716:	6021      	streq	r1, [r4, #0]
 8009718:	e7ed      	b.n	80096f6 <_free_r+0x22>
 800971a:	461a      	mov	r2, r3
 800971c:	685b      	ldr	r3, [r3, #4]
 800971e:	b10b      	cbz	r3, 8009724 <_free_r+0x50>
 8009720:	42a3      	cmp	r3, r4
 8009722:	d9fa      	bls.n	800971a <_free_r+0x46>
 8009724:	6811      	ldr	r1, [r2, #0]
 8009726:	1855      	adds	r5, r2, r1
 8009728:	42a5      	cmp	r5, r4
 800972a:	d10b      	bne.n	8009744 <_free_r+0x70>
 800972c:	6824      	ldr	r4, [r4, #0]
 800972e:	4421      	add	r1, r4
 8009730:	1854      	adds	r4, r2, r1
 8009732:	42a3      	cmp	r3, r4
 8009734:	6011      	str	r1, [r2, #0]
 8009736:	d1e0      	bne.n	80096fa <_free_r+0x26>
 8009738:	681c      	ldr	r4, [r3, #0]
 800973a:	685b      	ldr	r3, [r3, #4]
 800973c:	6053      	str	r3, [r2, #4]
 800973e:	440c      	add	r4, r1
 8009740:	6014      	str	r4, [r2, #0]
 8009742:	e7da      	b.n	80096fa <_free_r+0x26>
 8009744:	d902      	bls.n	800974c <_free_r+0x78>
 8009746:	230c      	movs	r3, #12
 8009748:	6003      	str	r3, [r0, #0]
 800974a:	e7d6      	b.n	80096fa <_free_r+0x26>
 800974c:	6825      	ldr	r5, [r4, #0]
 800974e:	1961      	adds	r1, r4, r5
 8009750:	428b      	cmp	r3, r1
 8009752:	bf04      	itt	eq
 8009754:	6819      	ldreq	r1, [r3, #0]
 8009756:	685b      	ldreq	r3, [r3, #4]
 8009758:	6063      	str	r3, [r4, #4]
 800975a:	bf04      	itt	eq
 800975c:	1949      	addeq	r1, r1, r5
 800975e:	6021      	streq	r1, [r4, #0]
 8009760:	6054      	str	r4, [r2, #4]
 8009762:	e7ca      	b.n	80096fa <_free_r+0x26>
 8009764:	b003      	add	sp, #12
 8009766:	bd30      	pop	{r4, r5, pc}
 8009768:	20000520 	.word	0x20000520

0800976c <malloc>:
 800976c:	4b02      	ldr	r3, [pc, #8]	; (8009778 <malloc+0xc>)
 800976e:	4601      	mov	r1, r0
 8009770:	6818      	ldr	r0, [r3, #0]
 8009772:	f000 b823 	b.w	80097bc <_malloc_r>
 8009776:	bf00      	nop
 8009778:	20000064 	.word	0x20000064

0800977c <sbrk_aligned>:
 800977c:	b570      	push	{r4, r5, r6, lr}
 800977e:	4e0e      	ldr	r6, [pc, #56]	; (80097b8 <sbrk_aligned+0x3c>)
 8009780:	460c      	mov	r4, r1
 8009782:	6831      	ldr	r1, [r6, #0]
 8009784:	4605      	mov	r5, r0
 8009786:	b911      	cbnz	r1, 800978e <sbrk_aligned+0x12>
 8009788:	f000 fe40 	bl	800a40c <_sbrk_r>
 800978c:	6030      	str	r0, [r6, #0]
 800978e:	4621      	mov	r1, r4
 8009790:	4628      	mov	r0, r5
 8009792:	f000 fe3b 	bl	800a40c <_sbrk_r>
 8009796:	1c43      	adds	r3, r0, #1
 8009798:	d00a      	beq.n	80097b0 <sbrk_aligned+0x34>
 800979a:	1cc4      	adds	r4, r0, #3
 800979c:	f024 0403 	bic.w	r4, r4, #3
 80097a0:	42a0      	cmp	r0, r4
 80097a2:	d007      	beq.n	80097b4 <sbrk_aligned+0x38>
 80097a4:	1a21      	subs	r1, r4, r0
 80097a6:	4628      	mov	r0, r5
 80097a8:	f000 fe30 	bl	800a40c <_sbrk_r>
 80097ac:	3001      	adds	r0, #1
 80097ae:	d101      	bne.n	80097b4 <sbrk_aligned+0x38>
 80097b0:	f04f 34ff 	mov.w	r4, #4294967295
 80097b4:	4620      	mov	r0, r4
 80097b6:	bd70      	pop	{r4, r5, r6, pc}
 80097b8:	20000524 	.word	0x20000524

080097bc <_malloc_r>:
 80097bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80097c0:	1ccd      	adds	r5, r1, #3
 80097c2:	f025 0503 	bic.w	r5, r5, #3
 80097c6:	3508      	adds	r5, #8
 80097c8:	2d0c      	cmp	r5, #12
 80097ca:	bf38      	it	cc
 80097cc:	250c      	movcc	r5, #12
 80097ce:	2d00      	cmp	r5, #0
 80097d0:	4607      	mov	r7, r0
 80097d2:	db01      	blt.n	80097d8 <_malloc_r+0x1c>
 80097d4:	42a9      	cmp	r1, r5
 80097d6:	d905      	bls.n	80097e4 <_malloc_r+0x28>
 80097d8:	230c      	movs	r3, #12
 80097da:	603b      	str	r3, [r7, #0]
 80097dc:	2600      	movs	r6, #0
 80097de:	4630      	mov	r0, r6
 80097e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80097e4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80098b8 <_malloc_r+0xfc>
 80097e8:	f000 f868 	bl	80098bc <__malloc_lock>
 80097ec:	f8d8 3000 	ldr.w	r3, [r8]
 80097f0:	461c      	mov	r4, r3
 80097f2:	bb5c      	cbnz	r4, 800984c <_malloc_r+0x90>
 80097f4:	4629      	mov	r1, r5
 80097f6:	4638      	mov	r0, r7
 80097f8:	f7ff ffc0 	bl	800977c <sbrk_aligned>
 80097fc:	1c43      	adds	r3, r0, #1
 80097fe:	4604      	mov	r4, r0
 8009800:	d155      	bne.n	80098ae <_malloc_r+0xf2>
 8009802:	f8d8 4000 	ldr.w	r4, [r8]
 8009806:	4626      	mov	r6, r4
 8009808:	2e00      	cmp	r6, #0
 800980a:	d145      	bne.n	8009898 <_malloc_r+0xdc>
 800980c:	2c00      	cmp	r4, #0
 800980e:	d048      	beq.n	80098a2 <_malloc_r+0xe6>
 8009810:	6823      	ldr	r3, [r4, #0]
 8009812:	4631      	mov	r1, r6
 8009814:	4638      	mov	r0, r7
 8009816:	eb04 0903 	add.w	r9, r4, r3
 800981a:	f000 fdf7 	bl	800a40c <_sbrk_r>
 800981e:	4581      	cmp	r9, r0
 8009820:	d13f      	bne.n	80098a2 <_malloc_r+0xe6>
 8009822:	6821      	ldr	r1, [r4, #0]
 8009824:	1a6d      	subs	r5, r5, r1
 8009826:	4629      	mov	r1, r5
 8009828:	4638      	mov	r0, r7
 800982a:	f7ff ffa7 	bl	800977c <sbrk_aligned>
 800982e:	3001      	adds	r0, #1
 8009830:	d037      	beq.n	80098a2 <_malloc_r+0xe6>
 8009832:	6823      	ldr	r3, [r4, #0]
 8009834:	442b      	add	r3, r5
 8009836:	6023      	str	r3, [r4, #0]
 8009838:	f8d8 3000 	ldr.w	r3, [r8]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d038      	beq.n	80098b2 <_malloc_r+0xf6>
 8009840:	685a      	ldr	r2, [r3, #4]
 8009842:	42a2      	cmp	r2, r4
 8009844:	d12b      	bne.n	800989e <_malloc_r+0xe2>
 8009846:	2200      	movs	r2, #0
 8009848:	605a      	str	r2, [r3, #4]
 800984a:	e00f      	b.n	800986c <_malloc_r+0xb0>
 800984c:	6822      	ldr	r2, [r4, #0]
 800984e:	1b52      	subs	r2, r2, r5
 8009850:	d41f      	bmi.n	8009892 <_malloc_r+0xd6>
 8009852:	2a0b      	cmp	r2, #11
 8009854:	d917      	bls.n	8009886 <_malloc_r+0xca>
 8009856:	1961      	adds	r1, r4, r5
 8009858:	42a3      	cmp	r3, r4
 800985a:	6025      	str	r5, [r4, #0]
 800985c:	bf18      	it	ne
 800985e:	6059      	strne	r1, [r3, #4]
 8009860:	6863      	ldr	r3, [r4, #4]
 8009862:	bf08      	it	eq
 8009864:	f8c8 1000 	streq.w	r1, [r8]
 8009868:	5162      	str	r2, [r4, r5]
 800986a:	604b      	str	r3, [r1, #4]
 800986c:	4638      	mov	r0, r7
 800986e:	f104 060b 	add.w	r6, r4, #11
 8009872:	f000 f829 	bl	80098c8 <__malloc_unlock>
 8009876:	f026 0607 	bic.w	r6, r6, #7
 800987a:	1d23      	adds	r3, r4, #4
 800987c:	1af2      	subs	r2, r6, r3
 800987e:	d0ae      	beq.n	80097de <_malloc_r+0x22>
 8009880:	1b9b      	subs	r3, r3, r6
 8009882:	50a3      	str	r3, [r4, r2]
 8009884:	e7ab      	b.n	80097de <_malloc_r+0x22>
 8009886:	42a3      	cmp	r3, r4
 8009888:	6862      	ldr	r2, [r4, #4]
 800988a:	d1dd      	bne.n	8009848 <_malloc_r+0x8c>
 800988c:	f8c8 2000 	str.w	r2, [r8]
 8009890:	e7ec      	b.n	800986c <_malloc_r+0xb0>
 8009892:	4623      	mov	r3, r4
 8009894:	6864      	ldr	r4, [r4, #4]
 8009896:	e7ac      	b.n	80097f2 <_malloc_r+0x36>
 8009898:	4634      	mov	r4, r6
 800989a:	6876      	ldr	r6, [r6, #4]
 800989c:	e7b4      	b.n	8009808 <_malloc_r+0x4c>
 800989e:	4613      	mov	r3, r2
 80098a0:	e7cc      	b.n	800983c <_malloc_r+0x80>
 80098a2:	230c      	movs	r3, #12
 80098a4:	603b      	str	r3, [r7, #0]
 80098a6:	4638      	mov	r0, r7
 80098a8:	f000 f80e 	bl	80098c8 <__malloc_unlock>
 80098ac:	e797      	b.n	80097de <_malloc_r+0x22>
 80098ae:	6025      	str	r5, [r4, #0]
 80098b0:	e7dc      	b.n	800986c <_malloc_r+0xb0>
 80098b2:	605b      	str	r3, [r3, #4]
 80098b4:	deff      	udf	#255	; 0xff
 80098b6:	bf00      	nop
 80098b8:	20000520 	.word	0x20000520

080098bc <__malloc_lock>:
 80098bc:	4801      	ldr	r0, [pc, #4]	; (80098c4 <__malloc_lock+0x8>)
 80098be:	f7ff b88a 	b.w	80089d6 <__retarget_lock_acquire_recursive>
 80098c2:	bf00      	nop
 80098c4:	2000051c 	.word	0x2000051c

080098c8 <__malloc_unlock>:
 80098c8:	4801      	ldr	r0, [pc, #4]	; (80098d0 <__malloc_unlock+0x8>)
 80098ca:	f7ff b885 	b.w	80089d8 <__retarget_lock_release_recursive>
 80098ce:	bf00      	nop
 80098d0:	2000051c 	.word	0x2000051c

080098d4 <_Balloc>:
 80098d4:	b570      	push	{r4, r5, r6, lr}
 80098d6:	69c6      	ldr	r6, [r0, #28]
 80098d8:	4604      	mov	r4, r0
 80098da:	460d      	mov	r5, r1
 80098dc:	b976      	cbnz	r6, 80098fc <_Balloc+0x28>
 80098de:	2010      	movs	r0, #16
 80098e0:	f7ff ff44 	bl	800976c <malloc>
 80098e4:	4602      	mov	r2, r0
 80098e6:	61e0      	str	r0, [r4, #28]
 80098e8:	b920      	cbnz	r0, 80098f4 <_Balloc+0x20>
 80098ea:	4b18      	ldr	r3, [pc, #96]	; (800994c <_Balloc+0x78>)
 80098ec:	4818      	ldr	r0, [pc, #96]	; (8009950 <_Balloc+0x7c>)
 80098ee:	216b      	movs	r1, #107	; 0x6b
 80098f0:	f000 fdaa 	bl	800a448 <__assert_func>
 80098f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80098f8:	6006      	str	r6, [r0, #0]
 80098fa:	60c6      	str	r6, [r0, #12]
 80098fc:	69e6      	ldr	r6, [r4, #28]
 80098fe:	68f3      	ldr	r3, [r6, #12]
 8009900:	b183      	cbz	r3, 8009924 <_Balloc+0x50>
 8009902:	69e3      	ldr	r3, [r4, #28]
 8009904:	68db      	ldr	r3, [r3, #12]
 8009906:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800990a:	b9b8      	cbnz	r0, 800993c <_Balloc+0x68>
 800990c:	2101      	movs	r1, #1
 800990e:	fa01 f605 	lsl.w	r6, r1, r5
 8009912:	1d72      	adds	r2, r6, #5
 8009914:	0092      	lsls	r2, r2, #2
 8009916:	4620      	mov	r0, r4
 8009918:	f000 fdb4 	bl	800a484 <_calloc_r>
 800991c:	b160      	cbz	r0, 8009938 <_Balloc+0x64>
 800991e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009922:	e00e      	b.n	8009942 <_Balloc+0x6e>
 8009924:	2221      	movs	r2, #33	; 0x21
 8009926:	2104      	movs	r1, #4
 8009928:	4620      	mov	r0, r4
 800992a:	f000 fdab 	bl	800a484 <_calloc_r>
 800992e:	69e3      	ldr	r3, [r4, #28]
 8009930:	60f0      	str	r0, [r6, #12]
 8009932:	68db      	ldr	r3, [r3, #12]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d1e4      	bne.n	8009902 <_Balloc+0x2e>
 8009938:	2000      	movs	r0, #0
 800993a:	bd70      	pop	{r4, r5, r6, pc}
 800993c:	6802      	ldr	r2, [r0, #0]
 800993e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009942:	2300      	movs	r3, #0
 8009944:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009948:	e7f7      	b.n	800993a <_Balloc+0x66>
 800994a:	bf00      	nop
 800994c:	0800abc1 	.word	0x0800abc1
 8009950:	0800ac41 	.word	0x0800ac41

08009954 <_Bfree>:
 8009954:	b570      	push	{r4, r5, r6, lr}
 8009956:	69c6      	ldr	r6, [r0, #28]
 8009958:	4605      	mov	r5, r0
 800995a:	460c      	mov	r4, r1
 800995c:	b976      	cbnz	r6, 800997c <_Bfree+0x28>
 800995e:	2010      	movs	r0, #16
 8009960:	f7ff ff04 	bl	800976c <malloc>
 8009964:	4602      	mov	r2, r0
 8009966:	61e8      	str	r0, [r5, #28]
 8009968:	b920      	cbnz	r0, 8009974 <_Bfree+0x20>
 800996a:	4b09      	ldr	r3, [pc, #36]	; (8009990 <_Bfree+0x3c>)
 800996c:	4809      	ldr	r0, [pc, #36]	; (8009994 <_Bfree+0x40>)
 800996e:	218f      	movs	r1, #143	; 0x8f
 8009970:	f000 fd6a 	bl	800a448 <__assert_func>
 8009974:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009978:	6006      	str	r6, [r0, #0]
 800997a:	60c6      	str	r6, [r0, #12]
 800997c:	b13c      	cbz	r4, 800998e <_Bfree+0x3a>
 800997e:	69eb      	ldr	r3, [r5, #28]
 8009980:	6862      	ldr	r2, [r4, #4]
 8009982:	68db      	ldr	r3, [r3, #12]
 8009984:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009988:	6021      	str	r1, [r4, #0]
 800998a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800998e:	bd70      	pop	{r4, r5, r6, pc}
 8009990:	0800abc1 	.word	0x0800abc1
 8009994:	0800ac41 	.word	0x0800ac41

08009998 <__multadd>:
 8009998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800999c:	690d      	ldr	r5, [r1, #16]
 800999e:	4607      	mov	r7, r0
 80099a0:	460c      	mov	r4, r1
 80099a2:	461e      	mov	r6, r3
 80099a4:	f101 0c14 	add.w	ip, r1, #20
 80099a8:	2000      	movs	r0, #0
 80099aa:	f8dc 3000 	ldr.w	r3, [ip]
 80099ae:	b299      	uxth	r1, r3
 80099b0:	fb02 6101 	mla	r1, r2, r1, r6
 80099b4:	0c1e      	lsrs	r6, r3, #16
 80099b6:	0c0b      	lsrs	r3, r1, #16
 80099b8:	fb02 3306 	mla	r3, r2, r6, r3
 80099bc:	b289      	uxth	r1, r1
 80099be:	3001      	adds	r0, #1
 80099c0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80099c4:	4285      	cmp	r5, r0
 80099c6:	f84c 1b04 	str.w	r1, [ip], #4
 80099ca:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80099ce:	dcec      	bgt.n	80099aa <__multadd+0x12>
 80099d0:	b30e      	cbz	r6, 8009a16 <__multadd+0x7e>
 80099d2:	68a3      	ldr	r3, [r4, #8]
 80099d4:	42ab      	cmp	r3, r5
 80099d6:	dc19      	bgt.n	8009a0c <__multadd+0x74>
 80099d8:	6861      	ldr	r1, [r4, #4]
 80099da:	4638      	mov	r0, r7
 80099dc:	3101      	adds	r1, #1
 80099de:	f7ff ff79 	bl	80098d4 <_Balloc>
 80099e2:	4680      	mov	r8, r0
 80099e4:	b928      	cbnz	r0, 80099f2 <__multadd+0x5a>
 80099e6:	4602      	mov	r2, r0
 80099e8:	4b0c      	ldr	r3, [pc, #48]	; (8009a1c <__multadd+0x84>)
 80099ea:	480d      	ldr	r0, [pc, #52]	; (8009a20 <__multadd+0x88>)
 80099ec:	21ba      	movs	r1, #186	; 0xba
 80099ee:	f000 fd2b 	bl	800a448 <__assert_func>
 80099f2:	6922      	ldr	r2, [r4, #16]
 80099f4:	3202      	adds	r2, #2
 80099f6:	f104 010c 	add.w	r1, r4, #12
 80099fa:	0092      	lsls	r2, r2, #2
 80099fc:	300c      	adds	r0, #12
 80099fe:	f000 fd15 	bl	800a42c <memcpy>
 8009a02:	4621      	mov	r1, r4
 8009a04:	4638      	mov	r0, r7
 8009a06:	f7ff ffa5 	bl	8009954 <_Bfree>
 8009a0a:	4644      	mov	r4, r8
 8009a0c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009a10:	3501      	adds	r5, #1
 8009a12:	615e      	str	r6, [r3, #20]
 8009a14:	6125      	str	r5, [r4, #16]
 8009a16:	4620      	mov	r0, r4
 8009a18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a1c:	0800ac30 	.word	0x0800ac30
 8009a20:	0800ac41 	.word	0x0800ac41

08009a24 <__hi0bits>:
 8009a24:	0c03      	lsrs	r3, r0, #16
 8009a26:	041b      	lsls	r3, r3, #16
 8009a28:	b9d3      	cbnz	r3, 8009a60 <__hi0bits+0x3c>
 8009a2a:	0400      	lsls	r0, r0, #16
 8009a2c:	2310      	movs	r3, #16
 8009a2e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009a32:	bf04      	itt	eq
 8009a34:	0200      	lsleq	r0, r0, #8
 8009a36:	3308      	addeq	r3, #8
 8009a38:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009a3c:	bf04      	itt	eq
 8009a3e:	0100      	lsleq	r0, r0, #4
 8009a40:	3304      	addeq	r3, #4
 8009a42:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009a46:	bf04      	itt	eq
 8009a48:	0080      	lsleq	r0, r0, #2
 8009a4a:	3302      	addeq	r3, #2
 8009a4c:	2800      	cmp	r0, #0
 8009a4e:	db05      	blt.n	8009a5c <__hi0bits+0x38>
 8009a50:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009a54:	f103 0301 	add.w	r3, r3, #1
 8009a58:	bf08      	it	eq
 8009a5a:	2320      	moveq	r3, #32
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	4770      	bx	lr
 8009a60:	2300      	movs	r3, #0
 8009a62:	e7e4      	b.n	8009a2e <__hi0bits+0xa>

08009a64 <__lo0bits>:
 8009a64:	6803      	ldr	r3, [r0, #0]
 8009a66:	f013 0207 	ands.w	r2, r3, #7
 8009a6a:	d00c      	beq.n	8009a86 <__lo0bits+0x22>
 8009a6c:	07d9      	lsls	r1, r3, #31
 8009a6e:	d422      	bmi.n	8009ab6 <__lo0bits+0x52>
 8009a70:	079a      	lsls	r2, r3, #30
 8009a72:	bf49      	itett	mi
 8009a74:	085b      	lsrmi	r3, r3, #1
 8009a76:	089b      	lsrpl	r3, r3, #2
 8009a78:	6003      	strmi	r3, [r0, #0]
 8009a7a:	2201      	movmi	r2, #1
 8009a7c:	bf5c      	itt	pl
 8009a7e:	6003      	strpl	r3, [r0, #0]
 8009a80:	2202      	movpl	r2, #2
 8009a82:	4610      	mov	r0, r2
 8009a84:	4770      	bx	lr
 8009a86:	b299      	uxth	r1, r3
 8009a88:	b909      	cbnz	r1, 8009a8e <__lo0bits+0x2a>
 8009a8a:	0c1b      	lsrs	r3, r3, #16
 8009a8c:	2210      	movs	r2, #16
 8009a8e:	b2d9      	uxtb	r1, r3
 8009a90:	b909      	cbnz	r1, 8009a96 <__lo0bits+0x32>
 8009a92:	3208      	adds	r2, #8
 8009a94:	0a1b      	lsrs	r3, r3, #8
 8009a96:	0719      	lsls	r1, r3, #28
 8009a98:	bf04      	itt	eq
 8009a9a:	091b      	lsreq	r3, r3, #4
 8009a9c:	3204      	addeq	r2, #4
 8009a9e:	0799      	lsls	r1, r3, #30
 8009aa0:	bf04      	itt	eq
 8009aa2:	089b      	lsreq	r3, r3, #2
 8009aa4:	3202      	addeq	r2, #2
 8009aa6:	07d9      	lsls	r1, r3, #31
 8009aa8:	d403      	bmi.n	8009ab2 <__lo0bits+0x4e>
 8009aaa:	085b      	lsrs	r3, r3, #1
 8009aac:	f102 0201 	add.w	r2, r2, #1
 8009ab0:	d003      	beq.n	8009aba <__lo0bits+0x56>
 8009ab2:	6003      	str	r3, [r0, #0]
 8009ab4:	e7e5      	b.n	8009a82 <__lo0bits+0x1e>
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	e7e3      	b.n	8009a82 <__lo0bits+0x1e>
 8009aba:	2220      	movs	r2, #32
 8009abc:	e7e1      	b.n	8009a82 <__lo0bits+0x1e>
	...

08009ac0 <__i2b>:
 8009ac0:	b510      	push	{r4, lr}
 8009ac2:	460c      	mov	r4, r1
 8009ac4:	2101      	movs	r1, #1
 8009ac6:	f7ff ff05 	bl	80098d4 <_Balloc>
 8009aca:	4602      	mov	r2, r0
 8009acc:	b928      	cbnz	r0, 8009ada <__i2b+0x1a>
 8009ace:	4b05      	ldr	r3, [pc, #20]	; (8009ae4 <__i2b+0x24>)
 8009ad0:	4805      	ldr	r0, [pc, #20]	; (8009ae8 <__i2b+0x28>)
 8009ad2:	f240 1145 	movw	r1, #325	; 0x145
 8009ad6:	f000 fcb7 	bl	800a448 <__assert_func>
 8009ada:	2301      	movs	r3, #1
 8009adc:	6144      	str	r4, [r0, #20]
 8009ade:	6103      	str	r3, [r0, #16]
 8009ae0:	bd10      	pop	{r4, pc}
 8009ae2:	bf00      	nop
 8009ae4:	0800ac30 	.word	0x0800ac30
 8009ae8:	0800ac41 	.word	0x0800ac41

08009aec <__multiply>:
 8009aec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009af0:	4691      	mov	r9, r2
 8009af2:	690a      	ldr	r2, [r1, #16]
 8009af4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009af8:	429a      	cmp	r2, r3
 8009afa:	bfb8      	it	lt
 8009afc:	460b      	movlt	r3, r1
 8009afe:	460c      	mov	r4, r1
 8009b00:	bfbc      	itt	lt
 8009b02:	464c      	movlt	r4, r9
 8009b04:	4699      	movlt	r9, r3
 8009b06:	6927      	ldr	r7, [r4, #16]
 8009b08:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009b0c:	68a3      	ldr	r3, [r4, #8]
 8009b0e:	6861      	ldr	r1, [r4, #4]
 8009b10:	eb07 060a 	add.w	r6, r7, sl
 8009b14:	42b3      	cmp	r3, r6
 8009b16:	b085      	sub	sp, #20
 8009b18:	bfb8      	it	lt
 8009b1a:	3101      	addlt	r1, #1
 8009b1c:	f7ff feda 	bl	80098d4 <_Balloc>
 8009b20:	b930      	cbnz	r0, 8009b30 <__multiply+0x44>
 8009b22:	4602      	mov	r2, r0
 8009b24:	4b44      	ldr	r3, [pc, #272]	; (8009c38 <__multiply+0x14c>)
 8009b26:	4845      	ldr	r0, [pc, #276]	; (8009c3c <__multiply+0x150>)
 8009b28:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8009b2c:	f000 fc8c 	bl	800a448 <__assert_func>
 8009b30:	f100 0514 	add.w	r5, r0, #20
 8009b34:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009b38:	462b      	mov	r3, r5
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	4543      	cmp	r3, r8
 8009b3e:	d321      	bcc.n	8009b84 <__multiply+0x98>
 8009b40:	f104 0314 	add.w	r3, r4, #20
 8009b44:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009b48:	f109 0314 	add.w	r3, r9, #20
 8009b4c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009b50:	9202      	str	r2, [sp, #8]
 8009b52:	1b3a      	subs	r2, r7, r4
 8009b54:	3a15      	subs	r2, #21
 8009b56:	f022 0203 	bic.w	r2, r2, #3
 8009b5a:	3204      	adds	r2, #4
 8009b5c:	f104 0115 	add.w	r1, r4, #21
 8009b60:	428f      	cmp	r7, r1
 8009b62:	bf38      	it	cc
 8009b64:	2204      	movcc	r2, #4
 8009b66:	9201      	str	r2, [sp, #4]
 8009b68:	9a02      	ldr	r2, [sp, #8]
 8009b6a:	9303      	str	r3, [sp, #12]
 8009b6c:	429a      	cmp	r2, r3
 8009b6e:	d80c      	bhi.n	8009b8a <__multiply+0x9e>
 8009b70:	2e00      	cmp	r6, #0
 8009b72:	dd03      	ble.n	8009b7c <__multiply+0x90>
 8009b74:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d05b      	beq.n	8009c34 <__multiply+0x148>
 8009b7c:	6106      	str	r6, [r0, #16]
 8009b7e:	b005      	add	sp, #20
 8009b80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b84:	f843 2b04 	str.w	r2, [r3], #4
 8009b88:	e7d8      	b.n	8009b3c <__multiply+0x50>
 8009b8a:	f8b3 a000 	ldrh.w	sl, [r3]
 8009b8e:	f1ba 0f00 	cmp.w	sl, #0
 8009b92:	d024      	beq.n	8009bde <__multiply+0xf2>
 8009b94:	f104 0e14 	add.w	lr, r4, #20
 8009b98:	46a9      	mov	r9, r5
 8009b9a:	f04f 0c00 	mov.w	ip, #0
 8009b9e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009ba2:	f8d9 1000 	ldr.w	r1, [r9]
 8009ba6:	fa1f fb82 	uxth.w	fp, r2
 8009baa:	b289      	uxth	r1, r1
 8009bac:	fb0a 110b 	mla	r1, sl, fp, r1
 8009bb0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009bb4:	f8d9 2000 	ldr.w	r2, [r9]
 8009bb8:	4461      	add	r1, ip
 8009bba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009bbe:	fb0a c20b 	mla	r2, sl, fp, ip
 8009bc2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009bc6:	b289      	uxth	r1, r1
 8009bc8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009bcc:	4577      	cmp	r7, lr
 8009bce:	f849 1b04 	str.w	r1, [r9], #4
 8009bd2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009bd6:	d8e2      	bhi.n	8009b9e <__multiply+0xb2>
 8009bd8:	9a01      	ldr	r2, [sp, #4]
 8009bda:	f845 c002 	str.w	ip, [r5, r2]
 8009bde:	9a03      	ldr	r2, [sp, #12]
 8009be0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009be4:	3304      	adds	r3, #4
 8009be6:	f1b9 0f00 	cmp.w	r9, #0
 8009bea:	d021      	beq.n	8009c30 <__multiply+0x144>
 8009bec:	6829      	ldr	r1, [r5, #0]
 8009bee:	f104 0c14 	add.w	ip, r4, #20
 8009bf2:	46ae      	mov	lr, r5
 8009bf4:	f04f 0a00 	mov.w	sl, #0
 8009bf8:	f8bc b000 	ldrh.w	fp, [ip]
 8009bfc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009c00:	fb09 220b 	mla	r2, r9, fp, r2
 8009c04:	4452      	add	r2, sl
 8009c06:	b289      	uxth	r1, r1
 8009c08:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009c0c:	f84e 1b04 	str.w	r1, [lr], #4
 8009c10:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009c14:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009c18:	f8be 1000 	ldrh.w	r1, [lr]
 8009c1c:	fb09 110a 	mla	r1, r9, sl, r1
 8009c20:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8009c24:	4567      	cmp	r7, ip
 8009c26:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009c2a:	d8e5      	bhi.n	8009bf8 <__multiply+0x10c>
 8009c2c:	9a01      	ldr	r2, [sp, #4]
 8009c2e:	50a9      	str	r1, [r5, r2]
 8009c30:	3504      	adds	r5, #4
 8009c32:	e799      	b.n	8009b68 <__multiply+0x7c>
 8009c34:	3e01      	subs	r6, #1
 8009c36:	e79b      	b.n	8009b70 <__multiply+0x84>
 8009c38:	0800ac30 	.word	0x0800ac30
 8009c3c:	0800ac41 	.word	0x0800ac41

08009c40 <__pow5mult>:
 8009c40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c44:	4615      	mov	r5, r2
 8009c46:	f012 0203 	ands.w	r2, r2, #3
 8009c4a:	4606      	mov	r6, r0
 8009c4c:	460f      	mov	r7, r1
 8009c4e:	d007      	beq.n	8009c60 <__pow5mult+0x20>
 8009c50:	4c25      	ldr	r4, [pc, #148]	; (8009ce8 <__pow5mult+0xa8>)
 8009c52:	3a01      	subs	r2, #1
 8009c54:	2300      	movs	r3, #0
 8009c56:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009c5a:	f7ff fe9d 	bl	8009998 <__multadd>
 8009c5e:	4607      	mov	r7, r0
 8009c60:	10ad      	asrs	r5, r5, #2
 8009c62:	d03d      	beq.n	8009ce0 <__pow5mult+0xa0>
 8009c64:	69f4      	ldr	r4, [r6, #28]
 8009c66:	b97c      	cbnz	r4, 8009c88 <__pow5mult+0x48>
 8009c68:	2010      	movs	r0, #16
 8009c6a:	f7ff fd7f 	bl	800976c <malloc>
 8009c6e:	4602      	mov	r2, r0
 8009c70:	61f0      	str	r0, [r6, #28]
 8009c72:	b928      	cbnz	r0, 8009c80 <__pow5mult+0x40>
 8009c74:	4b1d      	ldr	r3, [pc, #116]	; (8009cec <__pow5mult+0xac>)
 8009c76:	481e      	ldr	r0, [pc, #120]	; (8009cf0 <__pow5mult+0xb0>)
 8009c78:	f240 11b3 	movw	r1, #435	; 0x1b3
 8009c7c:	f000 fbe4 	bl	800a448 <__assert_func>
 8009c80:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009c84:	6004      	str	r4, [r0, #0]
 8009c86:	60c4      	str	r4, [r0, #12]
 8009c88:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8009c8c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009c90:	b94c      	cbnz	r4, 8009ca6 <__pow5mult+0x66>
 8009c92:	f240 2171 	movw	r1, #625	; 0x271
 8009c96:	4630      	mov	r0, r6
 8009c98:	f7ff ff12 	bl	8009ac0 <__i2b>
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009ca2:	4604      	mov	r4, r0
 8009ca4:	6003      	str	r3, [r0, #0]
 8009ca6:	f04f 0900 	mov.w	r9, #0
 8009caa:	07eb      	lsls	r3, r5, #31
 8009cac:	d50a      	bpl.n	8009cc4 <__pow5mult+0x84>
 8009cae:	4639      	mov	r1, r7
 8009cb0:	4622      	mov	r2, r4
 8009cb2:	4630      	mov	r0, r6
 8009cb4:	f7ff ff1a 	bl	8009aec <__multiply>
 8009cb8:	4639      	mov	r1, r7
 8009cba:	4680      	mov	r8, r0
 8009cbc:	4630      	mov	r0, r6
 8009cbe:	f7ff fe49 	bl	8009954 <_Bfree>
 8009cc2:	4647      	mov	r7, r8
 8009cc4:	106d      	asrs	r5, r5, #1
 8009cc6:	d00b      	beq.n	8009ce0 <__pow5mult+0xa0>
 8009cc8:	6820      	ldr	r0, [r4, #0]
 8009cca:	b938      	cbnz	r0, 8009cdc <__pow5mult+0x9c>
 8009ccc:	4622      	mov	r2, r4
 8009cce:	4621      	mov	r1, r4
 8009cd0:	4630      	mov	r0, r6
 8009cd2:	f7ff ff0b 	bl	8009aec <__multiply>
 8009cd6:	6020      	str	r0, [r4, #0]
 8009cd8:	f8c0 9000 	str.w	r9, [r0]
 8009cdc:	4604      	mov	r4, r0
 8009cde:	e7e4      	b.n	8009caa <__pow5mult+0x6a>
 8009ce0:	4638      	mov	r0, r7
 8009ce2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ce6:	bf00      	nop
 8009ce8:	0800ad90 	.word	0x0800ad90
 8009cec:	0800abc1 	.word	0x0800abc1
 8009cf0:	0800ac41 	.word	0x0800ac41

08009cf4 <__lshift>:
 8009cf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009cf8:	460c      	mov	r4, r1
 8009cfa:	6849      	ldr	r1, [r1, #4]
 8009cfc:	6923      	ldr	r3, [r4, #16]
 8009cfe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009d02:	68a3      	ldr	r3, [r4, #8]
 8009d04:	4607      	mov	r7, r0
 8009d06:	4691      	mov	r9, r2
 8009d08:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009d0c:	f108 0601 	add.w	r6, r8, #1
 8009d10:	42b3      	cmp	r3, r6
 8009d12:	db0b      	blt.n	8009d2c <__lshift+0x38>
 8009d14:	4638      	mov	r0, r7
 8009d16:	f7ff fddd 	bl	80098d4 <_Balloc>
 8009d1a:	4605      	mov	r5, r0
 8009d1c:	b948      	cbnz	r0, 8009d32 <__lshift+0x3e>
 8009d1e:	4602      	mov	r2, r0
 8009d20:	4b28      	ldr	r3, [pc, #160]	; (8009dc4 <__lshift+0xd0>)
 8009d22:	4829      	ldr	r0, [pc, #164]	; (8009dc8 <__lshift+0xd4>)
 8009d24:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8009d28:	f000 fb8e 	bl	800a448 <__assert_func>
 8009d2c:	3101      	adds	r1, #1
 8009d2e:	005b      	lsls	r3, r3, #1
 8009d30:	e7ee      	b.n	8009d10 <__lshift+0x1c>
 8009d32:	2300      	movs	r3, #0
 8009d34:	f100 0114 	add.w	r1, r0, #20
 8009d38:	f100 0210 	add.w	r2, r0, #16
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	4553      	cmp	r3, sl
 8009d40:	db33      	blt.n	8009daa <__lshift+0xb6>
 8009d42:	6920      	ldr	r0, [r4, #16]
 8009d44:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009d48:	f104 0314 	add.w	r3, r4, #20
 8009d4c:	f019 091f 	ands.w	r9, r9, #31
 8009d50:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009d54:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009d58:	d02b      	beq.n	8009db2 <__lshift+0xbe>
 8009d5a:	f1c9 0e20 	rsb	lr, r9, #32
 8009d5e:	468a      	mov	sl, r1
 8009d60:	2200      	movs	r2, #0
 8009d62:	6818      	ldr	r0, [r3, #0]
 8009d64:	fa00 f009 	lsl.w	r0, r0, r9
 8009d68:	4310      	orrs	r0, r2
 8009d6a:	f84a 0b04 	str.w	r0, [sl], #4
 8009d6e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d72:	459c      	cmp	ip, r3
 8009d74:	fa22 f20e 	lsr.w	r2, r2, lr
 8009d78:	d8f3      	bhi.n	8009d62 <__lshift+0x6e>
 8009d7a:	ebac 0304 	sub.w	r3, ip, r4
 8009d7e:	3b15      	subs	r3, #21
 8009d80:	f023 0303 	bic.w	r3, r3, #3
 8009d84:	3304      	adds	r3, #4
 8009d86:	f104 0015 	add.w	r0, r4, #21
 8009d8a:	4584      	cmp	ip, r0
 8009d8c:	bf38      	it	cc
 8009d8e:	2304      	movcc	r3, #4
 8009d90:	50ca      	str	r2, [r1, r3]
 8009d92:	b10a      	cbz	r2, 8009d98 <__lshift+0xa4>
 8009d94:	f108 0602 	add.w	r6, r8, #2
 8009d98:	3e01      	subs	r6, #1
 8009d9a:	4638      	mov	r0, r7
 8009d9c:	612e      	str	r6, [r5, #16]
 8009d9e:	4621      	mov	r1, r4
 8009da0:	f7ff fdd8 	bl	8009954 <_Bfree>
 8009da4:	4628      	mov	r0, r5
 8009da6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009daa:	f842 0f04 	str.w	r0, [r2, #4]!
 8009dae:	3301      	adds	r3, #1
 8009db0:	e7c5      	b.n	8009d3e <__lshift+0x4a>
 8009db2:	3904      	subs	r1, #4
 8009db4:	f853 2b04 	ldr.w	r2, [r3], #4
 8009db8:	f841 2f04 	str.w	r2, [r1, #4]!
 8009dbc:	459c      	cmp	ip, r3
 8009dbe:	d8f9      	bhi.n	8009db4 <__lshift+0xc0>
 8009dc0:	e7ea      	b.n	8009d98 <__lshift+0xa4>
 8009dc2:	bf00      	nop
 8009dc4:	0800ac30 	.word	0x0800ac30
 8009dc8:	0800ac41 	.word	0x0800ac41

08009dcc <__mcmp>:
 8009dcc:	b530      	push	{r4, r5, lr}
 8009dce:	6902      	ldr	r2, [r0, #16]
 8009dd0:	690c      	ldr	r4, [r1, #16]
 8009dd2:	1b12      	subs	r2, r2, r4
 8009dd4:	d10e      	bne.n	8009df4 <__mcmp+0x28>
 8009dd6:	f100 0314 	add.w	r3, r0, #20
 8009dda:	3114      	adds	r1, #20
 8009ddc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009de0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009de4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009de8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009dec:	42a5      	cmp	r5, r4
 8009dee:	d003      	beq.n	8009df8 <__mcmp+0x2c>
 8009df0:	d305      	bcc.n	8009dfe <__mcmp+0x32>
 8009df2:	2201      	movs	r2, #1
 8009df4:	4610      	mov	r0, r2
 8009df6:	bd30      	pop	{r4, r5, pc}
 8009df8:	4283      	cmp	r3, r0
 8009dfa:	d3f3      	bcc.n	8009de4 <__mcmp+0x18>
 8009dfc:	e7fa      	b.n	8009df4 <__mcmp+0x28>
 8009dfe:	f04f 32ff 	mov.w	r2, #4294967295
 8009e02:	e7f7      	b.n	8009df4 <__mcmp+0x28>

08009e04 <__mdiff>:
 8009e04:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e08:	460c      	mov	r4, r1
 8009e0a:	4606      	mov	r6, r0
 8009e0c:	4611      	mov	r1, r2
 8009e0e:	4620      	mov	r0, r4
 8009e10:	4690      	mov	r8, r2
 8009e12:	f7ff ffdb 	bl	8009dcc <__mcmp>
 8009e16:	1e05      	subs	r5, r0, #0
 8009e18:	d110      	bne.n	8009e3c <__mdiff+0x38>
 8009e1a:	4629      	mov	r1, r5
 8009e1c:	4630      	mov	r0, r6
 8009e1e:	f7ff fd59 	bl	80098d4 <_Balloc>
 8009e22:	b930      	cbnz	r0, 8009e32 <__mdiff+0x2e>
 8009e24:	4b3a      	ldr	r3, [pc, #232]	; (8009f10 <__mdiff+0x10c>)
 8009e26:	4602      	mov	r2, r0
 8009e28:	f240 2137 	movw	r1, #567	; 0x237
 8009e2c:	4839      	ldr	r0, [pc, #228]	; (8009f14 <__mdiff+0x110>)
 8009e2e:	f000 fb0b 	bl	800a448 <__assert_func>
 8009e32:	2301      	movs	r3, #1
 8009e34:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009e38:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e3c:	bfa4      	itt	ge
 8009e3e:	4643      	movge	r3, r8
 8009e40:	46a0      	movge	r8, r4
 8009e42:	4630      	mov	r0, r6
 8009e44:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009e48:	bfa6      	itte	ge
 8009e4a:	461c      	movge	r4, r3
 8009e4c:	2500      	movge	r5, #0
 8009e4e:	2501      	movlt	r5, #1
 8009e50:	f7ff fd40 	bl	80098d4 <_Balloc>
 8009e54:	b920      	cbnz	r0, 8009e60 <__mdiff+0x5c>
 8009e56:	4b2e      	ldr	r3, [pc, #184]	; (8009f10 <__mdiff+0x10c>)
 8009e58:	4602      	mov	r2, r0
 8009e5a:	f240 2145 	movw	r1, #581	; 0x245
 8009e5e:	e7e5      	b.n	8009e2c <__mdiff+0x28>
 8009e60:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009e64:	6926      	ldr	r6, [r4, #16]
 8009e66:	60c5      	str	r5, [r0, #12]
 8009e68:	f104 0914 	add.w	r9, r4, #20
 8009e6c:	f108 0514 	add.w	r5, r8, #20
 8009e70:	f100 0e14 	add.w	lr, r0, #20
 8009e74:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009e78:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009e7c:	f108 0210 	add.w	r2, r8, #16
 8009e80:	46f2      	mov	sl, lr
 8009e82:	2100      	movs	r1, #0
 8009e84:	f859 3b04 	ldr.w	r3, [r9], #4
 8009e88:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009e8c:	fa11 f88b 	uxtah	r8, r1, fp
 8009e90:	b299      	uxth	r1, r3
 8009e92:	0c1b      	lsrs	r3, r3, #16
 8009e94:	eba8 0801 	sub.w	r8, r8, r1
 8009e98:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009e9c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009ea0:	fa1f f888 	uxth.w	r8, r8
 8009ea4:	1419      	asrs	r1, r3, #16
 8009ea6:	454e      	cmp	r6, r9
 8009ea8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009eac:	f84a 3b04 	str.w	r3, [sl], #4
 8009eb0:	d8e8      	bhi.n	8009e84 <__mdiff+0x80>
 8009eb2:	1b33      	subs	r3, r6, r4
 8009eb4:	3b15      	subs	r3, #21
 8009eb6:	f023 0303 	bic.w	r3, r3, #3
 8009eba:	3304      	adds	r3, #4
 8009ebc:	3415      	adds	r4, #21
 8009ebe:	42a6      	cmp	r6, r4
 8009ec0:	bf38      	it	cc
 8009ec2:	2304      	movcc	r3, #4
 8009ec4:	441d      	add	r5, r3
 8009ec6:	4473      	add	r3, lr
 8009ec8:	469e      	mov	lr, r3
 8009eca:	462e      	mov	r6, r5
 8009ecc:	4566      	cmp	r6, ip
 8009ece:	d30e      	bcc.n	8009eee <__mdiff+0xea>
 8009ed0:	f10c 0203 	add.w	r2, ip, #3
 8009ed4:	1b52      	subs	r2, r2, r5
 8009ed6:	f022 0203 	bic.w	r2, r2, #3
 8009eda:	3d03      	subs	r5, #3
 8009edc:	45ac      	cmp	ip, r5
 8009ede:	bf38      	it	cc
 8009ee0:	2200      	movcc	r2, #0
 8009ee2:	4413      	add	r3, r2
 8009ee4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009ee8:	b17a      	cbz	r2, 8009f0a <__mdiff+0x106>
 8009eea:	6107      	str	r7, [r0, #16]
 8009eec:	e7a4      	b.n	8009e38 <__mdiff+0x34>
 8009eee:	f856 8b04 	ldr.w	r8, [r6], #4
 8009ef2:	fa11 f288 	uxtah	r2, r1, r8
 8009ef6:	1414      	asrs	r4, r2, #16
 8009ef8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009efc:	b292      	uxth	r2, r2
 8009efe:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009f02:	f84e 2b04 	str.w	r2, [lr], #4
 8009f06:	1421      	asrs	r1, r4, #16
 8009f08:	e7e0      	b.n	8009ecc <__mdiff+0xc8>
 8009f0a:	3f01      	subs	r7, #1
 8009f0c:	e7ea      	b.n	8009ee4 <__mdiff+0xe0>
 8009f0e:	bf00      	nop
 8009f10:	0800ac30 	.word	0x0800ac30
 8009f14:	0800ac41 	.word	0x0800ac41

08009f18 <__d2b>:
 8009f18:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009f1c:	460f      	mov	r7, r1
 8009f1e:	2101      	movs	r1, #1
 8009f20:	ec59 8b10 	vmov	r8, r9, d0
 8009f24:	4616      	mov	r6, r2
 8009f26:	f7ff fcd5 	bl	80098d4 <_Balloc>
 8009f2a:	4604      	mov	r4, r0
 8009f2c:	b930      	cbnz	r0, 8009f3c <__d2b+0x24>
 8009f2e:	4602      	mov	r2, r0
 8009f30:	4b24      	ldr	r3, [pc, #144]	; (8009fc4 <__d2b+0xac>)
 8009f32:	4825      	ldr	r0, [pc, #148]	; (8009fc8 <__d2b+0xb0>)
 8009f34:	f240 310f 	movw	r1, #783	; 0x30f
 8009f38:	f000 fa86 	bl	800a448 <__assert_func>
 8009f3c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009f40:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009f44:	bb2d      	cbnz	r5, 8009f92 <__d2b+0x7a>
 8009f46:	9301      	str	r3, [sp, #4]
 8009f48:	f1b8 0300 	subs.w	r3, r8, #0
 8009f4c:	d026      	beq.n	8009f9c <__d2b+0x84>
 8009f4e:	4668      	mov	r0, sp
 8009f50:	9300      	str	r3, [sp, #0]
 8009f52:	f7ff fd87 	bl	8009a64 <__lo0bits>
 8009f56:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009f5a:	b1e8      	cbz	r0, 8009f98 <__d2b+0x80>
 8009f5c:	f1c0 0320 	rsb	r3, r0, #32
 8009f60:	fa02 f303 	lsl.w	r3, r2, r3
 8009f64:	430b      	orrs	r3, r1
 8009f66:	40c2      	lsrs	r2, r0
 8009f68:	6163      	str	r3, [r4, #20]
 8009f6a:	9201      	str	r2, [sp, #4]
 8009f6c:	9b01      	ldr	r3, [sp, #4]
 8009f6e:	61a3      	str	r3, [r4, #24]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	bf14      	ite	ne
 8009f74:	2202      	movne	r2, #2
 8009f76:	2201      	moveq	r2, #1
 8009f78:	6122      	str	r2, [r4, #16]
 8009f7a:	b1bd      	cbz	r5, 8009fac <__d2b+0x94>
 8009f7c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009f80:	4405      	add	r5, r0
 8009f82:	603d      	str	r5, [r7, #0]
 8009f84:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009f88:	6030      	str	r0, [r6, #0]
 8009f8a:	4620      	mov	r0, r4
 8009f8c:	b003      	add	sp, #12
 8009f8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009f92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009f96:	e7d6      	b.n	8009f46 <__d2b+0x2e>
 8009f98:	6161      	str	r1, [r4, #20]
 8009f9a:	e7e7      	b.n	8009f6c <__d2b+0x54>
 8009f9c:	a801      	add	r0, sp, #4
 8009f9e:	f7ff fd61 	bl	8009a64 <__lo0bits>
 8009fa2:	9b01      	ldr	r3, [sp, #4]
 8009fa4:	6163      	str	r3, [r4, #20]
 8009fa6:	3020      	adds	r0, #32
 8009fa8:	2201      	movs	r2, #1
 8009faa:	e7e5      	b.n	8009f78 <__d2b+0x60>
 8009fac:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009fb0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009fb4:	6038      	str	r0, [r7, #0]
 8009fb6:	6918      	ldr	r0, [r3, #16]
 8009fb8:	f7ff fd34 	bl	8009a24 <__hi0bits>
 8009fbc:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009fc0:	e7e2      	b.n	8009f88 <__d2b+0x70>
 8009fc2:	bf00      	nop
 8009fc4:	0800ac30 	.word	0x0800ac30
 8009fc8:	0800ac41 	.word	0x0800ac41

08009fcc <__ssputs_r>:
 8009fcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009fd0:	688e      	ldr	r6, [r1, #8]
 8009fd2:	461f      	mov	r7, r3
 8009fd4:	42be      	cmp	r6, r7
 8009fd6:	680b      	ldr	r3, [r1, #0]
 8009fd8:	4682      	mov	sl, r0
 8009fda:	460c      	mov	r4, r1
 8009fdc:	4690      	mov	r8, r2
 8009fde:	d82c      	bhi.n	800a03a <__ssputs_r+0x6e>
 8009fe0:	898a      	ldrh	r2, [r1, #12]
 8009fe2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009fe6:	d026      	beq.n	800a036 <__ssputs_r+0x6a>
 8009fe8:	6965      	ldr	r5, [r4, #20]
 8009fea:	6909      	ldr	r1, [r1, #16]
 8009fec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009ff0:	eba3 0901 	sub.w	r9, r3, r1
 8009ff4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009ff8:	1c7b      	adds	r3, r7, #1
 8009ffa:	444b      	add	r3, r9
 8009ffc:	106d      	asrs	r5, r5, #1
 8009ffe:	429d      	cmp	r5, r3
 800a000:	bf38      	it	cc
 800a002:	461d      	movcc	r5, r3
 800a004:	0553      	lsls	r3, r2, #21
 800a006:	d527      	bpl.n	800a058 <__ssputs_r+0x8c>
 800a008:	4629      	mov	r1, r5
 800a00a:	f7ff fbd7 	bl	80097bc <_malloc_r>
 800a00e:	4606      	mov	r6, r0
 800a010:	b360      	cbz	r0, 800a06c <__ssputs_r+0xa0>
 800a012:	6921      	ldr	r1, [r4, #16]
 800a014:	464a      	mov	r2, r9
 800a016:	f000 fa09 	bl	800a42c <memcpy>
 800a01a:	89a3      	ldrh	r3, [r4, #12]
 800a01c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a020:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a024:	81a3      	strh	r3, [r4, #12]
 800a026:	6126      	str	r6, [r4, #16]
 800a028:	6165      	str	r5, [r4, #20]
 800a02a:	444e      	add	r6, r9
 800a02c:	eba5 0509 	sub.w	r5, r5, r9
 800a030:	6026      	str	r6, [r4, #0]
 800a032:	60a5      	str	r5, [r4, #8]
 800a034:	463e      	mov	r6, r7
 800a036:	42be      	cmp	r6, r7
 800a038:	d900      	bls.n	800a03c <__ssputs_r+0x70>
 800a03a:	463e      	mov	r6, r7
 800a03c:	6820      	ldr	r0, [r4, #0]
 800a03e:	4632      	mov	r2, r6
 800a040:	4641      	mov	r1, r8
 800a042:	f000 f9c9 	bl	800a3d8 <memmove>
 800a046:	68a3      	ldr	r3, [r4, #8]
 800a048:	1b9b      	subs	r3, r3, r6
 800a04a:	60a3      	str	r3, [r4, #8]
 800a04c:	6823      	ldr	r3, [r4, #0]
 800a04e:	4433      	add	r3, r6
 800a050:	6023      	str	r3, [r4, #0]
 800a052:	2000      	movs	r0, #0
 800a054:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a058:	462a      	mov	r2, r5
 800a05a:	f000 fa3b 	bl	800a4d4 <_realloc_r>
 800a05e:	4606      	mov	r6, r0
 800a060:	2800      	cmp	r0, #0
 800a062:	d1e0      	bne.n	800a026 <__ssputs_r+0x5a>
 800a064:	6921      	ldr	r1, [r4, #16]
 800a066:	4650      	mov	r0, sl
 800a068:	f7ff fb34 	bl	80096d4 <_free_r>
 800a06c:	230c      	movs	r3, #12
 800a06e:	f8ca 3000 	str.w	r3, [sl]
 800a072:	89a3      	ldrh	r3, [r4, #12]
 800a074:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a078:	81a3      	strh	r3, [r4, #12]
 800a07a:	f04f 30ff 	mov.w	r0, #4294967295
 800a07e:	e7e9      	b.n	800a054 <__ssputs_r+0x88>

0800a080 <_svfiprintf_r>:
 800a080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a084:	4698      	mov	r8, r3
 800a086:	898b      	ldrh	r3, [r1, #12]
 800a088:	061b      	lsls	r3, r3, #24
 800a08a:	b09d      	sub	sp, #116	; 0x74
 800a08c:	4607      	mov	r7, r0
 800a08e:	460d      	mov	r5, r1
 800a090:	4614      	mov	r4, r2
 800a092:	d50e      	bpl.n	800a0b2 <_svfiprintf_r+0x32>
 800a094:	690b      	ldr	r3, [r1, #16]
 800a096:	b963      	cbnz	r3, 800a0b2 <_svfiprintf_r+0x32>
 800a098:	2140      	movs	r1, #64	; 0x40
 800a09a:	f7ff fb8f 	bl	80097bc <_malloc_r>
 800a09e:	6028      	str	r0, [r5, #0]
 800a0a0:	6128      	str	r0, [r5, #16]
 800a0a2:	b920      	cbnz	r0, 800a0ae <_svfiprintf_r+0x2e>
 800a0a4:	230c      	movs	r3, #12
 800a0a6:	603b      	str	r3, [r7, #0]
 800a0a8:	f04f 30ff 	mov.w	r0, #4294967295
 800a0ac:	e0d0      	b.n	800a250 <_svfiprintf_r+0x1d0>
 800a0ae:	2340      	movs	r3, #64	; 0x40
 800a0b0:	616b      	str	r3, [r5, #20]
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	9309      	str	r3, [sp, #36]	; 0x24
 800a0b6:	2320      	movs	r3, #32
 800a0b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a0bc:	f8cd 800c 	str.w	r8, [sp, #12]
 800a0c0:	2330      	movs	r3, #48	; 0x30
 800a0c2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a268 <_svfiprintf_r+0x1e8>
 800a0c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a0ca:	f04f 0901 	mov.w	r9, #1
 800a0ce:	4623      	mov	r3, r4
 800a0d0:	469a      	mov	sl, r3
 800a0d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a0d6:	b10a      	cbz	r2, 800a0dc <_svfiprintf_r+0x5c>
 800a0d8:	2a25      	cmp	r2, #37	; 0x25
 800a0da:	d1f9      	bne.n	800a0d0 <_svfiprintf_r+0x50>
 800a0dc:	ebba 0b04 	subs.w	fp, sl, r4
 800a0e0:	d00b      	beq.n	800a0fa <_svfiprintf_r+0x7a>
 800a0e2:	465b      	mov	r3, fp
 800a0e4:	4622      	mov	r2, r4
 800a0e6:	4629      	mov	r1, r5
 800a0e8:	4638      	mov	r0, r7
 800a0ea:	f7ff ff6f 	bl	8009fcc <__ssputs_r>
 800a0ee:	3001      	adds	r0, #1
 800a0f0:	f000 80a9 	beq.w	800a246 <_svfiprintf_r+0x1c6>
 800a0f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a0f6:	445a      	add	r2, fp
 800a0f8:	9209      	str	r2, [sp, #36]	; 0x24
 800a0fa:	f89a 3000 	ldrb.w	r3, [sl]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	f000 80a1 	beq.w	800a246 <_svfiprintf_r+0x1c6>
 800a104:	2300      	movs	r3, #0
 800a106:	f04f 32ff 	mov.w	r2, #4294967295
 800a10a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a10e:	f10a 0a01 	add.w	sl, sl, #1
 800a112:	9304      	str	r3, [sp, #16]
 800a114:	9307      	str	r3, [sp, #28]
 800a116:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a11a:	931a      	str	r3, [sp, #104]	; 0x68
 800a11c:	4654      	mov	r4, sl
 800a11e:	2205      	movs	r2, #5
 800a120:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a124:	4850      	ldr	r0, [pc, #320]	; (800a268 <_svfiprintf_r+0x1e8>)
 800a126:	f7f6 f853 	bl	80001d0 <memchr>
 800a12a:	9a04      	ldr	r2, [sp, #16]
 800a12c:	b9d8      	cbnz	r0, 800a166 <_svfiprintf_r+0xe6>
 800a12e:	06d0      	lsls	r0, r2, #27
 800a130:	bf44      	itt	mi
 800a132:	2320      	movmi	r3, #32
 800a134:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a138:	0711      	lsls	r1, r2, #28
 800a13a:	bf44      	itt	mi
 800a13c:	232b      	movmi	r3, #43	; 0x2b
 800a13e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a142:	f89a 3000 	ldrb.w	r3, [sl]
 800a146:	2b2a      	cmp	r3, #42	; 0x2a
 800a148:	d015      	beq.n	800a176 <_svfiprintf_r+0xf6>
 800a14a:	9a07      	ldr	r2, [sp, #28]
 800a14c:	4654      	mov	r4, sl
 800a14e:	2000      	movs	r0, #0
 800a150:	f04f 0c0a 	mov.w	ip, #10
 800a154:	4621      	mov	r1, r4
 800a156:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a15a:	3b30      	subs	r3, #48	; 0x30
 800a15c:	2b09      	cmp	r3, #9
 800a15e:	d94d      	bls.n	800a1fc <_svfiprintf_r+0x17c>
 800a160:	b1b0      	cbz	r0, 800a190 <_svfiprintf_r+0x110>
 800a162:	9207      	str	r2, [sp, #28]
 800a164:	e014      	b.n	800a190 <_svfiprintf_r+0x110>
 800a166:	eba0 0308 	sub.w	r3, r0, r8
 800a16a:	fa09 f303 	lsl.w	r3, r9, r3
 800a16e:	4313      	orrs	r3, r2
 800a170:	9304      	str	r3, [sp, #16]
 800a172:	46a2      	mov	sl, r4
 800a174:	e7d2      	b.n	800a11c <_svfiprintf_r+0x9c>
 800a176:	9b03      	ldr	r3, [sp, #12]
 800a178:	1d19      	adds	r1, r3, #4
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	9103      	str	r1, [sp, #12]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	bfbb      	ittet	lt
 800a182:	425b      	neglt	r3, r3
 800a184:	f042 0202 	orrlt.w	r2, r2, #2
 800a188:	9307      	strge	r3, [sp, #28]
 800a18a:	9307      	strlt	r3, [sp, #28]
 800a18c:	bfb8      	it	lt
 800a18e:	9204      	strlt	r2, [sp, #16]
 800a190:	7823      	ldrb	r3, [r4, #0]
 800a192:	2b2e      	cmp	r3, #46	; 0x2e
 800a194:	d10c      	bne.n	800a1b0 <_svfiprintf_r+0x130>
 800a196:	7863      	ldrb	r3, [r4, #1]
 800a198:	2b2a      	cmp	r3, #42	; 0x2a
 800a19a:	d134      	bne.n	800a206 <_svfiprintf_r+0x186>
 800a19c:	9b03      	ldr	r3, [sp, #12]
 800a19e:	1d1a      	adds	r2, r3, #4
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	9203      	str	r2, [sp, #12]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	bfb8      	it	lt
 800a1a8:	f04f 33ff 	movlt.w	r3, #4294967295
 800a1ac:	3402      	adds	r4, #2
 800a1ae:	9305      	str	r3, [sp, #20]
 800a1b0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800a278 <_svfiprintf_r+0x1f8>
 800a1b4:	7821      	ldrb	r1, [r4, #0]
 800a1b6:	2203      	movs	r2, #3
 800a1b8:	4650      	mov	r0, sl
 800a1ba:	f7f6 f809 	bl	80001d0 <memchr>
 800a1be:	b138      	cbz	r0, 800a1d0 <_svfiprintf_r+0x150>
 800a1c0:	9b04      	ldr	r3, [sp, #16]
 800a1c2:	eba0 000a 	sub.w	r0, r0, sl
 800a1c6:	2240      	movs	r2, #64	; 0x40
 800a1c8:	4082      	lsls	r2, r0
 800a1ca:	4313      	orrs	r3, r2
 800a1cc:	3401      	adds	r4, #1
 800a1ce:	9304      	str	r3, [sp, #16]
 800a1d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1d4:	4825      	ldr	r0, [pc, #148]	; (800a26c <_svfiprintf_r+0x1ec>)
 800a1d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a1da:	2206      	movs	r2, #6
 800a1dc:	f7f5 fff8 	bl	80001d0 <memchr>
 800a1e0:	2800      	cmp	r0, #0
 800a1e2:	d038      	beq.n	800a256 <_svfiprintf_r+0x1d6>
 800a1e4:	4b22      	ldr	r3, [pc, #136]	; (800a270 <_svfiprintf_r+0x1f0>)
 800a1e6:	bb1b      	cbnz	r3, 800a230 <_svfiprintf_r+0x1b0>
 800a1e8:	9b03      	ldr	r3, [sp, #12]
 800a1ea:	3307      	adds	r3, #7
 800a1ec:	f023 0307 	bic.w	r3, r3, #7
 800a1f0:	3308      	adds	r3, #8
 800a1f2:	9303      	str	r3, [sp, #12]
 800a1f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1f6:	4433      	add	r3, r6
 800a1f8:	9309      	str	r3, [sp, #36]	; 0x24
 800a1fa:	e768      	b.n	800a0ce <_svfiprintf_r+0x4e>
 800a1fc:	fb0c 3202 	mla	r2, ip, r2, r3
 800a200:	460c      	mov	r4, r1
 800a202:	2001      	movs	r0, #1
 800a204:	e7a6      	b.n	800a154 <_svfiprintf_r+0xd4>
 800a206:	2300      	movs	r3, #0
 800a208:	3401      	adds	r4, #1
 800a20a:	9305      	str	r3, [sp, #20]
 800a20c:	4619      	mov	r1, r3
 800a20e:	f04f 0c0a 	mov.w	ip, #10
 800a212:	4620      	mov	r0, r4
 800a214:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a218:	3a30      	subs	r2, #48	; 0x30
 800a21a:	2a09      	cmp	r2, #9
 800a21c:	d903      	bls.n	800a226 <_svfiprintf_r+0x1a6>
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d0c6      	beq.n	800a1b0 <_svfiprintf_r+0x130>
 800a222:	9105      	str	r1, [sp, #20]
 800a224:	e7c4      	b.n	800a1b0 <_svfiprintf_r+0x130>
 800a226:	fb0c 2101 	mla	r1, ip, r1, r2
 800a22a:	4604      	mov	r4, r0
 800a22c:	2301      	movs	r3, #1
 800a22e:	e7f0      	b.n	800a212 <_svfiprintf_r+0x192>
 800a230:	ab03      	add	r3, sp, #12
 800a232:	9300      	str	r3, [sp, #0]
 800a234:	462a      	mov	r2, r5
 800a236:	4b0f      	ldr	r3, [pc, #60]	; (800a274 <_svfiprintf_r+0x1f4>)
 800a238:	a904      	add	r1, sp, #16
 800a23a:	4638      	mov	r0, r7
 800a23c:	f7fd fe4e 	bl	8007edc <_printf_float>
 800a240:	1c42      	adds	r2, r0, #1
 800a242:	4606      	mov	r6, r0
 800a244:	d1d6      	bne.n	800a1f4 <_svfiprintf_r+0x174>
 800a246:	89ab      	ldrh	r3, [r5, #12]
 800a248:	065b      	lsls	r3, r3, #25
 800a24a:	f53f af2d 	bmi.w	800a0a8 <_svfiprintf_r+0x28>
 800a24e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a250:	b01d      	add	sp, #116	; 0x74
 800a252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a256:	ab03      	add	r3, sp, #12
 800a258:	9300      	str	r3, [sp, #0]
 800a25a:	462a      	mov	r2, r5
 800a25c:	4b05      	ldr	r3, [pc, #20]	; (800a274 <_svfiprintf_r+0x1f4>)
 800a25e:	a904      	add	r1, sp, #16
 800a260:	4638      	mov	r0, r7
 800a262:	f7fe f8df 	bl	8008424 <_printf_i>
 800a266:	e7eb      	b.n	800a240 <_svfiprintf_r+0x1c0>
 800a268:	0800ad9c 	.word	0x0800ad9c
 800a26c:	0800ada6 	.word	0x0800ada6
 800a270:	08007edd 	.word	0x08007edd
 800a274:	08009fcd 	.word	0x08009fcd
 800a278:	0800ada2 	.word	0x0800ada2

0800a27c <__sflush_r>:
 800a27c:	898a      	ldrh	r2, [r1, #12]
 800a27e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a282:	4605      	mov	r5, r0
 800a284:	0710      	lsls	r0, r2, #28
 800a286:	460c      	mov	r4, r1
 800a288:	d458      	bmi.n	800a33c <__sflush_r+0xc0>
 800a28a:	684b      	ldr	r3, [r1, #4]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	dc05      	bgt.n	800a29c <__sflush_r+0x20>
 800a290:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a292:	2b00      	cmp	r3, #0
 800a294:	dc02      	bgt.n	800a29c <__sflush_r+0x20>
 800a296:	2000      	movs	r0, #0
 800a298:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a29c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a29e:	2e00      	cmp	r6, #0
 800a2a0:	d0f9      	beq.n	800a296 <__sflush_r+0x1a>
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a2a8:	682f      	ldr	r7, [r5, #0]
 800a2aa:	6a21      	ldr	r1, [r4, #32]
 800a2ac:	602b      	str	r3, [r5, #0]
 800a2ae:	d032      	beq.n	800a316 <__sflush_r+0x9a>
 800a2b0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a2b2:	89a3      	ldrh	r3, [r4, #12]
 800a2b4:	075a      	lsls	r2, r3, #29
 800a2b6:	d505      	bpl.n	800a2c4 <__sflush_r+0x48>
 800a2b8:	6863      	ldr	r3, [r4, #4]
 800a2ba:	1ac0      	subs	r0, r0, r3
 800a2bc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a2be:	b10b      	cbz	r3, 800a2c4 <__sflush_r+0x48>
 800a2c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a2c2:	1ac0      	subs	r0, r0, r3
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	4602      	mov	r2, r0
 800a2c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a2ca:	6a21      	ldr	r1, [r4, #32]
 800a2cc:	4628      	mov	r0, r5
 800a2ce:	47b0      	blx	r6
 800a2d0:	1c43      	adds	r3, r0, #1
 800a2d2:	89a3      	ldrh	r3, [r4, #12]
 800a2d4:	d106      	bne.n	800a2e4 <__sflush_r+0x68>
 800a2d6:	6829      	ldr	r1, [r5, #0]
 800a2d8:	291d      	cmp	r1, #29
 800a2da:	d82b      	bhi.n	800a334 <__sflush_r+0xb8>
 800a2dc:	4a29      	ldr	r2, [pc, #164]	; (800a384 <__sflush_r+0x108>)
 800a2de:	410a      	asrs	r2, r1
 800a2e0:	07d6      	lsls	r6, r2, #31
 800a2e2:	d427      	bmi.n	800a334 <__sflush_r+0xb8>
 800a2e4:	2200      	movs	r2, #0
 800a2e6:	6062      	str	r2, [r4, #4]
 800a2e8:	04d9      	lsls	r1, r3, #19
 800a2ea:	6922      	ldr	r2, [r4, #16]
 800a2ec:	6022      	str	r2, [r4, #0]
 800a2ee:	d504      	bpl.n	800a2fa <__sflush_r+0x7e>
 800a2f0:	1c42      	adds	r2, r0, #1
 800a2f2:	d101      	bne.n	800a2f8 <__sflush_r+0x7c>
 800a2f4:	682b      	ldr	r3, [r5, #0]
 800a2f6:	b903      	cbnz	r3, 800a2fa <__sflush_r+0x7e>
 800a2f8:	6560      	str	r0, [r4, #84]	; 0x54
 800a2fa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a2fc:	602f      	str	r7, [r5, #0]
 800a2fe:	2900      	cmp	r1, #0
 800a300:	d0c9      	beq.n	800a296 <__sflush_r+0x1a>
 800a302:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a306:	4299      	cmp	r1, r3
 800a308:	d002      	beq.n	800a310 <__sflush_r+0x94>
 800a30a:	4628      	mov	r0, r5
 800a30c:	f7ff f9e2 	bl	80096d4 <_free_r>
 800a310:	2000      	movs	r0, #0
 800a312:	6360      	str	r0, [r4, #52]	; 0x34
 800a314:	e7c0      	b.n	800a298 <__sflush_r+0x1c>
 800a316:	2301      	movs	r3, #1
 800a318:	4628      	mov	r0, r5
 800a31a:	47b0      	blx	r6
 800a31c:	1c41      	adds	r1, r0, #1
 800a31e:	d1c8      	bne.n	800a2b2 <__sflush_r+0x36>
 800a320:	682b      	ldr	r3, [r5, #0]
 800a322:	2b00      	cmp	r3, #0
 800a324:	d0c5      	beq.n	800a2b2 <__sflush_r+0x36>
 800a326:	2b1d      	cmp	r3, #29
 800a328:	d001      	beq.n	800a32e <__sflush_r+0xb2>
 800a32a:	2b16      	cmp	r3, #22
 800a32c:	d101      	bne.n	800a332 <__sflush_r+0xb6>
 800a32e:	602f      	str	r7, [r5, #0]
 800a330:	e7b1      	b.n	800a296 <__sflush_r+0x1a>
 800a332:	89a3      	ldrh	r3, [r4, #12]
 800a334:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a338:	81a3      	strh	r3, [r4, #12]
 800a33a:	e7ad      	b.n	800a298 <__sflush_r+0x1c>
 800a33c:	690f      	ldr	r7, [r1, #16]
 800a33e:	2f00      	cmp	r7, #0
 800a340:	d0a9      	beq.n	800a296 <__sflush_r+0x1a>
 800a342:	0793      	lsls	r3, r2, #30
 800a344:	680e      	ldr	r6, [r1, #0]
 800a346:	bf08      	it	eq
 800a348:	694b      	ldreq	r3, [r1, #20]
 800a34a:	600f      	str	r7, [r1, #0]
 800a34c:	bf18      	it	ne
 800a34e:	2300      	movne	r3, #0
 800a350:	eba6 0807 	sub.w	r8, r6, r7
 800a354:	608b      	str	r3, [r1, #8]
 800a356:	f1b8 0f00 	cmp.w	r8, #0
 800a35a:	dd9c      	ble.n	800a296 <__sflush_r+0x1a>
 800a35c:	6a21      	ldr	r1, [r4, #32]
 800a35e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a360:	4643      	mov	r3, r8
 800a362:	463a      	mov	r2, r7
 800a364:	4628      	mov	r0, r5
 800a366:	47b0      	blx	r6
 800a368:	2800      	cmp	r0, #0
 800a36a:	dc06      	bgt.n	800a37a <__sflush_r+0xfe>
 800a36c:	89a3      	ldrh	r3, [r4, #12]
 800a36e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a372:	81a3      	strh	r3, [r4, #12]
 800a374:	f04f 30ff 	mov.w	r0, #4294967295
 800a378:	e78e      	b.n	800a298 <__sflush_r+0x1c>
 800a37a:	4407      	add	r7, r0
 800a37c:	eba8 0800 	sub.w	r8, r8, r0
 800a380:	e7e9      	b.n	800a356 <__sflush_r+0xda>
 800a382:	bf00      	nop
 800a384:	dfbffffe 	.word	0xdfbffffe

0800a388 <_fflush_r>:
 800a388:	b538      	push	{r3, r4, r5, lr}
 800a38a:	690b      	ldr	r3, [r1, #16]
 800a38c:	4605      	mov	r5, r0
 800a38e:	460c      	mov	r4, r1
 800a390:	b913      	cbnz	r3, 800a398 <_fflush_r+0x10>
 800a392:	2500      	movs	r5, #0
 800a394:	4628      	mov	r0, r5
 800a396:	bd38      	pop	{r3, r4, r5, pc}
 800a398:	b118      	cbz	r0, 800a3a2 <_fflush_r+0x1a>
 800a39a:	6a03      	ldr	r3, [r0, #32]
 800a39c:	b90b      	cbnz	r3, 800a3a2 <_fflush_r+0x1a>
 800a39e:	f7fe f9ef 	bl	8008780 <__sinit>
 800a3a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d0f3      	beq.n	800a392 <_fflush_r+0xa>
 800a3aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a3ac:	07d0      	lsls	r0, r2, #31
 800a3ae:	d404      	bmi.n	800a3ba <_fflush_r+0x32>
 800a3b0:	0599      	lsls	r1, r3, #22
 800a3b2:	d402      	bmi.n	800a3ba <_fflush_r+0x32>
 800a3b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a3b6:	f7fe fb0e 	bl	80089d6 <__retarget_lock_acquire_recursive>
 800a3ba:	4628      	mov	r0, r5
 800a3bc:	4621      	mov	r1, r4
 800a3be:	f7ff ff5d 	bl	800a27c <__sflush_r>
 800a3c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a3c4:	07da      	lsls	r2, r3, #31
 800a3c6:	4605      	mov	r5, r0
 800a3c8:	d4e4      	bmi.n	800a394 <_fflush_r+0xc>
 800a3ca:	89a3      	ldrh	r3, [r4, #12]
 800a3cc:	059b      	lsls	r3, r3, #22
 800a3ce:	d4e1      	bmi.n	800a394 <_fflush_r+0xc>
 800a3d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a3d2:	f7fe fb01 	bl	80089d8 <__retarget_lock_release_recursive>
 800a3d6:	e7dd      	b.n	800a394 <_fflush_r+0xc>

0800a3d8 <memmove>:
 800a3d8:	4288      	cmp	r0, r1
 800a3da:	b510      	push	{r4, lr}
 800a3dc:	eb01 0402 	add.w	r4, r1, r2
 800a3e0:	d902      	bls.n	800a3e8 <memmove+0x10>
 800a3e2:	4284      	cmp	r4, r0
 800a3e4:	4623      	mov	r3, r4
 800a3e6:	d807      	bhi.n	800a3f8 <memmove+0x20>
 800a3e8:	1e43      	subs	r3, r0, #1
 800a3ea:	42a1      	cmp	r1, r4
 800a3ec:	d008      	beq.n	800a400 <memmove+0x28>
 800a3ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a3f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a3f6:	e7f8      	b.n	800a3ea <memmove+0x12>
 800a3f8:	4402      	add	r2, r0
 800a3fa:	4601      	mov	r1, r0
 800a3fc:	428a      	cmp	r2, r1
 800a3fe:	d100      	bne.n	800a402 <memmove+0x2a>
 800a400:	bd10      	pop	{r4, pc}
 800a402:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a406:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a40a:	e7f7      	b.n	800a3fc <memmove+0x24>

0800a40c <_sbrk_r>:
 800a40c:	b538      	push	{r3, r4, r5, lr}
 800a40e:	4d06      	ldr	r5, [pc, #24]	; (800a428 <_sbrk_r+0x1c>)
 800a410:	2300      	movs	r3, #0
 800a412:	4604      	mov	r4, r0
 800a414:	4608      	mov	r0, r1
 800a416:	602b      	str	r3, [r5, #0]
 800a418:	f7f7 fb62 	bl	8001ae0 <_sbrk>
 800a41c:	1c43      	adds	r3, r0, #1
 800a41e:	d102      	bne.n	800a426 <_sbrk_r+0x1a>
 800a420:	682b      	ldr	r3, [r5, #0]
 800a422:	b103      	cbz	r3, 800a426 <_sbrk_r+0x1a>
 800a424:	6023      	str	r3, [r4, #0]
 800a426:	bd38      	pop	{r3, r4, r5, pc}
 800a428:	20000518 	.word	0x20000518

0800a42c <memcpy>:
 800a42c:	440a      	add	r2, r1
 800a42e:	4291      	cmp	r1, r2
 800a430:	f100 33ff 	add.w	r3, r0, #4294967295
 800a434:	d100      	bne.n	800a438 <memcpy+0xc>
 800a436:	4770      	bx	lr
 800a438:	b510      	push	{r4, lr}
 800a43a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a43e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a442:	4291      	cmp	r1, r2
 800a444:	d1f9      	bne.n	800a43a <memcpy+0xe>
 800a446:	bd10      	pop	{r4, pc}

0800a448 <__assert_func>:
 800a448:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a44a:	4614      	mov	r4, r2
 800a44c:	461a      	mov	r2, r3
 800a44e:	4b09      	ldr	r3, [pc, #36]	; (800a474 <__assert_func+0x2c>)
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	4605      	mov	r5, r0
 800a454:	68d8      	ldr	r0, [r3, #12]
 800a456:	b14c      	cbz	r4, 800a46c <__assert_func+0x24>
 800a458:	4b07      	ldr	r3, [pc, #28]	; (800a478 <__assert_func+0x30>)
 800a45a:	9100      	str	r1, [sp, #0]
 800a45c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a460:	4906      	ldr	r1, [pc, #24]	; (800a47c <__assert_func+0x34>)
 800a462:	462b      	mov	r3, r5
 800a464:	f000 f872 	bl	800a54c <fiprintf>
 800a468:	f000 f882 	bl	800a570 <abort>
 800a46c:	4b04      	ldr	r3, [pc, #16]	; (800a480 <__assert_func+0x38>)
 800a46e:	461c      	mov	r4, r3
 800a470:	e7f3      	b.n	800a45a <__assert_func+0x12>
 800a472:	bf00      	nop
 800a474:	20000064 	.word	0x20000064
 800a478:	0800adb7 	.word	0x0800adb7
 800a47c:	0800adc4 	.word	0x0800adc4
 800a480:	0800adf2 	.word	0x0800adf2

0800a484 <_calloc_r>:
 800a484:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a486:	fba1 2402 	umull	r2, r4, r1, r2
 800a48a:	b94c      	cbnz	r4, 800a4a0 <_calloc_r+0x1c>
 800a48c:	4611      	mov	r1, r2
 800a48e:	9201      	str	r2, [sp, #4]
 800a490:	f7ff f994 	bl	80097bc <_malloc_r>
 800a494:	9a01      	ldr	r2, [sp, #4]
 800a496:	4605      	mov	r5, r0
 800a498:	b930      	cbnz	r0, 800a4a8 <_calloc_r+0x24>
 800a49a:	4628      	mov	r0, r5
 800a49c:	b003      	add	sp, #12
 800a49e:	bd30      	pop	{r4, r5, pc}
 800a4a0:	220c      	movs	r2, #12
 800a4a2:	6002      	str	r2, [r0, #0]
 800a4a4:	2500      	movs	r5, #0
 800a4a6:	e7f8      	b.n	800a49a <_calloc_r+0x16>
 800a4a8:	4621      	mov	r1, r4
 800a4aa:	f7fe fa16 	bl	80088da <memset>
 800a4ae:	e7f4      	b.n	800a49a <_calloc_r+0x16>

0800a4b0 <__ascii_mbtowc>:
 800a4b0:	b082      	sub	sp, #8
 800a4b2:	b901      	cbnz	r1, 800a4b6 <__ascii_mbtowc+0x6>
 800a4b4:	a901      	add	r1, sp, #4
 800a4b6:	b142      	cbz	r2, 800a4ca <__ascii_mbtowc+0x1a>
 800a4b8:	b14b      	cbz	r3, 800a4ce <__ascii_mbtowc+0x1e>
 800a4ba:	7813      	ldrb	r3, [r2, #0]
 800a4bc:	600b      	str	r3, [r1, #0]
 800a4be:	7812      	ldrb	r2, [r2, #0]
 800a4c0:	1e10      	subs	r0, r2, #0
 800a4c2:	bf18      	it	ne
 800a4c4:	2001      	movne	r0, #1
 800a4c6:	b002      	add	sp, #8
 800a4c8:	4770      	bx	lr
 800a4ca:	4610      	mov	r0, r2
 800a4cc:	e7fb      	b.n	800a4c6 <__ascii_mbtowc+0x16>
 800a4ce:	f06f 0001 	mvn.w	r0, #1
 800a4d2:	e7f8      	b.n	800a4c6 <__ascii_mbtowc+0x16>

0800a4d4 <_realloc_r>:
 800a4d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4d8:	4680      	mov	r8, r0
 800a4da:	4614      	mov	r4, r2
 800a4dc:	460e      	mov	r6, r1
 800a4de:	b921      	cbnz	r1, 800a4ea <_realloc_r+0x16>
 800a4e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a4e4:	4611      	mov	r1, r2
 800a4e6:	f7ff b969 	b.w	80097bc <_malloc_r>
 800a4ea:	b92a      	cbnz	r2, 800a4f8 <_realloc_r+0x24>
 800a4ec:	f7ff f8f2 	bl	80096d4 <_free_r>
 800a4f0:	4625      	mov	r5, r4
 800a4f2:	4628      	mov	r0, r5
 800a4f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4f8:	f000 f841 	bl	800a57e <_malloc_usable_size_r>
 800a4fc:	4284      	cmp	r4, r0
 800a4fe:	4607      	mov	r7, r0
 800a500:	d802      	bhi.n	800a508 <_realloc_r+0x34>
 800a502:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a506:	d812      	bhi.n	800a52e <_realloc_r+0x5a>
 800a508:	4621      	mov	r1, r4
 800a50a:	4640      	mov	r0, r8
 800a50c:	f7ff f956 	bl	80097bc <_malloc_r>
 800a510:	4605      	mov	r5, r0
 800a512:	2800      	cmp	r0, #0
 800a514:	d0ed      	beq.n	800a4f2 <_realloc_r+0x1e>
 800a516:	42bc      	cmp	r4, r7
 800a518:	4622      	mov	r2, r4
 800a51a:	4631      	mov	r1, r6
 800a51c:	bf28      	it	cs
 800a51e:	463a      	movcs	r2, r7
 800a520:	f7ff ff84 	bl	800a42c <memcpy>
 800a524:	4631      	mov	r1, r6
 800a526:	4640      	mov	r0, r8
 800a528:	f7ff f8d4 	bl	80096d4 <_free_r>
 800a52c:	e7e1      	b.n	800a4f2 <_realloc_r+0x1e>
 800a52e:	4635      	mov	r5, r6
 800a530:	e7df      	b.n	800a4f2 <_realloc_r+0x1e>

0800a532 <__ascii_wctomb>:
 800a532:	b149      	cbz	r1, 800a548 <__ascii_wctomb+0x16>
 800a534:	2aff      	cmp	r2, #255	; 0xff
 800a536:	bf85      	ittet	hi
 800a538:	238a      	movhi	r3, #138	; 0x8a
 800a53a:	6003      	strhi	r3, [r0, #0]
 800a53c:	700a      	strbls	r2, [r1, #0]
 800a53e:	f04f 30ff 	movhi.w	r0, #4294967295
 800a542:	bf98      	it	ls
 800a544:	2001      	movls	r0, #1
 800a546:	4770      	bx	lr
 800a548:	4608      	mov	r0, r1
 800a54a:	4770      	bx	lr

0800a54c <fiprintf>:
 800a54c:	b40e      	push	{r1, r2, r3}
 800a54e:	b503      	push	{r0, r1, lr}
 800a550:	4601      	mov	r1, r0
 800a552:	ab03      	add	r3, sp, #12
 800a554:	4805      	ldr	r0, [pc, #20]	; (800a56c <fiprintf+0x20>)
 800a556:	f853 2b04 	ldr.w	r2, [r3], #4
 800a55a:	6800      	ldr	r0, [r0, #0]
 800a55c:	9301      	str	r3, [sp, #4]
 800a55e:	f000 f83f 	bl	800a5e0 <_vfiprintf_r>
 800a562:	b002      	add	sp, #8
 800a564:	f85d eb04 	ldr.w	lr, [sp], #4
 800a568:	b003      	add	sp, #12
 800a56a:	4770      	bx	lr
 800a56c:	20000064 	.word	0x20000064

0800a570 <abort>:
 800a570:	b508      	push	{r3, lr}
 800a572:	2006      	movs	r0, #6
 800a574:	f000 fa0c 	bl	800a990 <raise>
 800a578:	2001      	movs	r0, #1
 800a57a:	f7f7 fa39 	bl	80019f0 <_exit>

0800a57e <_malloc_usable_size_r>:
 800a57e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a582:	1f18      	subs	r0, r3, #4
 800a584:	2b00      	cmp	r3, #0
 800a586:	bfbc      	itt	lt
 800a588:	580b      	ldrlt	r3, [r1, r0]
 800a58a:	18c0      	addlt	r0, r0, r3
 800a58c:	4770      	bx	lr

0800a58e <__sfputc_r>:
 800a58e:	6893      	ldr	r3, [r2, #8]
 800a590:	3b01      	subs	r3, #1
 800a592:	2b00      	cmp	r3, #0
 800a594:	b410      	push	{r4}
 800a596:	6093      	str	r3, [r2, #8]
 800a598:	da08      	bge.n	800a5ac <__sfputc_r+0x1e>
 800a59a:	6994      	ldr	r4, [r2, #24]
 800a59c:	42a3      	cmp	r3, r4
 800a59e:	db01      	blt.n	800a5a4 <__sfputc_r+0x16>
 800a5a0:	290a      	cmp	r1, #10
 800a5a2:	d103      	bne.n	800a5ac <__sfputc_r+0x1e>
 800a5a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a5a8:	f000 b934 	b.w	800a814 <__swbuf_r>
 800a5ac:	6813      	ldr	r3, [r2, #0]
 800a5ae:	1c58      	adds	r0, r3, #1
 800a5b0:	6010      	str	r0, [r2, #0]
 800a5b2:	7019      	strb	r1, [r3, #0]
 800a5b4:	4608      	mov	r0, r1
 800a5b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a5ba:	4770      	bx	lr

0800a5bc <__sfputs_r>:
 800a5bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5be:	4606      	mov	r6, r0
 800a5c0:	460f      	mov	r7, r1
 800a5c2:	4614      	mov	r4, r2
 800a5c4:	18d5      	adds	r5, r2, r3
 800a5c6:	42ac      	cmp	r4, r5
 800a5c8:	d101      	bne.n	800a5ce <__sfputs_r+0x12>
 800a5ca:	2000      	movs	r0, #0
 800a5cc:	e007      	b.n	800a5de <__sfputs_r+0x22>
 800a5ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5d2:	463a      	mov	r2, r7
 800a5d4:	4630      	mov	r0, r6
 800a5d6:	f7ff ffda 	bl	800a58e <__sfputc_r>
 800a5da:	1c43      	adds	r3, r0, #1
 800a5dc:	d1f3      	bne.n	800a5c6 <__sfputs_r+0xa>
 800a5de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a5e0 <_vfiprintf_r>:
 800a5e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5e4:	460d      	mov	r5, r1
 800a5e6:	b09d      	sub	sp, #116	; 0x74
 800a5e8:	4614      	mov	r4, r2
 800a5ea:	4698      	mov	r8, r3
 800a5ec:	4606      	mov	r6, r0
 800a5ee:	b118      	cbz	r0, 800a5f8 <_vfiprintf_r+0x18>
 800a5f0:	6a03      	ldr	r3, [r0, #32]
 800a5f2:	b90b      	cbnz	r3, 800a5f8 <_vfiprintf_r+0x18>
 800a5f4:	f7fe f8c4 	bl	8008780 <__sinit>
 800a5f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a5fa:	07d9      	lsls	r1, r3, #31
 800a5fc:	d405      	bmi.n	800a60a <_vfiprintf_r+0x2a>
 800a5fe:	89ab      	ldrh	r3, [r5, #12]
 800a600:	059a      	lsls	r2, r3, #22
 800a602:	d402      	bmi.n	800a60a <_vfiprintf_r+0x2a>
 800a604:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a606:	f7fe f9e6 	bl	80089d6 <__retarget_lock_acquire_recursive>
 800a60a:	89ab      	ldrh	r3, [r5, #12]
 800a60c:	071b      	lsls	r3, r3, #28
 800a60e:	d501      	bpl.n	800a614 <_vfiprintf_r+0x34>
 800a610:	692b      	ldr	r3, [r5, #16]
 800a612:	b99b      	cbnz	r3, 800a63c <_vfiprintf_r+0x5c>
 800a614:	4629      	mov	r1, r5
 800a616:	4630      	mov	r0, r6
 800a618:	f000 f93a 	bl	800a890 <__swsetup_r>
 800a61c:	b170      	cbz	r0, 800a63c <_vfiprintf_r+0x5c>
 800a61e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a620:	07dc      	lsls	r4, r3, #31
 800a622:	d504      	bpl.n	800a62e <_vfiprintf_r+0x4e>
 800a624:	f04f 30ff 	mov.w	r0, #4294967295
 800a628:	b01d      	add	sp, #116	; 0x74
 800a62a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a62e:	89ab      	ldrh	r3, [r5, #12]
 800a630:	0598      	lsls	r0, r3, #22
 800a632:	d4f7      	bmi.n	800a624 <_vfiprintf_r+0x44>
 800a634:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a636:	f7fe f9cf 	bl	80089d8 <__retarget_lock_release_recursive>
 800a63a:	e7f3      	b.n	800a624 <_vfiprintf_r+0x44>
 800a63c:	2300      	movs	r3, #0
 800a63e:	9309      	str	r3, [sp, #36]	; 0x24
 800a640:	2320      	movs	r3, #32
 800a642:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a646:	f8cd 800c 	str.w	r8, [sp, #12]
 800a64a:	2330      	movs	r3, #48	; 0x30
 800a64c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800a800 <_vfiprintf_r+0x220>
 800a650:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a654:	f04f 0901 	mov.w	r9, #1
 800a658:	4623      	mov	r3, r4
 800a65a:	469a      	mov	sl, r3
 800a65c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a660:	b10a      	cbz	r2, 800a666 <_vfiprintf_r+0x86>
 800a662:	2a25      	cmp	r2, #37	; 0x25
 800a664:	d1f9      	bne.n	800a65a <_vfiprintf_r+0x7a>
 800a666:	ebba 0b04 	subs.w	fp, sl, r4
 800a66a:	d00b      	beq.n	800a684 <_vfiprintf_r+0xa4>
 800a66c:	465b      	mov	r3, fp
 800a66e:	4622      	mov	r2, r4
 800a670:	4629      	mov	r1, r5
 800a672:	4630      	mov	r0, r6
 800a674:	f7ff ffa2 	bl	800a5bc <__sfputs_r>
 800a678:	3001      	adds	r0, #1
 800a67a:	f000 80a9 	beq.w	800a7d0 <_vfiprintf_r+0x1f0>
 800a67e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a680:	445a      	add	r2, fp
 800a682:	9209      	str	r2, [sp, #36]	; 0x24
 800a684:	f89a 3000 	ldrb.w	r3, [sl]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	f000 80a1 	beq.w	800a7d0 <_vfiprintf_r+0x1f0>
 800a68e:	2300      	movs	r3, #0
 800a690:	f04f 32ff 	mov.w	r2, #4294967295
 800a694:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a698:	f10a 0a01 	add.w	sl, sl, #1
 800a69c:	9304      	str	r3, [sp, #16]
 800a69e:	9307      	str	r3, [sp, #28]
 800a6a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a6a4:	931a      	str	r3, [sp, #104]	; 0x68
 800a6a6:	4654      	mov	r4, sl
 800a6a8:	2205      	movs	r2, #5
 800a6aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6ae:	4854      	ldr	r0, [pc, #336]	; (800a800 <_vfiprintf_r+0x220>)
 800a6b0:	f7f5 fd8e 	bl	80001d0 <memchr>
 800a6b4:	9a04      	ldr	r2, [sp, #16]
 800a6b6:	b9d8      	cbnz	r0, 800a6f0 <_vfiprintf_r+0x110>
 800a6b8:	06d1      	lsls	r1, r2, #27
 800a6ba:	bf44      	itt	mi
 800a6bc:	2320      	movmi	r3, #32
 800a6be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a6c2:	0713      	lsls	r3, r2, #28
 800a6c4:	bf44      	itt	mi
 800a6c6:	232b      	movmi	r3, #43	; 0x2b
 800a6c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a6cc:	f89a 3000 	ldrb.w	r3, [sl]
 800a6d0:	2b2a      	cmp	r3, #42	; 0x2a
 800a6d2:	d015      	beq.n	800a700 <_vfiprintf_r+0x120>
 800a6d4:	9a07      	ldr	r2, [sp, #28]
 800a6d6:	4654      	mov	r4, sl
 800a6d8:	2000      	movs	r0, #0
 800a6da:	f04f 0c0a 	mov.w	ip, #10
 800a6de:	4621      	mov	r1, r4
 800a6e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a6e4:	3b30      	subs	r3, #48	; 0x30
 800a6e6:	2b09      	cmp	r3, #9
 800a6e8:	d94d      	bls.n	800a786 <_vfiprintf_r+0x1a6>
 800a6ea:	b1b0      	cbz	r0, 800a71a <_vfiprintf_r+0x13a>
 800a6ec:	9207      	str	r2, [sp, #28]
 800a6ee:	e014      	b.n	800a71a <_vfiprintf_r+0x13a>
 800a6f0:	eba0 0308 	sub.w	r3, r0, r8
 800a6f4:	fa09 f303 	lsl.w	r3, r9, r3
 800a6f8:	4313      	orrs	r3, r2
 800a6fa:	9304      	str	r3, [sp, #16]
 800a6fc:	46a2      	mov	sl, r4
 800a6fe:	e7d2      	b.n	800a6a6 <_vfiprintf_r+0xc6>
 800a700:	9b03      	ldr	r3, [sp, #12]
 800a702:	1d19      	adds	r1, r3, #4
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	9103      	str	r1, [sp, #12]
 800a708:	2b00      	cmp	r3, #0
 800a70a:	bfbb      	ittet	lt
 800a70c:	425b      	neglt	r3, r3
 800a70e:	f042 0202 	orrlt.w	r2, r2, #2
 800a712:	9307      	strge	r3, [sp, #28]
 800a714:	9307      	strlt	r3, [sp, #28]
 800a716:	bfb8      	it	lt
 800a718:	9204      	strlt	r2, [sp, #16]
 800a71a:	7823      	ldrb	r3, [r4, #0]
 800a71c:	2b2e      	cmp	r3, #46	; 0x2e
 800a71e:	d10c      	bne.n	800a73a <_vfiprintf_r+0x15a>
 800a720:	7863      	ldrb	r3, [r4, #1]
 800a722:	2b2a      	cmp	r3, #42	; 0x2a
 800a724:	d134      	bne.n	800a790 <_vfiprintf_r+0x1b0>
 800a726:	9b03      	ldr	r3, [sp, #12]
 800a728:	1d1a      	adds	r2, r3, #4
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	9203      	str	r2, [sp, #12]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	bfb8      	it	lt
 800a732:	f04f 33ff 	movlt.w	r3, #4294967295
 800a736:	3402      	adds	r4, #2
 800a738:	9305      	str	r3, [sp, #20]
 800a73a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800a810 <_vfiprintf_r+0x230>
 800a73e:	7821      	ldrb	r1, [r4, #0]
 800a740:	2203      	movs	r2, #3
 800a742:	4650      	mov	r0, sl
 800a744:	f7f5 fd44 	bl	80001d0 <memchr>
 800a748:	b138      	cbz	r0, 800a75a <_vfiprintf_r+0x17a>
 800a74a:	9b04      	ldr	r3, [sp, #16]
 800a74c:	eba0 000a 	sub.w	r0, r0, sl
 800a750:	2240      	movs	r2, #64	; 0x40
 800a752:	4082      	lsls	r2, r0
 800a754:	4313      	orrs	r3, r2
 800a756:	3401      	adds	r4, #1
 800a758:	9304      	str	r3, [sp, #16]
 800a75a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a75e:	4829      	ldr	r0, [pc, #164]	; (800a804 <_vfiprintf_r+0x224>)
 800a760:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a764:	2206      	movs	r2, #6
 800a766:	f7f5 fd33 	bl	80001d0 <memchr>
 800a76a:	2800      	cmp	r0, #0
 800a76c:	d03f      	beq.n	800a7ee <_vfiprintf_r+0x20e>
 800a76e:	4b26      	ldr	r3, [pc, #152]	; (800a808 <_vfiprintf_r+0x228>)
 800a770:	bb1b      	cbnz	r3, 800a7ba <_vfiprintf_r+0x1da>
 800a772:	9b03      	ldr	r3, [sp, #12]
 800a774:	3307      	adds	r3, #7
 800a776:	f023 0307 	bic.w	r3, r3, #7
 800a77a:	3308      	adds	r3, #8
 800a77c:	9303      	str	r3, [sp, #12]
 800a77e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a780:	443b      	add	r3, r7
 800a782:	9309      	str	r3, [sp, #36]	; 0x24
 800a784:	e768      	b.n	800a658 <_vfiprintf_r+0x78>
 800a786:	fb0c 3202 	mla	r2, ip, r2, r3
 800a78a:	460c      	mov	r4, r1
 800a78c:	2001      	movs	r0, #1
 800a78e:	e7a6      	b.n	800a6de <_vfiprintf_r+0xfe>
 800a790:	2300      	movs	r3, #0
 800a792:	3401      	adds	r4, #1
 800a794:	9305      	str	r3, [sp, #20]
 800a796:	4619      	mov	r1, r3
 800a798:	f04f 0c0a 	mov.w	ip, #10
 800a79c:	4620      	mov	r0, r4
 800a79e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a7a2:	3a30      	subs	r2, #48	; 0x30
 800a7a4:	2a09      	cmp	r2, #9
 800a7a6:	d903      	bls.n	800a7b0 <_vfiprintf_r+0x1d0>
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d0c6      	beq.n	800a73a <_vfiprintf_r+0x15a>
 800a7ac:	9105      	str	r1, [sp, #20]
 800a7ae:	e7c4      	b.n	800a73a <_vfiprintf_r+0x15a>
 800a7b0:	fb0c 2101 	mla	r1, ip, r1, r2
 800a7b4:	4604      	mov	r4, r0
 800a7b6:	2301      	movs	r3, #1
 800a7b8:	e7f0      	b.n	800a79c <_vfiprintf_r+0x1bc>
 800a7ba:	ab03      	add	r3, sp, #12
 800a7bc:	9300      	str	r3, [sp, #0]
 800a7be:	462a      	mov	r2, r5
 800a7c0:	4b12      	ldr	r3, [pc, #72]	; (800a80c <_vfiprintf_r+0x22c>)
 800a7c2:	a904      	add	r1, sp, #16
 800a7c4:	4630      	mov	r0, r6
 800a7c6:	f7fd fb89 	bl	8007edc <_printf_float>
 800a7ca:	4607      	mov	r7, r0
 800a7cc:	1c78      	adds	r0, r7, #1
 800a7ce:	d1d6      	bne.n	800a77e <_vfiprintf_r+0x19e>
 800a7d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a7d2:	07d9      	lsls	r1, r3, #31
 800a7d4:	d405      	bmi.n	800a7e2 <_vfiprintf_r+0x202>
 800a7d6:	89ab      	ldrh	r3, [r5, #12]
 800a7d8:	059a      	lsls	r2, r3, #22
 800a7da:	d402      	bmi.n	800a7e2 <_vfiprintf_r+0x202>
 800a7dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a7de:	f7fe f8fb 	bl	80089d8 <__retarget_lock_release_recursive>
 800a7e2:	89ab      	ldrh	r3, [r5, #12]
 800a7e4:	065b      	lsls	r3, r3, #25
 800a7e6:	f53f af1d 	bmi.w	800a624 <_vfiprintf_r+0x44>
 800a7ea:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a7ec:	e71c      	b.n	800a628 <_vfiprintf_r+0x48>
 800a7ee:	ab03      	add	r3, sp, #12
 800a7f0:	9300      	str	r3, [sp, #0]
 800a7f2:	462a      	mov	r2, r5
 800a7f4:	4b05      	ldr	r3, [pc, #20]	; (800a80c <_vfiprintf_r+0x22c>)
 800a7f6:	a904      	add	r1, sp, #16
 800a7f8:	4630      	mov	r0, r6
 800a7fa:	f7fd fe13 	bl	8008424 <_printf_i>
 800a7fe:	e7e4      	b.n	800a7ca <_vfiprintf_r+0x1ea>
 800a800:	0800ad9c 	.word	0x0800ad9c
 800a804:	0800ada6 	.word	0x0800ada6
 800a808:	08007edd 	.word	0x08007edd
 800a80c:	0800a5bd 	.word	0x0800a5bd
 800a810:	0800ada2 	.word	0x0800ada2

0800a814 <__swbuf_r>:
 800a814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a816:	460e      	mov	r6, r1
 800a818:	4614      	mov	r4, r2
 800a81a:	4605      	mov	r5, r0
 800a81c:	b118      	cbz	r0, 800a826 <__swbuf_r+0x12>
 800a81e:	6a03      	ldr	r3, [r0, #32]
 800a820:	b90b      	cbnz	r3, 800a826 <__swbuf_r+0x12>
 800a822:	f7fd ffad 	bl	8008780 <__sinit>
 800a826:	69a3      	ldr	r3, [r4, #24]
 800a828:	60a3      	str	r3, [r4, #8]
 800a82a:	89a3      	ldrh	r3, [r4, #12]
 800a82c:	071a      	lsls	r2, r3, #28
 800a82e:	d525      	bpl.n	800a87c <__swbuf_r+0x68>
 800a830:	6923      	ldr	r3, [r4, #16]
 800a832:	b31b      	cbz	r3, 800a87c <__swbuf_r+0x68>
 800a834:	6823      	ldr	r3, [r4, #0]
 800a836:	6922      	ldr	r2, [r4, #16]
 800a838:	1a98      	subs	r0, r3, r2
 800a83a:	6963      	ldr	r3, [r4, #20]
 800a83c:	b2f6      	uxtb	r6, r6
 800a83e:	4283      	cmp	r3, r0
 800a840:	4637      	mov	r7, r6
 800a842:	dc04      	bgt.n	800a84e <__swbuf_r+0x3a>
 800a844:	4621      	mov	r1, r4
 800a846:	4628      	mov	r0, r5
 800a848:	f7ff fd9e 	bl	800a388 <_fflush_r>
 800a84c:	b9e0      	cbnz	r0, 800a888 <__swbuf_r+0x74>
 800a84e:	68a3      	ldr	r3, [r4, #8]
 800a850:	3b01      	subs	r3, #1
 800a852:	60a3      	str	r3, [r4, #8]
 800a854:	6823      	ldr	r3, [r4, #0]
 800a856:	1c5a      	adds	r2, r3, #1
 800a858:	6022      	str	r2, [r4, #0]
 800a85a:	701e      	strb	r6, [r3, #0]
 800a85c:	6962      	ldr	r2, [r4, #20]
 800a85e:	1c43      	adds	r3, r0, #1
 800a860:	429a      	cmp	r2, r3
 800a862:	d004      	beq.n	800a86e <__swbuf_r+0x5a>
 800a864:	89a3      	ldrh	r3, [r4, #12]
 800a866:	07db      	lsls	r3, r3, #31
 800a868:	d506      	bpl.n	800a878 <__swbuf_r+0x64>
 800a86a:	2e0a      	cmp	r6, #10
 800a86c:	d104      	bne.n	800a878 <__swbuf_r+0x64>
 800a86e:	4621      	mov	r1, r4
 800a870:	4628      	mov	r0, r5
 800a872:	f7ff fd89 	bl	800a388 <_fflush_r>
 800a876:	b938      	cbnz	r0, 800a888 <__swbuf_r+0x74>
 800a878:	4638      	mov	r0, r7
 800a87a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a87c:	4621      	mov	r1, r4
 800a87e:	4628      	mov	r0, r5
 800a880:	f000 f806 	bl	800a890 <__swsetup_r>
 800a884:	2800      	cmp	r0, #0
 800a886:	d0d5      	beq.n	800a834 <__swbuf_r+0x20>
 800a888:	f04f 37ff 	mov.w	r7, #4294967295
 800a88c:	e7f4      	b.n	800a878 <__swbuf_r+0x64>
	...

0800a890 <__swsetup_r>:
 800a890:	b538      	push	{r3, r4, r5, lr}
 800a892:	4b2a      	ldr	r3, [pc, #168]	; (800a93c <__swsetup_r+0xac>)
 800a894:	4605      	mov	r5, r0
 800a896:	6818      	ldr	r0, [r3, #0]
 800a898:	460c      	mov	r4, r1
 800a89a:	b118      	cbz	r0, 800a8a4 <__swsetup_r+0x14>
 800a89c:	6a03      	ldr	r3, [r0, #32]
 800a89e:	b90b      	cbnz	r3, 800a8a4 <__swsetup_r+0x14>
 800a8a0:	f7fd ff6e 	bl	8008780 <__sinit>
 800a8a4:	89a3      	ldrh	r3, [r4, #12]
 800a8a6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a8aa:	0718      	lsls	r0, r3, #28
 800a8ac:	d422      	bmi.n	800a8f4 <__swsetup_r+0x64>
 800a8ae:	06d9      	lsls	r1, r3, #27
 800a8b0:	d407      	bmi.n	800a8c2 <__swsetup_r+0x32>
 800a8b2:	2309      	movs	r3, #9
 800a8b4:	602b      	str	r3, [r5, #0]
 800a8b6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a8ba:	81a3      	strh	r3, [r4, #12]
 800a8bc:	f04f 30ff 	mov.w	r0, #4294967295
 800a8c0:	e034      	b.n	800a92c <__swsetup_r+0x9c>
 800a8c2:	0758      	lsls	r0, r3, #29
 800a8c4:	d512      	bpl.n	800a8ec <__swsetup_r+0x5c>
 800a8c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a8c8:	b141      	cbz	r1, 800a8dc <__swsetup_r+0x4c>
 800a8ca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a8ce:	4299      	cmp	r1, r3
 800a8d0:	d002      	beq.n	800a8d8 <__swsetup_r+0x48>
 800a8d2:	4628      	mov	r0, r5
 800a8d4:	f7fe fefe 	bl	80096d4 <_free_r>
 800a8d8:	2300      	movs	r3, #0
 800a8da:	6363      	str	r3, [r4, #52]	; 0x34
 800a8dc:	89a3      	ldrh	r3, [r4, #12]
 800a8de:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a8e2:	81a3      	strh	r3, [r4, #12]
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	6063      	str	r3, [r4, #4]
 800a8e8:	6923      	ldr	r3, [r4, #16]
 800a8ea:	6023      	str	r3, [r4, #0]
 800a8ec:	89a3      	ldrh	r3, [r4, #12]
 800a8ee:	f043 0308 	orr.w	r3, r3, #8
 800a8f2:	81a3      	strh	r3, [r4, #12]
 800a8f4:	6923      	ldr	r3, [r4, #16]
 800a8f6:	b94b      	cbnz	r3, 800a90c <__swsetup_r+0x7c>
 800a8f8:	89a3      	ldrh	r3, [r4, #12]
 800a8fa:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a8fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a902:	d003      	beq.n	800a90c <__swsetup_r+0x7c>
 800a904:	4621      	mov	r1, r4
 800a906:	4628      	mov	r0, r5
 800a908:	f000 f884 	bl	800aa14 <__smakebuf_r>
 800a90c:	89a0      	ldrh	r0, [r4, #12]
 800a90e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a912:	f010 0301 	ands.w	r3, r0, #1
 800a916:	d00a      	beq.n	800a92e <__swsetup_r+0x9e>
 800a918:	2300      	movs	r3, #0
 800a91a:	60a3      	str	r3, [r4, #8]
 800a91c:	6963      	ldr	r3, [r4, #20]
 800a91e:	425b      	negs	r3, r3
 800a920:	61a3      	str	r3, [r4, #24]
 800a922:	6923      	ldr	r3, [r4, #16]
 800a924:	b943      	cbnz	r3, 800a938 <__swsetup_r+0xa8>
 800a926:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a92a:	d1c4      	bne.n	800a8b6 <__swsetup_r+0x26>
 800a92c:	bd38      	pop	{r3, r4, r5, pc}
 800a92e:	0781      	lsls	r1, r0, #30
 800a930:	bf58      	it	pl
 800a932:	6963      	ldrpl	r3, [r4, #20]
 800a934:	60a3      	str	r3, [r4, #8]
 800a936:	e7f4      	b.n	800a922 <__swsetup_r+0x92>
 800a938:	2000      	movs	r0, #0
 800a93a:	e7f7      	b.n	800a92c <__swsetup_r+0x9c>
 800a93c:	20000064 	.word	0x20000064

0800a940 <_raise_r>:
 800a940:	291f      	cmp	r1, #31
 800a942:	b538      	push	{r3, r4, r5, lr}
 800a944:	4604      	mov	r4, r0
 800a946:	460d      	mov	r5, r1
 800a948:	d904      	bls.n	800a954 <_raise_r+0x14>
 800a94a:	2316      	movs	r3, #22
 800a94c:	6003      	str	r3, [r0, #0]
 800a94e:	f04f 30ff 	mov.w	r0, #4294967295
 800a952:	bd38      	pop	{r3, r4, r5, pc}
 800a954:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a956:	b112      	cbz	r2, 800a95e <_raise_r+0x1e>
 800a958:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a95c:	b94b      	cbnz	r3, 800a972 <_raise_r+0x32>
 800a95e:	4620      	mov	r0, r4
 800a960:	f000 f830 	bl	800a9c4 <_getpid_r>
 800a964:	462a      	mov	r2, r5
 800a966:	4601      	mov	r1, r0
 800a968:	4620      	mov	r0, r4
 800a96a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a96e:	f000 b817 	b.w	800a9a0 <_kill_r>
 800a972:	2b01      	cmp	r3, #1
 800a974:	d00a      	beq.n	800a98c <_raise_r+0x4c>
 800a976:	1c59      	adds	r1, r3, #1
 800a978:	d103      	bne.n	800a982 <_raise_r+0x42>
 800a97a:	2316      	movs	r3, #22
 800a97c:	6003      	str	r3, [r0, #0]
 800a97e:	2001      	movs	r0, #1
 800a980:	e7e7      	b.n	800a952 <_raise_r+0x12>
 800a982:	2400      	movs	r4, #0
 800a984:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a988:	4628      	mov	r0, r5
 800a98a:	4798      	blx	r3
 800a98c:	2000      	movs	r0, #0
 800a98e:	e7e0      	b.n	800a952 <_raise_r+0x12>

0800a990 <raise>:
 800a990:	4b02      	ldr	r3, [pc, #8]	; (800a99c <raise+0xc>)
 800a992:	4601      	mov	r1, r0
 800a994:	6818      	ldr	r0, [r3, #0]
 800a996:	f7ff bfd3 	b.w	800a940 <_raise_r>
 800a99a:	bf00      	nop
 800a99c:	20000064 	.word	0x20000064

0800a9a0 <_kill_r>:
 800a9a0:	b538      	push	{r3, r4, r5, lr}
 800a9a2:	4d07      	ldr	r5, [pc, #28]	; (800a9c0 <_kill_r+0x20>)
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	4604      	mov	r4, r0
 800a9a8:	4608      	mov	r0, r1
 800a9aa:	4611      	mov	r1, r2
 800a9ac:	602b      	str	r3, [r5, #0]
 800a9ae:	f7f7 f80f 	bl	80019d0 <_kill>
 800a9b2:	1c43      	adds	r3, r0, #1
 800a9b4:	d102      	bne.n	800a9bc <_kill_r+0x1c>
 800a9b6:	682b      	ldr	r3, [r5, #0]
 800a9b8:	b103      	cbz	r3, 800a9bc <_kill_r+0x1c>
 800a9ba:	6023      	str	r3, [r4, #0]
 800a9bc:	bd38      	pop	{r3, r4, r5, pc}
 800a9be:	bf00      	nop
 800a9c0:	20000518 	.word	0x20000518

0800a9c4 <_getpid_r>:
 800a9c4:	f7f6 bffc 	b.w	80019c0 <_getpid>

0800a9c8 <__swhatbuf_r>:
 800a9c8:	b570      	push	{r4, r5, r6, lr}
 800a9ca:	460c      	mov	r4, r1
 800a9cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9d0:	2900      	cmp	r1, #0
 800a9d2:	b096      	sub	sp, #88	; 0x58
 800a9d4:	4615      	mov	r5, r2
 800a9d6:	461e      	mov	r6, r3
 800a9d8:	da0d      	bge.n	800a9f6 <__swhatbuf_r+0x2e>
 800a9da:	89a3      	ldrh	r3, [r4, #12]
 800a9dc:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a9e0:	f04f 0100 	mov.w	r1, #0
 800a9e4:	bf0c      	ite	eq
 800a9e6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a9ea:	2340      	movne	r3, #64	; 0x40
 800a9ec:	2000      	movs	r0, #0
 800a9ee:	6031      	str	r1, [r6, #0]
 800a9f0:	602b      	str	r3, [r5, #0]
 800a9f2:	b016      	add	sp, #88	; 0x58
 800a9f4:	bd70      	pop	{r4, r5, r6, pc}
 800a9f6:	466a      	mov	r2, sp
 800a9f8:	f000 f848 	bl	800aa8c <_fstat_r>
 800a9fc:	2800      	cmp	r0, #0
 800a9fe:	dbec      	blt.n	800a9da <__swhatbuf_r+0x12>
 800aa00:	9901      	ldr	r1, [sp, #4]
 800aa02:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800aa06:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800aa0a:	4259      	negs	r1, r3
 800aa0c:	4159      	adcs	r1, r3
 800aa0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aa12:	e7eb      	b.n	800a9ec <__swhatbuf_r+0x24>

0800aa14 <__smakebuf_r>:
 800aa14:	898b      	ldrh	r3, [r1, #12]
 800aa16:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800aa18:	079d      	lsls	r5, r3, #30
 800aa1a:	4606      	mov	r6, r0
 800aa1c:	460c      	mov	r4, r1
 800aa1e:	d507      	bpl.n	800aa30 <__smakebuf_r+0x1c>
 800aa20:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800aa24:	6023      	str	r3, [r4, #0]
 800aa26:	6123      	str	r3, [r4, #16]
 800aa28:	2301      	movs	r3, #1
 800aa2a:	6163      	str	r3, [r4, #20]
 800aa2c:	b002      	add	sp, #8
 800aa2e:	bd70      	pop	{r4, r5, r6, pc}
 800aa30:	ab01      	add	r3, sp, #4
 800aa32:	466a      	mov	r2, sp
 800aa34:	f7ff ffc8 	bl	800a9c8 <__swhatbuf_r>
 800aa38:	9900      	ldr	r1, [sp, #0]
 800aa3a:	4605      	mov	r5, r0
 800aa3c:	4630      	mov	r0, r6
 800aa3e:	f7fe febd 	bl	80097bc <_malloc_r>
 800aa42:	b948      	cbnz	r0, 800aa58 <__smakebuf_r+0x44>
 800aa44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa48:	059a      	lsls	r2, r3, #22
 800aa4a:	d4ef      	bmi.n	800aa2c <__smakebuf_r+0x18>
 800aa4c:	f023 0303 	bic.w	r3, r3, #3
 800aa50:	f043 0302 	orr.w	r3, r3, #2
 800aa54:	81a3      	strh	r3, [r4, #12]
 800aa56:	e7e3      	b.n	800aa20 <__smakebuf_r+0xc>
 800aa58:	89a3      	ldrh	r3, [r4, #12]
 800aa5a:	6020      	str	r0, [r4, #0]
 800aa5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa60:	81a3      	strh	r3, [r4, #12]
 800aa62:	9b00      	ldr	r3, [sp, #0]
 800aa64:	6163      	str	r3, [r4, #20]
 800aa66:	9b01      	ldr	r3, [sp, #4]
 800aa68:	6120      	str	r0, [r4, #16]
 800aa6a:	b15b      	cbz	r3, 800aa84 <__smakebuf_r+0x70>
 800aa6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aa70:	4630      	mov	r0, r6
 800aa72:	f000 f81d 	bl	800aab0 <_isatty_r>
 800aa76:	b128      	cbz	r0, 800aa84 <__smakebuf_r+0x70>
 800aa78:	89a3      	ldrh	r3, [r4, #12]
 800aa7a:	f023 0303 	bic.w	r3, r3, #3
 800aa7e:	f043 0301 	orr.w	r3, r3, #1
 800aa82:	81a3      	strh	r3, [r4, #12]
 800aa84:	89a3      	ldrh	r3, [r4, #12]
 800aa86:	431d      	orrs	r5, r3
 800aa88:	81a5      	strh	r5, [r4, #12]
 800aa8a:	e7cf      	b.n	800aa2c <__smakebuf_r+0x18>

0800aa8c <_fstat_r>:
 800aa8c:	b538      	push	{r3, r4, r5, lr}
 800aa8e:	4d07      	ldr	r5, [pc, #28]	; (800aaac <_fstat_r+0x20>)
 800aa90:	2300      	movs	r3, #0
 800aa92:	4604      	mov	r4, r0
 800aa94:	4608      	mov	r0, r1
 800aa96:	4611      	mov	r1, r2
 800aa98:	602b      	str	r3, [r5, #0]
 800aa9a:	f7f6 fff8 	bl	8001a8e <_fstat>
 800aa9e:	1c43      	adds	r3, r0, #1
 800aaa0:	d102      	bne.n	800aaa8 <_fstat_r+0x1c>
 800aaa2:	682b      	ldr	r3, [r5, #0]
 800aaa4:	b103      	cbz	r3, 800aaa8 <_fstat_r+0x1c>
 800aaa6:	6023      	str	r3, [r4, #0]
 800aaa8:	bd38      	pop	{r3, r4, r5, pc}
 800aaaa:	bf00      	nop
 800aaac:	20000518 	.word	0x20000518

0800aab0 <_isatty_r>:
 800aab0:	b538      	push	{r3, r4, r5, lr}
 800aab2:	4d06      	ldr	r5, [pc, #24]	; (800aacc <_isatty_r+0x1c>)
 800aab4:	2300      	movs	r3, #0
 800aab6:	4604      	mov	r4, r0
 800aab8:	4608      	mov	r0, r1
 800aaba:	602b      	str	r3, [r5, #0]
 800aabc:	f7f6 fff7 	bl	8001aae <_isatty>
 800aac0:	1c43      	adds	r3, r0, #1
 800aac2:	d102      	bne.n	800aaca <_isatty_r+0x1a>
 800aac4:	682b      	ldr	r3, [r5, #0]
 800aac6:	b103      	cbz	r3, 800aaca <_isatty_r+0x1a>
 800aac8:	6023      	str	r3, [r4, #0]
 800aaca:	bd38      	pop	{r3, r4, r5, pc}
 800aacc:	20000518 	.word	0x20000518

0800aad0 <_init>:
 800aad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aad2:	bf00      	nop
 800aad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aad6:	bc08      	pop	{r3}
 800aad8:	469e      	mov	lr, r3
 800aada:	4770      	bx	lr

0800aadc <_fini>:
 800aadc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aade:	bf00      	nop
 800aae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aae2:	bc08      	pop	{r3}
 800aae4:	469e      	mov	lr, r3
 800aae6:	4770      	bx	lr
